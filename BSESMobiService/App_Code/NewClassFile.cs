using System;
using System.Data;
using System.Configuration;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
//using System.Data.OleDb;
using System.IO;
using System.Web.Hosting;
//using System.Data.SqlClient;
using System.Net;
using System.Text;
using System.Collections.Generic;
using Oracle.DataAccess.Client;

//System.Web.Hosting.HostingEnvironment.MapPath

/// <summary>
/// Summary description for NewClassFile
/// </summary>
/// namespace  USEPMS


namespace USEPMS
{
    public class NewClassFile
    {

        //static OracleConnection ocon = new OracleConnection(NDS.con());
        //static OracleConnection ocon_ONM = new OracleConnection(NDS.con_ONM());
        //static OracleConnection ocon_mobinternal = new OracleConnection(NDS.con_mobinternal());    


        #region Class

        public bool Insert_CA_ADDRESS_UPLOAD(string strCa_Number, string strBp_Name, string strHouse_Number
            , string strHouse_Number_Sup, string strFloor, string strStreet
            , string strStreet2, string strStreet3, string strStreet4
             , string strCity, string strPost_Code, string strTelephone_No,
        string strE_Mail, string _sIMEIno, string strsign_Img, string ID_PROOF
            , string strLatitude, string strLongtitude, string strPoleNo
            , string strCustomerIdNo, string strEmpName, string strEmpId)
        {
            try
            {
                //byte[] _byImg8 = System.Text.Encoding.UTF8.GetBytes(strsign_Img.Trim());
                //byte[] _byIDProfImg8 = System.Text.Encoding.UTF8.GetBytes(ID_PROOF.Trim());
                //string _sImg = System.Text.Encoding.UTF8.GetString(_byImg8);
                //string _sIDProfImg = System.Text.Encoding.UTF8.GetString(_byIDProfImg8);

                //  byte[] _byImg = Convert.FromBase64CharArray(strsign_Img.ToCharArray(), 0, strsign_Img.ToCharArray().Length);
                //  byte[] _byIDProfImg = Convert.FromBase64CharArray(ID_PROOF.ToCharArray(), 0, ID_PROOF.ToCharArray().Length);

                // byte[] _byImgTemp = imageToByteArray();
                //string _sTempimg = Convert.ToBase64String(_byImgTemp);

                //  NewClassFile.WriteIntoFile(DateTime.Now.ToString() + strsign_Img + " :\n " + ID_PROOF + "\n---" + _sTempimg);
                byte[] _byImg = null, _byIDProfImg = null;
                string _sImgPath = string.Empty, _sIDProfImgPath = string.Empty;
                try
                {
                    _byImg = Convert.FromBase64String(strsign_Img);
                    _sImgPath = byteArrayToImage(_byImg, strCa_Number + "_Sign");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in sign image" + ex.ToString());
                }
                try
                {
                    _byIDProfImg = Convert.FromBase64String(ID_PROOF);
                    _sIDProfImgPath = byteArrayToImage(_byIDProfImg, strCa_Number + "_IdProof");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in ID Proof image" + ex.ToString());
                }


                //  string _stempFile= byteArrayToImage(_byImgTemp, strCa_Number + "_SignTemp");


                //   NewClassFile.WriteIntoFile(DateTime.Now.ToString() + ":" + strCa_Number + ":" + strBp_Name + ":" + strHouse_Number
                //   + ":" + strHouse_Number_Sup + ":" + strFloor + ":" + strStreet
                //   + ":" + strStreet2 + ":" + strStreet3 + ":" + strStreet4
                //    + ":" + strCity + ":" + strPost_Code + ":" + strTelephone_No + ":" +
                //strE_Mail + ":" + strsign_Img + ":" + ID_PROOF + ":" + Convert.ToBase64String(_byImg));

                //string sql = "INSERT INTO ISUSTD_MOB_UPLOAD_ADRS(Ca_Number,Bp_Name,House_Number,House_Number_Sup,";
                //sql = sql + " FLOOR,Street,Street2,Street3,Street4,";
                //sql = sql + " City,Post_Code,Telephone_No,E_Mail,MOBILE_IMEI_NO,LATITUDE,LONGTITUDE, SIGN_IMG_PATH,ID_PROOF_PATH, sign_Img,ID_PROOF)";
                //sql = sql + " VALUES(" + strCa_Number + ",'" + strBp_Name + "','" + strHouse_Number + "','" + strHouse_Number_Sup + "',";
                //sql = sql + " '" + strFloor + "','" + strStreet + "','" + strStreet2 + "','" + strStreet3 + "','" + strStreet4 + "',";
                //sql = sql + " '" + strCity + "','" + strPost_Code + "','" + strTelephone_No + "','" + strE_Mail + "','" + _sIMEIno.Trim() + "','" + strLatitude + "','" + strLongtitude + "','" + _sImgPath + "','" + _sIDProfImgPath + "'," + ":BlobParameter,:BLOBIDPROOF)";



                string sql = "INSERT INTO ISUSTD_MOB_UPLOAD_ADRS(Ca_Number,Bp_Name,House_Number,House_Number_Sup,";
                sql = sql + " FLOOR,Street,Street2,Street3,Street4,";
                sql = sql + " City,Post_Code,Telephone_No,E_Mail,MOBILE_IMEI_NO,LATITUDE,LONGTITUDE, SIGN_IMG_PATH,ID_PROOF_PATH,POLE_NO,CUSTOMER_ID_NO,EMP_NAME,EMP_ID)";
                sql = sql + " VALUES(" + strCa_Number + ",'" + strBp_Name + "','" + strHouse_Number + "','" + strHouse_Number_Sup + "',";
                sql = sql + " '" + strFloor + "','" + strStreet + "','" + strStreet2 + "','" + strStreet3 + "','" + strStreet4 + "',";
                sql = sql + " '" + strCity + "','" + strPost_Code + "','" + strTelephone_No + "','" + strE_Mail + "','" + _sIMEIno.Trim() + "',";
                sql = sql + " '" + strLatitude + "','" + strLongtitude + "','" + _sImgPath + "','" + _sIDProfImgPath + "'";
                sql = sql + " ,'" + strPoleNo.ToUpper().Trim() + "','" + strCustomerIdNo.ToUpper().Trim() + "','" + strEmpName.ToUpper().Trim() + "','" + strEmpId.Trim().ToUpper() + "')";


                DbFunction objdbfun = new DbFunction();
                return objdbfun.dmlsinglequery(sql);
                //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public bool updateImagePath(string column_name, string path, string orderno)
        {
            string sqlupdate = "update NEW_CONNECTION_SITE_TASKS set";
            sqlupdate = sqlupdate + " " + column_name + "='" + path;
            sqlupdate = sqlupdate + "' where ORDERNO='" + orderno + "'";
            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlsinglequery(sqlupdate);
        }

        public bool FEEDBACK(string name, string number, string ip_addr, string imei_no, string email, string feedback)
        {
            string sql = "Insert into Mobile_feedback_APK(Name,MOB_NO,EMAIL_ID,FEED_BACK,IP, IMEI_NO)values('" + name + "','" + number + "','";
            sql += email + "','" + feedback + "','" + ip_addr + "','" + imei_no + "')";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            return (objdbfun.dmlsinglequery(sql));
        }

        public bool FEEDBACK_MobApp(string name, string number, string email, string answerOne, string answerTwo, string answerThree, string answerFour, string answerFive, string answerSix)
        {
            string firstQue = "How easy is it to use this App ?" + "@" + answerOne;
            string secondQue = "How helpful or userful, do you think is this App ?" + "@" + answerTwo;
            string thirdQue = "How likely are you to recommend APP to others ?" + "@" + answerThree;
            string fourthQue = "How attractive is the design of the App ?" + "@" + answerFour;
            string fifthQue = "Is there something not working in this App in the way you would like it to work ?" + "@" + answerFive;
            string sixthQue = "What else should be available in this App ?" + "@" + answerSix;

            string sql = "Insert into MOB_FEEDBCK_ON_APP( MOB_FB_SQ_ID, NAME, MOB_NO, EMAIL_ID, FEED_BK_Q1, FEED_BK_Q2, FEED_BK_Q3, FEED_BK_Q4, FEED_BK_Q5, FEED_BK_Q6)values(MOB_FB_SQ_ID.NEXTVAL ,'" + name + "','" + number + "','";
            sql += email + "','" + firstQue + "','" + secondQue + "','" + thirdQue + "','" + fourthQue + "','" + fifthQue + "','" + sixthQue + "')";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            return (objdbfun.dmlsinglequery(sql));
        }


        public DataTable GetARDAppVersion(string _sAppID)//Updated
        {
            DataTable dt = new DataTable();

            string strId = _sAppID;
            string sql = " SELECT APP_NAME,VERSION,APP_APK_LOCATION,APP_APK_FILE_NAME,ACTIVE_UPTO_DT FROM ANDR_APP_VERSION_MST ";
            sql += " WHERE VERSION_FLAG='A' AND APP_ID ='" + _sAppID + "' ";
            sql += " AND  TRUNC(SYSDATE) BETWEEN TRUNC(UPDATE_FROM) AND TRUNC(CASE WHEN ACTIVE_UPTO_DT IS NULL THEN SYSDATE ELSE ACTIVE_UPTO_DT END) ";

            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery(sql);
            return dt;
        }

        //public DataTable GetARDAppVersion(string _sAppID)//Updated
        //{
        //    DataTable dt = new DataTable();
        //    List<DataColumn> listCols = new List<DataColumn>();

        //    string strId = _sAppID;
        //    string sql = " SELECT APP_NAME,VERSION,APP_APK_LOCATION,APP_APK_FILE_NAME,ACTIVE_UPTO_DT FROM ANDR_APP_VERSION_MST ";
        //    sql += " WHERE VERSION_FLAG='A' AND APP_ID = ? ";
        //    sql += " AND  TRUNC(SYSDATE) BETWEEN TRUNC(UPDATE_FROM) AND TRUNC(CASE WHEN ACTIVE_UPTO_DT IS NULL THEN SYSDATE ELSE ACTIVE_UPTO_DT END) ";
        //    try
        //    {
        //        if (ocon.State == ConnectionState.Closed)
        //        {
        //            ocon.Open();
        //        }
        //        OracleCommand oleDbCommand = new OracleCommand(sql, ocon);
        //        OracleParameter name = oleDbCommand.Parameters.Add("@APP_ID", OracleDbType.NVarchar2, 5);
        //        name.Value = strId;
        //        OracleDataReader rdr = oleDbCommand.ExecuteReader();

        //        DataTable dtSchema = rdr.GetSchemaTable();

        //        if (dtSchema != null)
        //        {
        //            foreach (DataRow drow in dtSchema.Rows)
        //            {
        //                string columnName = System.Convert.ToString(drow["ColumnName"]);
        //                DataColumn column = new DataColumn(columnName, (Type)(drow["DataType"]));
        //                column.Unique = (bool)drow["IsUnique"];
        //                column.AllowDBNull = (bool)drow["AllowDBNull"];
        //                column.AutoIncrement = (bool)drow["IsAutoIncrement"];
        //                listCols.Add(column);
        //                dt.Columns.Add(column);
        //            }
        //        }

        //        while (rdr.Read())
        //        {
        //            string str = rdr.GetString(0);
        //            DataRow dataRow = dt.NewRow();
        //            for (int i = 0; i < listCols.Count; i++)
        //            {
        //                dataRow[((DataColumn)listCols[i])] = rdr[i];
        //            }
        //            dt.Rows.Add(dataRow);
        //        }

        //    }
        //    catch (Exception ex)
        //    {
        //        WriteIntoFile(DateTime.Now.ToString() + ex.ToString() + sql);
        //        return dt;
        //    }
        //    finally
        //    {
        //        if (ocon.State == ConnectionState.Open)
        //        {
        //            ocon.Close();
        //        }
        //    }

        //    return dt;
        //}

        public bool NewRegistration(string _sIMEI_No, string _sUserName, string _sManager_EmpCode, string _sActive_Flag
        , string _sEmpCode, string _sDesignation, string _sMobileNo, string _sEmailID) //10072014 -new
        {
            string sql = " INSERT INTO ISU_RAGISTER_PHONE(IMEI_NO, USER_NAME, MANAGER_NAME, ACTIVE_FLAG, EMP_CODE, DESIGNATION, MOBILE_NO, E_MAIL) ";
            sql += " VALUES('" + _sIMEI_No + "','" + _sUserName + "','" + _sManager_EmpCode + "','" + _sActive_Flag + "','" + _sEmpCode + "','" + _sDesignation + "','" + _sMobileNo + "','" + _sEmailID + "')";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            return (objdbfun.dmlsinglequery(sql));
        }



        public DataTable FIVE_COMPL(string _strKNO) //10072014
        {
            string sql = string.Empty; // "SELECT TO_CHAR(TO_DATE(cc.CALL_DATE,'dd/mm/yy'),'DD-Mon-YYYY') CALL_DATE,cc.OPERATIONAL_COMP_NO,FT.FAULT AS Type_of_Fault,TO_CHAR(TO_DATE(CLOSING_DT,'dd/mm/yy'),'DD-Mon-YYYY') CLOSING_DT,TO_CHAR(CLOSING_DT,'HH24:MI')AS CT,DECODE(CLOSING_DT,'','Pending','Closed') Status FROM ONM_FAULT_COLLECTIONS flt, CC_DVB_COMP cc,ONM_DVB_FAULT FT WHERE flt.COMPLAINT_NO=cc.COMPNO AND  FT.FCODE=CC.FCODE AND FLT.kno LIKE '%" + _strKNO.ToString().Trim() + "' AND ROWNUM<6  ORDER BY CALL_DATE ASC ";
            sql = " SELECT CALL_DATE, OPERATIONAL_COMP_NO, Type_of_Fault, CLOSING_DT, CT , Status FROM ( SELECT TO_CHAR(TO_DATE(COMP_DATE,'dd/mm/yy'),'DD-Mon-YYYY') CALL_DATE,COMP_NO OPERATIONAL_COMP_NO, ";
            sql += " FDESC AS Type_of_Fault,TO_CHAR(TO_DATE(ACTUAL_CLOSING_DT,'dd/mm/yy'),'DD-Mon-YYYY') CLOSING_DT, ";
            sql += " TO_CHAR(ACTUAL_CLOSING_DT,'HH24:MI')AS CT,DECODE(ACTUAL_CLOSING_DT,'','Pending','Closed') Status  ";
            sql += " FROM CC_DVB_COMP_ARD_APP ";
            sql += " WHERE  CA_NUMBER LIKE '%" + _strKNO.ToString().Trim() + "'";
            //sql += " AND ROWNUM<6  ";
            sql += " ORDER BY COMP_DATE DESC )WHERE ROWNUM<6  ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }


        // Dharmendra 15-jul-2014
        public DataTable Area_Code(string _strdiv) //10072014
        {
            string sql = "SELECT COMPLAINT_CENTRE,AREA_CODE FROM ONM_AREA_CODE_MOBILE WHERE DIST='" + _strdiv.ToString().Trim() + "' and AREA_CODE is not null";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        //Rajveer May 2016
        public DataTable onm_AreaCode(string _strdiv) //10072014
        {
            string sql = "SELECT COMPLAINT_CENTRE,AREA_CODE FROM ONM_AREACODE_MOBILE WHERE DIST='" + _strdiv.ToString().Trim() + "' and AREA_CODE is not null";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();



            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        #region GCMRegistration

        public string GCMRegistration_ONM(string _strSingleParameter) //10072014
        {
            //string allValuetoSplit = _strSingleParameter;
            //string[] arrayValue = allValuetoSplit.Split('~');

            //string caNo = arrayValue[0];
            //string meterNo = arrayValue[1];
            //string mobileNo = arrayValue[2];
            //string imeiNo = arrayValue[3];
            //string gcmId = arrayValue[4];
            //string latId = arrayValue[5];
            //string longId = arrayValue[6];

            //DbFunction objdbfun;

            //if (caNo != null && imeiNo != null && gcmId != null)
            //{
            //    if (caNo != "" && imeiNo != "" && gcmId != "")
            //    {
            //        DataTable _dtAlreadyReg = new DataTable();
            //        AllSelect allSelect = new AllSelect();
            //        _dtAlreadyReg = allSelect.GetShowDetails("Select CA_NO from cns_master where CA_NO ='" + caNo + "' and IMEI_NO='" + imeiNo + "' ");
            //        if (_dtAlreadyReg.Rows.Count > 0)
            //        {
            //            string UpdateQuery = "UPDATE cns_master SET ";
            //            UpdateQuery = UpdateQuery + " GCM_ID  = '" + gcmId + "' , ENTRY_DATE = sysdate ";
            //            UpdateQuery = UpdateQuery + " where CA_NO ='" + caNo + "' and IMEI_NO='" + gcmId + "' ";
            //            try
            //            {
            //                objdbfun = new DbFunction();
            //                bool outputSql = objdbfun.dmlsinglequery_ONM(UpdateQuery);
            //                return "1";
            //            }
            //            catch (Exception ex)
            //            {
            //                NewClassFile newClassFile = new NewClassFile();
            //                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
            //                return "0";
            //            }
            //        }
            //        else
            //        {
            //            string strSQL2 = "INSERT INTO CNS_MASTER (ID_NO,CA_NO ,METER_NO ,MOBILE_NO , IMEI_NO , GCM_ID,LAT,LON ) VALUES (seq_CNS.NEXTVAL,'" + caNo + "','" + meterNo + "','" + mobileNo + "','" + imeiNo + "','" + gcmId + "','" + latId + "','" + longId + "')";
            //            try
            //            {
            //                objdbfun = new DbFunction();
            //                bool outputSql = objdbfun.dmlsinglequery_ONM(strSQL2);
            //                return "1";
            //            }
            //            catch (Exception ex)
            //            {
            //                NewClassFile newClassFile = new NewClassFile();
            //                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
            //                return "0";
            //            }
            //        }
            //    }
            //    return "0";
            //}
            //else
            //{
            //    return "0";
            //}


            string allValuetoSplit = _strSingleParameter;
            string[] arrayValue = allValuetoSplit.Split('~');

            string caNo = arrayValue[0];
            string meterNo = arrayValue[1];
            string mobileNo = arrayValue[2];
            string imeiNo = arrayValue[3];
            string gcmId = arrayValue[4];
            string latId = arrayValue[5];
            string longId = arrayValue[6];

            if (caNo != null && imeiNo != null && gcmId != null)
            {
                if (caNo != "" && imeiNo != "" && gcmId != "")
                {
                    DataTable _dtAlreadyReg = new DataTable();
                    AllSelect allSelect = new AllSelect();
                    _dtAlreadyReg = allSelect.GetShowDetails("Select CA_NO from cns_master where CA_NO = ? and IMEI_NO= ? ", caNo, imeiNo);
                    if (_dtAlreadyReg.Rows.Count > 0)
                    {
                        NDS ndsCon = new NDS();
                        OracleConnection ocon_ONM = new OracleConnection(ndsCon.con_ONM());

                        string UpdateQuery = "UPDATE cns_master SET ";
                        UpdateQuery = UpdateQuery + " GCM_ID  = ? , ENTRY_DATE = sysdate ";
                        UpdateQuery = UpdateQuery + " where CA_NO = ? and IMEI_NO= ? ";

                        try
                        {
                            if (ocon_ONM.State == ConnectionState.Closed)
                            {
                                ocon_ONM.Open();
                            }
                            OracleCommand oleDbCommand = new OracleCommand(UpdateQuery, ocon_ONM);
                            OracleParameter GCM_ID = oleDbCommand.Parameters.Add("@GCM_ID", OracleDbType.NVarchar2, 160);
                            OracleParameter CA_NO = oleDbCommand.Parameters.Add("@CA_NO", OracleDbType.NVarchar2, 12);
                            OracleParameter IMEI_NO = oleDbCommand.Parameters.Add("@IMEI_NO", OracleDbType.NVarchar2, 16);

                            GCM_ID.Value = gcmId;
                            CA_NO.Value = caNo;
                            IMEI_NO.Value = imeiNo;

                            int intOut = oleDbCommand.ExecuteNonQuery();

                            if (intOut != 0)
                            {
                                return "1";
                            }
                        }
                        catch (Exception ex)
                        {
                            WriteIntoFile(DateTime.Now.ToString() + ex.ToString() + UpdateQuery);
                            return "0";
                        }
                        finally
                        {
                            if (ocon_ONM.State == ConnectionState.Open)
                            {
                                ocon_ONM.Close();
                                ocon_ONM.Dispose();
                            }
                        }
                    }
                    else
                    {
                        NDS ndsCon = new NDS();
                        OracleConnection ocon_ONM = new OracleConnection(ndsCon.con_ONM());

                        string strSQL2 = "INSERT INTO CNS_MASTER (ID_NO,CA_NO ,METER_NO ,MOBILE_NO , IMEI_NO , GCM_ID,LAT,LON ) VALUES (seq_CNS.NEXTVAL, ? , ? , ? , ? , ? , ? , ? )";

                        try
                        {
                            if (ocon_ONM.State == ConnectionState.Closed)
                            {
                                ocon_ONM.Open();
                            }
                            OracleCommand oleDbCommand = new OracleCommand(strSQL2, ocon_ONM);
                            OracleParameter CA_NO = oleDbCommand.Parameters.Add("@CA_NO", OracleDbType.NVarchar2, 12);
                            OracleParameter METER_NO = oleDbCommand.Parameters.Add("@METER_NO", OracleDbType.NVarchar2, 16);
                            OracleParameter MOBILE_NO = oleDbCommand.Parameters.Add("@MOBILE_NO", OracleDbType.NVarchar2, 16);
                            OracleParameter IMEI_NO = oleDbCommand.Parameters.Add("@IMEI_NO", OracleDbType.NVarchar2, 16);
                            OracleParameter GCM_ID = oleDbCommand.Parameters.Add("@GCM_ID", OracleDbType.NVarchar2, 160);
                            OracleParameter LAT = oleDbCommand.Parameters.Add("@LAT", OracleDbType.NVarchar2, 30);
                            OracleParameter LON = oleDbCommand.Parameters.Add("@LON", OracleDbType.NVarchar2, 30);

                            CA_NO.Value = caNo;
                            METER_NO.Value = meterNo;
                            MOBILE_NO.Value = mobileNo;
                            IMEI_NO.Value = imeiNo;
                            GCM_ID.Value = gcmId;
                            LAT.Value = latId;
                            LON.Value = longId;

                            int intOut = oleDbCommand.ExecuteNonQuery();

                            if (intOut != 0)
                            {
                                return "1";
                            }
                        }
                        catch (Exception ex)
                        {
                            WriteIntoFile(DateTime.Now.ToString() + ex.ToString() + strSQL2);
                            return "0";
                        }
                        finally
                        {
                            if (ocon_ONM.State == ConnectionState.Open)
                            {
                                ocon_ONM.Close();
                                ocon_ONM.Dispose();
                            }
                        }

                    }
                }
                return "0";
            }
            else
            {
                return "0";
            }

        }

        public string GCMUpdateMsgLog_ONM(string _strSingleParameter) //10072014
        {
            string UpdateQuery = "UPDATE CNS_USERMSG_LOG SET ";
            UpdateQuery = UpdateQuery + " ACTIVE  = 'Y',MSG_UPDATE=sysdate";
            UpdateQuery = UpdateQuery + " WHERE ID_NO='" + _strSingleParameter + "'";
            try
            {
                DbFunction objdbfun = new DbFunction();
                bool outputSql = objdbfun.dmlsinglequery_ONM(UpdateQuery);
                return "1";
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return "0";
            }
        }


        public string GCMCheckRegistrationLog_ONM(string _strSingleParameter) //10072014
        {
            string UpdateQuery = "select 1 from cns_master ";
            UpdateQuery = UpdateQuery + " WHERE IMEI_NO='" + _strSingleParameter + "'";
            try
            {
                DataTable _dtAlreadyReg = new DataTable();
                AllSelect allSelect = new AllSelect();
                _dtAlreadyReg = allSelect.GetShowDetails(UpdateQuery);

                return _dtAlreadyReg.Rows.Count.ToString();
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return "0";
            }
        }

        public DataTable GCMUserMsgLog_ONM(string _strSingleParameter) //10072014
        {
            string sql = " SELECT CA_NO, MSG, TO_CHAR(ENTRY_DATE,'dd-Mon-yyyy hh:mm PM') AS ENTRY_DATE , ACTIVE,ID_NO ,MSG_TITLE  ";
            sql = sql + "  FROM CNS_USERMSG_LOG  ";
            sql = sql + "  WHERE GCM_ID ='" + _strSingleParameter + "'  ";
            sql = sql + " order by ENTRY_DATE desc";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        #endregion

        public string byteArrayToImage(byte[] byteArrayIn, string filename) //22012015
        {
            Utilities.Network.NetworkDrive nd = new Utilities.Network.NetworkDrive();
            string pth = string.Empty, sl = string.Empty;

            try
            {
                pth = @"\\10.125.64.236\UploadedImages";
                nd.MapNetworkDrive(@"\\10.125.64.236\UploadedImages", "Z:", "uploadimages", "Bses@123");
                sl = pth;

                string _sDir = sl + "\\SEVA_KENDRA_IR\\" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString();

                DirectoryInfo _DirInfo = new DirectoryInfo(_sDir);
                if (_DirInfo.Exists == false)
                    _DirInfo.Create();

                string _sPath = _DirInfo.FullName + "\\" + filename + ".jpeg";
                string _sFileNameWithoutExt = _DirInfo.FullName + "\\" + filename;
                int _iFileIndex = 1;

                while (File.Exists(_sPath))
                {
                    _sPath = _sFileNameWithoutExt + "_" + _iFileIndex.ToString() + ".jpeg";
                    _iFileIndex++;
                }

                //BinaryWriter fs = new BinaryWriter(new FileStream(_sPath, FileMode.Append, FileAccess.Write));
                //fs.Write(byteArrayIn);
                //fs.Close();

                File.WriteAllBytes(_sPath, byteArrayIn);
                return _sPath;
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return "";
            }
        }

        //public  string byteArrayToImage(byte[] byteArrayIn, string filename) //22012015
        //{
        //    try
        //    {
        //        DirectoryInfo _DirInfo = new DirectoryInfo(HttpContext.Current.Server.MapPath("~/UPLOADEDIMAGES") + "\\" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString());
        //        if (_DirInfo.Exists == false)
        //            _DirInfo.Create();

        //        string _sPath = _DirInfo.FullName + "\\" + filename + ".jpeg";
        //        string _sFileNameWithoutExt = _DirInfo.FullName + "\\" + filename;
        //        int _iFileIndex = 1;
        //        while (File.Exists(_sPath))
        //        {
        //            _sPath = _sFileNameWithoutExt + "_" + _iFileIndex.ToString() + ".jpeg";
        //            _iFileIndex++;
        //        }

        //        BinaryWriter fs = new BinaryWriter(new FileStream(_sPath, FileMode.Append, FileAccess.Write));
        //        fs.Write(byteArrayIn);
        //        fs.Close();
        //        return _sPath;
        //        //MemoryStream ms = new MemoryStream(byteArrayIn);
        //        //Image returnImage = Image.FromStream(ms);
        //        //returnImage.s
        //        //return returnImage;
        //    }
        //    catch (Exception ex)
        //    {
        //        NewClassFile newClassFile = new NewClassFile();
        //        newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
        //        return "";
        //    }
        //}




        public string byteArrayToOrderNoPDF(byte[] byteArrayIn, string filename, string OrderNo)//22012015
        {
            try
            {
                DirectoryInfo _DirInfo = new DirectoryInfo(HttpContext.Current.Server.MapPath("~/UPLOADEDIMAGES") + "\\" + OrderNo.ToString().Trim());
                if (_DirInfo.Exists == false)
                    _DirInfo.Create();

                string _sPath = _DirInfo.FullName + "\\" + filename + ".pdf";
                string _sFileNameWithoutExt = _DirInfo.FullName + "\\" + filename;
                int _iFileIndex = 1;
                while (File.Exists(_sPath))
                {
                    _sPath = _sFileNameWithoutExt + "_" + _iFileIndex.ToString() + ".pdf";
                    _iFileIndex++;
                }

                BinaryWriter fs = new BinaryWriter(new FileStream(_sPath, FileMode.Append, FileAccess.Write));
                fs.Write(byteArrayIn);
                fs.Close();
                return _sPath;
                //MemoryStream ms = new MemoryStream(byteArrayIn);
                //Image returnImage = Image.FromStream(ms);
                //returnImage.s
                //return returnImage;
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return "";
            }
        }


        public byte[] imageToByteArray()
        {

            System.Drawing.Image img = System.Drawing.Image.FromFile(@"E:\\Ravi DAngi\\Water lilies.jpg");
            byte[] arr;
            using (MemoryStream ms = new MemoryStream())
            {
                img.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
                arr = ms.ToArray();
            }

            //System.Drawing.Image imageIn= new System.Drawing.Image();
            //MemoryStream ms = new MemoryStream();
            //imageIn.Save(ms, System.Drawing.Imaging.ImageFormat.Gif);
            return arr;
        }

        //public  string  Retrive_CA_ADDRESS_SignPhoto(string strCa_Number)
        //{
        //    string sql = " select sign_Img from ISUSTD_MOB_UPLOAD_ADRS where Ca_Number=" + strCa_Number + " order by upload_dt desc ";
        //    DbFunction objdbfun = new DbFunction();
        //    //return objdbfun.dmlsinglequery(sql);
        //    return   objdbfun.dmlgetqueryForOracle(sql);
        //}
        public DataTable Get_UploadedCADetails(string _sCANumber)
        {
            string sql = "SELECT EMP_ID,EMP_NAME,  CA_NUMBER, BP_NAME, HOUSE_NUMBER, ";
            sql += " HOUSE_NUMBER_SUP, FLOOR, STREET, STREET2, ";
            sql += " STREET3, STREET4, CITY, POST_CODE, TELEPHONE_NO,E_MAIL,POLE_NO,CUSTOMER_ID_NO, UPLOAD_DT, MOBILE_IMEI_NO,LATITUDE,LONGTITUDE,SIGN_IMG_PATH,ID_PROOF_PATH  FROM( ";
            sql += " SELECT * FROM ISUSTD_MOB_UPLOAD_ADRS WHERE ca_number=" + _sCANumber + " ORDER BY  upload_dt DESC)WHERE ROWNUM=1 ";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery(sql);
        }
        public DataTable Get_UploadedCABuildingDetails(string _sCANumber)
        {
            string sql = "select CA_NO,BUILDING_IMG_PATH  FROM CA_BUILDING_IMG WHERE CA_NO='" + _sCANumber + "'  ";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery(sql);
        }
        public DataTable Get_DocListDetails(string _sOrdNo)
        {
            string sql = "SELECT distinct DESCRIPTION,a.DOCUMENT_TYPE FROM DOCLIST_NEW A, ISUSTD_DOCLIST_MST B WHERE A.DOCUMENT_TYPE=B.DOCUMENT_TYPE  AND a.ORDER_NO='" + _sOrdNo.ToString().Trim() + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery(sql);
        }
        public DataTable Get_cfDetails(string _sOrdNo, string checkRelated)
        {
            string sql = "SELECT ORDERNO, NETOUTSTANDINGAMT, BP, CA,to_char(to_date(MOVEOUTDATE,'dd/MM/YY'),'DD-Mon-YYYY')MOVEOUTDATE, CONSREF, NAME, ADDRESS, CHECKENFORCEMENT, LASTPAYMENTMODE, SEQUENCENO, CHECKRELATED,USER_TYPE FROM CF_DATA where ORDERNO='" + _sOrdNo.ToString().Trim() + "' and upper(checkRelated)='" + checkRelated.ToString().Trim().ToUpper() + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery(sql);
        }
        public DataTable Get_IRData(string _sOrdNo)
        {
            string sql = "SELECT ORDERNO, DIVISION, BP, APPLICANTNAME, CATEGORY, FATHERSNAME, LOADKW, LOADKVA, APPLIEDADDRESS, CONTACTNO, to_char(to_date(VISITDATE,'DD/MM/YY'),'dd-Mon-YYYY')VISITDATE,TIME, DOCRECEIVED, CREATION, ENGGNAME, ENT_DATE, EMAIL_ID FROM IR_DATA where ORDERNO='" + _sOrdNo.ToString().Trim() + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery(sql);
        }

        public DataTable GetRoleMst()//28-01-2015
        {
            string sql = "select '-SELECT-' ROLE_ID from dual union SELECT ROLE_ID FROM ISUSTD_ROLE_MST	 where ROLE_ID !='ADMIN' order by 1";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlgetquery(sql);
        }

        public DataTable Get_loginDetails(string strUser_Name, string strPassword) //28-01-2015 rdx , PASS_UPDATE_DT
        {
            string sql = "select ROL_RGT,USER_NAME, PASSWORD, NAME, IMEI_NO, DIV_CODE,COMPANY_CODE, DIV_RGT  from ISUSTD_USER where upper(USER_NAME)='" + strUser_Name.ToString().Trim().ToUpper() + "' ";
            if (strPassword != "")
                sql += " and  PASSWORD='" + strPassword.ToString().Trim() + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery(sql);
        }
        public DataTable Get_TFDetails(string _sOrdNo)
        {
            string sql = "SELECT DISTINCT a.CODE_GROUP,TFCODES_DETAILS,CODE_DETAILS FROM CATALOG_SELECTION A,TFCODES B,TFCODES_MST C WHERE A.CODE_GROUP=B.TFCODES AND A.TASK_CODE=C.CODE_GROUP AND A.ORDER_NO='" + _sOrdNo.ToString().Trim() + "' ORDER BY a.CODE_GROUP";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery(sql);
        }

        public DataTable Get_IMEI_NO(string IMEI_NO)
        {
            string sql = "SELECT ORDERNO FROM NEW_CONNECTION_SITE_TASKS where IMEI_NO='" + IMEI_NO.ToString().Trim() + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery(sql);
        }
        public DataTable Get_teamall(string EMP_ID)
        {
            string sql = "SELECT ORDERNO FROM ORDERNO_TEAM_ALLOCATION where EMP_ID='" + EMP_ID.ToString().Trim() + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery(sql);
        }
        public DataTable Get_CFOrderNoData()
        {
            string sql = "SELECT DISTINCT ORDERNO FROM CF_DATA";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery(sql);
        }

        public DataTable Get_teamname(string _sCompany) //28-01-2015
        {
            string sql = "select m.SR_NO, m.NAME, m.EMP_ID,m.ACTIVITY, m.FROM_DATE, m.TO_DATE ";
            sql += ", (SELECT  DIVISION_NAME FROM  ISUSTD_DIVISIONS_MST WHERE SDO_CD=u.DIV_CODE) division ";
            sql += " from mob_team_allocation  m,ISUSTD_USER u ";
            sql += " WHERE  m.EMP_ID = u.user_name ";
            if (_sCompany != "")
                sql += " AND  upper(u.COMPANY_CODE)=upper('" + _sCompany + "')";
            string _sDivCode = string.Empty;
            if (System.Web.HttpContext.Current.Session["DIV_RGT"] != null)
            {
                _sDivCode = System.Web.HttpContext.Current.Session["DIV_RGT"].ToString();
                if (_sDivCode != "")
                    sql += " AND u.DIV_RGT in ('" + _sDivCode.Replace("~", "','") + "')";
            }

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery(sql);
        }

        public DataTable Get_sysdate()
        {
            string sql = "SELECT TO_CHAR(TO_DATE(SYSDATE,'dd/mm/yy'),'YYYYMMDD')SSDD FROM  dual";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery(sql);
        }

        public DataTable Get_teamorderno(string _sCompany, string _sDiv) //28-01-2015
        {
            string sql = "SELECT DISTINCT t.ORDERNO,(SELECT  DIVISION_NAME FROM  ISUSTD_DIVISIONS_MST WHERE SDO_CD=u.DIV_CODE) division ";
            sql += " FROM NEW_CONNECTION_SITE_TASKS t,ISUSTD_USER u ";
            sql += " WHERE  t.ORDERNO IS NOT NULL AND t.TEAM_ALLOCATION='N' and t.IMEI_NO= u.IMEI_NO  ";
            if (_sCompany != "")
                sql += " AND  upper(u.COMPANY_CODE)=upper('" + _sCompany + "')  ";
            if (_sDiv != "")
                sql += " AND  u.DIV_CODE='" + _sDiv + "'";

            string _sDivCode = string.Empty;
            if (System.Web.HttpContext.Current.Session["DIV_RGT"] != null)
            {
                _sDivCode = System.Web.HttpContext.Current.Session["DIV_RGT"].ToString();
                if (_sDivCode != "")
                    sql += " AND u.DIV_RGT in ('" + _sDivCode.Replace("~", "','") + "')";
            }

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlgetquery(sql);
        }

        public DataTable Get_teammember(string _sCompany, string _sDiv)//28-01-2015
        {
            string sql = "SELECT EMP_ID,U.NAME FROM MOB_TEAM_ALLOCATION m,ISUSTD_USER u";
            sql += " WHERE m.ACTIVITY='Y' and  m.EMP_ID = u.user_name ";
            if (_sCompany != "")
                sql += " AND  upper(u.COMPANY_CODE)=upper('" + _sCompany + "')  ";
            if (_sDiv != "")
                sql += " AND u.SDO_CD =" + _sDiv.Trim();

            string _sDivCode = string.Empty;
            if (System.Web.HttpContext.Current.Session["DIV_RGT"] != null)
            {
                _sDivCode = System.Web.HttpContext.Current.Session["DIV_RGT"].ToString();
                if (_sDivCode != "")
                    sql += " AND u.DIV_RGT in ('" + _sDivCode.Replace("~", "','") + "')";
            }

            sql += " ORDER BY  to_number(m.sr_no)";


            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery(sql);
        }

        public DataTable Get_teammember1(string _sCompany, string _sDiv)// 28-01-2015
        {
            string sql = "SELECT '-SELECT-' AS NAME,'0' AS EMP_ID FROM DUAL UNION  SELECT m.NAME,m.EMP_ID FROM MOB_TEAM_ALLOCATION   m,ISUSTD_USER u ";
            sql += " WHERE  m.ACTIVITY='Y' and  m.EMP_ID = u.user_name	";
            if (_sCompany != "")
                sql += " AND  upper(u.COMPANY_CODE)=upper('" + _sCompany + "')  ";
            if (_sDiv != "")
                sql += " AND u.DIV_CODE =" + _sDiv.Trim();

            string _sDivCode = string.Empty;
            if (System.Web.HttpContext.Current.Session["DIV_RGT"] != null)
            {
                _sDivCode = System.Web.HttpContext.Current.Session["DIV_RGT"].ToString();
                if (_sDivCode != "")
                    sql += " AND u.DIV_RGT in ('" + _sDivCode.Replace("~", "','") + "')";
            }

            sql += " ORDER BY NAME ASC";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlgetquery(sql);
        }

        //public  DataTable GetDivMst(string _sCompany, string _sDiv) //28-01-2015 new
        //{
        //    string sql = "  SELECT 0 SDO_CD,'-ALL-' DIVISION_NAME FROM dual ";
        //    sql += "  UNION ";
        //    sql += "  SELECT  SDO_CD, DIVISION_NAME  FROM  ISUSTD_DIVISIONS_MST  WHERE 1=1 ";

        //    if (_sCompany != "")
        //        sql += " AND  upper( SDO_CD) like decode('" + _sCompany + "', 'BYPL','1%','BRPL','2%')   ";
        //    if (_sDiv != "")
        //        sql += " AND SDO_CD =" + _sDiv.Trim();

        //    string _sDivCode = string.Empty;
        //    if (System.Web.HttpContext.Current.Session["DIV_RGT"] != null)
        //    {
        //        _sDivCode = System.Web.HttpContext.Current.Session["DIV_RGT"].ToString();
        //        if (_sDivCode != "")
        //            sql += " AND SDO_CD in ('" + _sDivCode.Replace("~", "','") + "')";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    // objdbfun.dmlgetqueryForOracle(sql);
        //    return objdbfun.dmlgetquery(sql);
        //}

        public DataTable GetRoleMenuMst(string _sRole_name) //28-01-2015 new
        {
            string sql = "   SELECT menu_name, page_name FROM isustd_role_menu_mst WHERE role_name='" + _sRole_name + "'  ";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlgetquery(sql);
        }



        public DataTable Get_teammember_ord(string emailid, string orderno)
        {
            string sql = "SELECT 1 FROM ORDERNO_TEAM_ALLOCATION WHERE EMP_ID='" + emailid.ToString().Trim() + "' and ORDERNO='" + orderno.ToString().Trim() + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery(sql);
        }


        public DataTable Get_New_Connection_Site_Task(string _sOrdNo)
        {
            string sql = "SELECT CONNECTED_LOAD,USAGE_CATEGORY_OF_SITE,POLENO_FEEDER_PILLAR_NO,METER_NO,SERVICE_LINE_LENGTH, BUILDING_HIEGHT, WIRING_COMPLETED, LIFT_INSTALLED, LIFT_CERTIFICATE_REQUIRED, AFFIDAVIT_REQUIRED, FLOOR, TF_SEAL_NO, METERING_POSITION, INITIAL_CF_OK, CA_NO, AMOUNT, APPLIED_PREMISES, REMARKS, ORDERNO,SIGN_IMG_PATH, BUILDING_IMG1_PATH, BUILDING_IMG2_PATH, IMEI_NO, ENT_DATE, LATITUDE, LONGTITUDE, FILE_ATTACHMENT, SCAN_FOR_AFFIDAVIT, SCAN_FOR_ADDRESS_PROOF, SCAN_FOR_ID_PROOF, SCAN_FOR_OTHER, SITE_LAYOUT_IMG, STATUS, NEW_REMARKS, RESCHEDULE_DATE, CABLE_TYPE, LEFT_METER_NO, RIGHT_METER_NO, APPLIED_AREA, BUILDING_AREA, POLE_IMG, TF_IMG, RC_PREMISES,SCAN_FOR_APPLICATION, SCAN_FOR_OWNERSHIP,PASTED_ON_PROPOSED  FROM NEW_CONNECTION_SITE_TASKS where ORDERNO='" + _sOrdNo.ToString().Trim() + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery(sql);
        }

        //public  DataTable Get_ALLUploadedCA(string _sFrmDt, string _sToDt)
        //{
        //    string sql = "SELECT UNIQUE to_char(ca_number) ca_number FROM ISUSTD_MOB_UPLOAD_ADRS WHERE 1=1";

        //    if (_sFrmDt != "" && _sToDt != "")
        //        sql += " and TRUNC(upload_dt) BETWEEN TRUNC(TO_DATE('" + _sFrmDt + "')) AND TRUNC(TO_DATE('" + _sToDt + "')) ";

        //    sql += " union SELECT CA_NO FROM CA_BUILDING_IMG ";
        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    // objdbfun.dmlgetqueryForOracle(sql);
        //    return objdbfun.dmlgetquery(sql);
        //}
        //public  string Retrive_CA_ADDRESS_IDProofImage(string strCa_Number)
        //{
        //    string sql = " select ID_PROOF from ISUSTD_MOB_UPLOAD_ADRS where Ca_Number=" + strCa_Number + " order by upload_dt desc ";

        //    DbFunction objdbfun = new DbFunction();
        //    //return objdbfun.dmlsinglequery(sql);
        //    return objdbfun.dmlgetqueryForOracle(sql);
        //}

        public DataTable misREport(string _sFrmDt, string _sToDt, string statusStr)
        {

            string query = "SELECT  B.ORDERNO, STATUS, NEW_REMARKS, RESCHEDULE_DATE, TEAM_ALLOCATION, SEND_TO_SAP, SEND_SAP_REMARKS,USER_NAME,NAME, ALLOCATION_DATE, REJECTION_DATE FROM ISUSTD_USER A,NEW_CONNECTION_SITE_TASKS B, ORDERNO_TEAM_ALLOCATION C WHERE C.ORDERNO = B.ORDERNO and A.USER_NAME = C.EMP_ID and B.STATUS='" + statusStr + "'";
            query = query + " and TRUNC(B.ENT_DATE) BETWEEN TRUNC(TO_DATE('" + _sFrmDt + "')) AND TRUNC(TO_DATE('" + _sToDt + "')) ";
            DbFunction objdbfun = new DbFunction();

            return objdbfun.dmlgetquery(query);

        }

        public DataTable misREportNew(string _sFrmDt, string _sToDt, string company, string circle, string division)
        {

            string sql = "SELECT IEMI,vaplz,Allocated,Attanded,pending,NVL(Coordinate_captured,0) Coordinate_captured";
            sql += ",NVL(TF_OK,0) TF_OK,NVL(doc_Not_rejected,0) doc_Not_rejected,NVL(doc_received,0)doc_received FROM ";
            sql += "(";
            sql += "SELECT IMEI_NO, SUM(CASE WHEN LATITUDE IS NOT NULL THEN 1 ELSE 0 END) Coordinate_captured,";
            sql += "SUM(CASE WHEN UPPER(PASTED_ON_PROPOSED)='YES' THEN 1 ELSE 0 END) TF_OK,";
            sql += "SUM(CASE WHEN status='Complete' THEN 1 ELSE 0 END ) doc_received,";
            sql += "SUM(CASE WHEN (status='On Hold' OR status='Reject' ) THEN 1 ELSE 0 END ) doc_Not_rejected";
            sql += " FROM NEW_CONNECTION_SITE_TASKS t ";
            sql += "WHERE ORDERNO IN(SELECT AUFNR FROM ISUSTD_TEAM_ALLOCATION d WHERE  ENTRY_DT BETWEEN '" + _sFrmDt + "' AND '" + _sToDt + "')";
            sql += "GROUP BY IMEI_NO";
            sql += ") A,";
            sql += "(";
            sql += "SELECT IEMI, vaplz, COUNT(1) Allocated,SUM(CASE WHEN STATUS!='PENDING' THEN 1 ELSE 0 END) Attanded";
            sql += ", SUM(CASE WHEN STATUS='PENDING' THEN 1 ELSE 0 END) pending ";
            sql += "FROM ISUSTD_TEAM_ALLOCATION a ";
            sql += "WHERE ENTRY_DT BETWEEN '" + _sFrmDt + "' AND '" + _sToDt + "'";
            sql += "GROUP BY IEMI, vaplz";
            sql += ")Z ";
            sql += "WHERE A.IMEI_NO(+)=Z.IEMI";
            if (company != "" && company != "--ALL--")
            {
                if (circle != "" && circle != "--ALL--")
                {
                    if (division != "" && division != "--ALL--")
                    {
                        sql += " AND z.VAPLZ = '" + division + "' ";
                    }
                    else
                    {
                        sql += " AND z.VAPLZ LIKE '" + circle + "%'";
                    }
                }
                else if (company == "BRPL")
                {
                    sql += " AND (z.VAPLZ LIKE 'S%' OR z.VAPLZ LIKE 'W%')";

                }
                else if (company == "BYPL")
                {
                    sql += " AND (z.VAPLZ LIKE 'ES%' OR z.VAPLZ LIKE 'EN%' OR z.VAPLZ LIKE 'CE%')";

                }
            }
            sql += " ORDER BY z.vaplz";
            DbFunction objdbfun = new DbFunction();

            return objdbfun.dmlgetquery(sql);
        }
        public void WriteIntoFile(string _smsg)
        {
            //using (StreamWriter sw = File.AppendText(HttpContext.Current.Server.MapPath(@"~\App_Data\ApplicationLog.txt")))
            using (StreamWriter sw = File.AppendText(HttpContext.Current.Server.MapPath(@"~\App_Data\ApplicationLog" + "_" + DateTime.Now.Date.ToString("dd-MM-yyyy") + ".txt")))
            {
                sw.WriteLine(_smsg);
                sw.Close();
            }
        }
        public bool Insert_NEW_CONNECTION_SITE_TASKS(
        string Connected_Load, string Usage_Category_Of_site, string Pole_No_Feeder_Pillar_No,
        string meter_No, string Service_Line_Length, string Building_Hieght, string Wiring_Completed,
        string Lift_Installed, string Lift_Certificate_Required, string Affidavit_Required,
        string Floor, string Tf_Seal_No, string metering_position,
        string Initial_Cf_OK, string CA_No, string Amount, string applied_premises, string remarks,
        string strOrderNo, string strsign_Img, string building_img1, string building_img2, string IMEI_NO, string strLatitude, string strLongtitude, string FILE_ATTACHMENT, string SITE_LAYOUT_IMG, string CABLE_TYPE, string LEFT_METER_NO, string RIGHT_METER_NO, string APPLIED_AREA, string BUILDING_AREA, string strPasted)
        {

            string sql = " select 1 from NEW_CONNECTION_SITE_TASKS where upper(ORDERNO)='" + strOrderNo.ToString().Trim().ToUpper() + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery(sql);
            if (dt.Rows.Count > 0)
            {
                byte[] _byImg = null, _byIDProfImg = null, _FILE_ATTACHMENTImg = null, _fileSITE_LAYOUT_IMG;
                string _sImgPath = string.Empty, _sIDProfImgPath1 = string.Empty, _sIDProfImgPath2 = string.Empty, _sIDFILEATTACHMENTImg = string.Empty, _fileSITELAYOUT_IMG = string.Empty;
                try
                {
                    _byImg = Convert.FromBase64String(strsign_Img);
                    _sImgPath = byteArrayToImage(_byImg, strOrderNo + "_NEW_CONNECTION_SIGN");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in sign image" + ex.ToString());
                }
                try
                {
                    _byIDProfImg = Convert.FromBase64String(building_img1);
                    _sIDProfImgPath1 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG1");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _byIDProfImg = Convert.FromBase64String(building_img2);
                    _sIDProfImgPath2 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG2");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _fileSITE_LAYOUT_IMG = Convert.FromBase64String(SITE_LAYOUT_IMG);
                    _fileSITELAYOUT_IMG = byteArrayToImage(_fileSITE_LAYOUT_IMG, strOrderNo + "_SITE_LAYOUT_IMG");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _FILE_ATTACHMENTImg = Convert.FromBase64String(FILE_ATTACHMENT);
                    _sIDFILEATTACHMENTImg = byteArrayToOrderNoPDF(_FILE_ATTACHMENTImg, strOrderNo.ToString().Trim() + "_FILE_ATTACHMENT_PDF", strOrderNo.ToString().Trim());
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in file attachment image" + ex.ToString());
                }
                try
                {
                    string sqlupdate = "update NEW_CONNECTION_SITE_TASKS set";
                    sqlupdate = sqlupdate + " CONNECTED_LOAD='" + Connected_Load.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " USAGE_CATEGORY_OF_SITE='" + Usage_Category_Of_site.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " POLENO_FEEDER_PILLAR_NO='" + Pole_No_Feeder_Pillar_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " METER_NO='" + meter_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " SERVICE_LINE_LENGTH='" + Service_Line_Length.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " BUILDING_HIEGHT='" + Building_Hieght.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " WIRING_COMPLETED='" + Wiring_Completed.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LIFT_INSTALLED='" + Lift_Installed.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LIFT_CERTIFICATE_REQUIRED='" + Lift_Certificate_Required.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " AFFIDAVIT_REQUIRED='" + Affidavit_Required.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " FLOOR='" + Floor.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " TF_SEAL_NO='" + Tf_Seal_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " METERING_POSITION='" + metering_position.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " INITIAL_CF_OK='" + Initial_Cf_OK.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " CA_NO='" + CA_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " AMOUNT='" + Amount.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " APPLIED_PREMISES='" + applied_premises.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " REMARKS='" + remarks.ToString().Trim().Replace("'", "") + "',";
                    sqlupdate = sqlupdate + " SIGN_IMG_PATH='" + _sImgPath.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " BUILDING_IMG1_PATH='" + _sIDProfImgPath1.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " BUILDING_IMG2_PATH='" + _sIDProfImgPath2.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " IMEI_NO='" + IMEI_NO.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LATITUDE='" + strLatitude.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LONGTITUDE='" + strLongtitude.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " FILE_ATTACHMENT='" + _sIDFILEATTACHMENTImg.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " SITE_LAYOUT_IMG='" + _fileSITELAYOUT_IMG.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " CABLE_TYPE='" + CABLE_TYPE.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LEFT_METER_NO='" + LEFT_METER_NO.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " RIGHT_METER_NO='" + RIGHT_METER_NO.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " DT_CODE='" + meter_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " DT_METER_NO='" + RIGHT_METER_NO.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " APPLIED_AREA='" + APPLIED_AREA.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " BUILDING_AREA='" + BUILDING_AREA.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " PASTED_ON_PROPOSED='" + strPasted.ToString().Trim() + "'"; //DT_CODE, DT_METER_NO
                    sqlupdate = sqlupdate + " where ORDERNO='" + strOrderNo.ToString().Trim() + "'";
                    DbFunction objdbfunupdate = new DbFunction();
                    return objdbfunupdate.dmlsinglequery(sqlupdate);
                    //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    return false;
                }
            }
            else
            {

                byte[] _byImg = null, _byIDProfImg = null, _FILE_ATTACHMENTImg = null, _fileSITE_LAYOUT_IMG;
                string _sImgPath = string.Empty, _sIDProfImgPath1 = string.Empty, _sIDProfImgPath2 = string.Empty, _sIDFILEATTACHMENTImg = string.Empty, _fileSITELAYOUT_IMG = string.Empty;
                try
                {
                    _byImg = Convert.FromBase64String(strsign_Img);
                    _sImgPath = byteArrayToImage(_byImg, strOrderNo + "_NEW_CONNECTION_SIGN");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in sign image" + ex.ToString());
                }
                try
                {
                    _byIDProfImg = Convert.FromBase64String(building_img1);
                    _sIDProfImgPath1 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG1");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _byIDProfImg = Convert.FromBase64String(building_img2);
                    _sIDProfImgPath2 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG2");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _fileSITE_LAYOUT_IMG = Convert.FromBase64String(SITE_LAYOUT_IMG);
                    _fileSITELAYOUT_IMG = byteArrayToImage(_fileSITE_LAYOUT_IMG, strOrderNo + "_SITE_LAYOUT_IMG");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _FILE_ATTACHMENTImg = Convert.FromBase64String(FILE_ATTACHMENT);
                    _sIDFILEATTACHMENTImg = byteArrayToOrderNoPDF(_FILE_ATTACHMENTImg, strOrderNo.ToString().Trim() + "_FILE_ATTACHMENT_PDF", strOrderNo.ToString().Trim());
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in file attachment image" + ex.ToString());
                }
                try
                {
                    string sqlinsert = "INSERT INTO NEW_CONNECTION_SITE_TASKS(CONNECTED_LOAD, USAGE_CATEGORY_OF_SITE, POLENO_FEEDER_PILLAR_NO, ";
                    sqlinsert = sqlinsert + " METER_NO, SERVICE_LINE_LENGTH, BUILDING_HIEGHT, WIRING_COMPLETED, LIFT_INSTALLED, LIFT_CERTIFICATE_REQUIRED,";
                    sqlinsert = sqlinsert + " AFFIDAVIT_REQUIRED, FLOOR, TF_SEAL_NO, METERING_POSITION, INITIAL_CF_OK, CA_NO, AMOUNT, APPLIED_PREMISES, REMARKS, ";
                    sqlinsert = sqlinsert + " ORDERNO,SIGN_IMG_PATH, BUILDING_IMG1_PATH, BUILDING_IMG2_PATH, IMEI_NO,LATITUDE, LONGTITUDE,FILE_ATTACHMENT,SITE_LAYOUT_IMG,CABLE_TYPE, LEFT_METER_NO, RIGHT_METER_NO, APPLIED_AREA, BUILDING_AREA,PASTED_ON_PROPOSED , DT_CODE, DT_METER_NO)";
                    sqlinsert = sqlinsert + " values('" + Connected_Load.ToString().Trim() + "','" + Usage_Category_Of_site.ToString().Trim() + "','" + Pole_No_Feeder_Pillar_No.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + meter_No.ToString().Trim() + "','" + Service_Line_Length.ToString().Trim() + "','" + Building_Hieght.ToString().Trim() + "','" + Wiring_Completed.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + Lift_Installed.ToString().Trim() + "','" + Lift_Certificate_Required.ToString().Trim() + "','" + Affidavit_Required.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + Floor.ToString().Trim() + "','" + Tf_Seal_No.ToString().Trim() + "','" + metering_position.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + Initial_Cf_OK.ToString().Trim() + "','" + CA_No.ToString().Trim() + "','" + Amount.ToString().Trim() + "','" + applied_premises.ToString().Trim() + "','" + remarks.ToString().Trim().Replace("'", "") + "',";
                    sqlinsert = sqlinsert + " '" + strOrderNo.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + _sImgPath.ToString().Trim() + "','" + _sIDProfImgPath1.ToString().Trim() + "','" + _sIDProfImgPath2.ToString().Trim() + "','" + IMEI_NO.ToString().Trim() + "','" + strLatitude.ToString().Trim() + "','" + strLongtitude.ToString().Trim() + "','" + _sIDFILEATTACHMENTImg.ToString().Trim() + "','" + _fileSITELAYOUT_IMG.ToString().Trim() + "','" + CABLE_TYPE.ToString().Trim() + "','" + LEFT_METER_NO.ToString().Trim() + "','" + RIGHT_METER_NO.ToString().Trim() + "','" + APPLIED_AREA.ToString().Trim() + "','" + BUILDING_AREA.ToString().Trim() + "','" + strPasted.ToString().Trim() + "', '" + meter_No.ToString().Trim() + "', '" + RIGHT_METER_NO.ToString().Trim() + "')";

                    DbFunction objdbfuninsert = new DbFunction();
                    return objdbfuninsert.dmlsinglequery(sqlinsert);
                    //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    return false;
                }
            }
        }


        public bool Insert_NEW_CONNECTION_SITE_TASKS2(
       string Connected_Load, string Usage_Category_Of_site, string Pole_No_Feeder_Pillar_No,
       string meter_No, string Service_Line_Length, string Building_Hieght, string Wiring_Completed,
       string Lift_Installed, string Lift_Certificate_Required, string Affidavit_Required,
       string Floor, string Tf_Seal_No, string metering_position,
       string Initial_Cf_OK, string CA_No, string Amount, string applied_premises, string remarks,
       string strOrderNo, string strsign_Img, string building_img1, string building_img2, string IMEI_NO, string strLatitude,
       string strLongtitude, string FILE_ATTACHMENT, string SITE_LAYOUT_IMG, string CABLE_TYPE, string LEFT_METER_NO, string RIGHT_METER_NO,
       string APPLIED_AREA, string BUILDING_AREA, string strPasted, string NEW_BUILDING, string NORMATIVE_LOAD, string COVERED_AREA,
        string PLOT_AREA, string Existing_Meter_No, string Encroachment)
        {

            string sql = " select 1 from NEW_CONNECTION_SITE_TASKS where upper(ORDERNO)='" + strOrderNo.ToString().Trim().ToUpper() + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery(sql);
            if (dt.Rows.Count > 0)
            {
                byte[] _byImg = null, _byIDProfImg = null, _FILE_ATTACHMENTImg = null, _fileSITE_LAYOUT_IMG;
                string _sImgPath = string.Empty, _sIDProfImgPath1 = string.Empty, _sIDProfImgPath2 = string.Empty, _sIDFILEATTACHMENTImg = string.Empty, _fileSITELAYOUT_IMG = string.Empty;
                try
                {
                    _byImg = Convert.FromBase64String(strsign_Img);
                    _sImgPath = byteArrayToImage(_byImg, strOrderNo + "_NEW_CONNECTION_SIGN");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in sign image" + ex.ToString());
                }
                try
                {
                    _byIDProfImg = Convert.FromBase64String(building_img1);
                    _sIDProfImgPath1 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG1");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _byIDProfImg = Convert.FromBase64String(building_img2);
                    _sIDProfImgPath2 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG2");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _fileSITE_LAYOUT_IMG = Convert.FromBase64String(SITE_LAYOUT_IMG);
                    _fileSITELAYOUT_IMG = byteArrayToImage(_fileSITE_LAYOUT_IMG, strOrderNo + "_SITE_LAYOUT_IMG");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _FILE_ATTACHMENTImg = Convert.FromBase64String(FILE_ATTACHMENT);
                    _sIDFILEATTACHMENTImg = byteArrayToOrderNoPDF(_FILE_ATTACHMENTImg, strOrderNo.ToString().Trim() + "_FILE_ATTACHMENT_PDF", strOrderNo.ToString().Trim());
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in file attachment image" + ex.ToString());
                }
                try
                {
                    string sqlupdate = "update NEW_CONNECTION_SITE_TASKS set";
                    sqlupdate = sqlupdate + " CONNECTED_LOAD='" + Connected_Load.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " USAGE_CATEGORY_OF_SITE='" + Usage_Category_Of_site.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " POLENO_FEEDER_PILLAR_NO='" + Pole_No_Feeder_Pillar_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " METER_NO='" + meter_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " SERVICE_LINE_LENGTH='" + Service_Line_Length.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " BUILDING_HIEGHT='" + Building_Hieght.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " WIRING_COMPLETED='" + Wiring_Completed.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LIFT_INSTALLED='" + Lift_Installed.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LIFT_CERTIFICATE_REQUIRED='" + Lift_Certificate_Required.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " AFFIDAVIT_REQUIRED='" + Affidavit_Required.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " FLOOR='" + Floor.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " TF_SEAL_NO='" + Tf_Seal_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " METERING_POSITION='" + metering_position.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " INITIAL_CF_OK='" + Initial_Cf_OK.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " CA_NO='" + CA_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " AMOUNT='" + Amount.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " APPLIED_PREMISES='" + applied_premises.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " REMARKS='" + remarks.ToString().Trim().Replace("'", "") + "',";
                    sqlupdate = sqlupdate + " SIGN_IMG_PATH='" + _sImgPath.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " BUILDING_IMG1_PATH='" + _sIDProfImgPath1.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " BUILDING_IMG2_PATH='" + _sIDProfImgPath2.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " IMEI_NO='" + IMEI_NO.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LATITUDE='" + strLatitude.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LONGTITUDE='" + strLongtitude.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " FILE_ATTACHMENT='" + _sIDFILEATTACHMENTImg.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " SITE_LAYOUT_IMG='" + _fileSITELAYOUT_IMG.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " CABLE_TYPE='" + CABLE_TYPE.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LEFT_METER_NO='" + LEFT_METER_NO.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " RIGHT_METER_NO='" + RIGHT_METER_NO.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " DT_CODE='" + meter_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " DT_METER_NO='" + RIGHT_METER_NO.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " APPLIED_AREA='" + APPLIED_AREA.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " BUILDING_AREA='" + BUILDING_AREA.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " PASTED_ON_PROPOSED='" + strPasted.ToString().Trim() + "',"; //DT_CODE, DT_METER_NO

                    sqlupdate = sqlupdate + " NEW_BUILDING='" + NEW_BUILDING.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " NORMATIVE_LOAD='" + NORMATIVE_LOAD.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " COVERED_AREA='" + COVERED_AREA.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " PLOT_AREA='" + PLOT_AREA.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " Existing_Meter_No='" + Existing_Meter_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " Encroachment='" + Encroachment.ToString().Trim() + "' ";

                    sqlupdate = sqlupdate + " where ORDERNO='" + strOrderNo.ToString().Trim() + "'";
                    DbFunction objdbfunupdate = new DbFunction();
                    return objdbfunupdate.dmlsinglequery(sqlupdate);
                    //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    return false;
                }
            }
            else
            {

                byte[] _byImg = null, _byIDProfImg = null, _FILE_ATTACHMENTImg = null, _fileSITE_LAYOUT_IMG;
                string _sImgPath = string.Empty, _sIDProfImgPath1 = string.Empty, _sIDProfImgPath2 = string.Empty, _sIDFILEATTACHMENTImg = string.Empty, _fileSITELAYOUT_IMG = string.Empty;
                try
                {
                    _byImg = Convert.FromBase64String(strsign_Img);
                    _sImgPath = byteArrayToImage(_byImg, strOrderNo + "_NEW_CONNECTION_SIGN");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in sign image" + ex.ToString());
                }
                try
                {
                    _byIDProfImg = Convert.FromBase64String(building_img1);
                    _sIDProfImgPath1 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG1");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _byIDProfImg = Convert.FromBase64String(building_img2);
                    _sIDProfImgPath2 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG2");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _fileSITE_LAYOUT_IMG = Convert.FromBase64String(SITE_LAYOUT_IMG);
                    _fileSITELAYOUT_IMG = byteArrayToImage(_fileSITE_LAYOUT_IMG, strOrderNo + "_SITE_LAYOUT_IMG");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _FILE_ATTACHMENTImg = Convert.FromBase64String(FILE_ATTACHMENT);
                    _sIDFILEATTACHMENTImg = byteArrayToOrderNoPDF(_FILE_ATTACHMENTImg, strOrderNo.ToString().Trim() + "_FILE_ATTACHMENT_PDF", strOrderNo.ToString().Trim());
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in file attachment image" + ex.ToString());
                }
                try
                {
                    string sqlinsert = "INSERT INTO NEW_CONNECTION_SITE_TASKS(CONNECTED_LOAD, USAGE_CATEGORY_OF_SITE, POLENO_FEEDER_PILLAR_NO, ";
                    sqlinsert = sqlinsert + " METER_NO, SERVICE_LINE_LENGTH, BUILDING_HIEGHT, WIRING_COMPLETED, LIFT_INSTALLED, LIFT_CERTIFICATE_REQUIRED,";
                    sqlinsert = sqlinsert + " AFFIDAVIT_REQUIRED, FLOOR, TF_SEAL_NO, METERING_POSITION, INITIAL_CF_OK, CA_NO, AMOUNT, APPLIED_PREMISES, REMARKS, ";
                    sqlinsert = sqlinsert + " ORDERNO,SIGN_IMG_PATH, BUILDING_IMG1_PATH, BUILDING_IMG2_PATH, IMEI_NO,LATITUDE, LONGTITUDE,FILE_ATTACHMENT,SITE_LAYOUT_IMG,CABLE_TYPE, LEFT_METER_NO, RIGHT_METER_NO, APPLIED_AREA, BUILDING_AREA,PASTED_ON_PROPOSED , DT_CODE, DT_METER_NO,";
                    sqlinsert = sqlinsert + " NEW_BUILDING,NORMATIVE_LOAD,COVERED_AREA,PLOT_AREA,Existing_Meter_No,Encroachment)";
                    sqlinsert = sqlinsert + " values('" + Connected_Load.ToString().Trim() + "','" + Usage_Category_Of_site.ToString().Trim() + "','" + Pole_No_Feeder_Pillar_No.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + meter_No.ToString().Trim() + "','" + Service_Line_Length.ToString().Trim() + "','" + Building_Hieght.ToString().Trim() + "','" + Wiring_Completed.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + Lift_Installed.ToString().Trim() + "','" + Lift_Certificate_Required.ToString().Trim() + "','" + Affidavit_Required.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + Floor.ToString().Trim() + "','" + Tf_Seal_No.ToString().Trim() + "','" + metering_position.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + Initial_Cf_OK.ToString().Trim() + "','" + CA_No.ToString().Trim() + "','" + Amount.ToString().Trim() + "','" + applied_premises.ToString().Trim() + "','" + remarks.ToString().Trim().Replace("'", "") + "',";
                    sqlinsert = sqlinsert + " '" + strOrderNo.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + _sImgPath.ToString().Trim() + "','" + _sIDProfImgPath1.ToString().Trim() + "','" + _sIDProfImgPath2.ToString().Trim() + "','" + IMEI_NO.ToString().Trim() + "','" + strLatitude.ToString().Trim() + "','" + strLongtitude.ToString().Trim() + "','" + _sIDFILEATTACHMENTImg.ToString().Trim() + "','" + _fileSITELAYOUT_IMG.ToString().Trim() + "','" + CABLE_TYPE.ToString().Trim() + "','" + LEFT_METER_NO.ToString().Trim() + "','" + RIGHT_METER_NO.ToString().Trim() + "','" + APPLIED_AREA.ToString().Trim() + "','" + BUILDING_AREA.ToString().Trim() + "','" + strPasted.ToString().Trim() + "', '" + meter_No.ToString().Trim() + "', '" + RIGHT_METER_NO.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + NEW_BUILDING + "','" + NORMATIVE_LOAD + "','" + COVERED_AREA + "','" + PLOT_AREA + "','" + Existing_Meter_No + "','" + Encroachment + "')";


                    DbFunction objdbfuninsert = new DbFunction();
                    //return objdbfuninsert.dmlsinglequery(sqlinsert);
                    objdbfuninsert.dmlsinglequery(sqlinsert);
                    //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    //return false;
                }

                string sqlChk = " select 1 from NEW_CONNECTION_SITE_TASKS where upper(ORDERNO)='" + strOrderNo.ToString().Trim().ToUpper() + "'";
                dt = new DataTable();
                objdbfun = new DbFunction();
                dt = objdbfun.dmlgetquery(sqlChk);
                if (dt.Rows.Count > 0)
                    return true;
                else
                    return false;

            }
        }

        public string Insert_NEW_CONNECTION_SITE_TASKS2New(
    string Connected_Load, string Usage_Category_Of_site, string Pole_No_Feeder_Pillar_No,
    string meter_No, string Service_Line_Length, string Building_Hieght, string Wiring_Completed,
    string Lift_Installed, string Lift_Certificate_Required, string Affidavit_Required,
    string Floor, string Tf_Seal_No, string metering_position,
    string Initial_Cf_OK, string CA_No, string Amount, string applied_premises, string remarks,
    string strOrderNo, string strsign_Img, string building_img1, string building_img2, string IMEI_NO, string strLatitude,
    string strLongtitude, string FILE_ATTACHMENT, string SITE_LAYOUT_IMG, string CABLE_TYPE, string LEFT_METER_NO, string RIGHT_METER_NO,
    string APPLIED_AREA, string BUILDING_AREA, string strPasted, string NEW_BUILDING, string NORMATIVE_LOAD, string COVERED_AREA,
     string PLOT_AREA, string Existing_Meter_No, string Encroachment)
        {

            string sql = " select 1 from NEW_CONNECTION_SITE_TASKS where upper(ORDERNO)='" + strOrderNo.ToString().Trim().ToUpper() + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery(sql);
            if (dt.Rows.Count > 0)
            {
                byte[] _byImg = null, _byIDProfImg = null, _FILE_ATTACHMENTImg = null, _fileSITE_LAYOUT_IMG;
                string _sImgPath = string.Empty, _sIDProfImgPath1 = string.Empty, _sIDProfImgPath2 = string.Empty, _sIDFILEATTACHMENTImg = string.Empty, _fileSITELAYOUT_IMG = string.Empty;
                try
                {
                    _byImg = Convert.FromBase64String(strsign_Img);
                    _sImgPath = byteArrayToImage(_byImg, strOrderNo + "_NEW_CONNECTION_SIGN");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in sign image" + ex.ToString());
                }
                try
                {
                    _byIDProfImg = Convert.FromBase64String(building_img1);
                    _sIDProfImgPath1 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG1");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _byIDProfImg = Convert.FromBase64String(building_img2);
                    _sIDProfImgPath2 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG2");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _fileSITE_LAYOUT_IMG = Convert.FromBase64String(SITE_LAYOUT_IMG);
                    _fileSITELAYOUT_IMG = byteArrayToImage(_fileSITE_LAYOUT_IMG, strOrderNo + "_SITE_LAYOUT_IMG");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _FILE_ATTACHMENTImg = Convert.FromBase64String(FILE_ATTACHMENT);
                    _sIDFILEATTACHMENTImg = byteArrayToOrderNoPDF(_FILE_ATTACHMENTImg, strOrderNo.ToString().Trim() + "_FILE_ATTACHMENT_PDF", strOrderNo.ToString().Trim());
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in file attachment image" + ex.ToString());
                }
                try
                {
                    string sqlupdate = "update NEW_CONNECTION_SITE_TASKS set";
                    sqlupdate = sqlupdate + " CONNECTED_LOAD='" + Connected_Load.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " USAGE_CATEGORY_OF_SITE='" + Usage_Category_Of_site.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " POLENO_FEEDER_PILLAR_NO='" + Pole_No_Feeder_Pillar_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " METER_NO='" + meter_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " SERVICE_LINE_LENGTH='" + Service_Line_Length.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " BUILDING_HIEGHT='" + Building_Hieght.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " WIRING_COMPLETED='" + Wiring_Completed.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LIFT_INSTALLED='" + Lift_Installed.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LIFT_CERTIFICATE_REQUIRED='" + Lift_Certificate_Required.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " AFFIDAVIT_REQUIRED='" + Affidavit_Required.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " FLOOR='" + Floor.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " TF_SEAL_NO='" + Tf_Seal_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " METERING_POSITION='" + metering_position.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " INITIAL_CF_OK='" + Initial_Cf_OK.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " CA_NO='" + CA_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " AMOUNT='" + Amount.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " APPLIED_PREMISES='" + applied_premises.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " REMARKS='" + remarks.ToString().Trim().Replace("'", "") + "',";
                    sqlupdate = sqlupdate + " SIGN_IMG_PATH='" + _sImgPath.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " BUILDING_IMG1_PATH='" + _sIDProfImgPath1.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " BUILDING_IMG2_PATH='" + _sIDProfImgPath2.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " IMEI_NO='" + IMEI_NO.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LATITUDE='" + strLatitude.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LONGTITUDE='" + strLongtitude.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " FILE_ATTACHMENT='" + _sIDFILEATTACHMENTImg.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " SITE_LAYOUT_IMG='" + _fileSITELAYOUT_IMG.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " CABLE_TYPE='" + CABLE_TYPE.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LEFT_METER_NO='" + LEFT_METER_NO.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " RIGHT_METER_NO='" + RIGHT_METER_NO.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " DT_CODE='" + meter_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " DT_METER_NO='" + RIGHT_METER_NO.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " APPLIED_AREA='" + APPLIED_AREA.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " BUILDING_AREA='" + BUILDING_AREA.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " PASTED_ON_PROPOSED='" + strPasted.ToString().Trim() + "',"; //DT_CODE, DT_METER_NO

                    sqlupdate = sqlupdate + " NEW_BUILDING='" + NEW_BUILDING.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " NORMATIVE_LOAD='" + NORMATIVE_LOAD.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " COVERED_AREA='" + COVERED_AREA.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " PLOT_AREA='" + PLOT_AREA.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " Existing_Meter_No='" + Existing_Meter_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " Encroachment='" + Encroachment.ToString().Trim() + "' ";

                    sqlupdate = sqlupdate + " where ORDERNO='" + strOrderNo.ToString().Trim() + "'";
                    DbFunction objdbfunupdate = new DbFunction();
                    return objdbfunupdate.dmlsinglequeryExp(sqlupdate);
                    //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
                }
                catch (Exception ex)
                {
                    //NewClassFile newClassFile = new NewClassFile();
                    //newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    return ex.Message.ToString();
                }
            }
            else
            {

                byte[] _byImg = null, _byIDProfImg = null, _FILE_ATTACHMENTImg = null, _fileSITE_LAYOUT_IMG;
                string _sImgPath = string.Empty, _sIDProfImgPath1 = string.Empty, _sIDProfImgPath2 = string.Empty, _sIDFILEATTACHMENTImg = string.Empty, _fileSITELAYOUT_IMG = string.Empty;
                try
                {
                    _byImg = Convert.FromBase64String(strsign_Img);
                    _sImgPath = byteArrayToImage(_byImg, strOrderNo + "_NEW_CONNECTION_SIGN");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in sign image" + ex.ToString());
                }
                try
                {
                    _byIDProfImg = Convert.FromBase64String(building_img1);
                    _sIDProfImgPath1 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG1");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _byIDProfImg = Convert.FromBase64String(building_img2);
                    _sIDProfImgPath2 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG2");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _fileSITE_LAYOUT_IMG = Convert.FromBase64String(SITE_LAYOUT_IMG);
                    _fileSITELAYOUT_IMG = byteArrayToImage(_fileSITE_LAYOUT_IMG, strOrderNo + "_SITE_LAYOUT_IMG");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _FILE_ATTACHMENTImg = Convert.FromBase64String(FILE_ATTACHMENT);
                    _sIDFILEATTACHMENTImg = byteArrayToOrderNoPDF(_FILE_ATTACHMENTImg, strOrderNo.ToString().Trim() + "_FILE_ATTACHMENT_PDF", strOrderNo.ToString().Trim());
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in file attachment image" + ex.ToString());
                }
                try
                {
                    string sqlinsert = "INSERT INTO NEW_CONNECTION_SITE_TASKS(CONNECTED_LOAD, USAGE_CATEGORY_OF_SITE, POLENO_FEEDER_PILLAR_NO, ";
                    sqlinsert = sqlinsert + " METER_NO, SERVICE_LINE_LENGTH, BUILDING_HIEGHT, WIRING_COMPLETED, LIFT_INSTALLED, LIFT_CERTIFICATE_REQUIRED,";
                    sqlinsert = sqlinsert + " AFFIDAVIT_REQUIRED, FLOOR, TF_SEAL_NO, METERING_POSITION, INITIAL_CF_OK, CA_NO, AMOUNT, APPLIED_PREMISES, REMARKS, ";
                    sqlinsert = sqlinsert + " ORDERNO,SIGN_IMG_PATH, BUILDING_IMG1_PATH, BUILDING_IMG2_PATH, IMEI_NO,LATITUDE, LONGTITUDE,FILE_ATTACHMENT,SITE_LAYOUT_IMG,CABLE_TYPE, LEFT_METER_NO, RIGHT_METER_NO, APPLIED_AREA, BUILDING_AREA,PASTED_ON_PROPOSED , DT_CODE, DT_METER_NO,";
                    sqlinsert = sqlinsert + " NEW_BUILDING,NORMATIVE_LOAD,COVERED_AREA,PLOT_AREA,Existing_Meter_No,Encroachment)";
                    sqlinsert = sqlinsert + " values('" + Connected_Load.ToString().Trim() + "','" + Usage_Category_Of_site.ToString().Trim() + "','" + Pole_No_Feeder_Pillar_No.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + meter_No.ToString().Trim() + "','" + Service_Line_Length.ToString().Trim() + "','" + Building_Hieght.ToString().Trim() + "','" + Wiring_Completed.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + Lift_Installed.ToString().Trim() + "','" + Lift_Certificate_Required.ToString().Trim() + "','" + Affidavit_Required.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + Floor.ToString().Trim() + "','" + Tf_Seal_No.ToString().Trim() + "','" + metering_position.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + Initial_Cf_OK.ToString().Trim() + "','" + CA_No.ToString().Trim() + "','" + Amount.ToString().Trim() + "','" + applied_premises.ToString().Trim() + "','" + remarks.ToString().Trim().Replace("'", "") + "',";
                    sqlinsert = sqlinsert + " '" + strOrderNo.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + _sImgPath.ToString().Trim() + "','" + _sIDProfImgPath1.ToString().Trim() + "','" + _sIDProfImgPath2.ToString().Trim() + "','" + IMEI_NO.ToString().Trim() + "','" + strLatitude.ToString().Trim() + "','" + strLongtitude.ToString().Trim() + "','" + _sIDFILEATTACHMENTImg.ToString().Trim() + "','" + _fileSITELAYOUT_IMG.ToString().Trim() + "','" + CABLE_TYPE.ToString().Trim() + "','" + LEFT_METER_NO.ToString().Trim() + "','" + RIGHT_METER_NO.ToString().Trim() + "','" + APPLIED_AREA.ToString().Trim() + "','" + BUILDING_AREA.ToString().Trim() + "','" + strPasted.ToString().Trim() + "', '" + meter_No.ToString().Trim() + "', '" + RIGHT_METER_NO.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + NEW_BUILDING + "','" + NORMATIVE_LOAD + "','" + COVERED_AREA + "','" + PLOT_AREA + "','" + Existing_Meter_No + "','" + Encroachment + "')";


                    DbFunction objdbfuninsert = new DbFunction();
                    //return objdbfuninsert.dmlsinglequery(sqlinsert);
                    return objdbfuninsert.dmlsinglequeryExp(sqlinsert);
                    //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
                }
                catch (Exception ex)
                {
                    //NewClassFile newClassFile = new NewClassFile();
                    //newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    //return false;
                    return ex.Message.ToString();
                }

                //string sqlChk = " select 1 from NEW_CONNECTION_SITE_TASKS where upper(ORDERNO)='" + strOrderNo.ToString().Trim().ToUpper() + "'";
                //dt = new DataTable();
                //objdbfun = new DbFunction();
                //dt = objdbfun.dmlgetquery(sqlChk);
                //if (dt.Rows.Count > 0)
                //    return "true";
                //else
                //    return "false";

            }
        }


        public bool Insert_NEW_CONNECTION_SITE_TASKS3(
      string Connected_Load, string Usage_Category_Of_site, string Pole_No_Feeder_Pillar_No,
      string meter_No, string Service_Line_Length, string Building_Hieght, string Wiring_Completed,
      string Lift_Installed, string Lift_Certificate_Required, string Affidavit_Required,
      string Floor, string Tf_Seal_No, string metering_position,
      string Initial_Cf_OK, string CA_No, string Amount, string applied_premises, string remarks,
      string strOrderNo, string strsign_Img, string building_img1, string building_img2, string IMEI_NO, string strLatitude,
      string strLongtitude, string FILE_ATTACHMENT, string SITE_LAYOUT_IMG, string CABLE_TYPE, string LEFT_METER_NO, string RIGHT_METER_NO,
      string APPLIED_AREA, string BUILDING_AREA, string strPasted, string NEW_BUILDING, string NORMATIVE_LOAD, string COVERED_AREA,
       string PLOT_AREA, string Existing_Meter_No, string Encroachment, string _sBuildingHeightRemarks, string _sELCB)
        {

            string sql = " select 1 from NEW_CONNECTION_SITE_TASKS where upper(ORDERNO)='" + strOrderNo.ToString().Trim().ToUpper() + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery(sql);
            if (dt.Rows.Count > 0)
            {
                byte[] _byImg = null, _byIDProfImg = null, _FILE_ATTACHMENTImg = null, _fileSITE_LAYOUT_IMG;
                string _sImgPath = string.Empty, _sIDProfImgPath1 = string.Empty, _sIDProfImgPath2 = string.Empty, _sIDFILEATTACHMENTImg = string.Empty, _fileSITELAYOUT_IMG = string.Empty;
                try
                {
                    _byImg = Convert.FromBase64String(strsign_Img);
                    _sImgPath = byteArrayToImage(_byImg, strOrderNo + "_NEW_CONNECTION_SIGN");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in sign image" + ex.ToString());
                }
                try
                {
                    _byIDProfImg = Convert.FromBase64String(building_img1);
                    _sIDProfImgPath1 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG1");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _byIDProfImg = Convert.FromBase64String(building_img2);
                    _sIDProfImgPath2 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG2");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _fileSITE_LAYOUT_IMG = Convert.FromBase64String(SITE_LAYOUT_IMG);
                    _fileSITELAYOUT_IMG = byteArrayToImage(_fileSITE_LAYOUT_IMG, strOrderNo + "_SITE_LAYOUT_IMG");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _FILE_ATTACHMENTImg = Convert.FromBase64String(FILE_ATTACHMENT);
                    _sIDFILEATTACHMENTImg = byteArrayToOrderNoPDF(_FILE_ATTACHMENTImg, strOrderNo.ToString().Trim() + "_FILE_ATTACHMENT_PDF", strOrderNo.ToString().Trim());
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in file attachment image" + ex.ToString());
                }
                try
                {
                    string sqlupdate = "update NEW_CONNECTION_SITE_TASKS set";
                    sqlupdate = sqlupdate + " CONNECTED_LOAD='" + Connected_Load.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " USAGE_CATEGORY_OF_SITE='" + Usage_Category_Of_site.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " POLENO_FEEDER_PILLAR_NO='" + Pole_No_Feeder_Pillar_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " METER_NO='" + meter_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " SERVICE_LINE_LENGTH='" + Service_Line_Length.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " BUILDING_HIEGHT='" + Building_Hieght.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " WIRING_COMPLETED='" + Wiring_Completed.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LIFT_INSTALLED='" + Lift_Installed.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LIFT_CERTIFICATE_REQUIRED='" + Lift_Certificate_Required.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " AFFIDAVIT_REQUIRED='" + Affidavit_Required.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " FLOOR='" + Floor.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " TF_SEAL_NO='" + Tf_Seal_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " METERING_POSITION='" + metering_position.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " INITIAL_CF_OK='" + Initial_Cf_OK.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " CA_NO='" + CA_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " AMOUNT='" + Amount.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " APPLIED_PREMISES='" + applied_premises.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " REMARKS='" + remarks.ToString().Trim().Replace("'", "") + "',";
                    sqlupdate = sqlupdate + " SIGN_IMG_PATH='" + _sImgPath.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " BUILDING_IMG1_PATH='" + _sIDProfImgPath1.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " BUILDING_IMG2_PATH='" + _sIDProfImgPath2.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " IMEI_NO='" + IMEI_NO.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LATITUDE='" + strLatitude.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LONGTITUDE='" + strLongtitude.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " FILE_ATTACHMENT='" + _sIDFILEATTACHMENTImg.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " SITE_LAYOUT_IMG='" + _fileSITELAYOUT_IMG.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " CABLE_TYPE='" + CABLE_TYPE.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " LEFT_METER_NO='" + LEFT_METER_NO.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " RIGHT_METER_NO='" + RIGHT_METER_NO.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " DT_CODE='" + meter_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " DT_METER_NO='" + RIGHT_METER_NO.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " APPLIED_AREA='" + APPLIED_AREA.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " BUILDING_AREA='" + BUILDING_AREA.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " PASTED_ON_PROPOSED='" + strPasted.ToString().Trim() + "',"; //DT_CODE, DT_METER_NO

                    sqlupdate = sqlupdate + " NEW_BUILDING='" + NEW_BUILDING.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " NORMATIVE_LOAD='" + NORMATIVE_LOAD.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " COVERED_AREA='" + COVERED_AREA.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " PLOT_AREA='" + PLOT_AREA.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " Existing_Meter_No='" + Existing_Meter_No.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " Encroachment='" + Encroachment.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " BUILDING_HIGH_RMK='" + _sBuildingHeightRemarks.ToString().Trim() + "',";
                    sqlupdate = sqlupdate + " ELCB='" + _sELCB.ToString().Trim() + "'";

                    sqlupdate = sqlupdate + " where ORDERNO='" + strOrderNo.ToString().Trim() + "'";
                    DbFunction objdbfunupdate = new DbFunction();
                    return objdbfunupdate.dmlsinglequery(sqlupdate);
                    //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    return false;
                }
            }
            else
            {

                byte[] _byImg = null, _byIDProfImg = null, _FILE_ATTACHMENTImg = null, _fileSITE_LAYOUT_IMG;
                string _sImgPath = string.Empty, _sIDProfImgPath1 = string.Empty, _sIDProfImgPath2 = string.Empty, _sIDFILEATTACHMENTImg = string.Empty, _fileSITELAYOUT_IMG = string.Empty;
                try
                {
                    _byImg = Convert.FromBase64String(strsign_Img);
                    _sImgPath = byteArrayToImage(_byImg, strOrderNo + "_NEW_CONNECTION_SIGN");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in sign image" + ex.ToString());
                }
                try
                {
                    _byIDProfImg = Convert.FromBase64String(building_img1);
                    _sIDProfImgPath1 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG1");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _byIDProfImg = Convert.FromBase64String(building_img2);
                    _sIDProfImgPath2 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG2");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _fileSITE_LAYOUT_IMG = Convert.FromBase64String(SITE_LAYOUT_IMG);
                    _fileSITELAYOUT_IMG = byteArrayToImage(_fileSITE_LAYOUT_IMG, strOrderNo + "_SITE_LAYOUT_IMG");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                try
                {
                    _FILE_ATTACHMENTImg = Convert.FromBase64String(FILE_ATTACHMENT);
                    _sIDFILEATTACHMENTImg = byteArrayToOrderNoPDF(_FILE_ATTACHMENTImg, strOrderNo.ToString().Trim() + "_FILE_ATTACHMENT_PDF", strOrderNo.ToString().Trim());
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in file attachment image" + ex.ToString());
                }
                try
                {
                    string sqlinsert = "INSERT INTO NEW_CONNECTION_SITE_TASKS(CONNECTED_LOAD, USAGE_CATEGORY_OF_SITE, POLENO_FEEDER_PILLAR_NO, ";
                    sqlinsert = sqlinsert + " METER_NO, SERVICE_LINE_LENGTH, BUILDING_HIEGHT, WIRING_COMPLETED, LIFT_INSTALLED, LIFT_CERTIFICATE_REQUIRED,";
                    sqlinsert = sqlinsert + " AFFIDAVIT_REQUIRED, FLOOR, TF_SEAL_NO, METERING_POSITION, INITIAL_CF_OK, CA_NO, AMOUNT, APPLIED_PREMISES, REMARKS, ";
                    sqlinsert = sqlinsert + " ORDERNO,SIGN_IMG_PATH, BUILDING_IMG1_PATH, BUILDING_IMG2_PATH, IMEI_NO,LATITUDE, LONGTITUDE,FILE_ATTACHMENT,SITE_LAYOUT_IMG,CABLE_TYPE, LEFT_METER_NO, RIGHT_METER_NO, APPLIED_AREA, BUILDING_AREA,PASTED_ON_PROPOSED , DT_CODE, DT_METER_NO,";
                    sqlinsert = sqlinsert + " NEW_BUILDING,NORMATIVE_LOAD,COVERED_AREA,PLOT_AREA,Existing_Meter_No,Encroachment,BUILDING_HIGH_RMK,ELCB)";
                    sqlinsert = sqlinsert + " values('" + Connected_Load.ToString().Trim() + "','" + Usage_Category_Of_site.ToString().Trim() + "','" + Pole_No_Feeder_Pillar_No.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + meter_No.ToString().Trim() + "','" + Service_Line_Length.ToString().Trim() + "','" + Building_Hieght.ToString().Trim() + "','" + Wiring_Completed.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + Lift_Installed.ToString().Trim() + "','" + Lift_Certificate_Required.ToString().Trim() + "','" + Affidavit_Required.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + Floor.ToString().Trim() + "','" + Tf_Seal_No.ToString().Trim() + "','" + metering_position.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + Initial_Cf_OK.ToString().Trim() + "','" + CA_No.ToString().Trim() + "','" + Amount.ToString().Trim() + "','" + applied_premises.ToString().Trim() + "','" + remarks.ToString().Trim().Replace("'", "") + "',";
                    sqlinsert = sqlinsert + " '" + strOrderNo.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + _sImgPath.ToString().Trim() + "','" + _sIDProfImgPath1.ToString().Trim() + "','" + _sIDProfImgPath2.ToString().Trim() + "','" + IMEI_NO.ToString().Trim() + "','" + strLatitude.ToString().Trim() + "','" + strLongtitude.ToString().Trim() + "','" + _sIDFILEATTACHMENTImg.ToString().Trim() + "','" + _fileSITELAYOUT_IMG.ToString().Trim() + "','" + CABLE_TYPE.ToString().Trim() + "','" + LEFT_METER_NO.ToString().Trim() + "','" + RIGHT_METER_NO.ToString().Trim() + "','" + APPLIED_AREA.ToString().Trim() + "','" + BUILDING_AREA.ToString().Trim() + "','" + strPasted.ToString().Trim() + "', '" + meter_No.ToString().Trim() + "', '" + RIGHT_METER_NO.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + NEW_BUILDING + "','" + NORMATIVE_LOAD + "','" + COVERED_AREA + "','" + PLOT_AREA + "','" + Existing_Meter_No + "','" + Encroachment + "','" + _sBuildingHeightRemarks.ToString().Trim().Replace("'", "") + "','" + _sELCB + "')";


                    DbFunction objdbfuninsert = new DbFunction();
                    return objdbfuninsert.dmlsinglequery(sqlinsert);
                    //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    return false;
                }
            }
        }

        public bool update_NEW_CONNECTION_SITE_TASKS_SCAN_FOR_AFFIDAVIT(
        string strOrderNo, string SCAN_FOR_AFFIDAVIT)
        {
            byte[] _SCAN_FOR_AFFIDAVIT = null;
            string _sIDSCAN_FOR_AFFIDAVIT = string.Empty;
            try
            {
                _SCAN_FOR_AFFIDAVIT = Convert.FromBase64String(SCAN_FOR_AFFIDAVIT);
                _sIDSCAN_FOR_AFFIDAVIT = byteArrayToOrderNoPDF(_SCAN_FOR_AFFIDAVIT,
                    strOrderNo.ToString().Trim() + "SCAN_FOR_AFFIDAVIT", strOrderNo.ToString().Trim());
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in file attachment image" + ex.ToString());
            }
            try
            {
                string sql = "update NEW_CONNECTION_SITE_TASKS set SCAN_FOR_AFFIDAVIT='" + _sIDSCAN_FOR_AFFIDAVIT.ToString().Trim() + "'  where ORDERNO='" + strOrderNo.ToString().Trim() + "' ";
                DbFunction objdbfun = new DbFunction();
                return objdbfun.dmlsinglequery(sql);
                //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }
        public bool NEW_CONNECTION_SITE_STATUS(string strOrderNo, string strStatus, string strNewRemarks, string strRescheduledate)
        {
            try
            {
                string sql = "update NEW_CONNECTION_SITE_TASKS set STATUS='" + strStatus.ToString().Trim() + "',NEW_REMARKS='" + strNewRemarks.ToString().Trim().Replace("'", "") + "',RESCHEDULE_DATE=to_date('" + strRescheduledate.ToString().Trim() + "','dd/MM/yyyy')  where ORDERNO='" + strOrderNo.ToString().Trim() + "'";
                DbFunction objdbfun = new DbFunction();
                return objdbfun.dmlsinglequery(sql);
                //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }
        public bool update_NEW_CONNECTION_SITE_TASKS_SCAN_FOR_ADDRESS_PROOF(
        string strOrderNo, string SCAN_FOR_ADDRESS_PROOF)
        {
            byte[] _SCAN_FOR_ADDRESS_PROOF = null;
            string _sIDSCAN_FOR_ADDRESS_PROOF = string.Empty;
            try
            {
                _SCAN_FOR_ADDRESS_PROOF = Convert.FromBase64String(SCAN_FOR_ADDRESS_PROOF);
                _sIDSCAN_FOR_ADDRESS_PROOF = byteArrayToOrderNoPDF(_SCAN_FOR_ADDRESS_PROOF,
                    strOrderNo.ToString().Trim() + "SCAN_FOR_ADDRESS_PROOF", strOrderNo.ToString().Trim());
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in file attachment image" + ex.ToString());
            }

            try
            {
                string sql = "update NEW_CONNECTION_SITE_TASKS set SCAN_FOR_ADDRESS_PROOF='" + _sIDSCAN_FOR_ADDRESS_PROOF.ToString().Trim() + "'  where ORDERNO='" + strOrderNo.ToString().Trim() + "' ";
                DbFunction objdbfun = new DbFunction();
                return objdbfun.dmlsinglequery(sql);
                //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public bool update_NEW_CONNECTION_SITE_TASKS_SCAN_FOR_ID_PROOF(
        string strOrderNo, string SCAN_FOR_ID_PROOF)
        {
            byte[] _SCAN_FOR_ID_PROOF = null;
            string _sIDSCAN_FOR_ID_PROOF = string.Empty;
            try
            {
                _SCAN_FOR_ID_PROOF = Convert.FromBase64String(SCAN_FOR_ID_PROOF);
                _sIDSCAN_FOR_ID_PROOF = byteArrayToOrderNoPDF(_SCAN_FOR_ID_PROOF,
                    strOrderNo.ToString().Trim() + "SCAN_FOR_ID_PROOF", strOrderNo.ToString().Trim());
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in file attachment image" + ex.ToString());
            }

            try
            {
                string sql = "update NEW_CONNECTION_SITE_TASKS set SCAN_FOR_ID_PROOF='" + _sIDSCAN_FOR_ID_PROOF.ToString().Trim() + "'  where ORDERNO='" + strOrderNo.ToString().Trim() + "' ";
                DbFunction objdbfun = new DbFunction();
                return objdbfun.dmlsinglequery(sql);
                //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public bool update_NEW_CONNECTION_SITE_TASKS_SCAN_FOR_Application(
        string strOrderNo, string strScan_for_Application)
        {
            byte[] _SCAN_FOR_Application = null;
            string _sIDSCAN_FOR_Application = string.Empty;
            try
            {
                _SCAN_FOR_Application = Convert.FromBase64String(strScan_for_Application);
                _sIDSCAN_FOR_Application = byteArrayToOrderNoPDF(_SCAN_FOR_Application,
                    strOrderNo.ToString().Trim(), strOrderNo.ToString().Trim());
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in file attachment image" + ex.ToString());
            }

            try
            {
                string sql = "update NEW_CONNECTION_SITE_TASKS set SCAN_FOR_APPLICATION='" + _sIDSCAN_FOR_Application.ToString().Trim() + "'  where ORDERNO='" + strOrderNo.ToString().Trim() + "' ";
                DbFunction objdbfun = new DbFunction();
                return objdbfun.dmlsinglequery(sql);
                //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public bool update_NEW_CONNECTION_SITE_TASKS_SCAN_FOR_Ownership(
        string strOrderNo, string strScan_for_Ownership)
        {
            byte[] _SCAN_FOR_Ownership = null;
            string _sIDSCAN_FOR_Ownership = string.Empty;
            try
            {
                _SCAN_FOR_Ownership = Convert.FromBase64String(strScan_for_Ownership);
                _sIDSCAN_FOR_Ownership = byteArrayToOrderNoPDF(_SCAN_FOR_Ownership,
                    strOrderNo.ToString().Trim(), strOrderNo.ToString().Trim());
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in file attachment image" + ex.ToString());
            }

            try
            {
                string sql = "update NEW_CONNECTION_SITE_TASKS set SCAN_FOR_OWNERSHIP='" + _sIDSCAN_FOR_Ownership.ToString().Trim() + "'  where ORDERNO='" + strOrderNo.ToString().Trim() + "' ";
                DbFunction objdbfun = new DbFunction();
                return objdbfun.dmlsinglequery(sql);
                //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }
        public bool update_NEW_CONNECTION_SITE_TASKS_SCAN_FOR_OTHER(
         string strOrderNo, string SCAN_FOR_OTHER)
        {
            byte[] _SCAN_FOR_OTHER = null;
            string _sIDSCAN_FOR_OTHER = string.Empty;
            try
            {
                _SCAN_FOR_OTHER = Convert.FromBase64String(SCAN_FOR_OTHER);
                _sIDSCAN_FOR_OTHER = byteArrayToOrderNoPDF(_SCAN_FOR_OTHER,
                    strOrderNo.ToString().Trim(), strOrderNo.ToString().Trim());
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in file attachment image" + ex.ToString());
            }

            try
            {
                string sql = "update NEW_CONNECTION_SITE_TASKS set SCAN_FOR_OTHER='" + _sIDSCAN_FOR_OTHER.ToString().Trim() + "'  where ORDERNO='" + strOrderNo.ToString().Trim() + "' ";
                DbFunction objdbfun = new DbFunction();
                return objdbfun.dmlsinglequery(sql);
                //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public static DataTable ISUSTD_USER_OLD(string strUser_Name, string strPassword)
        {
            string sql = " select USER_NAME, PASSWORD, NAME, IMEI_NO from mobapp.ISUSTD_USER where upper(USER_NAME)='" + strUser_Name.ToString().Trim().ToUpper() + "' and  PASSWORD='" + strPassword.ToString().Trim() + "'";
            //string sql = " select USER_NAME, PASSWORD, NAME, IMEI_NO from ISUSTD_USER where upper(USER_NAME)='" + strUser_Name.ToString().Trim().ToUpper() + "' and  PASSWORD='" + strPassword.ToString().Trim() + "'";// and IMEI_NO='" + strIMEI_No.ToString().Trim() + "'";
            //string sql = " select '1' USER_NAME,'2' PASSWORD,'3' NAME,'4' IMEI_NO from dual ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery(sql);
            return dt;
        }
        public DataTable ISUSTD_USER(string strUser_Name, string strPassword, string strIMEI_No)
        {
            string sql = " select USER_NAME, PASSWORD, NAME, IMEI_NO from ISUSTD_USER where upper(USER_NAME)='" + strUser_Name.ToString().Trim().ToUpper() + "' and  PASSWORD='" + strPassword.ToString().Trim() + "' ";

            //string sql = " select '1' USER_NAME,'2' PASSWORD,'3' NAME,'4' IMEI_NO from dual ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery(sql);
            return dt;
        }

        public bool NEW_CONNECTION_SITE_TASKS1(string strOrderNo, string strCode_Group, string strTask_Code)
        {
            string sql = " select 1 from CATALOG_SELECTION where upper(ORDER_NO)='" + strOrderNo.ToString().Trim().ToUpper() + "' and CODE_GROUP='" + strCode_Group.ToString().Trim() + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery(sql);
            if (dt.Rows.Count > 0)
            {
                try
                {
                    string sqlupdate = "update CATALOG_SELECTION set  TASK_CODE='" + strTask_Code.ToString().Trim() + "'";
                    sqlupdate = sqlupdate + " where ORDER_NO='" + strOrderNo.ToString().Trim() + "' and CODE_GROUP='" + strCode_Group.ToString().Trim() + "'";
                    DbFunction objdbfunupdate = new DbFunction();
                    return objdbfunupdate.dmlsinglequery(sqlupdate);
                    //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    return false;
                }
            }
            else
            {

                try
                {
                    string sqlinsert = "INSERT INTO CATALOG_SELECTION(ORDER_NO,CODE_GROUP,TASK_CODE)";
                    sqlinsert = sqlinsert + " VALUES('" + strOrderNo.ToString().Trim() + "','" + strCode_Group.ToString().Trim() + "','" + strTask_Code.ToString().Trim() + "')";
                    DbFunction objdbfuninsert = new DbFunction();
                    return objdbfuninsert.dmlsinglequery(sqlinsert);
                    //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    return false;
                }
            }
        }
        public bool Insert_sign_Img(string strOrderNo, string strsign_Img, string BUILDING_IMG1, string BUILDING_IMG2)
        {
            string sql = "select 1 from CATALOG_SELECTION_SIGN where upper(ORDER_NO)='" + strOrderNo.ToString().Trim().ToUpper() + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery(sql);
            if (dt.Rows.Count > 0)
            {
                try
                {
                    byte[] _byImg = null, _byIDProfImg = null;
                    string _sImgPath = string.Empty, _sIDProfImgPath1 = string.Empty, _sIDProfImgPath2 = string.Empty;
                    try
                    {
                        _byImg = Convert.FromBase64String(strsign_Img);
                        _sImgPath = byteArrayToImage(_byImg, strOrderNo + "_NEW_CONNECTION_SIGN");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile newClassFile = new NewClassFile();
                        newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in sign image" + ex.ToString());
                    }
                    try
                    {
                        _byIDProfImg = Convert.FromBase64String(BUILDING_IMG1);
                        _sIDProfImgPath1 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG1");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile newClassFile = new NewClassFile();
                        newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                    }

                    try
                    {
                        _byIDProfImg = Convert.FromBase64String(BUILDING_IMG2);
                        _sIDProfImgPath2 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG2");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile newClassFile = new NewClassFile();
                        newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                    }
                    string sqlupdate = "update CATALOG_SELECTION_SIGN set SIGN_IMG_PATH='" + _sImgPath.ToString().Trim() + "',BUILDING_IMG1_PATH='" + _sIDProfImgPath1.ToString().Trim() + "',BUILDING_IMG2_PATH='" + _sIDProfImgPath2.ToString().Trim() + "' where ORDER_NO='" + strOrderNo.ToString().Trim() + "'";
                    DbFunction objdbfunupdate = new DbFunction();
                    return objdbfun.dmlsinglequery(sqlupdate);
                    //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    return false;
                }
            }
            else
            {
                try
                {
                    byte[] _byImg = null, _byIDProfImg = null;
                    string _sImgPath = string.Empty, _sIDProfImgPath1 = string.Empty, _sIDProfImgPath2 = string.Empty;
                    try
                    {
                        _byImg = Convert.FromBase64String(strsign_Img);
                        _sImgPath = byteArrayToImage(_byImg, strOrderNo + "_NEW_CONNECTION_SIGN");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile newClassFile = new NewClassFile();
                        newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in sign image" + ex.ToString());
                    }
                    try
                    {
                        _byIDProfImg = Convert.FromBase64String(BUILDING_IMG1);
                        _sIDProfImgPath1 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG1");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile newClassFile = new NewClassFile();
                        newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                    }

                    try
                    {
                        _byIDProfImg = Convert.FromBase64String(BUILDING_IMG2);
                        _sIDProfImgPath2 = byteArrayToImage(_byIDProfImg, strOrderNo + "_BUILDING_IMG2");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile newClassFile = new NewClassFile();
                        newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                    }

                    string sqlinsert = "INSERT INTO CATALOG_SELECTION_SIGN(ORDER_NO,SIGN_IMG_PATH,BUILDING_IMG1_PATH,BUILDING_IMG2_PATH)";
                    sqlinsert = sqlinsert + " VALUES('" + strOrderNo.ToString().Trim() + "','" + _sImgPath.ToString().Trim() + "','" + _sIDProfImgPath1.ToString().Trim() + "','" + _sIDProfImgPath2.ToString().Trim() + "')";
                    DbFunction objdbfuninsert = new DbFunction();
                    return objdbfuninsert.dmlsinglequery(sqlinsert);
                    //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    return false;
                }
            }
        }

        ////ritesh

        //public void converttoapk()
        //{

        //     //DirectoryInfo _DirInfo = new DirectoryInfo(HttpContext.Current.Server.MapPath("~/mobileapk"));
        //    Byte[] bytes = File.ReadAllBytes(HttpContext.Current.Server.MapPath("~/mobileapk/mobile.apk"));
        //     string file = Convert.ToBase64String(bytes);
        //     byte[] bytes1 = Convert.FromBase64String(file);

        //     System.IO.FileStream stream = new FileStream(@"c:\file.apk", FileMode.CreateNew);
        //     System.IO.BinaryWriter write = new BinaryWriter(stream);
        //     write.Write(bytes1, 0, bytes1.Length);
        //     write.Close();

        //     return file;    


        //}

        //private  string encode(object _byapk)
        //{
        //    try
        //    {

        //        //BinaryWriter fs = new BinaryWriter(new FileStream(_sPath, FileMode.Append, FileAccess.Write));
        //        //fs.Write(byteArrayIn);
        //        //fs.Close();
        //        //return _sPath;
        //        ////MemoryStream ms = new MemoryStream(byteArrayIn);
        //        ////Image returnImage = Image.FromStream(ms);
        //        ////returnImage.s
        //        ////return returnImage;
        //    } 
        //    catch (Exception ex)
        //    {
        //        NewClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
        //        return "";
        //    }
        //}



        public bool Insert_pole_TF_RC_Premises_KCC(string strOrderNo, string strPole_Img, string strTF_Img, string strRC_Premises_Img,
                                            string str_OtherImg2, string str_OtherImg3, string str_OtherImg4)
        {
            try
            {
                byte[] _byImg = null, _byIDProfImg = null, _byIDRCImg = null;
                byte[] _byOtherImg2 = null, _byOtherImg3 = null, _byOtherImg4 = null;

                string _sImgPath = string.Empty, _sIDProfImgPath1 = string.Empty, _sIDProfImgPath2 = string.Empty;
                string _sOtherImg2 = string.Empty, _sOtherImg3 = string.Empty, _sOtherImg4 = string.Empty;

                try
                {
                    _byImg = Convert.FromBase64String(strPole_Img);
                    _sImgPath = byteArrayToImage(_byImg, strOrderNo + "_POLE_IMG");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in sign image" + ex.ToString());
                }
                try
                {
                    _byIDProfImg = Convert.FromBase64String(strTF_Img);
                    _sIDProfImgPath1 = byteArrayToImage(_byIDProfImg, strOrderNo + "_TF_IMG");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }
                try
                {
                    _byIDRCImg = Convert.FromBase64String(strRC_Premises_Img);
                    _sIDProfImgPath2 = byteArrayToImage(_byIDRCImg, strOrderNo + "_RC_PREMISES");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }



                try
                {
                    _byOtherImg2 = Convert.FromBase64String(str_OtherImg2);
                    _sOtherImg2 = byteArrayToImage(_byOtherImg2, strOrderNo + "_OTHER2");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }
                try
                {
                    _byOtherImg3 = Convert.FromBase64String(str_OtherImg3);
                    _sOtherImg3 = byteArrayToImage(_byOtherImg3, strOrderNo + "_OTHER3");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }
                try
                {
                    _byOtherImg4 = Convert.FromBase64String(str_OtherImg4);
                    _sOtherImg4 = byteArrayToImage(_byOtherImg4, strOrderNo + "_OTHER4");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }

                string sql = " UPDATE NEW_CONNECTION_SITE_TASKS SET POLE_IMG='" + _sImgPath.ToString().Trim() + "', TF_IMG='" + _sIDProfImgPath1.ToString().Trim() + "', ";
                sql = sql + " RC_PREMISES='" + _sIDProfImgPath2.ToString().Trim() + "',SIGN_IMG_NEW='" + _sOtherImg2.ToString().Trim() + "',BUILDING_IMG1_NEW='" + _sOtherImg3.ToString().Trim() + "',";
                sql = sql + " BUILDING_IMG2_NEW='" + _sOtherImg4.ToString().Trim() + "' WHERE ORDERNO='" + strOrderNo.ToString().Trim() + "'";

                DbFunction objdbfun = new DbFunction();
                return objdbfun.dmlsinglequery(sql);
                //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }



        public bool Insert_pole_TF_RC_Premises(string strOrderNo, string strPole_Img, string strTF_Img, string strRC_Premises_Img)
        {
            try
            {
                byte[] _byImg = null, _byIDProfImg = null;
                string _sImgPath = string.Empty, _sIDProfImgPath1 = string.Empty, _sIDProfImgPath2 = string.Empty;
                try
                {
                    _byImg = Convert.FromBase64String(strPole_Img);
                    _sImgPath = byteArrayToImage(_byImg, strOrderNo + "_POLE_IMG");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in sign image" + ex.ToString());
                }
                try
                {
                    _byIDProfImg = Convert.FromBase64String(strTF_Img);
                    _sIDProfImgPath1 = byteArrayToImage(_byIDProfImg, strOrderNo + "_TF_IMG");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }
                try
                {
                    _byIDProfImg = Convert.FromBase64String(strRC_Premises_Img);
                    _sIDProfImgPath2 = byteArrayToImage(_byIDProfImg, strOrderNo + "_RC_PREMISES");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in building image" + ex.ToString());
                }
                string sql = "UPDATE NEW_CONNECTION_SITE_TASKS SET POLE_IMG='" + _sImgPath.ToString().Trim() + "', TF_IMG='" + _sIDProfImgPath1.ToString().Trim() + "', RC_PREMISES='" + _sIDProfImgPath2.ToString().Trim() + "' WHERE ORDERNO='" + strOrderNo.ToString().Trim() + "'";
                DbFunction objdbfun = new DbFunction();
                return objdbfun.dmlsinglequery(sql);
                //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }


        public bool Insert_DOCLIST(string strOrderNo, string strC_001, string strC_002
        , string strC_003, string strC_004, string strC_005
        , string strC_006, string strC_007, string strC_008
        , string strC_009, string strC_010, string strC_011
        , string strC_012, string strC_013, string strC_014
        , string strC_015, string strC_016, string strC_017
        , string strC_018, string strC_019, string strC_020
        , string strC_021, string strC_022, string strC_023
        , string strC_024, string strC_025, string strC_026
        , string strC_027, string strC_028, string strC_029
        , string strC_030, string strC_031, string strC_032
        , string strC_033, string strC_034, string strC_035
        , string strC_036, string strC_037, string strC_038
        , string strC_039, string strC_040, string strC_041, string strC_070, string strsign_Img)
        {
            try
            {
                byte[] _byImg = null;
                string _sImgPath = string.Empty, _sIDProfImgPath = string.Empty;
                try
                {
                    _byImg = Convert.FromBase64String(strsign_Img);
                    _sImgPath = byteArrayToImage(_byImg, strOrderNo + "_OrderSign");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in sign image" + ex.ToString());
                }
                string sql = "INSERT INTO DOCLIST(ORDER_NO, DOCUMENT_TYPE01, DOCUMENT_TYPE02, DOCUMENT_TYPE03, DOCUMENT_TYPE04, DOCUMENT_TYPE05, DOCUMENT_TYPE06, DOCUMENT_TYPE07, DOCUMENT_TYPE08, DOCUMENT_TYPE09, DOCUMENT_TYPE10, DOCUMENT_TYPE11, DOCUMENT_TYPE12, DOCUMENT_TYPE13, DOCUMENT_TYPE14, DOCUMENT_TYPE15, DOCUMENT_TYPE16, DOCUMENT_TYPE17, DOCUMENT_TYPE18, DOCUMENT_TYPE19, DOCUMENT_TYPE20, DOCUMENT_TYPE21, DOCUMENT_TYPE22, DOCUMENT_TYPE23, DOCUMENT_TYPE24, DOCUMENT_TYPE25, DOCUMENT_TYPE26, DOCUMENT_TYPE27, DOCUMENT_TYPE28, DOCUMENT_TYPE29, DOCUMENT_TYPE30, DOCUMENT_TYPE31, DOCUMENT_TYPE32, DOCUMENT_TYPE33, DOCUMENT_TYPE34, DOCUMENT_TYPE35, DOCUMENT_TYPE36, DOCUMENT_TYPE37, DOCUMENT_TYPE38, DOCUMENT_TYPE39, DOCUMENT_TYPE40, DOCUMENT_TYPE41, DOCUMENT_TYPE70,SIGN_IMG_PATH)";
                sql = sql + " VALUES('" + strOrderNo.ToString().Trim() + "','" + strC_001 + "','" + strC_002 + "','" + strC_003 + "',";
                sql = sql + " '" + strC_004 + "','" + strC_005 + "','" + strC_006 + "','" + strC_007 + "',";
                sql = sql + " '" + strC_008 + "',";
                sql = sql + " '" + strC_009 + "','" + strC_010 + "','" + strC_011 + "','" + strC_012 + "',";
                sql = sql + " '" + strC_013 + "','" + strC_014 + "','" + strC_015 + "','" + strC_016 + "',";
                sql = sql + " '" + strC_017 + "','" + strC_018 + "','" + strC_019 + "','" + strC_020 + "',";
                sql = sql + " '" + strC_021 + "','" + strC_022 + "','" + strC_023 + "','" + strC_024 + "',";
                sql = sql + " '" + strC_025 + "','" + strC_026 + "','" + strC_027 + "','" + strC_028 + "',";
                sql = sql + " '" + strC_029 + "','" + strC_030 + "','" + strC_031 + "','" + strC_032 + "',";
                sql = sql + " '" + strC_033 + "','" + strC_034 + "','" + strC_035 + "','" + strC_036 + "',";
                sql = sql + " '" + strC_037 + "','" + strC_038 + "','" + strC_039 + "','" + strC_040 + "',";
                sql = sql + " '" + strC_041 + "','" + strC_070 + "','" + _sImgPath.ToString().Trim() + "')";
                DbFunction objdbfun = new DbFunction();
                return objdbfun.dmlsinglequery(sql);
                //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }
        public bool Insert_DOCLIST_NEW(string strOrderNo, string strDocument_Type)
        {
            //string sql = "select 1 from DOCLIST_NEW where upper(ORDER_NO)='" + strOrderNo.ToString().Trim().ToUpper() + "' and DOCUMENT_TYPE='" + strDocument_Type.ToString().Trim() + "'";
            //DataTable dt = new DataTable();
            //DbFunction objdbfun = new DbFunction();
            //dt = objdbfun.dmlgetquery(sql);
            //if (dt.Rows.Count > 0)
            //{
            //    try
            //    {
            //        string sqlupdate = "update DOCLIST_NEW set ORDER_NO='" + strOrderNo.ToString().Trim() + "',DOCUMENT_TYPE='" + strDocument_Type.ToString().Trim() + "'";
            //        sqlupdate = sqlupdate + " where ORDER_NO='" + strOrderNo.ToString().Trim() + "' and DOCUMENT_TYPE='" + strDocument_Type.ToString().Trim() + "'";
            //        DbFunction objdbfunsqlupdate = new DbFunction();
            //        return objdbfunsqlupdate.dmlsinglequery(sqlupdate);                    
            //    }
            //    catch (Exception ex)
            //    {
            //        NewClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
            //        return false;
            //    }
            //}
            //else
            //{
            try
            {
                string sqlinsert = "INSERT INTO DOCLIST_NEW(ORDER_NO,DOCUMENT_TYPE)";
                sqlinsert = sqlinsert + " VALUES('" + strOrderNo.ToString().Trim() + "','" + strDocument_Type.ToString().Trim() + "')";
                DbFunction objdbfunsqlinsert = new DbFunction();
                return objdbfunsqlinsert.dmlsinglequery(sqlinsert);
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
            // }
        }
        public bool Insert_DOCLIST_sign(string strOrderNo, string strsign_Img)
        {
            string sql = "select 1 from DOCLIST_SIGN where upper(ORDER_NO)='" + strOrderNo.ToString().Trim().ToUpper().Trim() + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery(sql);
            if (dt.Rows.Count > 0)
            {
                try
                {
                    byte[] _byImg = null;
                    string _sImgPath = string.Empty, _sIDProfImgPath = string.Empty;
                    try
                    {
                        _byImg = Convert.FromBase64String(strsign_Img);
                        _sImgPath = byteArrayToImage(_byImg, strOrderNo + "_DocListSign");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile newClassFile = new NewClassFile();
                        newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in sign image" + ex.ToString());
                    }
                    string sqlupdate = "update DOCLIST_SIGN set SIGN_IMG_PATH='" + _sImgPath.ToString().Trim() + "' where ORDER_NO='" + strOrderNo.ToString().Trim() + "'";
                    DbFunction objdbfunupdate = new DbFunction();
                    return objdbfunupdate.dmlsinglequery(sqlupdate);
                    //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    return false;
                }
            }
            else
            {

                try
                {
                    byte[] _byImg = null;
                    string _sImgPath = string.Empty, _sIDProfImgPath = string.Empty;
                    try
                    {
                        _byImg = Convert.FromBase64String(strsign_Img);
                        _sImgPath = byteArrayToImage(_byImg, strOrderNo + "_DocListSign");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile newClassFile = new NewClassFile();
                        newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in sign image" + ex.ToString());
                    }
                    string sqlinsert = "INSERT INTO DOCLIST_SIGN(ORDER_NO,SIGN_IMG_PATH)";
                    sqlinsert = sqlinsert + " VALUES('" + strOrderNo.ToString().Trim() + "','" + _sImgPath.ToString().Trim() + "')";
                    DbFunction objdbfunsqlinsert = new DbFunction();
                    return objdbfunsqlinsert.dmlsinglequery(sqlinsert);
                    //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    return false;
                }
            }
        }
        public bool Insert_CA_building_img(string strCA, string strbuilding_img)
        {
            //string sql = "select CA_NO from CA_building_img where upper(CA_NO)='" + strCA.ToString().Trim().ToUpper().Trim() + "'";
            //DataTable dt = new DataTable();
            //DbFunction objdbfun = new DbFunction();
            //dt = objdbfun.dmlgetquery(sql);
            //if (dt.Rows.Count > 0)
            //{
            //    try
            //    {
            //        byte[] _byImg = null;
            //        string _sImgPath = string.Empty, _sIDProfImgPath = string.Empty;
            //        try
            //        {
            //            _byImg = Convert.FromBase64String(strbuilding_img);
            //            _sImgPath = byteArrayToImage(_byImg, strCA + "_Premises");
            //        }
            //        catch (Exception ex)
            //        {
            //            NewClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in sign image" + ex.ToString());
            //        }
            //        string sqlupdate = "update CA_building_img set building_img_PATH='" + _sImgPath.ToString().Trim() + "'";
            //        sqlupdate = sqlupdate + " where CA_NO='"+strCA.ToString().Trim()+"'";
            //        DbFunction objdbfunupdate = new DbFunction();
            //        return objdbfunupdate.dmlsinglequery(sqlupdate);
            //        //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
            //    }
            //    catch (Exception ex)
            //    {
            //        NewClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
            //        return false;
            //    }
            //}
            //else
            //{

            try
            {
                byte[] _byImg = null;
                string _sImgPath = string.Empty, _sIDProfImgPath = string.Empty;
                try
                {
                    _byImg = Convert.FromBase64String(strbuilding_img);
                    _sImgPath = byteArrayToImage(_byImg, strCA + "_Premises");
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in sign image" + ex.ToString());
                }
                string sqlinsert = "INSERT INTO CA_building_img(CA_NO,building_img_PATH)";
                sqlinsert = sqlinsert + " VALUES('" + strCA.ToString().Trim() + "','" + _sImgPath.ToString().Trim() + "')";
                DbFunction objdbfunsqlinsert = new DbFunction();
                return objdbfunsqlinsert.dmlsinglequery(sqlinsert);
                //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
            // }
        }

        public bool Insert_IR_DATA(string strOrderNo, string strdivision,
            string strbp, string strapplicantName, string strcategory,
            string strfathersName, string strloadKW, string strloadKVA, string strappliedAddress, string strcontactNo,
            string strvisitDate, string strtime, string strdocReceived, string strcreation, string strenggName, string strEmail_id)
        {

            string sql = "select ORDERNO from IR_DATA where upper(ORDERNO)='" + strOrderNo.ToString().Trim().ToUpper() + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery(sql);
            if (dt.Rows.Count > 0)
            {
                try
                {
                    string upsql = "UPDATE IR_DATA SET  DIVISION='" + strdivision.ToString().Trim() + "', ";
                    upsql = upsql + " BP='" + strbp.ToString().Trim() + "',";
                    upsql = upsql + " APPLICANTNAME='" + strapplicantName.ToString().Trim() + "', ";
                    upsql = upsql + " CATEGORY='" + strcategory.ToString().Trim() + "', ";
                    upsql = upsql + " FATHERSNAME='" + strfathersName.ToString().Trim() + "', ";
                    upsql = upsql + " LOADKW='" + strloadKW.ToString().Trim() + "', ";
                    upsql = upsql + " LOADKVA='" + strloadKVA.ToString().Trim() + "', ";
                    upsql = upsql + " APPLIEDADDRESS='" + strappliedAddress.ToString().Trim() + "', ";
                    upsql = upsql + " CONTACTNO='" + strcontactNo.ToString().Trim() + "', ";
                    upsql = upsql + " VISITDATE=TO_DATE('" + strvisitDate.ToString().Trim() + "','dd/MM/yyyy'), ";
                    upsql = upsql + " TIME='" + strtime.ToString().Trim() + "', ";
                    upsql = upsql + " DOCRECEIVED='" + strdocReceived.ToString().Trim() + "', ";
                    upsql = upsql + " CREATION='" + strcreation.ToString().Trim() + "',";
                    upsql = upsql + " ENGGNAME='" + strenggName.ToString().Trim() + "',";
                    upsql = upsql + " EMAIL_ID='" + strEmail_id.ToString().Trim() + "'";
                    upsql = upsql + " WHERE ORDERNO='" + strOrderNo.ToString().Trim() + "'";
                    DbFunction objdbfunup = new DbFunction();
                    return objdbfunup.dmlsinglequery(upsql);
                    //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    return false;
                }
            }
            else
            {

                try
                {
                    string sql_ir_ins = "INSERT INTO IR_DATA(ORDERNO, DIVISION, BP, APPLICANTNAME, CATEGORY, FATHERSNAME, LOADKW, LOADKVA, APPLIEDADDRESS, CONTACTNO, VISITDATE, TIME, DOCRECEIVED, CREATION, ENGGNAME,EMAIL_ID)";
                    sql_ir_ins = sql_ir_ins + " VALUES('" + strOrderNo.ToString().Trim() + "','" + strdivision.ToString().Trim() + "',";
                    sql_ir_ins = sql_ir_ins + " '" + strbp.ToString().Trim() + "','" + strapplicantName.ToString().Trim() + "',";
                    sql_ir_ins = sql_ir_ins + " '" + strcategory.ToString().Trim() + "','" + strfathersName.ToString().Trim() + "',";
                    sql_ir_ins = sql_ir_ins + " '" + strloadKW.ToString().Trim() + "','" + strloadKVA.ToString().Trim() + "',";
                    sql_ir_ins = sql_ir_ins + " '" + strappliedAddress.ToString().Trim() + "','" + strcontactNo.ToString().Trim() + "',";
                    sql_ir_ins = sql_ir_ins + " TO_DATE('" + strvisitDate.ToString().Trim() + "','dd/MM/yyyy'),'" + strtime.ToString().Trim() + "','" + strdocReceived.ToString().Trim() + "',";
                    sql_ir_ins = sql_ir_ins + " '" + strcreation.ToString().Trim() + "','" + strenggName.ToString().Trim() + "','" + strEmail_id.ToString().Trim() + "')";
                    DbFunction objdbfun_ir_ins = new DbFunction();
                    return objdbfun_ir_ins.dmlsinglequery(sql_ir_ins);
                    //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    return false;
                }
            }
        }

        public bool UPDATE_IR_DATA(string strOrderNo, string strdivision,
            string strbp, string strapplicantName, string strcategory,
            string strfathersName, string strloadKW, string strloadKVA, string strappliedAddress, string strcontactNo,
            string strvisitDate, string strtime, string strdocReceived, string strcreation, string strenggName)
        {
            try
            {
                string sql = "UPDATE IR_DATA SET  DIVISION='" + strdivision.ToString().Trim() + "', ";
                sql = sql + " BP='" + strbp.ToString().Trim() + "',";
                sql = sql + " APPLICANTNAME='" + strapplicantName.ToString().Trim() + "', ";
                sql = sql + " CATEGORY='" + strcategory.ToString().Trim() + "', ";
                sql = sql + " FATHERSNAME='" + strfathersName.ToString().Trim() + "', ";
                sql = sql + " LOADKW='" + strloadKW.ToString().Trim() + "', ";
                sql = sql + " LOADKVA='" + strloadKVA.ToString().Trim() + "', ";
                sql = sql + " APPLIEDADDRESS='" + strappliedAddress.ToString().Trim() + "', ";
                sql = sql + " CONTACTNO='" + strcontactNo.ToString().Trim() + "', ";
                sql = sql + " VISITDATE='" + strvisitDate.ToString().Trim() + "', ";
                sql = sql + " TIME='" + strtime.ToString().Trim() + "', ";
                sql = sql + " DOCRECEIVED='" + strdocReceived.ToString().Trim() + "', ";
                sql = sql + " CREATION='" + strcreation.ToString().Trim() + "',";
                sql = sql + " ENGGNAME='" + strenggName.ToString().Trim() + "'";
                sql = sql + " WHERE ORDERNO='" + strOrderNo.ToString().Trim() + "'";
                DbFunction objdbfun = new DbFunction();
                return objdbfun.dmlsinglequery(sql);
                //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public bool Insert_CF_DATA(string strOrderNo, string strnetoutstandingAmt,
           string strbp, string strca, string strmoveOutDate,
           string strconsref, string strname, string straddress, string strcheckEnforcement, string strlastPaymentMode,
           string strsequenceNo, string strcheckRelated, string strUserType)
        {

            string sql = "select ORDERNO from CF_DATA where upper(ORDERNO)='" + strOrderNo.ToString().Trim().ToUpper() + "' and CA='" + strca.ToString().Trim() + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery(sql);
            if (dt.Rows.Count > 0)
            {
                try
                {
                    string sql_cf_up = "UPDATE CF_DATA SET   ";
                    sql_cf_up = sql_cf_up + " netoutstandingAmt='" + strnetoutstandingAmt.ToString().Trim() + "',";
                    sql_cf_up = sql_cf_up + " BP='" + strbp.ToString().Trim() + "',";
                    sql_cf_up = sql_cf_up + " ca='" + strca.ToString().Trim() + "', ";
                    sql_cf_up = sql_cf_up + " moveOutDate=TO_DATE('" + strmoveOutDate.ToString().Trim() + "','dd/MM/yyyy'),";
                    sql_cf_up = sql_cf_up + " consref='" + strconsref.ToString().Trim() + "', ";
                    sql_cf_up = sql_cf_up + " name='" + strname.ToString().Trim() + "', ";
                    sql_cf_up = sql_cf_up + " address='" + straddress.ToString().Trim() + "', ";
                    sql_cf_up = sql_cf_up + " checkEnforcement='" + strcheckEnforcement.ToString().Trim() + "', ";
                    sql_cf_up = sql_cf_up + " lastPaymentMode='" + strlastPaymentMode.ToString().Trim() + "', ";
                    sql_cf_up = sql_cf_up + " sequenceNo='" + strsequenceNo.ToString().Trim() + "', ";
                    sql_cf_up = sql_cf_up + " checkRelated='" + strcheckRelated.ToString().Trim() + "',";
                    sql_cf_up = sql_cf_up + " USER_TYPE='" + strUserType.ToString().Trim() + "' ";
                    sql_cf_up = sql_cf_up + " WHERE ORDERNO='" + strOrderNo.ToString().Trim() + "' and CA='" + strca.ToString().Trim() + "'";
                    DbFunction objdbfun_cf_up = new DbFunction();
                    return objdbfun_cf_up.dmlsinglequery(sql_cf_up);
                    //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    return false;
                }
            }
            else
            {

                try
                {
                    string sql_cf_ins = "INSERT INTO CF_DATA(ORDERNO,NETOUTSTANDINGAMT,BP,CA,MOVEOUTDATE,CONSREF,NAME,ADDRESS,CHECKENFORCEMENT,LASTPAYMENTMODE,SEQUENCENO,CHECKRELATED,USER_TYPE)";
                    sql_cf_ins = sql_cf_ins + " VALUES('" + strOrderNo.ToString().Trim() + "','" + strnetoutstandingAmt.ToString().Trim() + "',";
                    sql_cf_ins = sql_cf_ins + " '" + strbp.ToString().Trim() + "','" + strca.ToString().Trim() + "',";
                    sql_cf_ins = sql_cf_ins + " TO_DATE('" + strmoveOutDate.ToString().Trim() + "','dd/MM/yyyy'),'" + strconsref.ToString().Trim() + "',";
                    sql_cf_ins = sql_cf_ins + " '" + strname.ToString().Trim() + "','" + straddress.ToString().Trim() + "',";
                    sql_cf_ins = sql_cf_ins + " '" + strcheckEnforcement.ToString().Trim() + "','" + strlastPaymentMode.ToString().Trim() + "',";
                    sql_cf_ins = sql_cf_ins + " '" + strsequenceNo.ToString().Trim() + "','" + strcheckRelated.ToString().Trim() + "','" + strUserType.ToString().Trim() + "')";
                    DbFunction objdbfun_cf_ins = new DbFunction();
                    return objdbfun_cf_ins.dmlsinglequery(sql_cf_ins);
                    //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    return false;
                }
            }
        }

        public bool UPDATE_CF_DATA(string strOrderNo, string strnetoutstandingAmt,
           string strbp, string strca, string strmoveOutDate,
           string strconsref, string strname, string straddress, string strcheckEnforcement, string strlastPaymentMode,
           string strsequenceNo, string strcheckRelated)
        {
            try
            {
                string sql = "UPDATE CF_DATA SET   ";
                sql = sql + " netoutstandingAmt='" + strnetoutstandingAmt.ToString().Trim() + "',";
                sql = sql + " BP='" + strbp.ToString().Trim() + "',";
                sql = sql + " ca='" + strca.ToString().Trim() + "', ";
                sql = sql + " moveOutDate='" + strmoveOutDate.ToString().Trim() + "', ";
                sql = sql + " consref='" + strconsref.ToString().Trim() + "', ";
                sql = sql + " name='" + strname.ToString().Trim() + "', ";
                sql = sql + " address='" + straddress.ToString().Trim() + "', ";
                sql = sql + " checkEnforcement='" + strcheckEnforcement.ToString().Trim() + "', ";
                sql = sql + " lastPaymentMode='" + strlastPaymentMode.ToString().Trim() + "', ";
                sql = sql + " sequenceNo='" + strsequenceNo.ToString().Trim() + "', ";
                sql = sql + " checkRelated='" + strcheckRelated.ToString().Trim() + "' ";
                sql = sql + " WHERE ORDERNO='" + strOrderNo.ToString().Trim() + "' and CA='" + strca.ToString().Trim() + "'";
                DbFunction objdbfun = new DbFunction();
                return objdbfun.dmlsinglequery(sql);
                //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }


        public DataTable GetTransformerSetupDetail(string _sCircle, string _sCompany, string _sDis_Name) //26112014
        {
            string sql = string.Empty;
            sql = " SELECT DISTINCT DECODE(circle,'CENTRAL','BYPL','EAST','BYPL','SOUTH','BRPL','WEST','BRPL') COMPANY, dist, dist_name, COMPLAINT_CENTRE,AREA_CODE,AREA_NAME  FROM onm.onm_transformer_setup_detail  t ";


            if (_sCompany != "")
                sql += " WHERE   DECODE(circle,'CENTRAL','BYPL','EAST','BYPL','SOUTH','BRPL','WEST','BRPL')='" + _sCompany + "' ";
            else
                sql += " WHERE  DECODE(circle,'CENTRAL','BYPL','EAST','BYPL','SOUTH','BRPL','WEST','BRPL') IN ('BYPL','BRPL') ";

            if (_sCircle != "")
                sql += " AND  CIRCLE ='" + _sCircle + "' ";

            if (_sDis_Name != "")
                sql += " AND  upper(dist_name) = upper('" + _sDis_Name + "') ";



            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }


        public DataTable onm_Complaint_Detail(string imeiNo)
        {
            string sql = string.Empty;
            //sql = "SELECT lm.IMEI_NO,CC_INF_PERSON,OFC.DIST DIST,OFC.FAULTID, OFC.AREA,OFC.FCODE, cdc.NAME, cdc.ADD1, cdc.ADD2, cdc.PHONE, ofc.COMPLAINT_NO ,Occurance_Dt ";
            //       sql += "FROM ONM.ONM_Fault_Collections OFC,ONM.CC_DVB_COMP CDC";
            //        sql += ",onm.ONM_LINE_MAN_DETAILS lm ";
            //        sql += "WHERE Occurance_Dt >= TO_DATE('31-Oct-2014 00:00:00','dd-Mon-yyyy HH24:MI:SS') ";
            //        sql += "AND Occurance_Dt <= TO_DATE('31-Oct-2014 23:59:59','dd-Mon-yyyy HH24:MI:SS') ";
            //        sql += "AND cdc.CALL_CATEG='NC' ";
            //        sql += "AND cdc.COMPNO=ofc.COMPLAINT_NO ";
            //        sql += "AND FAULT_DUR_IN_SEC=-1 ";
            //        sql += "AND lm.IMEI_NO='"+imeiNo+"'";
            //        sql += "AND CC_INF_PERSON=UPPER(lm.NAME ||'-'||lm.EMPNO)";

            sql = "SELECT lm.IMEI_NO,CC_INF_PERSON,OFC.DIST DIST,OFC.FAULTID, OFC.AREA,OFC.FCODE, cdc.NAME, cdc.ADD1, cdc.ADD2, cdc.PHONE, ofc.COMPLAINT_NO ,Occurance_Dt ";
            sql += "FROM ONM.ONM_Fault_Collections OFC,ONM.CC_DVB_COMP CDC";
            sql += ",onm.ONM_LINE_MAN_DETAILS lm ";
            sql += "WHERE cdc.CALL_CATEG='NC' ";
            sql += "AND cdc.COMPNO=ofc.COMPLAINT_NO ";
            sql += "AND FAULT_DUR_IN_SEC=-1 ";
            sql += "AND lm.IMEI_NO='" + imeiNo + "'";
            sql += "AND CC_INF_PERSON=UPPER(lm.NAME ||'-'||lm.EMPNO)";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);

            return dt;

        }

        public bool oms_mark_read(string complain_no, string fault_id, string occurance_dt, string imei_no, string lm_read_flag, string lm_latitude, string lm_longitude)
        {
            string sql = string.Empty;
            sql = "INSERT INTO ONM.ONM_FAULT_COLLECTIONS_MOB(COMPLAINT_NO, FAULTID, OCCURANCEDATE, IMEI_NO, LM_READ_FLAG, LM_READ_DATE, LM_READ_LATITUDE, LM_READ_LONGTITUDE)VALUES('" +
                complain_no + "','" + fault_id + "','" + occurance_dt + "','" + imei_no + "','Y',SYSDATE,'" + lm_latitude + "','" + lm_longitude + "')";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlsinglequery_ONM(sql);
        }


        public bool onm_mark_read(string complain_no, string fault_id, string occurance_dt, string imei_no, string lm_read_flag, string lm_latitude, string lm_longitude)
        {
            string sql = string.Empty;
            sql = "INSERT INTO ONM.ONM_FAULT_COLLECTIONS_MOB(COMPLAINT_NO, FAULTID, OCCURANCEDATE, IMEI_NO, LM_READ_FLAG, LM_READ_DATE, LM_READ_LATITUDE, LM_READ_LONGTITUDE)VALUES('" +
                complain_no + "','" + fault_id + "','" + occurance_dt + "','" + imei_no + "','Y',SYSDATE,'" + lm_latitude + "','" + lm_longitude + "')";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlsinglequery_ONM(sql);
        }

        public bool update_onm_complaint(string complain_no, string faultid, string sbmt_latitude, string sbmt_longtude, string sbmt_remarks,
            string resolve_status, string resolve_time, string area_power_restored, string time_for_restoration, string fcode, string fault)
        {

            string sql = string.Empty;
            sql = "UPDATE ONM.ONM_FAULT_COLLECTIONS_MOB SET LM_SBMT_FLAG='Y', LM_SBMT_DATE=SYSDATE,LM_SBMT_LATITUDE='" +
               sbmt_latitude + "',LM_SBMT_LONGTITUDE='" +
               sbmt_longtude + "',LM_SBMT_REMARKS='" +
               sbmt_remarks + "' ,Resolved_status='" +
               resolve_status + "',RESOLVED_TIME='" +
               resolve_time + "',Area_POWER_Restored='" +
               area_power_restored + "',TIME_FOR_restoration='" +
               time_for_restoration + "',FCODE='" +
               fcode + "',FAULT='" +
               fault + "' WHERE COMPLAINT_NO='" +
               complain_no + "' AND FAULTid='" +
               faultid + "'";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlsinglequery_ONM(sql);

        }

        public DataTable getPendingOrder(string imeiNo)
        {

            //string sql = "select IEMI, AUFNR, VAPLZ, KUNUM, ZZ_LEC, APPLICANT_NAME, CATEGORY, FATHER_NAME, ZZ_RLOAD, ZZ_RLOADKVA, APPLICANT_ADDRESS, ";
            //sql += " TELEPHONE, DOC_RECEIVED, VISIT_DATE, VISIT_TIME, CREATION, DIVISION, MOHALLA_KHASRA, HOUSE_NO, OTHER_ADDRESS, ZUSER, ZDATE, CTIME, ";
            //sql += " ILART, ENTRY_DT, STATUS from mobapp.ISUSTD_TEAM_ALLOCATION where iemi = '" + imeiNo + "' and STATUS = 'PENDING'";
            //sql += " and trunc( ENTRY_DT)>=trunc(sysdate)-30";


            string sql = "SELECT IEMI, a.AUFNR,a.VAPLZ,a.KUNUM,ZZ_LEC,APPLICANT_NAME,CATEGORY,FATHER_NAME,a.ZZ_RLOAD,a.ZZ_RLOADKVA,";
            sql += " HOUSE_NUM1 || ' ' || STREET || ' ' || STR_SUPPL1 || ' ' || STR_SUPPL2 || ' ' || STR_SUPPL3 || ' ' || CITY_CODE || ' ' || POST_CODE1 APPLICANT_ADDRESS,";
            sql += " TELEPHONE, DOC_RECEIVED, TO_CHAR(TO_DATE(TO_CHAR(strmn), 'YYYY-MM-DD'), 'dd-MM-yyyy') VISIT_DATE, STRUR VISIT_TIME, CREATION, DIVISION,";
            sql += " MOHALLA_KHASRA, HOUSE_NO, OTHER_ADDRESS, ZUSER, ZDATE, CTIME, a.ILART, a.ENTRY_DT, STATUS";
            sql += " FROM mobapp.ISUSTD_TEAM_ALLOCATION a, mobapp.sap_sevakendra S WHERE a.aufnr = S.aufnr AND ZZ_LIC_NO = '" + imeiNo + "'";
            sql += " and STATUS = 'PENDING' and trunc(a.ENTRY_DT)>= trunc(sysdate) - 30";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery(sql);
        }

        public DataTable getCompleteOrder(string imeiNo)//27032019 Babalu Kumar
        {
            string sql = "select IEMI, AUFNR, VAPLZ, KUNUM, ZZ_LEC, APPLICANT_NAME, CATEGORY, FATHER_NAME, ZZ_RLOAD, ZZ_RLOADKVA, APPLICANT_ADDRESS, ";
            sql += " TELEPHONE, DOC_RECEIVED, VISIT_DATE, VISIT_TIME, CREATION, DIVISION, MOHALLA_KHASRA, HOUSE_NO, OTHER_ADDRESS, ZUSER, ZDATE, CTIME, ";
            sql += " ILART, ENTRY_DT, STATUS from mobapp.ISUSTD_TEAM_ALLOCATION where iemi = '" + imeiNo + "' and STATUS = 'COMPLETE'";
            sql += " and trunc( ENTRY_DT)>=trunc(sysdate)-15";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlgetquery(sql);
        }


        public DataTable getIVRSCallIDDL()
        {

            string sql = " SELECT APIRESPONSE Call_ID FROM DN_ISU_ORDER_MNGR WHERE IVR_STATUS='Y' AND PRINT_STATUS IS NULL  AND mobile_no IS NOT NULL AND DD_AMOUNT>0 AND apiresponse IS NOT NULL ORDER BY order_no";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery(sql);
        }


        public DataTable getPendingOrderKCC(string imeiNo)
        {

            string sql = "SELECT REQUEST_NO, REQ_TYPE, DISTRICT, TITLE, OCCUPATION, ";
            sql += "FIRST_NAME, LAST_NAME, FATHER_NAME, HOUSE_NO, BUILDING_NAME, ";
            sql += "STREET, AREA, LANDMARK, PIN, SEX, ";
            sql += "MOBILE_NO, PHONE_NO, EMAIL, FAX_NO, APPLIED_CATEGORY, ";
            sql += "APPLIED_LOAD_TYPE, APPLIED_LOAD, STATEMENT_CODE, CONNECTION_TYPE, APPOINTMENT_START_DATE, ";
            sql += "APPOINTMENT_FINISH_DATE, APPOINTMENT_START_TIME, APPOINTMENT_FINSIH_TIME, REQUEST_DATE, DC_OSUSER, ";
            sql += "DC_HOST, DC_MACHINEIP, DC_TERMINAL, IS_DOCUMENT_UPLOADED, SAP_ORDER_GENERATED, ";
            sql += "ORDER_STCHNG_DT, REMARKS, ORDER_NO, ORDER_STATUS, DISCOM, ";
            sql += "BANK_ACCOUNT_NO, BANK_NAME, BRANCH_MICR_CODE, PAN_NO, ALLOCATE_TO, ";
            sql += "ALLOCATED_DATE, ALLOCATED_BY, CASE_ALLOCATED, BP_NUMBER, REGTYPE, ";
            sql += "PERIOD, USAGE, SPECIFY, PERIOD_TO FROM ";
            sql += "(SELECT * FROM DSS_NEW_CON_REQUEST WHERE REQ_TYPE = 'KCC' OR REQ_TYPE = 'GCC' AND ";
            sql += "ORDER_STATUS = 'P' AND order_no IS NOT NULL) a ";
            sql += "WHERE order_no IS NOT NULL";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery_dcrep(sql);
        }

        public DataTable getCF(string orderNo)
        {

            string sql = "select AUFNR, NET_OUTSTANDING, GPART, VKONT, AUSZDAT, VREFER, NAME, ADDRESS, CHK_ENF, LAST_PAYMENT_MODE, SEQUENCE_NO, IEMI, ENTRY_DT from ISUSTD_TEAM_ALLOCATION_CF  where AUFNR = '" + orderNo + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery(sql);
        }

        public bool updateOrderStatus(string orderNo, string status)
        {

            string sql = "UPDATE ISUSTD_TEAM_ALLOCATION SET STATUS = '" + status + "'   WHERE AUFNR = '" + orderNo + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlsinglequery(sql);
        }

        public bool App_log(string strIMEI, string strActionType, string strActionPerform)
        {

            bool isTrue = false;

            NDS ndsCon = new NDS();
            OracleConnection ocon = new OracleConnection(ndsCon.con());

            string sql = string.Empty;
            sql = "INSERT INTO ISUSTD_APP_USE_LOG(	IMEI, ACTION_TYPE, ACTION_PERFORM)";
            sql += " values( '" + strIMEI + "' , '" + strActionType + "' , '" + strActionPerform + "' ) ";

            try
            {
                if (ocon.State == ConnectionState.Closed)
                {
                    ocon.Open();
                }
                //OracleCommand oleDbCommand = new OracleCommand(sql, ocon);
                //OracleParameter IMEI = oleDbCommand.Parameters.Add("@IMEI", OracleDbType.NVarchar2, 16);
                //OracleParameter ACTION_TYPE = oleDbCommand.Parameters.Add("@ACTION_TYPE", OracleDbType.NVarchar2, 100);
                //OracleParameter ACTION_PERFORM = oleDbCommand.Parameters.Add("@ACTION_PERFORM", OracleDbType.NVarchar2, 30);

                //IMEI.Value = strIMEI;
                //ACTION_TYPE.Value = strActionType;
                //ACTION_PERFORM.Value = strActionPerform;

                DbFunction objdbfunsqlinsert = new DbFunction();
                return objdbfunsqlinsert.dmlsinglequery_mobApp(sql);
            }
            catch (Exception ex)
            {
                WriteIntoFile(DateTime.Now.ToString() + ex.ToString() + sql);
                return false;
            }
            finally
            {
                if (ocon.State == ConnectionState.Open)
                {
                    ocon.Close();
                    ocon.Dispose();
                }
            }

            return isTrue;
        }

        public DataTable getMsg(string _sType)//05-01-2015
        {
            string sql = " SELECT SYS_DESC FROM  ISUSTD_CORE_SYS_CODES WHERE SYS_TYPE='" + _sType + "' AND SYS_CODE='01'   ";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery(sql);
            return dt;

        }

        public string ChatMaxID(string strFrm)
        {
            string sql = "";
            string strOccuranceDate = DateTime.Now.ToString("ddMMyy");
            sql = " SELECT (COUNT(WEBCALL_ID)+1) MAX_ID FROM MOBAPP.USR_WEB_METD_RECORD ";

            string strOccuranceTime = DateTime.Now.ToString("hhmm");
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery(sql);

            //if (dt.Rows.Count > 0)
            //    return "WEB_" + strOccuranceDate + "_" + dt.Rows[0]["MAX_ID"].ToString();
            //else
            return "WEB_" + strOccuranceDate + "_00" + strOccuranceTime;
        }

        public void insertUserCallWidFunction(string strWebId, string _sWebIP, string _sSessionId, string _sSessionDt, string _sUserName, string _sMethodName)
        {
            string Sql = " INSERT INTO MOBAPP.USR_WEB_METD_RECORD (WEBCALL_ID, WEBCALL_IP, SESSION_ID, SESSION_IN_ENT_DT, USR_NAME_ACCESS, SERVICE_METHD_NAME) ";
            Sql += " VALUES ('" + strWebId + "','" + _sWebIP + "','" + _sSessionId + "'," + _sSessionDt + ",'" + _sUserName + "','" + _sMethodName + "') ";
            DbFunction objdbfun = new DbFunction();
            objdbfun.dmlsinglequery(Sql);
        }

        public void updateUserCallWidFunction(string strDt, string _sSessionId, string _sWebCallID, string _sWebMethod)
        {
            string Sql = " UPDATE MOBAPP.USR_WEB_METD_RECORD SET  SESSION_OUT_ENT_DT=" + strDt + "   ";
            Sql += " WHERE SESSION_ID='" + _sSessionId + "' AND WEBCALL_ID='" + _sWebCallID + "' AND SERVICE_METHD_NAME='" + _sWebMethod + "' ";
            DbFunction objdbfun = new DbFunction();
            objdbfun.dmlsinglequery(Sql);
        }

        public DataTable GetDemandNoteMIS(string frmDt, string toDt)
        {
            string sql = "SELECT TO_CHAR(A.DAT,'dd-Mon-yyyy') DAT,A.PAGE_CNT,A.DEM_NOTE_BRPL,A.DEM_NOTE_BYPL FROM (SELECT TRUNC(DC_TIMESTAMP) DAT,";
            sql += "SUM(CASE WHEN LOG_TYPE = 'Page_Open' AND ORDER_NO IS NULL THEN 1 ELSE 0 END) PAGE_CNT,";
            sql += "SUM(CASE WHEN LOG_TYPE = 'Demand_Note' AND NVL(DISCOM,'X')='BRPL' AND ORDER_NO IS NOT NULL THEN 1 ELSE 0 END)  DEM_NOTE_BRPL,";
            sql += "SUM(CASE WHEN LOG_TYPE = 'Demand_Note' AND NVL(DISCOM,'X')='BYPL' AND ORDER_NO IS NOT NULL THEN 1 ELSE 0 END)  DEM_NOTE_BYPL";
            sql += " FROM DEMAND_NOTE_LOG ";

            if (!frmDt.Equals("") && !toDt.Equals(""))
                sql += " WHERE TRUNC(DC_TIMESTAMP) BETWEEN TO_DATE('" + frmDt + "','dd-Mon-yyyy') AND TO_DATE('" + toDt + "','dd-Mon-yyyy')";

            sql += " GROUP BY TRUNC(DC_TIMESTAMP) ORDER BY DAT DESC) A";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            return objdbfun.dmlgetquery_dcrep(sql);
        }

        public string tblMaxId(string strFrm)
        {
            string sql = "";
            string strOccuranceDate = DateTime.Now.ToString("ddMMyy");
            sql = " SELECT (COUNT(WEBCALL_ID)+1) MAX_ID FROM MOBAPP.USR_WEB_METD_RECORD ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery(sql);
            if (dt.Rows.Count > 0)
            {
                return "WEB_" + strOccuranceDate + "_" + dt.Rows[0]["MAX_ID"].ToString();
            }
            else
            {
                return "WEB_" + strOccuranceDate + "_1";
            }
        }

        public void insertUserCallWidFunction(string _sWebIP, string _sSessionId, string _sSessionDt, string _sUserName, string _sMethodName)
        {
            string strWebId = tblMaxId("");

            string Sql = " INSERT INTO USR_WEB_METD_RECORD (WEBCALL_ID, WEBCALL_IP, SESSION_ID, SESSION_IN_ENT_DT, USR_NAME_ACCESS, SERVICE_METHD_NAME) ";
            Sql += " VALUES ('" + strWebId + "','" + _sWebIP + "','" + _sSessionId + "','" + _sSessionDt + "','" + _sUserName + "','" + _sMethodName + "') ";
            DbFunction objdbfun = new DbFunction();
            objdbfun.dmlsinglequery(Sql);
        }

        public bool getWebSericeAccess(string _sUser, string _sPass, string _sFunName)//12-01-2015
        {
            string sql = " SELECT COUNT(1) FROM ISUSTD_USER U, ISUSTD_WEBSERVICES_ROLEBASES F ";
            sql += " WHERE U.USER_NAME=F.USER_NAME AND u.USER_NAME='" + _sUser + "' AND PASSWORD='" + _sPass + "' AND ROL_RGT='ISUS' ";
            sql += " AND UPPER(SERVICE_FUNCTION_NAME)=UPPER('" + _sFunName + "')";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery(sql);

            if (Convert.ToInt32(dt.Rows[0][0].ToString()) > 0)
                return true;
            else
                return false;

        }

        public DataTable GetValidateUser(string _sUser, string _sPass)//18-02-2015 new
        {
            string sql = " SELECT CONS_REF, MASTERCA,SUBCA FROM CCM_E_BILL_REG WHERE USERNAME ='" + _sUser + "' AND PASS='" + _sPass + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery(sql);
            return dt;
        }

        public string GetPasswordSMS(string strCANumber)//18-02-2015 new
        {
            string sql = " SELECT MOB_NO, USERNAME, PASS FROM CCM_E_BILL_REG WHERE  upper(CONS_REF)=upper('" + strCANumber + "')";
            DataTable dtMain = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dtMain = objdbfun.dmlgetquery(sql);
            if (dtMain.Rows.Count > 0)
            {
                string _sUsername = string.Empty, _sPass = string.Empty, _sMobileNumber = string.Empty;
                string _sMsg = string.Empty;
                _sUsername = dtMain.Rows[0]["USERNAME"].ToString();
                _sPass = dtMain.Rows[0]["PASS"].ToString();
                _sMobileNumber = dtMain.Rows[0]["MOB_NO"].ToString();

                _sMsg = getMsg("SMS_MSG_FRGT_PASS").Rows[0][0].ToString().Replace("<<USRNAME>>", _sUsername).Replace("<<PASSWORD>>", _sPass);

                DataTable dt = new DataTable();
                NewClassFile newClassFile = new NewClassFile();
                string _sAID = string.Empty, _sPin = string.Empty;
                dt = newClassFile.getMsg("MSG_SERVICE_AID");
                if (dt.Rows.Count > 0)
                    _sAID = dt.Rows[0][0].ToString();
                dt = newClassFile.getMsg("MSG_SERVICE_PIN");
                if (dt.Rows.Count > 0)
                    _sPin = dt.Rows[0][0].ToString();

                return ("http://luna.a2wi.co.in:7501/failsafe/HttpLink?aid=" + _sAID.Trim() + "&pin=" + _sPin.Trim() + "&mnumber=" + _sMobileNumber.Trim() + "&message=" + _sMsg);


            }
            return "";
        }

        public DataTable getCircle(string company)
        {
            string sql = "SELECT '--ALL--' AS DIST_CIRCLE FROM dual UNION SELECT DISTINCT DIST_CIRCLE FROM ISUSTD_DIVISIONS_MST WHERE SDO_CD LIKE '" + company + "%'";
            DataTable dt = new DataTable();
            DbFunction _objFunction = new DbFunction();
            dt = _objFunction.dmlgetquery(sql);
            //DbFunction objdbfun = new DbFunction();
            //dt = objdbfun.dmlgetquery(sql);
            return dt;
        }


        public DataTable getDivision(string circle)
        {
            string sql = "SELECT '--ALL--' as DIVISION,'' as DIVISION_CODE FROM dual UNION SELECT DIVISION_NAME, DIST_CD FROM ISUSTD_DIVISIONS_MST WHERE DIST_CIRCLE = '" + circle + "'";
            DataTable dt = new DataTable();
            DbFunction _objFunction = new DbFunction();
            dt = _objFunction.dmlgetquery(sql);
            //DbFunction objdbfun = new DbFunction();
            //dt = objdbfun.dmlgetquery(sql);
            return dt;
        }







        //ritesh

        //internal  string converttoapk(string path)
        //{
        //    {

        //        //DirectoryInfo _DirInfo = new DirectoryInfo(HttpContext.Current.Server.MapPath("~/mobileapk"));
        //       // Byte[] bytes = File.ReadAllBytes(HttpContext.Current.Server.MapPath("~/mobileapk/mobile.apk"));
        //        Byte[] bytes = File.ReadAllBytes(path);
        //        string file = Convert.ToBase64String(bytes);
        //        byte[] bytes1 = Convert.FromBase64String(file);

        //        System.IO.FileStream stream = new FileStream(@"c:\file"+ DateTime.Now.ToString() + DateTime.Now.Month.ToString()+".apk", FileMode.CreateNew);
        //        System.IO.BinaryWriter write = new BinaryWriter(stream);
        //        write.Write(bytes1, 0, bytes1.Length);
        //        write.Close();

        //        return file;


        //    }
        //}

        // path
        public string converttoapk()
        {
            string _DirInfo = HttpContext.Current.Server.MapPath("~/mobileapk/BSES.apk");
            //  string path = @"http://10.125.88.80/mobileservices/mobileapk/BSES.apk";
            // string path1 = (@"C:\Users\Piyush\Downloads\BSES.apk");
            //System.Web.Hosting.HostingEnvironment.MapPath
            //DirectoryInfo _DirInfo = new DirectoryInfo(System.Web.Hosting.HostingEnvironment.MapPath("~/mobileservices/mobileapk/BSES.apk"));
            //String[] saUsernames = File.ReadAllLines(path);
            Byte[] bytes = File.ReadAllBytes(_DirInfo);
            string file = Convert.ToBase64String(bytes);

            //to write
            //byte[] bytes1 = Convert.FromBase64String(file);

            //System.IO.FileStream stream = new FileStream(@"C:\file" + DateTime.Now.Millisecond.ToString() + ".apk", FileMode.CreateNew);
            //System.IO.BinaryWriter write = new BinaryWriter(stream);
            //write.Write(bytes1, 0, bytes1.Length);
            //write.Close();

            return file;

        }

        //internal  string converttoapk_re()
        //{
        //    string _DirInfo = HttpContext.Current.Server.MapPath("~/mobileapk/BSES DSS_V1.0.0.apk");
        //    Byte[] bytes = File.ReadAllBytes(_DirInfo);
        //    string file = Convert.ToBase64String(bytes);
        //    byte[] bytes1 = Convert.FromBase64String(file);

        //    System.IO.FileStream stream = new FileStream(@"C:\file" + DateTime.Now.Millisecond.ToString() + ".apk", FileMode.CreateNew);
        //    System.IO.BinaryWriter write = new BinaryWriter(stream);
        //    write.Write(bytes1, 0, bytes1.Length);
        //    write.Close();
        //    return file;
        //}

        public string converttoapk_new()
        {
            string _DirInfo = HttpContext.Current.Server.MapPath("~/mobileapk/BSES DSS_V1.0.0.apk");
            Byte[] bytes1 = File.ReadAllBytes(_DirInfo);
            string file1 = Convert.ToBase64String(bytes1);
            //byte[] bytes2 = Convert.FromBase64String(file1);

            //System.IO.FileStream stream1 = new FileStream(@"C:\fileDSS" + DateTime.Now.Millisecond.ToString() + ".apk", FileMode.CreateNew);
            //System.IO.BinaryWriter write1 = new BinaryWriter(stream1);
            //write1.Write(bytes2, 0, bytes2.Length);
            //write1.Close();
            return file1;
        }

        #region "OMS Linemen, Breakdown, TO BYPL Rajveer"

        public bool insert_ReCF_DATA(string strOrderNo, string strmeter1,
           string stradd1, string strmeter2, string stradd2,
           string strmeter3, string stradd3, string strmeter4, string stradd4, string strmeter5,
           string stradd5)
        {
            try
            {
                string sql_cf_ins = "INSERT INTO RE_CF_DATA(ORDERNO, METER_NO_1, ADDRESS_1, METER_NO_2, ADDRESS_2, METER_NO_3, ADDRESS_3, METER_NO_4, ADDRESS_4, METER_NO_5, ADDRESS_5)";
                sql_cf_ins = sql_cf_ins + " VALUES('" + strOrderNo.ToString().Trim() + "','" + strmeter1.ToString().Trim() + "',";
                sql_cf_ins = sql_cf_ins + " '" + stradd1.ToString() + "','" + strmeter2.ToString().Trim() + "',";
                sql_cf_ins = sql_cf_ins + " '" + stradd2.ToString() + "','" + strmeter3.ToString().Trim() + "',";
                sql_cf_ins = sql_cf_ins + " '" + stradd3.ToString() + "','" + strmeter4.ToString().Trim() + "',";
                sql_cf_ins = sql_cf_ins + " '" + stradd4.ToString() + "','" + strmeter5.ToString().Trim() + "','" + stradd5.ToString() + "')";
                DbFunction objdbfun_cf_ins = new DbFunction();
                return objdbfun_cf_ins.dmlsinglequery(sql_cf_ins);
                //return objdbfun.dmlsinglequeryWithParameterForOracle(sql, _byImg, _byIDProfImg);
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }

        }

        public DataTable empCompanyUserDetails(string strEmpNo, string strOther)
        {

            string sql = string.Empty;
            sql += " select ' ' empImg, ' ' otherNumber, EMP_NO empNumber, NAME empName, ' ' officeLoc, DEPARTMENT jobRole, DEPARTMENT_HEAD otherAssist, DEPARTMENT1, REPORTING_OFFICER, JOB_ROLE jobRole, VALIDITY_DATE cardValidity from bses_emp where EMP_NO='" + strEmpNo + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery(sql);

            return dt;

        }

        public DataTable onm_GetAssignedComplaintsToTeamDL(string imeiNo)
        {
            //string sql = string.Empty;
            //sql = "SELECT lm.IMEI_NO TEAM_ID,CC_INF_PERSON,OFC.DIST DIST,OFC.FAULTID, OFC.AREA,OFC.FCODE, cdc.NAME CALLER_NAME, cdc.ADD1 ADDRESS1, cdc.ADD2 ADDRESS2, cdc.PHONE CALLER_NO,cdc.LAND_MARK LANDMARK,cdc.DISTRICT, ";
            //sql += " cdc.DVB_REMARKS REMARKS, ofc.COMPLAINT_NO COMP_NO,Occurance_Dt DATE_ASSIGNED,lm.NAME LM_TEAM_ID,ofc.COMPLAINT_STATUS STATUS,ofc.CC_ASSIGN_BY ASSIGNER,cdc.CONS_REF CA_NO,ofc.FAULTTYPE FAULT_TYPE,ofc.FAULTCATEGORY CATEGORY";
            //sql += " FROM ONM.ONM_Fault_Collections OFC,ONM.CC_DVB_COMP CDC ";
            //sql += " ,onm.ONM_LINE_MAN_DETAILS lm ";
            //sql += " WHERE cdc.CALL_CATEG='NC' ";
            //sql += " AND cdc.COMPNO=ofc.COMPLAINT_NO ";
            //sql += " AND FAULT_DUR_IN_SEC=-1 ";
            //sql += " AND lm.IMEI_NO='" + imeiNo + "'";
            //sql += " AND CC_INF_PERSON=UPPER(lm.NAME ||'-'||lm.EMPNO)";

            string sql = string.Empty;
            sql += "    select * from (";
            sql += " SELECT (CASE WHEN oFC.FAULTSTATUS IS NULL THEN 'OPEN' WHEN oFC.FAULTSTATUS = '' THEN  'OPEN' WHEN oFC.FAULTSTATUS = 'OPEN' THEN  'OPEN' WHEN oFC.FAULTSTATUS = 'CLOSE' THEN  'CLOSE' END) FAULTSTATUS ";
            sql += " ,lm.IMEI_NO TEAM_ID,CC_INF_PERSON,OFC.DIST DIST,OFC.FAULTID, OFC.AREA,OFC.FCODE, cdc.NAME CALLER_NAME, cdc.ADD1 ADDRESS1, ";
            sql += " cdc.ADD2 ADDRESS2, cdc.PHONE CALLER_NO,cdc.LAND_MARK LANDMARK,cdc.DISTRICT, ";
            sql += " cdc.DVB_REMARKS REMARKS, ofc.COMPLAINT_NO COMP_NO,TO_Char(OCCURANCE_DT,'dd-Mon-yyyy hh:mm:ss') DATE_ASSIGNED,lm.NAME LM_TEAM_ID,ofc.COMPLAINT_STATUS STATUS,";
            sql += " ofc.CC_ASSIGN_BY ASSIGNER,cdc.CONS_REF CA_NO,ofc.FAULTTYPE FAULT_TYPE,ofc.FAULTCATEGORY CATEGORY";
            sql += " FROM ONM.ONM_FAULT_COLLECTIONS OFC,ONM.CC_DVB_COMP CDC ";
            sql += " ,onm.ONM_LINE_MAN_DETAILS lm ";
            sql += " WHERE ( cdc.CALL_CATEG='NC' OR cdc.CALL_CATEG IS NULL OR ofc.NAME='ANDRIOD' )  ";  // Updated 09052016 Rajveer -- cdc.CALL_CATEG='NC' ";
            sql += " AND cdc.COMPNO=ofc.COMPLAINT_NO ";
            sql += " AND FAULT_DUR_IN_SEC=-1 ";
            sql += " AND lm.IMEI_NO='" + imeiNo + "'";
            sql += " AND UPPER(CC_INF_PERSON)=UPPER(lm.NAME ||'-'||lm.EMPNO)) a where    a.FAULTSTATUS <>'CLOSE' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);

            return dt;

        }


        public bool ONM_ChkCompGrtTwoHrs(string complanitNo)
        {
            bool flg = false;
            DbFunction objdbfun = new DbFunction();
            DataTable dt = new DataTable();

            string strSql = " select (((FLOOR(((SYSDATE-OCCURANCE_DT)*24*60*60)/3600))*60*60)+((FLOOR((((SYSDATE-OCCURANCE_DT)*24*60*60) -FLOOR(((SYSDATE-OCCURANCE_DT)*24*60*60)/3600)*3600)/60))*60)) time_sec from  ";
            strSql += " ONM_FAULT_COLLECTIONS WHERE COMPLAINT_NO='" + complanitNo + "' ";
            dt = objdbfun.dmlgetquery_ONM(strSql);
            if (dt.Rows.Count > 0)
            {
                Int32 valueIn = Convert.ToInt32(dt.Rows[0]["time_sec"].ToString());
                if (valueIn < 7200)
                {
                    flg = true;
                }
                return flg;
            }
            return flg;
        }

        public bool ONM_UpdateComplaintResolutiontimeDL(string ComplaintNo, string imeiNo, string FCode,
            string Latitude, string longitude, string remarks, string resolutionStatus,
            int resolutionTime, string Area_Power_Restored, int Restoration_Time)
        {
            string Sql;
            bool flg;
            DbFunction objdbfun = new DbFunction();
            DataTable dt = new DataTable();

            //if (remarks == "")
            //{
            if (!ONM_ChkCompGrtTwoHrs(ComplaintNo))  //More than 2hr compalint will not close
            {
                return false;
            }
            //}



            Sql = "";

            Sql += " SELECT EMPNO, NAME || '-' ||EMPNO AS Both, NAME FROM onm.ONM_LINE_MAN_DETAILS WHERE imei_no IN ('" + imeiNo + "') ";

            dt = objdbfun.dmlgetquery_ONM(Sql);
            if (dt.Rows.Count > 0)
            {
                Sql = " UPDATE ONM_FAULT_COLLECTIONS SET REMARKS='" + remarks + "' , CCFAULT_CLOSE='Y' ";
                Sql += " , FAULT_DUR_IN_SEC= (((FLOOR(((SYSDATE-OCCURANCE_DT)*24*60*60)/3600))*60*60)+((FLOOR((((SYSDATE-OCCURANCE_DT)*24*60*60) -FLOOR(((SYSDATE-OCCURANCE_DT)*24*60*60)/3600)*3600)/60))*60)) ";
                Sql += " ,CC_CLOSED_BY = '" + dt.Rows[0]["EMPNO"].ToString() + "' ,CC_CLOSED_IP=sys_context('USERENV','IP_ADDRESS'),CCFAULT_INF_TO_COMP_CENTER='Y',CCFault_FW_DT=SYSDATE,CCFAULT_FORWARDED='Y',CC_COMP_REGISTERNO='1' ";
                Sql += " ,UserName='" + dt.Rows[0]["NAME"].ToString() + "', CC_REVERT_PERSON='LM',USER_IP=sys_context('USERENV','IP_ADDRESS'), FAULTID_AGAINST_NC=NULL ";
                if (Area_Power_Restored == "N") //Rajveer -- Also add other fields
                    Sql += " , CLOSING_STATUS='PN' ";
                if (Area_Power_Restored == "Y")
                    Sql += " , CLOSING_STATUS='PR' ";
                Sql += " WHERE COMPLAINT_NO='" + ComplaintNo + "' ";
                objdbfun = new DbFunction();
                if (objdbfun.dmlsinglequery_ONM(Sql) == true)
                {
                    flg = true;

                    Sql = "";
                    Sql = " UPDATE CC_DVB_COMP SET CIRCLE_REMARKS='" + remarks + "', DVB_CLEARED_BY='" + dt.Rows[0]["EMPNO"].ToString() + "',cust_status='Y', DVB_Status='Y', Cust_time_clear=SYSDATE, ";
                    Sql += "  dvb_time_clear=SYSDATE, USER_IP=sys_context('USERENV','IP_ADDRESS') , CLOSE_USER='" + dt.Rows[0]["EMPNO"].ToString() + "',ACTUAL_CLOSING_DT=sysdate  ";
                    Sql += " WHERE COMPNO='" + ComplaintNo + "' ";
                    objdbfun = new DbFunction();
                    objdbfun.dmlsinglequery_ONM(Sql);
                }
                else
                {
                    flg = false;
                }
            }
            else
            {
                Sql = " UPDATE ONM_FAULT_COLLECTIONS SET REMARKS='" + remarks + "' , CCFAULT_CLOSE='Y' ";
                Sql += " , FAULT_DUR_IN_SEC= (((FLOOR(((SYSDATE-OCCURANCE_DT)*24*60*60)/3600))*60*60)+((FLOOR((((SYSDATE-OCCURANCE_DT)*24*60*60) -FLOOR(((SYSDATE-OCCURANCE_DT)*24*60*60)/3600)*3600)/60))*60)) ";
                Sql += " ,CC_CLOSED_BY = 'TAB TO' ,CC_CLOSED_IP=sys_context('USERENV','IP_ADDRESS'),CCFAULT_INF_TO_COMP_CENTER='Y',CCFault_FW_DT=SYSDATE,CCFAULT_FORWARDED='Y',CC_COMP_REGISTERNO='1' ";
                Sql += " ,UserName='TAB TO', CC_REVERT_PERSON='LM',USER_IP=sys_context('USERENV','IP_ADDRESS'), FAULTID_AGAINST_NC=NULL ";
                if (Area_Power_Restored == "N")
                    Sql += " , CLOSING_STATUS='PN' ";
                if (Area_Power_Restored == "Y")
                    Sql += " , CLOSING_STATUS='PR' ";
                Sql += " WHERE COMPLAINT_NO='" + ComplaintNo + "' ";
                objdbfun = new DbFunction();
                if (objdbfun.dmlsinglequery_ONM(Sql) == true)
                {
                    flg = true;
                    Sql = "";

                    Sql = " UPDATE CC_DVB_COMP SET CIRCLE_REMARKS='" + remarks + "', DVB_CLEARED_BY='TAB TO',cust_status='Y', DVB_Status='Y', Cust_time_clear=SYSDATE, ";
                    Sql += "  dvb_time_clear=SYSDATE, USER_IP=sys_context('USERENV','IP_ADDRESS') , CLOSE_USER='TAB TO',ACTUAL_CLOSING_DT=sysdate  ";
                    Sql += " WHERE COMPNO='" + ComplaintNo + "' ";
                    objdbfun = new DbFunction();
                    objdbfun.dmlsinglequery_ONM(Sql);

                }
                else
                {
                    flg = false;
                }
            }


            Sql = "";
            Sql = "Insert into ONM_FAULT_Comp_ResolusnTme(COMPNO, IMEINO, FCODE, SBMT_LATITUDE, SBMT_LONGITUDE, SBMT_REMARKS, STATUS, RESOLUTION_TIME, AREA_POWER_RESTORED, RESTORATION_TIME)values('" + ComplaintNo + "','" + imeiNo + "','";
            Sql += FCode + "','" + Latitude + "','" + longitude + "','" + remarks + "','','" + resolutionTime + "','" + Area_Power_Restored + "'," + Restoration_Time + ")";
            objdbfun = new DbFunction();
            if (objdbfun.dmlsinglequery_ONM(Sql) == true)
            {
                flg = true;
            }
            else
            {
                flg = false;
            }
            return flg;
        }


        public DataTable GetComplaintStatusDL(string CompNo, string imeiNo)
        {
            string sql = string.Empty;
            sql = "SELECT distinct FC.FAULTSTATUS FROM onm.ONM_LINE_MAN_DETAILS LM,ONM.ONM_FAULT_COLLECTIONS FC ";
            sql += " WHERE fc.COMPLAINT_NO='" + CompNo + "'";
            sql += " AND LM.IMEI_NO='" + imeiNo + "'";
            sql += " AND CC_INF_PERSON=UPPER(lm.NAME ||'-'||lm.EMPNO)";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);

            return dt;

        }

        public DataTable onm_ValidCAnCompNo(string CompNo)
        {
            string sql = string.Empty;
            sql = "SELECT * FROM CC_DVB_COMP cc WHERE cc.COMPNO='" + CompNo + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);

            return dt;

        }


        public bool SavingSigntrData(string CompNo, string CA, string FaultType, string ClosingRemark, string OtherRemarks, string IMEI, string Latitude, string Longitude, string SignatureData)
        {
            bool flg = false;
            string Sql;
            DbFunction objdbfun = new DbFunction();
            if (CompNo != "")
            {
                byte[] _byImg = null;
                string _sImgPath = string.Empty;

                try
                {
                    _byImg = Convert.FromBase64String(SignatureData);
                    _sImgPath = byteArrayToImageSignature(_byImg, CompNo);
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in sign image" + ex.ToString());
                    flg = false;
                    return false;
                }

                try
                {
                    Sql = "UPDATE ONM.ONM_FAULT_COLLECTIONS SET FAULTSTATUS='CLOSE' , REMARKS='" + ClosingRemark + "' , CLOSING_DT=sysdate, ACTUAL_CLOSING_DT=sysdate WHERE COMPLAINT_NO='" + CompNo + "'";
                    if (objdbfun.dmlsinglequery_ONM(Sql) == true)
                    {
                        flg = true;
                    }
                    else
                    {
                        flg = false;
                        return false;
                    }


                    Sql = "";
                    Sql = "Insert into ONM_FAULT_Comp_ResolusnTme(COMPNO, IMEINO, FCODE, SBMT_LATITUDE, SBMT_LONGITUDE, SIGNATUREFILENAME, CLOSINGREMARKS, OTHEREMARKS)values('" + CompNo + "','" + IMEI + "','";
                    Sql += FaultType + "','" + Latitude + "','" + Longitude + "','" + _sImgPath + "','" + ClosingRemark + "','" + OtherRemarks + "')";

                    if (objdbfun.dmlsinglequery_ONM(Sql) == true)
                    {
                        flg = true;
                    }
                    else
                    {
                        flg = false;
                        return false;
                    }


                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    flg = false;
                    return false;
                }
            }
            return flg;
        }

        public string byteArrayToImageSignature(byte[] byteArrayIn, string filename) //22012015
        {
            try
            {
                DirectoryInfo _DirInfo = new DirectoryInfo(HttpContext.Current.Server.MapPath("~/Signature") + "\\" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString());
                if (_DirInfo.Exists == false)
                    _DirInfo.Create();

                string _sPath = _DirInfo.FullName + "\\" + filename + "_" + DateTime.Now.Day + DateTime.Now.Month + DateTime.Now.Year + DateTime.Now.Hour + DateTime.Now.Minute + DateTime.Now.Second + ".jpeg";
                string _sFileNameWithoutExt = _DirInfo.FullName + "\\" + filename;
                int _iFileIndex = 1;
                while (File.Exists(_sPath))
                {
                    _sPath = _sFileNameWithoutExt + "_" + _iFileIndex.ToString() + ".jpeg";
                    _iFileIndex++;
                }

                BinaryWriter fs = new BinaryWriter(new FileStream(_sPath, FileMode.Append, FileAccess.Write));
                fs.Write(byteArrayIn);
                fs.Close();
                return _sPath;
                //MemoryStream ms = new MemoryStream(byteArrayIn);
                //Image returnImage = Image.FromStream(ms);
                //returnImage.s
                //return returnImage;
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return "";
            }
        }


        public bool UpdatebreakdowndetailsHourDL(string BreakDownID, string FaultID, string NewHour, string NewMin)
        {
            string Sql;
            bool flg;
            DbFunction objdbfun = new DbFunction();


            Sql = "";
            Sql = "UPDATE ONM_BREAK_DOWN_DETAILS SET TIME_TAKEN='" + NewHour + ":" + NewMin + "' WHERE BREAK_DOWN_ID='" + BreakDownID + "' AND FAULTID='" + FaultID + "'";

            if (objdbfun.dmlsinglequery_ONM(Sql) == true)
            {
                flg = true;
            }
            else
            {
                flg = false;
            }
            return flg;
        }


        public DataTable GetbreakdowndetailsIMEIDL(string imeiNo)
        {
            string sql = string.Empty;

            sql += " SELECT osd.EMP_MOBNO ,  OSD.Dist dist, '' EXTERNAL_ID,fc.FAULTID ,fc.CC_INF_PERSON CC_INF_PERSON, OSD.Shutdown_Id,";
            sql += " ( SELECT div_name FROM onm.DIVISION WHERE div_code=osd.DIST) DIVISION,  OSD.FAULTCATEGORY, osd.BACKFEED_DATETIME, osd.FAULTTYPE,";
            sql += " osd.EFFECTED_ELEMENT, osd.NO_LOAD,osd.BACKFEED_STATUS,  osd.USERNAME,osd.EMP_NAME, osd.SHUTDOWN_TYPE , osd.Feeder_Code,  osd.Feeder_Name,";
            sql += " osd.Substation_Code,osd.Substation_Name,osd.Grid_Code,osd.Grid_Name  ,osd.RELAY_TRIPPED RELAY,osd.LOAD,  osd.Fault_Location,";
            sql += " osd.reason,TO_CHAR(osd.Shutdown_DT,'dd-Mon-yyyy') OPEN_TIME,TO_CHAR(osd.Shutdown_DT,'hh:mm:ssPM') HOURS_MIN ,";
            sql += " osd.remarks,osd.Emp_No,osd.Emp_Desig,osd.ShutDown_Over,osd.SUB_ELEMENT_PROB, osd.EFFECTED_ELEMENT,osd.LT_FEEDER_FROM, osd.LT_FEEDER_TO,";
            sql += " osd.SAP_NOTIFICATION,osd.EXPECTED_DUR_IN_HRS, osd.DETAILS_OF_WORK_DONE,osd.CLOSING_STATUS,osd.AC_SHUTDOWN_OVER_DT, osd.CLOSE_USER,osd.LOAD_RECOVERED, osd.COMPLAINT_CENTRE_CODE, osd.DAM_DT_CODE";
            sql += " FROM onm.ONM_SHUTDOWN_DETAILS osd , ONM.ONM_FAULT_COLLECTIONS FC WHERE  SHUTDOWN_Dt>SYSDATE-365 AND SHUTDOWN_Dt<SYSDATE+1";
            sql += " AND ((osd.FAULT_DUR_IN_SEC > -1  AND osd.CLOSING_STATUS IN('NR','TR')) OR (osd.FAULT_DUR_IN_SEC = -1 AND osd.CLOSING_STATUS IS NULL))";
            sql += " AND osd.CIRCLE IN ('SOUTH','WEST')  AND osd.FAULTCATEGORY IN ('HT','LT')  AND SUBSTR(fc.INSERTEDFROM,3,12) = osd.Shutdown_Id";
            sql += " AND osd.Powercut_Type IN ('BD')  AND osd.Dist IN (SELECT DIV_CODE FROM onm.OMS_BD_LOGIN_MST WHERE imei_no IN ('" + imeiNo + "'))  ORDER BY Shutdown_DT DESC";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);

            return dt;

        }


        public bool updatebreakdownreadstatsuDL(string BreakDownID, string FaultID)
        {
            string Sql;
            bool flg;
            DbFunction objdbfun = new DbFunction();


            Sql = "";
            Sql = "UPDATE ONM_FAULT_COLLECTIONS SET FAULTSTATUS ='CLOSE' WHERE FAULTID='" + FaultID + "'";

            if (objdbfun.dmlsinglequery_ONM(Sql) == true)
            {
                flg = true;
            }
            else
            {
                flg = false;
            }
            return flg;
        }

        public DataTable getbreakdownstatusBDDL(string BREAK_DOWN_ID, string faultID)
        {
            string sql = string.Empty;
            sql = " SELECT  FC.FAULTSTATUS FROM onm.ONM_LINE_MAN_DETAILS LM,ONM.ONM_FAULT_COLLECTIONS FC ,  ONM_BREAK_DOWN_DETAILS BD WHERE ";
            sql += " fc.FAULTID='" + faultID + "' ";
            sql += " AND CC_INF_PERSON=UPPER(lm.NAME ||'-'||lm.EMPNO)";
            sql += " AND fc.FAULTID = Bd.FAULTID";
            sql += " AND Bd.BREAK_DOWN_ID='" + BREAK_DOWN_ID + "'";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);

            return dt;

        }

        public DataTable getbreakdownbackfeedlist(string BREAK_DOWN_ID)//10072014 -new
        {
            string sql = " SELECT FEEDERCODE LISTCODE, FEEDERNAME LISTNAME FROM  ONM_BREAK_DOWN_DETAILS WHERE  BREAK_DOWN_ID='" + BREAK_DOWN_ID + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        public DataTable getOpenOnmMeterBurntComplaintlist(string distName, string complaintCentre, string status, string areaName)//03022016 -- No Current Complaint List
        {
            string sql = string.Empty;
            sql = " ";

            sql += " SELECT * FROM (SELECT (CASE WHEN oFC.FAULTSTATUS IS NULL THEN 'OPEN' WHEN oFC.FAULTSTATUS = 'N' THEN  'OPEN' WHEN oFC.FAULTSTATUS = '' THEN  'OPEN' WHEN oFC.FAULTSTATUS = 'OPEN' THEN  'OPEN' WHEN oFC.FAULTSTATUS = 'CLOSE' THEN  'CLOSE' END) FAULTSTATUS  ,  ";
            sql += " OFC.FaultID,TO_CHAR(OFC.Occurance_Dt,'dd-Mon-yyyy hh:mm:ss PM') OccDate, OFC.EffectedElement, Trim(OFC.Cable_From) Cable_From,Trim(OFC.Cable_To) Cable_To,Trim(OFC.Area) Area,  OFC.AreaCode,  ";
            sql += " OFC.FeederCode,OFC.FEEDERNAME,OFC.GridCode,OFC.GridName,OFC.SUBSTATIONCODE, OFC.SUBSTATIONNAME,OFC.LT_FEEDER_FROM , OFC.LT_FEEDER_TO,  ";
            sql += " OFC.All_Transformer_No, Trim(OFC.FaultType) FaultType,OFC.Insertedfrom,OFC.EXPECTED_DUR_IN_HRS, OFC.Child,  ";
            sql += "  Trim(OFC.TotalResources) TotalResources,  Trim(OFC.COMPLAINT_STATUS) COMPLAINT_STATUS,OFC.NoOfComplaints,trim(OFC.CCFAULT_INF_TO_COMP_CENTER) CCFAULT_INF_TO_COMP_CENTER,OFC.USERNAME, ";
            sql += "  OFC.USER_IP, Trim(OFC.CCFAULT_FORWARDED) CCFAULT_FORWARDED,OFC.BD_type,TO_CHAR(OFC.Backfeed_datetime,'dd-Mon-yyyy hh24:mi') BF_datetime, ";
            sql += " OFC.PRIORITY,OFC.LTHT_CABLE,OFC.NO_LOAD,OFC.CURRENTSTATUS,OFC.OCCURANCE_DT,OFC.POWERCUT_TYPE,OFC.FAULTID_AGAINST_NC,  ";
            sql += "  OFC.REMARKS,OFC.COMPLAINT_NO,DELAYED_COMP ,CDC.kno,CDC.compno ,ofc.CONSUMER_TYPE,DECODE(ADD2,NULL,add1,add2)EB_AREA, ";
            sql += " CDC.REG_MODULE_NAME,CDC.CALL_FROM  , (COM_ADD1 ||  ' , ' || COM_ADD2 ) AS Address,  COMPLAINT_CENTRE,  COM_ADD1 ,COM_ADD2 ,  ";
            sql += " METER_STATUS MTR_STATUS,cmbfo.REMARKS ACTN_RMK,CASE WHEN NVL(EXISTING_ORDER_NO_FLAG,'N')='N' THEN CMBFO.CLOSING_REMARKS ELSE '' END order_no,CASE WHEN NVL(EXISTING_ORDER_NO_FLAG,'N')='A' THEN CMBFO.CLOSING_REMARKS ELSE '' END Existingorder_no , ";
            sql += "  COM_NAME, COM_PHONE , MOB_NO FROM onm.ONM_Fault_Collections OFC, onm.CC_DVB_COMP CDC, onm.CC_MTR_BURNT_FROM_ONM CMBFO  ";
            //  sql += "  WHERE Occurance_Dt>SYSDATE-365 AND Occurance_Dt<SYSDATE+1 AND OFC.POWERCUT_TYPE='CC' AND (OFC.FCODE='F025') AND  OFC.complaint_no = CDC.compno AND ";
            //  sql += "  FAULTSTATUS NOT IN ('CLOSE') AND ofc.CLOSING_DT IS NULL AND DIST='" + distName + "'  AND OFC.COMPLAINT_CENTRE like  ('%" + complaintCentre + "%')  ";
            //  sql += "   ORDER BY OFC.Occurance_Dt DESC, OFC.Area ASC ) a WHERE a.FAULTSTATUS = 'OPEN'  AND ROWNUM < 21  ";
            sql += " WHERE Occurance_Dt>SYSDATE-365 AND Occurance_Dt<SYSDATE+1  AND  OFC.Circle in ('SOUTH','WEST')  AND OFC.POWERCUT_TYPE='CC'  ";

            if (status == "OPEN")
            {
                sql += " AND OFC.FAULT_DUR_IN_SEC = -1 ";
            }
            else if (status == "CLOSE")
            {
                sql += " AND OFC.FAULT_DUR_IN_SEC != -1 ";
            }
            sql += " AND (OFC.FCODE='F025') AND OFC.FAULTID = CMBFO.FAULTID AND  OFC.complaint_no = CDC.compno AND DIST='" + distName + "'  AND OFC.COMPLAINT_CENTRE like  ('%" + complaintCentre + "%') AND ROWNUM <21  ORDER BY OFC.Occurance_Dt DESC )x ";

            // onm.CC_MTR_BURNT_FROM_ONM  --- OFC.FAULTID = CMBFO.FAULTID
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }


        public DataTable getOnmComplaintlist(string distName, string complaintCentre, string status, string areaName)//03022016 -- No Current Complaint List
        {
            string sql = string.Empty;
            sql = "  SELECT * FROM (SELECT (CASE WHEN oFC.FAULTSTATUS IS NULL THEN 'OPEN' WHEN oFC.FAULTSTATUS = '' THEN  'OPEN'  ";
            sql += " WHEN oFC.FAULTSTATUS = 'OPEN' THEN  'OPEN' WHEN oFC.FAULTSTATUS = 'CLOSE' THEN  'CLOSE' END) FAULTSTATUS ";
            sql += " , OFC.FaultID,to_char(OFC.Occurance_Dt,'dd-Mon-yyyy hh:mm:ss PM') OccDate,to_char(CLOSING_DT,'dd-Mon-yyyy hh:mm:ss PM') CLOSING_DT, OFC.EffectedElement, Trim(OFC.Cable_From) Cable_From,Trim(OFC.Cable_To) Cable_To,Trim(OFC.Area) Area, ";
            sql += " OFC.AreaCode, OFC.FeederCode,OFC.FEEDERNAME,OFC.GridCode,OFC.GridName,OFC.SUBSTATIONCODE, OFC.SUBSTATIONNAME,OFC.LT_FEEDER_FROM , OFC.LT_FEEDER_TO, ";
            sql += "  OFC.All_Transformer_No, Trim(OFC.FaultType) FaultType,OFC.Insertedfrom,OFC.EXPECTED_DUR_IN_HRS, OFC.Child,Trim(OFC.TotalResources) TotalResources, ";
            sql += " Trim(OFC.COMPLAINT_STATUS) COMPLAINT_STATUS, OFC.NoOfComplaints,trim(OFC.CCFAULT_INF_TO_COMP_CENTER) CCFAULT_INF_TO_COMP_CENTER,OFC.USERNAME, ";
            sql += " OFC.USER_IP, Trim(OFC.CCFAULT_FORWARDED) CCFAULT_FORWARDED,OFC.BD_type,TO_CHAR(OFC.Backfeed_datetime,'dd-Mon-yyyy hh24:mi') BF_datetime, ";
            sql += " OFC.PRIORITY,OFC.LTHT_CABLE,OFC.NO_LOAD,OFC.CURRENTSTATUS,OFC.OCCURANCE_DT,OFC.POWERCUT_TYPE,OFC.FAULTID_AGAINST_NC, ";
            sql += " OFC.REMARKS,OFC.COMPLAINT_NO,DELAYED_COMP ,CDC.kno,CDC.compno ,ofc.CONSUMER_TYPE,DECODE(ADD2,NULL,add1,add2)EB_AREA,CDC.REG_MODULE_NAME,CDC.CALL_FROM  , (COM_ADD1 ||  ' , ' || COM_ADD2 ) AS Address,  COMPLAINT_CENTRE,  COM_ADD1 ,COM_ADD2 , COM_NAME, COM_PHONE , MOB_NO ";
            sql += "  FROM ONM_FAULT_COLLECTIONS OFC, CC_DVB_COMP CDC ";
            sql += " WHERE (cdc.CALL_CATEG='NC' OR cdc.CALL_CATEG IS NULL OR ofc.NAME='ANDRIOD') ";
            sql += "  AND cdc.COMPNO=ofc.COMPLAINT_NO AND CIRCLE IN ('SOUTH','WEST')  AND OFC.PRIORITY NOT IN ('STREET LIGHT')  ";
            sql += "   AND Occurance_Dt>SYSDATE-365 AND Occurance_Dt<SYSDATE+1  ";
            if (status.ToUpper() == "Open".ToUpper())  //In last 10 days
            {
                sql += "  AND FAULT_DUR_IN_SEC =-1  ";
                sql += " AND CC_INF_PERSON IS NOT NULL  ";
                sql += " AND DIST='" + distName + "'  AND OFC.COMPLAINT_CENTRE like  ('%" + complaintCentre + "%')    ";
                // sql += " AND OFC.Occurance_Dt < SYSDATE-10   ";
                sql += "  ORDER BY OFC.Occurance_Dt DESC, OFC.Area ASC) a WHERE a.FAULTSTATUS = 'OPEN' and rownum < 21 ";
            }
            else if (status.ToUpper() == "Close".ToUpper()) //In last 20 complaints
            {
                sql += "  AND FAULT_DUR_IN_SEC !=-1  ";
                sql += " AND CC_INF_PERSON IS NOT NULL  ";
                sql += " AND DIST='" + distName + "'  AND OFC.COMPLAINT_CENTRE like  ('%" + complaintCentre + "%')    ";
                //  sql += " AND OFC.Occurance_Dt < SYSDATE-10   ";
                sql += " ORDER BY OFC.Occurance_Dt DESC) a WHERE a.FAULTSTATUS = 'CLOSE' and rownum < 21 ";
            }
            else if (status.ToUpper() == "emergency".ToUpper())
            {
                sql += "  AND FAULT_DUR_IN_SEC !=-1  ";
                sql += " AND CC_INF_PERSON IS NOT NULL  ";
                sql += " AND DIST='" + distName + "'  AND OFC.COMPLAINT_CENTRE like  ('%" + complaintCentre + "%')   AND ofc.PRIORITY='PCR'  ";
                //  sql += " AND OFC.Occurance_Dt < SYSDATE-10   ";
                sql += " ORDER BY OFC.Occurance_Dt DESC) a WHERE a.FAULTSTATUS = 'CLOSE' and rownum < 21 ";
            }
            else
            {
                sql += "  AND FAULT_DUR_IN_SEC=-1   ";
                sql += "  AND CC_INF_PERSON IS NULL ";
                sql += " AND DIST='" + distName + "'  AND OFC.COMPLAINT_CENTRE like  ('%" + complaintCentre + "%')    ";
                sql += " ORDER BY OFC.Occurance_Dt DESC, OFC.Area ASC) a WHERE a.FAULTSTATUS <> 'CLOSE'   ";
            }

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        public bool updateOnmAllocateComplaint(string ccAssignBy, string ccAssignReason,
         string ccCompRegisterNo, string ccInfPerson, string faultId)//03022016
        {
            string sql = string.Empty;
            sql = "  UPDATE ONM.ONM_FAULT_COLLECTIONS SET CC_INF_PERSON='" + ccInfPerson.ToUpper() + "',CCFAULT_FORWARDED='Y', CCFAULT_INF_TO_COMP_CENTER='Y', CC_COMP_REGISTERNO='" + ccCompRegisterNo.ToUpper() + "',CCFAULT_FW_DT=sysdate, ";
            sql += " CC_ASSIGN_BY='" + ccAssignBy.ToUpper() + "', CC_ASSIGN_REASON='" + ccAssignReason.ToUpper() + "', CLOSING_STATUS='PN' ";
            sql += " WHERE faultid = '" + faultId + "'  ";

            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlsinglequery_ONM(sql);
        }

        public DataTable onmChkValidUser(string strEmpNo, string strPass)
        {
            string sql = string.Empty;

            sql = " SELECT PWD,NAME,PWD_EN FROM VW_OMS_LOGIN_MASTER WHERE MODULE_NAME ='DOMS' AND EMP_NO='" + strEmpNo + "'  ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        public bool updateUserDeviceList(string userName, string userEmpId, string userStartTime,
        string userEndTime, string userEntryDate, string deviceIMEI, string password)
        {
            bool flg = false;

            string sql = string.Empty; //Insert
            sql = "   INSERT INTO OMS_DEVICE_LOGIN_MST_BKP (SR_NO, DEVICE_NAME, DEVICE_IMEI, DEVICE_DIVISION, LINEMEN_ID, TIME_START, ";
            sql += " TIME_END, ACTIVE_FLG, STATUS_FLG, ENTRY_DATE, START_TIME, PASSWORD, LOGIN_DATE)  ";
            sql += " SELECT  ";
            sql += " MST.SR_NO AS SR_NO,  ";
            sql += " MST.DEVICE_NAME AS DEVICE_NAME, ";
            sql += " MST.DEVICE_IMEI AS DEVICE_IMEI, ";
            sql += " MST.DEVICE_DIVISION AS DEVICE_DIVISION, ";
            sql += " MST.LINEMEN_ID AS LINEMEN_ID, ";
            sql += " MST.TIME_START AS  TIME_START, ";
            sql += " MST.TIME_END AS TIME_END, ";
            sql += " MST.ACTIVE_FLG  AS ACTIVE_FLG, ";
            sql += " MST.STATUS_FLG AS STATUS_FLG, ";
            sql += " MST.ENTRY_DATE AS ENTRY_DATE, ";
            sql += " MST.START_TIME AS START_TIME, ";
            sql += " MST.PASSWORD AS PASSWORD, ";
            sql += " MST.LOGIN_DATE AS LOGIN_DATE ";
            sql += " FROM OMS_DEVICE_LOGIN_MST MST ";
            sql += " WHERE MST.DEVICE_IMEI='" + deviceIMEI + "' ";

            DbFunction objdbfun = new DbFunction();
            if (objdbfun.dmlsinglequery_ONM(sql) == true)
            {
                flg = true;
                sql = "";//Update
                sql = "   UPDATE OMS_DEVICE_LOGIN_MST SET ENTRY_DATE=sysdate , LINEMEN_ID='" + userEmpId + "' ,  ";
                sql += " TIME_START='" + userStartTime + "' , TIME_END='" + userEndTime + "'  , ACTIVE_FLG='Y' , START_TIME='" + userEntryDate + "'";
                if (password != "")
                    sql += " , PASSWORD='" + password + "'    ";
                else
                    sql += " , PASSWORD='12345'    ";
                sql += " WHERE DEVICE_IMEI IN ('" + deviceIMEI + "')  ";

                objdbfun.dmlsinglequery_ONM(sql);
            }
            else
            {
                flg = false;
                return false;
            }
            return flg;
        }

        public DataTable getBDGetComplaintlist(string distName, string areaName)//03022016
        {
            string sql = string.Empty;
            sql = "  SELECT * FROM (SELECT (CASE WHEN oFC.FAULTSTATUS IS NULL THEN 'OPEN' WHEN oFC.FAULTSTATUS = '' THEN  'OPEN'  ";
            sql += " WHEN oFC.FAULTSTATUS = 'OPEN' THEN  'OPEN' WHEN oFC.FAULTSTATUS = 'CLOSE' THEN  'CLOSE' END) FAULTSTATUS ";
            sql += " , OFC.FaultID,to_char(OFC.Occurance_Dt,'dd-Mon-yyyy hh:mm:ss PM') OccDate, OFC.EffectedElement, Trim(OFC.Cable_From) Cable_From,Trim(OFC.Cable_To) Cable_To,Trim(OFC.Area) Area, ";
            sql += " OFC.AreaCode, OFC.FeederCode,OFC.FEEDERNAME,OFC.GridCode,OFC.GridName,OFC.SUBSTATIONCODE, OFC.SUBSTATIONNAME,OFC.LT_FEEDER_FROM , OFC.LT_FEEDER_TO, ";
            sql += "  OFC.All_Transformer_No, Trim(OFC.FaultType) FaultType,OFC.Insertedfrom,OFC.EXPECTED_DUR_IN_HRS, OFC.Child,Trim(OFC.TotalResources) TotalResources, ";
            sql += " Trim(OFC.COMPLAINT_STATUS) COMPLAINT_STATUS, OFC.NoOfComplaints,trim(OFC.CCFAULT_INF_TO_COMP_CENTER) CCFAULT_INF_TO_COMP_CENTER,OFC.USERNAME, ";
            sql += " OFC.USER_IP, Trim(OFC.CCFAULT_FORWARDED) CCFAULT_FORWARDED,OFC.BD_type,TO_CHAR(OFC.Backfeed_datetime,'dd-Mon-yyyy hh24:mi') BF_datetime, ";
            sql += " OFC.PRIORITY,OFC.LTHT_CABLE,OFC.NO_LOAD,OFC.CURRENTSTATUS,OFC.OCCURANCE_DT,OFC.POWERCUT_TYPE,OFC.FAULTID_AGAINST_NC, ";
            sql += " OFC.REMARKS,OFC.COMPLAINT_NO,DELAYED_COMP ,CDC.kno,CDC.compno ,ofc.CONSUMER_TYPE,DECODE(ADD2,NULL,add1,add2)EB_AREA,CDC.REG_MODULE_NAME,CDC.CALL_FROM ";
            sql += "  FROM ONM_FAULT_COLLECTIONS OFC, CC_DVB_COMP CDC ";
            sql += " WHERE (cdc.CALL_CATEG='NC' OR ofc.NAME='ANDRIOD') ";
            sql += "  AND cdc.COMPNO=ofc.COMPLAINT_NO  AND FAULT_DUR_IN_SEC=-1  ";
            sql += "  AND Occurance_Dt>SYSDATE-365 AND Occurance_Dt<SYSDATE+1 ";
            if (distName.ToUpper() != "ALL".ToUpper())
                sql += "  AND DIST='" + distName.ToUpper() + "'  ";
            sql += "  ORDER BY OFC.Occurance_Dt DESC, OFC.Area ASC) a WHERE a.FAULTSTATUS <> 'CLOSE' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        public bool updatebreakdownbackfeed(string BREAK_DOWN_ID, string FAULTID, string restoreddate, string restoredload, string restoresource, string restoretype, string remarks, string selectedsource)
        {
            string Sql;
            bool flg;
            DbFunction objdbfun = new DbFunction();


            Sql = "";
            Sql = "UPDATE ONM_FAULT_COLLECTIONS SET resource_name='" + selectedsource + "' WHERE  FAULTID='" + FAULTID + "'";

            if (objdbfun.dmlsinglequery_ONM(Sql) == true)
            {
                flg = true;
            }
            else
            {
                flg = false;
            }
            return flg;
        }

        public DataTable onmLoginUser(string strUser_Name, string strPassword, string strIMEI_No)
        {
            string sql = string.Empty;
            sql = " SELECT LOGIN_ID, PASSWORD, USER_NAME, CIRCLE_CODE, DIV_CODE, COMPLAINT_CENTRE FROM OMS_BD_LOGIN_MST WHERE UPPER(LOGIN_ID)=UPPER('" + strUser_Name.ToString().Trim().ToUpper() + "') AND  PASSWORD='" + strPassword.ToString().Trim() + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        public DataTable onmDashboardReport(string strStartDate, string strEndDate, string strDivision, string strStatus)
        {
            string sql = string.Empty;

            if (strStatus.ToUpper() == "NC") //-- Updated
            {
                sql = string.Empty;

                sql = " SELECT UNIQUE DISTRICT DIST,DIST DISTCODE,SUM(OPEN_COUNT) OPENCOMPLAINTS,SUM(CLOSE_COUNT) CLOSECOMPLAINTS  FROM(      ";
                sql += " SELECT UNIQUE p.DISTRICT,p.DIST,  (NVL(p.OPENCOMPLAINTS,0)) OPEN_COUNT,(NVL(Q.CLOSECOMPLAINTS,0))  CLOSE_COUNT FROM (      ";
                sql += " SELECT DIST,DISTRICT,COUNT(*) OPENCOMPLAINTS     ";
                sql += " FROM ONM.ONM_FAULT_COLLECTIONS OFC, ONM.CC_DVB_COMP CDC            ";
                sql += " WHERE  OFC.complaint_no = CDC.compno(+)    ";
                sql += " AND  (Occurance_Dt  >= TO_DATE('" + strStartDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS')     ";
                sql += " AND  Occurance_Dt <= TO_DATE('" + strEndDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS'))    ";
                sql += " AND closing_dt IS NULL  AND CIRCLE IN ('SOUTH','WEST')  AND powercut_type='CC'     ";
                sql += " AND (ofc.priority='INDIVIDUAL' OR ofc.priority='AREA' OR ofc.priority='PCR')    ";
                if (strDivision.ToUpper() != "ALL".ToUpper())
                    sql += " AND upper(dist) in ('" + strDivision.ToUpper() + "') ";
                sql += " GROUP BY dist, district )P  ,     ";
                sql += "  ( SELECT DIST,DISTRICT,COUNT(*) CLOSECOMPLAINTS     ";
                sql += " FROM ONM.ONM_FAULT_COLLECTIONS OFC, ONM.CC_DVB_COMP CDC            ";
                sql += " WHERE  OFC.complaint_no = CDC.compno(+)  ";
                sql += " AND  (Occurance_Dt  >=TO_DATE('" + strStartDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS')  ";
                sql += " AND  Occurance_Dt <= TO_DATE('" + strEndDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS'))  ";
                sql += " AND closing_dt IS NOT NULL  AND CIRCLE IN ('SOUTH','WEST') AND powercut_type='CC'   ";
                sql += " AND (ofc.priority='INDIVIDUAL' OR ofc.priority='AREA' OR ofc.priority='PCR')     ";
                if (strDivision.ToUpper() != "ALL".ToUpper())
                    sql += " AND upper(dist) in ('" + strDivision.ToUpper() + "') ";
                sql += " GROUP BY dist, district )Q      ";
                sql += " WHERE P.DIST=Q.DIST(+)) WHERE (DISTRICT IS NOT NULL OR DISTRICT !='' AND DIST IS NOT NULL OR DIST != '' )     ";
                sql += " GROUP BY dist, district      ";

            }
            else if (strStatus.ToUpper() == "BD")
            {
                sql = string.Empty;

                sql = "  SELECT (SELECT DIV_NAME FROM onm.DIVISION D where D.DIV_CODE=A.DIST) DIST, A.DIST DISTCODE,NVL(B.Open_BD,0) OPENCOMPLAINTS,NVL(A.Close_BD,0) CLOSECOMPLAINTS  FROM    ";
                sql += " (SELECT OSD.DIST DIST, COUNT(*) Close_BD    ";
                sql += " FROM onm.ONM_SHUTDOWN_DETAILS OSD, onm.ONM_FAULT_COLLECTIONS OFC    ";
                sql += " WHERE OSD.CIRCLE IN ('SOUTH','WEST') AND OSD.SHUTDOWN_ID=SUBSTR(OFC.INSERTEDFROM,3,12)      ";
                sql += " AND (SHUTDOWN_DT >= TO_DATE('" + strStartDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS')   ";
                sql += " AND SHUTDOWN_DT<= TO_DATE('" + strEndDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS')) AND (SHUTDOWN_OVER ='Y')    ";
                sql += " AND (OSD.Powercut_Type = 'BD')  AND (OSD.FAULTTYPE='11 KV FEEDER')    ";
                sql += " AND OFC.NO_LOAD = 0    ";
                sql += " GROUP BY  OSD.DIST   ";
                sql += " ORDER BY OSD.DIST ASC) A ,   ";
                sql += " ( SELECT OSD.DIST DIST, COUNT(*) Open_BD   ";
                sql += " FROM onm.onm_shutdown_details OSD,   onm.ONM_FAULT_COLLECTIONS OFC     ";
                sql += " WHERE OSD.CIRCLE IN ('WEST','SOUTH') AND   ";
                sql += " OSD.SHUTDOWN_ID=SUBSTR(OFC.INSERTEDFROM,3,12)     ";
                sql += " AND (SHUTDOWN_DT >= TO_DATE('" + strStartDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS')    ";
                sql += " AND SHUTDOWN_DT<= TO_DATE('" + strEndDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS')) AND (SHUTDOWN_OVER<>'Y')    ";
                sql += " AND (OSD.Powercut_Type = 'BD')  AND (OSD.FAULTTYPE='11 KV FEEDER') AND OFC.NO_LOAD = 0     ";
                sql += " GROUP BY  OSD.DIST   ";
                sql += " ORDER BY OSD.DIST ASC )B   ";
                sql += " WHERE A.DIST = B.DIST(+)   ";
                if (strDivision.ToUpper() != "ALL".ToUpper())
                    sql += " AND A.DIST IN  ('" + strDivision.ToUpper() + "') ";
                sql += " ORDER BY dist   ";

            }
            else if (strStatus.ToUpper() == "HTLT")
            {
                sql = string.Empty;

                sql = " SELECT UNIQUE  DIST, DISTCODE,SUM(OPEN_COUNT) OPENCOMPLAINTS,SUM(CLOSE_COUNT) CLOSECOMPLAINTS  FROM(       ";
                sql += " SELECT UNIQUE p.DISTCODE,p.DIST,  (NVL(p.CLOSECOMPLAINTS,0)) CLOSE_COUNT,(NVL(Q.OPENCOMPLAINTS,0))  OPEN_COUNT FROM   ";
                sql += " ( SELECT  OSD.DIST DIST,OSD.DIST DISTCODE , COUNT(*) CLOSECOMPLAINTS   ";
                sql += " FROM onm.onm_shutdown_details OSD, onm.ONM_FAULT_COLLECTIONS OFC    ";
                sql += " WHERE OSD.CIRCLE IN ('SOUTH','WEST') AND OSD.SHUTDOWN_ID=SUBSTR(OFC.INSERTEDFROM,3,12) AND OSD.FAULTCATEGORY IN ('HT')  ";
                sql += " AND (SHUTDOWN_DT >= TO_DATE('" + strStartDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS')   ";
                sql += " AND SHUTDOWN_DT<= TO_DATE('" + strEndDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS'))   ";
                sql += " AND (OSD.Powercut_Type = 'SD') AND OFC.NO_LOAD = 0  AND CLOSING_DT IS NOT NULL AND  SHUTDOWN_DT IS NOT NULL  ";
                if (strDivision.ToUpper() != "ALL".ToUpper())
                    sql += " AND upper(OSD.DIST) in ('" + strDivision.ToUpper() + "') ";
                sql += " GROUP BY OSD.DIST  ";
                sql += " ORDER BY OSD.DIST )P,  ";
                sql += " ( SELECT  OSD.DIST DIST,OSD.DIST DISTCODE , COUNT(*) OPENCOMPLAINTS    ";
                sql += " FROM onm.onm_shutdown_details OSD, onm.ONM_FAULT_COLLECTIONS OFC    ";
                sql += " WHERE OSD.CIRCLE IN ('SOUTH','WEST') AND OSD.SHUTDOWN_ID=SUBSTR(OFC.INSERTEDFROM,3,12) AND OSD.FAULTCATEGORY IN ('HT') ";
                sql += " AND (SHUTDOWN_DT >= TO_DATE('" + strStartDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS')   ";
                sql += " AND SHUTDOWN_DT<= TO_DATE('" + strEndDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS'))   ";
                sql += " AND (OSD.Powercut_Type = 'SD') AND OFC.NO_LOAD = 0  AND CLOSING_DT IS  NULL AND  SHUTDOWN_DT IS  NULL  ";
                if (strDivision.ToUpper() != "ALL".ToUpper())
                    sql += " AND upper(OSD.DIST) in ('" + strDivision.ToUpper() + "') ";
                sql += " GROUP BY OSD.DIST  ";
                sql += " ORDER BY OSD.DIST )Q  ";
                sql += " WHERE P.DIST=Q.DIST(+) )   ";
                sql += " GROUP BY dist   ";
            }
            else if (strStatus.ToUpper() == "LT")
            {
                sql = string.Empty;

                sql = " SELECT UNIQUE  DIST, DISTCODE,SUM(OPEN_COUNT) OPENCOMPLAINTS,SUM(CLOSE_COUNT) CLOSECOMPLAINTS  FROM(       ";
                sql += " SELECT UNIQUE p.DISTCODE,p.DIST,  (NVL(p.CLOSECOMPLAINTS,0)) CLOSE_COUNT,(NVL(Q.OPENCOMPLAINTS,0))  OPEN_COUNT FROM   ";
                sql += " ( SELECT  OSD.DIST DIST,OSD.DIST DISTCODE , COUNT(*) CLOSECOMPLAINTS   ";
                sql += " FROM onm.onm_shutdown_details OSD, onm.ONM_FAULT_COLLECTIONS OFC    ";
                sql += " WHERE OSD.CIRCLE IN ('SOUTH','WEST') AND OSD.SHUTDOWN_ID=SUBSTR(OFC.INSERTEDFROM,3,12) AND OSD.FAULTCATEGORY IN ('LT')  ";
                sql += " AND (SHUTDOWN_DT >= TO_DATE('" + strStartDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS')   ";
                sql += " AND SHUTDOWN_DT<= TO_DATE('" + strEndDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS'))   ";
                sql += " AND (OSD.Powercut_Type = 'SD') AND OFC.NO_LOAD = 0  AND CLOSING_DT IS NOT NULL AND  SHUTDOWN_DT IS NOT NULL  ";
                if (strDivision.ToUpper() != "ALL".ToUpper())
                    sql += " AND upper(OSD.DIST) in ('" + strDivision.ToUpper() + "') ";
                sql += " GROUP BY OSD.DIST  ";
                sql += " ORDER BY OSD.DIST )P,  ";
                sql += " ( SELECT  OSD.DIST DIST,OSD.DIST DISTCODE , COUNT(*) OPENCOMPLAINTS    ";
                sql += " FROM onm.onm_shutdown_details OSD, onm.ONM_FAULT_COLLECTIONS OFC    ";
                sql += " WHERE OSD.CIRCLE IN ('SOUTH','WEST') AND OSD.SHUTDOWN_ID=SUBSTR(OFC.INSERTEDFROM,3,12) AND OSD.FAULTCATEGORY IN ('LT') ";
                sql += " AND (SHUTDOWN_DT >= TO_DATE('" + strStartDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS')   ";
                sql += " AND SHUTDOWN_DT<= TO_DATE('" + strEndDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS'))   ";
                sql += " AND (OSD.Powercut_Type = 'SD') AND OFC.NO_LOAD = 0  AND CLOSING_DT IS  NULL AND  SHUTDOWN_DT IS  NULL  ";
                if (strDivision.ToUpper() != "ALL".ToUpper())
                    sql += " AND upper(OSD.DIST) in ('" + strDivision.ToUpper() + "') ";
                sql += " GROUP BY OSD.DIST  ";
                sql += " ORDER BY OSD.DIST )Q  ";
                sql += " WHERE P.DIST=Q.DIST(+) )   ";
                sql += " GROUP BY dist   ";
            }
            else if (strStatus.ToUpper() == "SL") //---Updated 
            {
                sql = string.Empty;

                sql = " SELECT UNIQUE  DIST,DISTCODE DISTCODE,SUM(OPEN_COUNT) OPENCOMPLAINTS,SUM(CLOSE_COUNT) CLOSECOMPLAINTS  FROM(    ";
                sql += " SELECT UNIQUE p.DIST,p.DIST DISTCODE,  (NVL(p.OPENCOMPLAINTS,0)) OPEN_COUNT,(NVL(Q.CLOSECOMPLAINTS,0))  CLOSE_COUNT FROM (   ";
                sql += " SELECT ofc.dist, ofc.dist DISTCODE, COUNT(*) OPENCOMPLAINTS  ";
                sql += " FROM onm.ONM_FAULT_COLLECTIONS OFC, onm.ONM_SL_FAULT_DETAILS OSFD   ";
                sql += " WHERE OFC.FAULTID=OSFD.FAULTID AND SUBSTR(OFC.INSERTEDFROM,1,2)='CC'    ";
                sql += " AND OFC.priority='STREET LIGHT' AND OFC.FCODE IN ('F012','F013','F015','F027','F033')    ";
                sql += " AND OCCURANCE_DT >= TO_DATE('" + strStartDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS')    ";
                sql += " AND OCCURANCE_DT <= TO_DATE('" + strEndDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS')   ";
                sql += " AND ((OFC.CLOSING_DT IS NULL     ";
                sql += " AND ( OSFD.STATUS='M' OR OSFD.STATUS='O' OR OSFD.STATUS IS NULL )) OR (CLOSING_DT > TO_DATE('" + strEndDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS')))     ";
                if (strDivision.ToUpper() != "ALL".ToUpper())
                    sql += " AND UPPER(ofc.dist) in ('" + strDivision.ToUpper() + "') ";
                sql += " AND CIRCLE IN ('WEST','SOUTH') GROUP BY dist   ";
                sql += " ORDER BY ofc.dist DESC )P  , (   ";
                sql += " SELECT ofc.dist, ofc.dist DISTCODE, COUNT(*) CLOSECOMPLAINTS  ";
                sql += " FROM onm.ONM_FAULT_COLLECTIONS OFC, onm.ONM_SL_FAULT_DETAILS OSFD   ";
                sql += " WHERE OFC.FAULTID=OSFD.FAULTID AND SUBSTR(OFC.INSERTEDFROM,1,2)='CC'  ";
                sql += " AND OFC.priority='STREET LIGHT' AND OFC.FCODE IN ('F012','F013','F015','F027','F033')   ";
                sql += " AND OCCURANCE_DT >= TO_DATE('" + strStartDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS')    ";
                sql += " AND OCCURANCE_DT <= TO_DATE('" + strEndDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS')   ";
                sql += " AND (OFC.CLOSING_DT IS NOT NULL) AND OSFD.RESTORED_DT IS NOT NULL   ";
                sql += " AND  OSFD.STATUS = 'C'   ";
                sql += " AND OFC.CLOSING_DT >= TO_DATE('" + strStartDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS')  ";
                sql += " AND OFC.CLOSING_DT <= TO_DATE('" + strEndDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS')   ";
                sql += " AND CIRCLE IN ('WEST','SOUTH') ";
                if (strDivision.ToUpper() != "ALL".ToUpper())
                    sql += " AND UPPER(ofc.dist) in ('" + strDivision.ToUpper() + "') ";
                sql += " GROUP BY ofc.dist  ";
                sql += " ORDER BY ofc.dist DESC ) Q   ";
                sql += " WHERE P.DIST=Q.DIST(+))  ";
                sql += " GROUP BY dist  ";
            }
            else
            {

                sql = string.Empty;

            }



            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        public DataTable onmDashboardOnSelect(string strStartDate, string strEndDate, string strDivision, string strCompType, string strCompStatus)
        {
            string sql = string.Empty;
            // 
            if (strCompType.ToUpper() == "NC")  // No Current Complaint
            {
                sql = string.Empty;
                sql = " SELECT TO_CHAR(OCCURANCE_DT,'DD-Mon-YY HH24:MI AM') REG_DATE ,REG_MODULE_NAME Source,  ";
                sql = sql + "  (SELECT FAULT FROM ONM_DVB_FAULT WHERE  FCODE = OFC.FCODE)  ";
                sql = sql + "  AS COMPLAINT_TYPE ,SUBSTR(COMPLAINT_NO,9,11) COMP_NO, FAULTID , (COM_ADD1 ||  ' , ' || COM_ADD2 ) as Address, OFC.AREA, COMPLAINT_CENTRE, COMPLAINT_CENTRE_PH_NO, COM_ADD1 ,COM_ADD2 , COM_PHONE ";
                sql = sql + "  FROM ONM_FAULT_COLLECTIONS OFC, CC_DVB_COMP CDC WHERE  OFC.complaint_no = CDC.compno(+)     ";
                sql = sql + "  AND powercut_type='CC' AND (ofc.priority='INDIVIDUAL' OR ofc.priority='AREA' OR ofc.priority='PCR')   "; ///// (ofc.priority='INDIVIDUAL'  OR ofc.priority='PCR') --AND OFC.FCODE NOT IN ('F025') ";
                sql = sql + "  AND  UPPER(OFC.DIST)='" + strDivision.ToUpper() + "' ";
                if (strCompStatus.ToUpper() == "OPEN")
                    sql = sql + " AND (CLOSING_DT IS NULL  OR CLOSING_DT ='')  ";
                if (strCompStatus.ToUpper() == "CLOSE")
                    sql = sql + " AND (CLOSING_DT IS NOT NULL OR CLOSING_DT !='') ";
                sql = sql + "  AND (Occurance_Dt  >=TO_DATE('" + strStartDate + " 00:00:00','dd/Mon/yyyy HH24:MI:SS')  AND  Occurance_Dt <=  TO_DATE('" + strEndDate + " 23:59:59','dd/Mon/yyyy HH24:MI:SS')) ";
                sql = sql + "  ORDER BY Occurance_Dt DESC ";
            }
            else if (strCompType.ToUpper() == "BD")  // Breakdown
            {
                sql = string.Empty;
                sql = "  SELECT SUBSTR(COMPLAINT_NO,9,11) COMP_NO, FAULTID,TO_CHAR(SHUTDOWN_DT,'DD-Mon-YY HH24:MI AM') REG_DATE , OSD.REASON COMPLAINT_TYPE ,  ";
                sql = sql + " CASE WHEN OFC.COMPLAINT_CENTRE IS NULL THEN '-' ELSE OFC.COMPLAINT_CENTRE END SOURCE  , ";
                sql = sql + " CASE WHEN AC_SHUTDOWN_OVER_DT IS NULL THEN  ";
                sql = sql + " FLOOR(((SYSDATE-SHUTDOWN_DT)*24*60*60)/3600)|| ' H: ' ||FLOOR((((SYSDATE-SHUTDOWN_DT)*24*60*60) -FLOOR(((SYSDATE-SHUTDOWN_DT)*24*60*60)/3600)*3600)/60)|| ' M '  ";
                sql = sql + " ELSE  ";
                sql = sql + " FLOOR(((AC_SHUTDOWN_OVER_DT-SHUTDOWN_DT)*24*60*60)/3600)|| ' H: ' ||FLOOR((((AC_SHUTDOWN_OVER_DT-SHUTDOWN_DT)*24*60*60) -FLOOR(((AC_SHUTDOWN_OVER_DT-SHUTDOWN_DT)*24*60*60)/3600)*3600)/60)|| ' M '   	END time_difference  , GRID_NAME, FEEDER_NAME, SUBSTATION_NAME ";
                sql = sql + " FROM ONM_SHUTDOWN_DETAILS OSD, ONM_FAULT_COLLECTIONS OFC  WHERE   ";
                sql = sql + " OSD.SHUTDOWN_ID=SUBSTR(OFC.INSERTEDFROM,3,12)   AND OSD.CIRCLE IN ('WEST','SOUTH')   ";
                sql = sql + " AND (OSD.Powercut_Type = 'BD') AND (OSD.FAULTTYPE='11 KV FEEDER') AND OFC.NO_LOAD = 0  ";
                sql = sql + " AND  (SHUTDOWN_DT >= TO_DATE('" + strStartDate + " 00:00:00','dd/Mon/yyyy HH24:MI:SS') AND SHUTDOWN_DT<= TO_DATE('" + strEndDate + " 23:59:59','dd/Mon/yyyy HH24:MI:SS')) ";
                sql = sql + " AND   UPPER(OFC.DIST) IN  ('" + strDivision + "') ";
                if (strCompStatus.ToUpper() == "CLOSE")
                    sql = sql + " AND (SHUTDOWN_OVER ='Y')  ";
                if (strCompStatus.ToUpper() == "OPEN")
                    sql = sql + " AND (SHUTDOWN_OVER<>'Y')  ";
                sql = sql + " ORDER BY SHUTDOWN_DT DESC  ";
            }
            else if (strCompType.ToUpper() == "SL")  // No Current Complaint
            {
                sql = string.Empty;
                sql = " SELECT TO_CHAR(OFC.OCCURANCE_DT,'DD-Mon-YY HH24:MI AM') REG_DATE , (SELECT FAULT FROM onm.ONM_DVB_FAULT WHERE  FCODE = OFC.FCODE)   ";
                sql = sql + "  AS COMPLAINT_TYPE , OFC.faultid, OFC.COM_NAME, OFC.COM_ADD1||OFC.COM_ADD2 AS COM_ADD,  ";
                sql = sql + "  OFC.COM_PHONE, TO_CHAR(OFC.CLOSING_DT,'DD-Mon-YY HH24:MI AM') CLOSING_DATE, OFC.DIST,  OFC.AREA, OFC.COMPLAINT_CENTRE, OFC.COMPLAINT_NO ";
                sql = sql + "  FROM onm.ONM_FAULT_COLLECTIONS OFC, onm.ONM_SL_FAULT_DETAILS OSFD WHERE OFC.FAULTID=OSFD.FAULTID AND SUBSTR(OFC.INSERTEDFROM,1,2)='CC'  ";
                sql = sql + "  AND OFC.priority='STREET LIGHT' AND OFC.FCODE IN ('F012','F013','F015','F027','F033')   "; ///// (ofc.priority='INDIVIDUAL'  OR ofc.priority='PCR') --AND OFC.FCODE NOT IN ('F025') ";
                sql = sql + "  AND  UPPER(OFC.DIST)='" + strDivision.ToUpper() + "' ";
                if (strCompStatus.ToUpper() == "OPEN")
                    sql = sql + "  AND ((OFC.CLOSING_DT IS NULL AND ( OSFD.STATUS='M' OR OSFD.STATUS='O' OR OSFD.STATUS IS NULL )) OR (CLOSING_DT > TO_DATE('" + strEndDate + " 23:59:59','dd/Mon/yyyy HH24:MI:SS'))) ";
                if (strCompStatus.ToUpper() == "CLOSE")
                {
                    sql = sql + " AND (OFC.CLOSING_DT IS NOT NULL) AND OSFD.RESTORED_DT IS NOT NULL AND  OSFD.STATUS = 'C'  ";
                    sql = sql + "  AND OFC.CLOSING_DT >=TO_DATE('" + strStartDate + " 00:00:00','dd/Mon/yyyy HH24:MI:SS') AND OFC.CLOSING_DT <=  TO_DATE('" + strEndDate + " 23:59:59','dd/Mon/yyyy HH24:MI:SS') ";
                }
                sql = sql + "  AND (Occurance_Dt  >=TO_DATE('" + strStartDate + " 00:00:00','dd/Mon/yyyy HH24:MI:SS')  AND  Occurance_Dt <=  TO_DATE('" + strEndDate + " 23:59:59','dd/Mon/yyyy HH24:MI:SS')) ";
                sql = sql + "  ORDER BY Occurance_Dt DESC ";
            }
            else if (strCompType.ToUpper() == "HTLT")  // No Current Complaint
            {
                sql = string.Empty;
                sql = "  SELECT TO_CHAR(OFC.OCCURANCE_DT,'DD-Mon-YY HH24:MI AM') REG_DATE ,SHUTDOWN_TYPE AS COMPLAINT_TYPE, OFC.faultid, GRID_NAME COM_NAME, ";
                sql = sql + "   FEEDER_NAME AS COM_ADD, OFC.COM_PHONE, TO_CHAR(OFC.CLOSING_DT,'DD-Mon-YY HH24:MI AM') CLOSING_DATE, OFC.DIST, OFC.AREA, OFC.COMPLAINT_CENTRE, OFC.COMPLAINT_NO   ";
                sql = sql + "  FROM onm.onm_shutdown_details OSD, onm.ONM_FAULT_COLLECTIONS OFC  ";
                sql = sql + "  WHERE OSD.CIRCLE IN ('SOUTH','WEST') AND OSD.SHUTDOWN_ID=SUBSTR(OFC.INSERTEDFROM,3,12) AND OSD.FAULTCATEGORY IN ('HT') ";
                sql = sql + "  AND  UPPER(OFC.DIST)='" + strDivision.ToUpper() + "' AND (OSD.Powercut_Type = 'SD') AND OFC.NO_LOAD = 0  ";
                if (strCompStatus.ToUpper() == "OPEN")
                    sql = sql + " AND CLOSING_DT IS  NULL AND  SHUTDOWN_DT IS  NULL  ";
                if (strCompStatus.ToUpper() == "CLOSE")
                    sql = sql + " AND CLOSING_DT IS NOT NULL AND  SHUTDOWN_DT IS NOT NULL  ";
                sql = sql + "  AND (SHUTDOWN_DT  >=TO_DATE('" + strStartDate + " 00:00:00','dd/Mon/yyyy HH24:MI:SS')  AND  SHUTDOWN_DT <=  TO_DATE('" + strEndDate + " 23:59:59','dd/Mon/yyyy HH24:MI:SS')) ";
                sql = sql + "  ORDER BY Occurance_Dt DESC ";
            }
            else if (strCompType.ToUpper() == "LT")  // No Current Complaint
            {
                sql = string.Empty;
                sql = "  SELECT TO_CHAR(OFC.OCCURANCE_DT,'DD-Mon-YY HH24:MI AM') REG_DATE ,SHUTDOWN_TYPE AS COMPLAINT_TYPE, OFC.faultid, GRID_NAME COM_NAME, ";
                sql = sql + "   FEEDER_NAME AS COM_ADD, OFC.COM_PHONE, TO_CHAR(OFC.CLOSING_DT,'DD-Mon-YY HH24:MI AM') CLOSING_DATE, OFC.DIST, OFC.AREA, OFC.COMPLAINT_CENTRE, OFC.COMPLAINT_NO   ";
                sql = sql + "  FROM onm.onm_shutdown_details OSD, onm.ONM_FAULT_COLLECTIONS OFC  ";
                sql = sql + "  WHERE OSD.CIRCLE IN ('SOUTH','WEST') AND OSD.SHUTDOWN_ID=SUBSTR(OFC.INSERTEDFROM,3,12) AND OSD.FAULTCATEGORY IN ('LT') ";
                sql = sql + "  AND  UPPER(OFC.DIST)='" + strDivision.ToUpper() + "' AND (OSD.Powercut_Type = 'SD') AND OFC.NO_LOAD = 0  ";
                if (strCompStatus.ToUpper() == "OPEN")
                    sql = sql + " AND  CLOSING_DT IS  NULL AND  SHUTDOWN_DT IS  NULL  ";
                if (strCompStatus.ToUpper() == "CLOSE")
                    sql = sql + " AND  CLOSING_DT IS NOT NULL AND  SHUTDOWN_DT IS NOT NULL  ";
                sql = sql + "  AND (SHUTDOWN_DT  >=TO_DATE('" + strStartDate + " 00:00:00','dd/Mon/yyyy HH24:MI:SS')  AND  SHUTDOWN_DT <=  TO_DATE('" + strEndDate + " 23:59:59','dd/Mon/yyyy HH24:MI:SS')) ";
                sql = sql + "  ORDER BY Occurance_Dt DESC ";
            }
            else // EHV
            {


            }



            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        public DataTable onmDashboardReportOld(string strStartDate, string strEndDate, string strDivision)
        {
            string sql = string.Empty;

            sql = " SELECT  a.dist distCode, DISTRICT dist,  COUNT(*) openComplaints  FROM (SELECT (CASE WHEN oFC.FAULTSTATUS IS NULL THEN 'OPEN' WHEN oFC.FAULTSTATUS = '' THEN  'OPEN'        ";
            sql += " WHEN oFC.FAULTSTATUS = 'OPEN' THEN  'OPEN' WHEN oFC.FAULTSTATUS = 'CLOSE' THEN  'CLOSE' END) FAULTSTATUS       ";
            sql += " ,DIST,DISTRICT, OFC.FaultID,TO_CHAR(OFC.Occurance_Dt,'dd-Mon-yyyy hh:mm:ss PM') OccDate, OFC.EffectedElement, Trim(OFC.Cable_From) Cable_From,Trim(OFC.Cable_To) Cable_To,Trim(OFC.Area) Area,       ";
            sql += " OFC.AreaCode, OFC.FeederCode,OFC.FEEDERNAME,OFC.GridCode,OFC.GridName,OFC.SUBSTATIONCODE, OFC.SUBSTATIONNAME,OFC.LT_FEEDER_FROM , OFC.LT_FEEDER_TO,       ";
            sql += " OFC.All_Transformer_No, Trim(OFC.FaultType) FaultType,OFC.Insertedfrom,OFC.EXPECTED_DUR_IN_HRS, OFC.Child,Trim(OFC.TotalResources) TotalResources,       ";
            sql += " Trim(OFC.COMPLAINT_STATUS) COMPLAINT_STATUS, OFC.NoOfComplaints,trim(OFC.CCFAULT_INF_TO_COMP_CENTER) CCFAULT_INF_TO_COMP_CENTER,OFC.USERNAME,       ";
            sql += " OFC.USER_IP, Trim(OFC.CCFAULT_FORWARDED) CCFAULT_FORWARDED,OFC.BD_type,TO_CHAR(OFC.Backfeed_datetime,'dd-Mon-yyyy hh24:mi') BF_datetime,       ";
            sql += " OFC.PRIORITY,OFC.LTHT_CABLE,OFC.NO_LOAD,OFC.CURRENTSTATUS,OFC.OCCURANCE_DT,OFC.POWERCUT_TYPE,OFC.FAULTID_AGAINST_NC,       ";
            sql += " OFC.REMARKS,OFC.COMPLAINT_NO,DELAYED_COMP ,CDC.kno,CDC.compno ,ofc.CONSUMER_TYPE,DECODE(ADD2,NULL,add1,add2)EB_AREA,CDC.REG_MODULE_NAME,CDC.CALL_FROM       ";
            sql += " FROM ONM.ONM_FAULT_COLLECTIONS OFC, ONM.CC_DVB_COMP CDC       ";
            sql += " WHERE (cdc.CALL_CATEG='NC' OR cdc.CALL_CATEG IS NULL OR ofc.NAME='ANDRIOD')       ";
            sql += " AND cdc.COMPNO=ofc.COMPLAINT_NO  AND CIRCLE IN ('SOUTH','WEST')       ";
            sql += " AND OFC.PRIORITY NOT IN ('STREET LIGHT')        ";
            sql += " AND Occurance_Dt>SYSDATE-365 AND Occurance_Dt<SYSDATE+1          ";
            sql += " AND FAULT_DUR_IN_SEC =-1        ";
            sql += " AND CC_INF_PERSON IS NOT NULL    AND  TO_CHAR(OFC.Occurance_Dt,'dd-Mon-yyyy') BETWEEN TO_DATE('" + strStartDate + "','dd-Mon-yyyy') AND TO_DATE('" + strEndDate + "','dd-Mon-yyyy')      ";  //23-Jan-2016   ---  26-May-2016
            if (strDivision != "")
                sql += " AND dist in ('" + strDivision + "') ";
            sql += " ORDER BY OFC.Occurance_Dt DESC, OFC.Area ASC) a WHERE a.FAULTSTATUS = 'OPEN'       ";
            sql += " GROUP BY dist  ,  DISTRICT     ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        public DataTable onmDashboardOnSelectOld(string strStartDate, string strEndDate, string strDivision)
        {
            string sql = string.Empty;
            //   
            sql = " SELECT FaultID, 'NC' Complaint_Type, REG_MODULE_NAME Source, OccDate Reg_Date FROM ( SELECT (CASE WHEN oFC.FAULTSTATUS IS NULL THEN 'OPEN' WHEN oFC.FAULTSTATUS = '' THEN  'OPEN'                ";
            sql += " WHEN oFC.FAULTSTATUS = 'OPEN' THEN  'OPEN' WHEN oFC.FAULTSTATUS = 'CLOSE' THEN  'CLOSE' END) FAULTSTATUS  ,             ";
            sql += " DIST,ofc.Name,CALL_CATEG,CDC.REG_MODULE_NAME,DISTRICT, OFC.FaultID,TO_CHAR(OFC.Occurance_Dt,'dd-Mon-yyyy hh:mm:ss PM') OccDate, OFC.EffectedElement, Trim(OFC.Cable_From) Cable_From,Trim(OFC.Cable_To) Cable_To,Trim(OFC.Area) Area,               ";
            sql += " OFC.AreaCode, OFC.FeederCode,OFC.FEEDERNAME,OFC.GridCode,OFC.GridName,OFC.SUBSTATIONCODE, OFC.SUBSTATIONNAME,OFC.LT_FEEDER_FROM , OFC.LT_FEEDER_TO,               ";
            sql += " OFC.All_Transformer_No, Trim(OFC.FaultType) FaultType,OFC.Insertedfrom,OFC.EXPECTED_DUR_IN_HRS, OFC.Child,Trim(OFC.TotalResources) TotalResources,               ";
            sql += " Trim(OFC.COMPLAINT_STATUS) COMPLAINT_STATUS, OFC.NoOfComplaints,trim(OFC.CCFAULT_INF_TO_COMP_CENTER) CCFAULT_INF_TO_COMP_CENTER,OFC.USERNAME,               ";
            sql += " OFC.USER_IP, Trim(OFC.CCFAULT_FORWARDED) CCFAULT_FORWARDED,OFC.BD_type,TO_CHAR(OFC.Backfeed_datetime,'dd-Mon-yyyy hh24:mi') BF_datetime,               ";
            sql += " OFC.PRIORITY,OFC.LTHT_CABLE,OFC.NO_LOAD,OFC.CURRENTSTATUS,OFC.OCCURANCE_DT,OFC.POWERCUT_TYPE,OFC.FAULTID_AGAINST_NC,               ";
            sql += " OFC.REMARKS,OFC.COMPLAINT_NO,DELAYED_COMP ,CDC.kno,CDC.compno ,ofc.CONSUMER_TYPE,DECODE(ADD2,NULL,add1,add2)EB_AREA,CDC.CALL_FROM         ";
            sql += " FROM ONM.ONM_FAULT_COLLECTIONS OFC, ONM.CC_DVB_COMP CDC               ";
            sql += " WHERE (cdc.CALL_CATEG='NC' OR cdc.CALL_CATEG IS NULL OR ofc.NAME='ANDRIOD')               ";
            sql += " AND cdc.COMPNO=ofc.COMPLAINT_NO  AND CIRCLE IN ('SOUTH','WEST')               ";
            sql += " AND OFC.PRIORITY NOT IN ('STREET LIGHT')                ";
            sql += " AND Occurance_Dt>SYSDATE-365 AND Occurance_Dt<SYSDATE+1           ";
            sql += " AND FAULT_DUR_IN_SEC =-1                ";
            sql += " AND CC_INF_PERSON IS NOT NULL AND dist='" + strDivision + "'   AND  TO_CHAR(OFC.Occurance_Dt,'dd-Mon-yyyy') BETWEEN TO_DATE('" + strStartDate + "','dd-Mon-yyyy') AND TO_DATE('" + strEndDate + "','dd-Mon-yyyy')     ";
            sql += " ORDER BY OFC.Occurance_Dt DESC, OFC.Area ASC) a WHERE a.FAULTSTATUS = 'OPEN'          ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        public string onmSelect(string str)
        {
            string sql = " select * from ONM_LINE_MAN_DETAILS";
            string dt = string.Empty;
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_Test(sql);
            return dt;
        }


        public DataTable onmLinemenUserList(string strDist, string strTOImeiNo)
        {
            string sql = string.Empty;
            //sql = " SELECT trim(UPPER(NAME ||'-'||EMPNO)) Name ,   (SELECT COUNT(*) FROM ONM.ONM_FAULT_COLLECTIONS  ";
            //sql += " WHERE CC_INF_PERSON IN (UPPER(lm.NAME ||'-'||lm.EMPNO)) AND FAULT_DUR_IN_SEC=-1) pendingCount ";
            //sql += " FROM onm.ONM_LINE_MAN_DETAILS lm  ";
            //sql += " WHERE UPPER(DIVISION)=UPPER('NHP')  ";
            //sql += " AND active='1' AND imei_no IS NOT NULL ";

            sql = " SELECT device_name,trim(UPPER(NAME ||'-'||EMPNO)) Name ,   (SELECT COUNT(*) FROM ONM.ONM_FAULT_COLLECTIONS   ";
            sql += " WHERE CC_INF_PERSON IN (UPPER(lm.NAME ||'-'||lm.EMPNO)) AND FAULT_DUR_IN_SEC=-1) pendingCount ";
            sql += " FROM ONM_LINE_MAN_DETAILS lm  , OMS_DEVICE_LOGIN_MST dl   ";
            sql += " WHERE UPPER(DIVISION)=UPPER('" + strDist + "')   AND TO_IMEI IN ('" + strTOImeiNo + "')  ";
            sql += " AND dl.LINEMEN_ID = lm.empno AND active='1'  ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        //07042016
        public DataTable getSLVendorlist(string distName, string complaintCentre, string status, string areaName)//03022016 -- No Current Complaint List
        {
            string sql = string.Empty;
            sql = "  SELECT NAME ||'-'||EMPNO AS Vendor FROM SL_VENDOR_DETAILS  ";
            sql += "  WHERE DIVISION LIKE ( '%" + distName + "%') AND  ACTIVE=1  ORDER BY name  ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        public bool updateSLAllocateComplaint(string acknowledgeBy, string acknowledgeByDesig, string scheduleDt, string areaName,
        string areaCode, string operationalCompNo, string faultId)//03022016
        {
            string sql = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string userRemarks = string.Empty;
            userRemarks = acknowledgeByDesig;

            sql = " SELECT * FROM ONM_SL_FAULT_DETAILS WHERE FAULTID='" + faultId + "'  ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_ONM(sql);

            if (dt.Rows.Count > 0)
            {
                sql = string.Empty;
                sql = " UPDATE ONM_SL_FAULT_DETAILS SET ACKNOWLEDGE_BY ='" + acknowledgeBy + "',STATUS='C', ";
                sql += " ACKNOWLEDGE_DT= SYSDATE  ,ACKNOWLEDGE_BY_DESIG = 'VENDOR',  ";
                sql += " SCHEDULE_DT = TO_DATE('" + scheduleDt + "','dd-MM-yyyy HH:MI:SS AM') , PERTAIN_TO='' ";
                sql += " WHERE FaultId='" + faultId + "' ";

                sql2 = string.Empty;
                sql2 = " UPDATE ONM_FAULT_COLLECTIONS SET CLOSING_DT=SYSDATE, CCREMARKS='" + userRemarks + "' , FAULTSTATUS='CLOSE' , COMPLAINT_STATUS='C' , FAULT_DUR_IN_SEC=7282  WHERE faultid = '" + faultId + "'  ";

                //sql3 = string.Empty;
                //sql3 = " UPDATE CC_DVB_COMP SET AREA='" + areaName + "',AREA_CODE='" + areaCode + "'  WHERE OPERATIONAL_COMP_NO = '" + operationalCompNo + "' ";


                DbFunction objdbfunNew = new DbFunction();
                if (objdbfunNew.dmlsinglequeryONM_New(sql))
                {
                    //if (objdbfunNew.dmlsinglequeryONM_New(sql2)) -- Removed AJ & RV
                    //{
                    //if (objdbfunNew.dmlsinglequeryONM_New(sql3))
                    //{
                    // return true;
                    //}
                    //}
                }



                //    try
                //    {
                //        using (OleDbConnection connection = new OleDbConnection(
                //           "Provider=MSDAORA.1; User ID=onm; Password=tn5jsdn; Data Source=onmdb;"))
                //        {
                //            OleDbCommand command = new OleDbCommand(sql2, connection);
                //            command.Connection.Open();
                //            command.ExecuteNonQuery();

                //            command.Connection.Close();

                //            return true;
                //        }
                //    }
                //    catch (Exception Ex)
                //    {

                //        return false;
                //    }

                //    return false;
            }

            return false;
        }


        public bool newConnOTPVerifyFrmRqst(string strOTP, string strLblID)
        {

            //Check : OTP for Lbl Id
            string sql = string.Empty;
            sql = " SELECT * FROM DSS_NW_CONN_VERIFY WHERE OTP ='" + strOTP + "' AND ID='" + strLblID + "' ";

            DataTable dtReqstIdNo = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dtReqstIdNo = objdbfun.dmlgetquery_dcrep(sql);
            if (dtReqstIdNo.Rows.Count > 0)
            {
                sql = string.Empty;
                sql = "UPDATE DSS_NW_CONN_VERIFY SET USER_VERIFIED = 'Y' WHERE ID = '" + strLblID + "'";
                objdbfun = new DbFunction();
                return objdbfun.dmlsinglequery_dcrep(sql);
            }
            return false;
        }

        public bool newConnResendOTPVerifyFrmRqst(string strLblID)
        {

            //Check : OTP for Lbl Id
            string sql = string.Empty;
            sql = " SELECT OTP FROM DSS_NW_CONN_VERIFY WHERE ID='" + strLblID + "' ";

            DataTable dtReqstIdNo = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dtReqstIdNo = objdbfun.dmlgetquery_dcrep(sql);
            if (dtReqstIdNo.Rows.Count > 0)
            {
                sql = string.Empty;
                sql = "UPDATE DSS_NW_CONN_SMS_RQST SET STATUS='N' WHERE SMS_ID = '" + strLblID + "'";
                objdbfun = new DbFunction();

                return objdbfun.dmlsinglequery_dcrep(sql);
            }
            return false;
        }

        public static string otp = "";

        public string newConnOTPRqstFrmInsert(string strDiscom, string strFirstName, string strLastName, string strEmailId, string strMobileNo)
        {
            string lblID = string.Empty;

            //Generate Request Id : SELECT SEQ_NW_CONN_VERIFY.NEXTVAL FROM DUAL
            string idSQL = "SELECT SEQ_NW_CONN_VERIFY.NEXTVAL FROM DUAL";
            DataTable dtReqstIdNo = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dtReqstIdNo = objdbfun.dmlgetquery_dcrep(idSQL);
            if (dtReqstIdNo.Rows.Count > 0)
            {
                lblID = "DSS/APP/" + dtReqstIdNo.Rows[0][0].ToString();
            }

            //Generate OTP : SELECT ROUND(dbms_random.value(1000000,9999999)) num FROM dual
            if (String.IsNullOrEmpty(lblID.Trim()))
            {
                return "";
            }
            else
            {
                String otpSQL = "SELECT ROUND(dbms_random.value(1000000,9999999)) num FROM dual";
                DataTable dtotp = new DataTable();
                objdbfun = new DbFunction();
                dtotp = objdbfun.dmlgetquery_dcrep(otpSQL);

                otp = dtotp.Rows[0][0].ToString();

                string insSQL = "INSERT INTO DSS_NW_CONN_VERIFY (ID,OTP,EMAIL_ADDRESS,MOBILE_NO,NAME,LAST_NAME)";
                insSQL += "VALUES ('" + lblID.Trim() + "','" + otp.Trim() + "','" + strEmailId.Trim() + "','" + strMobileNo.Trim() + "','" + strFirstName.Trim() + "','" + strLastName.Trim() + "')";

                WriteIntoFile(DateTime.Now.ToString() + "NC OTP Req. Method - 1 :  " + insSQL);

                objdbfun = new DbFunction();
                bool strInserted = objdbfun.dmlsinglequery_dcrep(insSQL);
                if (strInserted == true)
                {
                    //Success : "An OTP has been sent on your entered Mobile No. for registration";

                    string msgbodysql = "SELECT * FROM DSS_OTP_MSG_CONTENT";
                    DataTable dtmsgbodysql = new DataTable();
                    objdbfun = new DbFunction();
                    dtmsgbodysql = objdbfun.dmlgetquery_dcrep(msgbodysql);

                    string _sMsg = dtmsgbodysql.Rows[0]["MESSAGE_BODY"].ToString().Trim().Replace("#######", otp.Trim());

                    string insSQLRqst = " INSERT INTO DSS_NW_CONN_SMS_RQST (SMS_ID, COMPANY, MOBILE_NO, MESSAGE_TXT, IDENT_TYP, STATUS) VALUES ('" + lblID + "', '" + strDiscom + "', " + strMobileNo.Trim() + " , '" + _sMsg + "', 'U01', 'N') "; //SEQ_DSS_NW_CONN_SMS_RQST.NEXTVAL

                    objdbfun = new DbFunction();
                    objdbfun.dmlsinglequery_dcrep(insSQLRqst);

                    WriteIntoFile(DateTime.Now.ToString() + "NC OTP Req. Method " + insSQLRqst);

                    return "" + lblID;
                }
                else
                {

                    return "";
                }

            }

        }

        public DataTable onmStreetLightAreaList(string distCode)
        {
            string sql = string.Empty;

            string divName = distCode.Replace(",", "','");

            sql = " SELECT AREA_NAME,COMPLAINT_CENTRE,DIST_NAME,AREA_CODE,COMPLAINT_CENTRE_PH_NO   ";
            sql += "  FROM ONM_TRANSFORMER_SETUP_DETAIL  WHERE CIRCLE IN ('SOUTH','WEST')  AND DIST IN ('" + divName + "')   ";   //  AND  ROWNUM <1150   //For BRPL -- WHERE CIRCLE IN ('SOUTH','WEST')
            sql += " ORDER BY AREA_NAME ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        public DataTable onmStreetLightAreaListAll()
        {
            string sql = string.Empty;

            sql = " SELECT AREA_NAME,COMPLAINT_CENTRE,DIST_NAME,AREA_CODE,COMPLAINT_CENTRE_PH_NO   ";
            sql += "  FROM ONM_TRANSFORMER_SETUP_DETAIL  WHERE CIRCLE IN ('SOUTH','WEST')    ";   //  AND  ROWNUM <1150   //For BRPL -- WHERE CIRCLE IN ('SOUTH','WEST')
            sql += " ORDER BY AREA_NAME ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        public string onmInsrtStreetLightComplaint(string caNo, string area_Code, string fault_Code, string sarvey_Typ, string fixture_Typ,
           string fixture_No, string since_LastInMin, string since_LastInDays, string cust_Name, string cust_Add1, string cust_Add2,
           string cust_MbNo, string cust_AddlContNo, string cust_Road, string cust_Landmark, string cust_Rmks)
        {
            AllSelect allSelect = new AllSelect();
            AllInsert allInsert = new AllInsert();
            try
            {
                string cboCallCateg = "NC";
                string xenStatus = "N";
                string powerCutType = "CC";
                string cboPriority = "STREET LIGHT";

                string txtCustKNo = caNo;
                string lblAreaCode = area_Code;
                string lblSurveyTyp = sarvey_Typ;
                string txtCustMob = cust_MbNo;
                string txtCustName = cust_Name;
                string txtCustAdd1 = cust_Add1;
                string txtCustAdd2 = cust_Add2;
                string lblFCode = fault_Code;
                string lblTimeTaken = "0";
                string txtlandmark = cust_Landmark;
                string txtCustRemarks = cust_Rmks;
                string cboMinutes = since_LastInMin;
                string cboDays = since_LastInDays;
                string txtAddlNo = cust_AddlContNo;
                string txtCustRoad = cust_Road;
                string fixtureNo = fixture_No;

                string chkComplClear = string.Empty;
                string dtpCompClearDate = string.Empty;
                string cboFixtue = string.Empty;
                string txtStreetNo = string.Empty;
                string txtCustPhone = string.Empty;
                string txtCustArea = string.Empty;
                string txtCustDistrict = string.Empty;
                string txtClearedBy = string.Empty;
                string txtConsumerReferenceNo = string.Empty;
                string txtContractNo = string.Empty;
                string optSmsYes = string.Empty;
                string optSmsNo = string.Empty;
                string _sConsumerRefNo = string.Empty;
                string gAreadiv = string.Empty;
                string txtEBSEMail = string.Empty;
                string StrConsumerType = string.Empty;
                string strDIST = string.Empty;
                string strGridCode = string.Empty;
                string strGridName = string.Empty;
                string strGridPhone = string.Empty;
                string strFeederCode = string.Empty;
                string strFeederName = string.Empty;
                string strTRCOde = string.Empty;
                string strCompCenter = string.Empty;
                string strCompCenterPhone = string.Empty;
                string strCircle = string.Empty;
                string strCompCenterForSapSerch = string.Empty;

                string UserName = "TAB";

                try
                {

                    string fixture_typ = fixture_Typ;
                    int no_fixture = Int32.Parse(fixtureNo);
                    string strCallDate = DateTime.Now.ToString("dd-MMM-yyyy HH:mm");
                    string strOccuranceDate = DateTime.Now.ToString("dd-MMM-yyyy");
                    string strOccuranceTime = DateTime.Now.ToString("HH:mm");
                    strCallDate = "to_date('" + strCallDate + "','dd-Mon-yyyy hh24:mi')";
                    string strComplaintNo = "";

                    if (lblAreaCode != "")
                    {
                        DataTable rs = new DataTable();
                        string sql = string.Empty;
                        sql = "SELECT  DIST, DIST_NAME, PRIMARY_GRID_CODE, PRIMARY_GRID_NAME, GRID_PHONENO, FEEDER_CODE,FEEDER_NAME, AREA_CODE, AREA_NAME, TR_CODE,COMPLAINT_CENTRE, COMPLAINT_CENTRE_PH_NO,COMPLAINT_CENTRE_CODE, CIRCLE  FROM ONM_TRANSFORMER_SETUP_DETAIL WHERE AREA_CODE='" + lblAreaCode + "'";
                        rs = allSelect.GetShowDetails(sql);
                        if (rs.Rows.Count > 0)
                        {
                            txtCustArea = rs.Rows[0]["AREA_NAME"].ToString();
                            txtCustDistrict = rs.Rows[0]["DIST_NAME"].ToString();
                            strDIST = rs.Rows[0]["DIST"].ToString();
                            strGridCode = rs.Rows[0]["PRIMARY_GRID_CODE"].ToString();
                            strGridName = rs.Rows[0]["PRIMARY_GRID_NAME"].ToString();
                            strGridPhone = rs.Rows[0]["GRID_PHONENO"].ToString();
                            strFeederCode = rs.Rows[0]["FEEDER_CODE"].ToString();
                            strFeederName = rs.Rows[0]["FEEDER_NAME"].ToString();
                            strTRCOde = rs.Rows[0]["TR_CODE"].ToString();
                            strCompCenter = rs.Rows[0]["COMPLAINT_CENTRE"].ToString();
                            strCompCenterPhone = rs.Rows[0]["COMPLAINT_CENTRE_PH_NO"].ToString();
                            strCircle = rs.Rows[0]["CIRCLE"].ToString();
                        }
                    }
                    else
                    {
                        return ("Unable to findout area right now! Please try again later.");
                    }


                    DataTable rsTmp = new DataTable();
                    rsTmp = allSelect.GetShowDetails("SELECT trim(SUBSTR(CIRCLE,1,1)||COMPLAINT_CENTRE_CODE|| DIST ||TO_Char(sysdate,'YYMMDD')) as strCompNo,COMPLAINT_CENTRE_CODE FROM ONM_TRANSFORMER_SETUP_DETAIL WHERE AREA_CODE='" + lblAreaCode + "'");
                    if (rsTmp.Rows.Count > 0)
                    {
                        strComplaintNo = rsTmp.Rows[0]["strCompNo"].ToString();
                        strCompCenterForSapSerch = rsTmp.Rows[0]["COMPLAINT_CENTRE_CODE"].ToString();
                    }
                    rsTmp = new DataTable();
                    rsTmp = allSelect.GetShowDetails("select SP_GENERATECOMPLAINTNO('" + lblAreaCode + "') from dual");
                    if (rsTmp.Rows.Count > 0)
                    {
                        strComplaintNo = strComplaintNo.Trim() + rsTmp.Rows[0][0].ToString() + "P";
                    }
                    //OAP_USER = Android

                    string strsSQL = string.Empty;
                    strsSQL = "INSERT INTO CC_DVB_COMP(CALL_DATE,KNO,AREA_CODE,AREA,DISTRICT,CALL_CATEG,";
                    strsSQL = strsSQL + "NAME,ADD1,ADD2,PHONE,FCODE,REMARKS,COMPNO,CUST_REMARKS,OAP_USER,";
                    strsSQL = strsSQL + "CUST_STATUS,CUST_TIME_CLEAR,DVB_CLEARED_BY,DVB_STATUS,TIME_TAKEN,XEN_STATUS,PRIORITY,";
                    strsSQL = strsSQL + "NOOFCOMPLAINTS,CONS_REF,OPERATIONAL_COMP_NO,CM_HOUSE,TYP_FIXTURE, NO_FIXTURE,ROAD, LAND_MARK,SURVEY_TYPE,";
                    strsSQL = strsSQL + "MOB_NO, Addl_Cont_No,SINCE_LAST_MINUTES,SINCE_LAST_DAYS) VALUES";
                    strsSQL = strsSQL + "(" + strCallDate + ",'";
                    strsSQL = strsSQL + txtCustKNo + "','" + lblAreaCode + "','" + txtCustArea + "','" + txtCustDistrict + "','" + cboCallCateg + "','";
                    strsSQL = strsSQL + txtCustName.Trim() + "','" + txtCustAdd1.Trim() + "','" + txtCustAdd2.Trim() + "','" + txtCustMob + "','";
                    strsSQL = strsSQL + lblFCode + "','" + txtCustRemarks + "','" + strComplaintNo + "','" + txtCustRemarks + "','";
                    strsSQL = strsSQL + UserName + "','N',NULL,'','N'," + lblTimeTaken + ",'" + xenStatus + "','" + cboPriority.ToUpper() + "',";
                    strsSQL = strsSQL + " 1,0,'" + strComplaintNo.Substring(8, 11) + "','N','" + fixture_typ + "'," + no_fixture + ", '' , '";
                    strsSQL = strsSQL + txtlandmark + "', '" + lblSurveyTyp + "' ,'" + txtCustMob.Trim() + "','" + txtAddlNo.Trim() + "',";
                    strsSQL = strsSQL + cboMinutes.Trim() + "," + cboDays + ")";

                    string strOFCSQL = string.Empty;
                    DataTable _dtFaultid = new DataTable();
                    string strFaultID = "";
                    _dtFaultid = allSelect.GetShowDetails("SELECT SP_GenerateFaultId('" + strDIST + "') FROM DUAL ");
                    if (_dtFaultid.Rows.Count > 0)
                        strFaultID = _dtFaultid.Rows[0][0].ToString();

                    strOFCSQL = " Insert into ONM_Fault_Collections (FaultId,Dist,AreaCode,Area,FeederCode,FeederName,GridCode,GridName,";
                    strOFCSQL = strOFCSQL + " GridPhone,FaultType,NoOfComplaints,Child,All_Transformer_No,Name,Complaint_Status,";
                    strOFCSQL = strOFCSQL + " Complaint_No,InsertedFrom,COMPLAINT_CENTRE,COMPLAINT_CENTRE_PH_NO,Com_Name,Com_Add1,Com_Add2,Com_Phone,Circle,";
                    strOFCSQL = strOFCSQL + " CCRemarks,Powercut_Type,PRIORITY,FCODE,TYP_FIXTURE,NO_FIXTURE,ROAD,LAND_MARK,OCCURANCE_DT,CC_REG_BY,CC_REG_IP,SURVEY_TYPE)";
                    strOFCSQL = strOFCSQL + " values";
                    strOFCSQL = strOFCSQL + " ('" + strFaultID + "','" + strDIST + "','" + lblAreaCode + "','" + txtCustArea + "',";
                    strOFCSQL = strOFCSQL + "'" + strFeederCode + "','" + strFeederName + "','" + strGridCode + "','" + strGridName + "',";
                    strOFCSQL = strOFCSQL + "'" + strGridPhone + "','DT AND BELOW',1,'0','" + strTRCOde + "','ANDRIOD', ";
                    strOFCSQL = strOFCSQL + "'P','" + strComplaintNo + "', ";
                    strOFCSQL = strOFCSQL + "'CC" + strFaultID + "','" + strCompCenter + "','" + strCompCenterPhone + "','" + txtCustName.Trim() + "', ";
                    strOFCSQL = strOFCSQL + "'" + txtCustAdd1.Trim() + "','" + txtCustAdd2.Trim() + "','" + txtCustMob + "','" + strCircle + "', ";
                    strOFCSQL = strOFCSQL + "'" + txtCustRemarks.Trim() + "','" + powerCutType + "','" + cboPriority.ToUpper() + "',";
                    strOFCSQL = strOFCSQL + "'" + lblFCode + "',";
                    strOFCSQL = strOFCSQL + "'" + fixture_typ.Trim() + "'," + no_fixture + ",'','" + txtlandmark.Trim() + "'," + strCallDate + ",'" + UserName + "',sys_context('USERENV','IP_ADDRESS'),'" + lblSurveyTyp + "')";


                    string strOSFDSQL = string.Empty;

                    if (cboPriority == "STREET LIGHT")
                    {
                        strOSFDSQL = " INSERT INTO ONM_SL_FAULT_DETAILS(FAULTID) VALUES ('" + strFaultID + "')";
                        // AllInsert.InsertBySQL(strOSFDSQL);
                    }

                    string[] _smultipleQuery = new string[] { strsSQL, strOFCSQL, strOSFDSQL };
                    if (!allInsert.InsertByMultipleSQL_ONM(_smultipleQuery))
                    {
                        return ("Not saved. Please try again.");
                    }
                    string lblFullComplaintNo = strComplaintNo;
                    return strComplaintNo + ":" + strComplaintNo.Substring(8, 11);

                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    return "Unable to register right now! Please try again.";

                }

            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return "Unable to register right now! Please try again.";
            }

        }

        public string onmInsrtEmergencyComplaint(string caNo, string area_Code, string fault_Code, string sarvey_Typ, string fixture_Typ,
           string fixture_No, string since_LastInMin, string since_LastInDays, string cust_Name, string cust_Add1, string cust_Add2,
           string cust_MbNo, string cust_AddlContNo, string cust_Road, string cust_Landmark, string cust_Rmks)
        {
            AllSelect allSelect = new AllSelect();
            AllInsert allInsert = new AllInsert();

            try
            {
                string cboCallCateg = "NC";
                string xenStatus = "N";
                string powerCutType = "CC";
                string cboPriority = "EMERGENCY";

                string txtCustKNo = caNo;
                string lblAreaCode = area_Code;
                string lblSurveyTyp = sarvey_Typ;
                string txtCustMob = cust_MbNo;
                string txtCustName = cust_Name;
                string txtCustAdd1 = cust_Add1;
                string txtCustAdd2 = cust_Add2;
                string lblFCode = fault_Code;
                string lblTimeTaken = "0";
                string txtlandmark = cust_Landmark;
                string txtCustRemarks = cust_Rmks;
                string cboMinutes = since_LastInMin;
                string cboDays = since_LastInDays;
                string txtAddlNo = cust_AddlContNo;
                string txtCustRoad = cust_Road;
                string fixtureNo = fixture_No;

                string chkComplClear = string.Empty;
                string dtpCompClearDate = string.Empty;
                string cboFixtue = string.Empty;
                string txtStreetNo = string.Empty;
                string txtCustPhone = string.Empty;
                string txtCustArea = string.Empty;
                string txtCustDistrict = string.Empty;
                string txtClearedBy = string.Empty;
                string txtConsumerReferenceNo = string.Empty;
                string txtContractNo = string.Empty;
                string optSmsYes = string.Empty;
                string optSmsNo = string.Empty;
                string _sConsumerRefNo = string.Empty;
                string gAreadiv = string.Empty;
                string txtEBSEMail = string.Empty;
                string StrConsumerType = string.Empty;
                string strDIST = string.Empty;
                string strGridCode = string.Empty;
                string strGridName = string.Empty;
                string strGridPhone = string.Empty;
                string strFeederCode = string.Empty;
                string strFeederName = string.Empty;
                string strTRCOde = string.Empty;
                string strCompCenter = string.Empty;
                string strCompCenterPhone = string.Empty;
                string strCircle = string.Empty;
                string strCompCenterForSapSerch = string.Empty;

                string UserName = "TAB";

                try
                {

                    string fixture_typ = fixture_Typ;
                    int no_fixture = Int32.Parse(fixtureNo);
                    string strCallDate = DateTime.Now.ToString("dd-MMM-yyyy HH:mm");
                    string strOccuranceDate = DateTime.Now.ToString("dd-MMM-yyyy");
                    string strOccuranceTime = DateTime.Now.ToString("HH:mm");
                    strCallDate = "to_date('" + strCallDate + "','dd-Mon-yyyy hh24:mi')";
                    string strComplaintNo = "";

                    if (lblAreaCode != "")
                    {
                        DataTable rs = new DataTable();
                        string sql = string.Empty;
                        sql = "SELECT  DIST, DIST_NAME, PRIMARY_GRID_CODE, PRIMARY_GRID_NAME, GRID_PHONENO, FEEDER_CODE,FEEDER_NAME, AREA_CODE, AREA_NAME, TR_CODE,COMPLAINT_CENTRE, COMPLAINT_CENTRE_PH_NO,COMPLAINT_CENTRE_CODE, CIRCLE  FROM ONM_TRANSFORMER_SETUP_DETAIL WHERE AREA_CODE='" + lblAreaCode + "'";
                        rs = allSelect.GetShowDetails(sql);
                        if (rs.Rows.Count > 0)
                        {
                            txtCustArea = rs.Rows[0]["AREA_NAME"].ToString();
                            txtCustDistrict = rs.Rows[0]["DIST_NAME"].ToString();
                            strDIST = rs.Rows[0]["DIST"].ToString();
                            strGridCode = rs.Rows[0]["PRIMARY_GRID_CODE"].ToString();
                            strGridName = rs.Rows[0]["PRIMARY_GRID_NAME"].ToString();
                            strGridPhone = rs.Rows[0]["GRID_PHONENO"].ToString();
                            strFeederCode = rs.Rows[0]["FEEDER_CODE"].ToString();
                            strFeederName = rs.Rows[0]["FEEDER_NAME"].ToString();
                            strTRCOde = rs.Rows[0]["TR_CODE"].ToString();
                            strCompCenter = rs.Rows[0]["COMPLAINT_CENTRE"].ToString();
                            strCompCenterPhone = rs.Rows[0]["COMPLAINT_CENTRE_PH_NO"].ToString();
                            strCircle = rs.Rows[0]["CIRCLE"].ToString();
                        }
                    }
                    else
                    {
                        return ("Unable to findout area right now! Please try again later.");
                    }


                    DataTable rsTmp = new DataTable();
                    rsTmp = allSelect.GetShowDetails("SELECT trim(SUBSTR(CIRCLE,1,1)||COMPLAINT_CENTRE_CODE|| DIST ||TO_Char(sysdate,'YYMMDD')) as strCompNo,COMPLAINT_CENTRE_CODE FROM ONM_TRANSFORMER_SETUP_DETAIL WHERE AREA_CODE='" + lblAreaCode + "'");
                    if (rsTmp.Rows.Count > 0)
                    {
                        strComplaintNo = rsTmp.Rows[0]["strCompNo"].ToString();
                        strCompCenterForSapSerch = rsTmp.Rows[0]["COMPLAINT_CENTRE_CODE"].ToString();
                    }
                    rsTmp = new DataTable();
                    rsTmp = allSelect.GetShowDetails("select SP_GENERATECOMPLAINTNO('" + lblAreaCode + "') from dual");
                    if (rsTmp.Rows.Count > 0)
                    {
                        strComplaintNo = strComplaintNo.Trim() + rsTmp.Rows[0][0].ToString() + "P";
                    }
                    //OAP_USER = Android
                    string strsSQL = string.Empty;
                    strsSQL = "INSERT INTO CC_DVB_COMP(CALL_DATE,KNO,AREA_CODE,AREA,DISTRICT,CALL_CATEG,";
                    strsSQL = strsSQL + "NAME,ADD1,ADD2,PHONE,FCODE,REMARKS,COMPNO,CUST_REMARKS,OAP_USER,CUST_STATUS,CUST_TIME_CLEAR,DVB_CLEARED_BY,DVB_STATUS,TIME_TAKEN,XEN_STATUS,PRIORITY,NOOFCOMPLAINTS,CONS_REF,OPERATIONAL_COMP_NO,CM_HOUSE,TYP_FIXTURE, NO_FIXTURE,LAND_MARK,CONSUMER_TYPE,MOB_NO, ENTRY_KNO_ID,REG_MODULE_NAME,REG_AREA, REG_AREA_CODE,SAP_CONTRACT_NO,SINCE_LAST_MINUTES,Addl_Cont_No,SINCE_LAST_DAYS) VALUES";
                    strsSQL = strsSQL + "(" + strCallDate + ",'','" + lblAreaCode + "','" + txtCustArea + "','" + txtCustDistrict + "','" + cboCallCateg + "','";
                    strsSQL = strsSQL + txtCustName.Trim() + "','" + txtCustAdd1.Trim() + "','" + txtCustAdd2.Trim() + "','" + txtCustMob + "','";
                    strsSQL = strsSQL + lblFCode + "','" + txtCustRemarks + "','" + strComplaintNo + "','" + txtCustRemarks + "','";
                    strsSQL = strsSQL + UserName + "','N',NULL,'" + txtClearedBy + "',"; // " + strCLEAR_STATUS + "
                    strsSQL = strsSQL + "'N'," + lblTimeTaken + ",'N',"; //" + strCLEAR_STATUS + "

                    if (cboPriority == "EMERGENCY")
                        strsSQL = strsSQL + " 'PCR',";
                    else
                        strsSQL = strsSQL + "'" + cboPriority.ToUpper() + "',";

                    strsSQL = strsSQL + " 1,'" + txtConsumerReferenceNo.Trim() + "','" + strComplaintNo.Substring(8, 11) + "','N','" + fixture_typ + "'," + no_fixture + ",'";
                    strsSQL = strsSQL + txtlandmark + "','" + StrConsumerType + "','" + txtCustMob.Trim() + "','" + txtCustKNo.Trim() + "','TAB','" + txtCustArea.Trim() + "','" + lblAreaCode.Trim() + "','" + txtContractNo.Trim() + "',";
                    strsSQL = strsSQL + cboMinutes.Trim() + ",'" + txtAddlNo.Trim() + "'," + cboDays + ")";

                    string strOFCSQL = string.Empty;
                    DataTable _dtFaultid = new DataTable();
                    string strFaultID = "";
                    _dtFaultid = allSelect.GetShowDetails("SELECT SP_GenerateFaultId('" + strDIST + "') FROM DUAL ");
                    if (_dtFaultid.Rows.Count > 0)
                        strFaultID = _dtFaultid.Rows[0][0].ToString();

                    strOFCSQL = " Insert into ONM_Fault_Collections (KNO,FaultId,Dist,AreaCode,Area,FeederCode,FeederName,GridCode,GridName,";
                    strOFCSQL = strOFCSQL + " GridPhone,FaultType,NoOfComplaints,Child,All_Transformer_No,Name,Complaint_Status,";
                    strOFCSQL = strOFCSQL + " Complaint_No,InsertedFrom,COMPLAINT_CENTRE,COMPLAINT_CENTRE_PH_NO,Com_Name,Com_Add1,Com_Add2,Com_Phone,Circle,";
                    strOFCSQL = strOFCSQL + " CCRemarks,Powercut_Type,PRIORITY,FCODE,TYP_FIXTURE,NO_FIXTURE,ROAD,LAND_MARK,OCCURANCE_DT,CC_REG_BY,CC_REG_IP,CONSUMER_TYPE)";
                    strOFCSQL = strOFCSQL + " values";
                    strOFCSQL = strOFCSQL + " ('','" + strFaultID + "','" + strDIST + "','" + lblAreaCode + "','" + txtCustArea + "',";
                    strOFCSQL = strOFCSQL + "'" + strFeederCode + "','" + strFeederName + "','" + strGridCode + "','" + strGridName + "',";
                    strOFCSQL = strOFCSQL + "'" + strGridPhone + "','DT AND BELOW',1,'0','" + strTRCOde + "','ANDRIOD', ";
                    strOFCSQL = strOFCSQL + "'P','" + strComplaintNo + "', ";
                    strOFCSQL = strOFCSQL + "'CC" + strFaultID + "','" + strCompCenter + "','" + strCompCenterPhone + "','" + txtCustName.Trim() + "', ";
                    strOFCSQL = strOFCSQL + "'" + txtCustAdd1.Trim() + "','" + txtCustAdd2.Trim() + "','" + txtCustMob + "','" + strCircle + "', ";
                    strOFCSQL = strOFCSQL + "'" + txtCustRemarks.Trim() + "','CC',";

                    if (cboPriority == "EMERGENCY")
                        strOFCSQL = strOFCSQL + " 'PCR',";
                    else
                        strOFCSQL = strOFCSQL + "'" + cboPriority + "',";

                    strOFCSQL = strOFCSQL + "'" + lblFCode + "',";
                    strOFCSQL = strOFCSQL + "'" + fixture_typ.Trim() + "'," + no_fixture + ",'','" + txtlandmark.Trim() + "'," + strCallDate + ",'" + UserName + "',sys_context('USERENV','IP_ADDRESS'),'" + StrConsumerType + "')";

                    string strOSFDSQL = string.Empty;

                    if (cboPriority == "STREET LIGHT")
                    {
                        strOSFDSQL = " INSERT INTO ONM_SL_FAULT_DETAILS(FAULTID) VALUES ('" + strFaultID + "')";
                        // AllInsert.InsertBySQL(strOSFDSQL);
                    }

                    string[] _smultipleQuery = new string[] { strsSQL, strOFCSQL, strOSFDSQL };
                    if (!allInsert.InsertByMultipleSQL_ONM(_smultipleQuery))
                    {
                        return ("Not saved. Please try again.");
                    }
                    string lblFullComplaintNo = strComplaintNo;
                    return strComplaintNo + ":" + strComplaintNo.Substring(8, 11);

                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    return "Unable to register right now! Please try again.";

                }

            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return "Unable to register right now! Please try again.";
            }

        }


        public DataTable getSLComplaintlist(string distName, string complaintCentre, string status, string areaName)//03022016 -- No Current Complaint List
        {
            string divName = distName.Replace(",", "','");

            string sql = string.Empty;
            sql = "  SELECT SUBSTR(OFC.Complaint_No,9,11) Complaint_No,to_char(OFC.Occurance_dt,'dd-Mon-yyyy hh:mm:ss PM') OccDate, TO_CHAR(OFC.Occurance_dt,'hh24:mi') AS OccTime, OFC.COM_NAME COM_NAME,    ";
            sql += "  OFC.COM_PHONE COM_PHONE, OFC.TYP_FIXTURE, OFC.NO_FIXTURE, OFC.Area Area,OFC.AreaCode AreaCode,OFC.Closing_dt,OFC.SURVEY_TYPE,    ";
            sql += "  OFC.FeederCode FeederCode,OFC.FEEDERNAME FEEDERNAME,OFC.GridCode GridCode,OFC.GridName GridName,  OFC.FaultType FaultType,   ";
            sql += "  OFC.CCFAULT_INF_TO_COMP_CENTER CCFAULT_INF_TO_COMP_CENTER,OFC.CCREMARKS,  OFC.PRIORITY, OFC.FaultID FaultID,  OSFD.ANALYSIS,    ";
            sql += "  OSFD.ACKNOWLEDGE_BY, OSFD.ACKNOWLEDGE_DT, OSFD.ACKNOWLEDGE_BY_DESIG, OSFD.SCHEDULE_DT, OSFD.ANALYSIS_DT, OSFD.ANALYSED_BY,    ";
            sql += "  OSFD.RESTORED_MARKED,OSFD.RESTORED_TYPE, OSFD.ACTION_TAKEN,OSFD.OTHER_ANALYSIS,OSFD.RESTORED_BY,  OSFD.RESTORED_BY_DESIG,OSFD.RESTORED_DT,   ";
            sql += "  OSFD.HOD_VISITED,OSFD.HOD_ACTION,OSFD.ONM_ACTION,OSFD.HOD_VISIT_DT,  OSFD.ONM_VISIT_DT , OSFD.Status , OFC.COM_ADD1 ||','||OFC.COM_ADD2 CUADDRESS "; //  ,  OFC.USER_IP
            sql += "  FROM ONM_FAULT_COLLECTIONS OFC,ONM_SL_FAULT_DETAILS OSFD     ";
            sql += "  WHERE  OFC.FAULTID = OSFD.FAULTID AND  OFC.PRIORITY='STREET LIGHT' AND CIRCLE IN ('SOUTH','WEST')   ";

            if (status.ToUpper() == "Open".ToUpper())  //In last 10 days
            {
                sql += "  AND FAULT_DUR_IN_SEC =-1  AND OSFD.STATUS in 'O' ";
                sql += " AND UPPER(DIST) in ('" + divName + "')  "; //  AND UPPER(OFC.COMPLAINT_CENTRE) = UPPER('" + complaintCentre + "')   
                sql += " AND OFC.Occurance_Dt < SYSDATE-10   ";
            }
            else if (status.ToUpper() == "Close".ToUpper()) //In last 10 days
            {
                sql += "  AND FAULT_DUR_IN_SEC !=-1  AND OSFD.STATUS in 'C' ";
                sql += " AND UPPER(DIST) in ('" + divName + "')  "; //  AND UPPER(OFC.COMPLAINT_CENTRE)=UPPER('" + complaintCentre + "')   
                sql += " AND OFC.Occurance_Dt < SYSDATE-10   ";

            }
            else
            {
                sql += "  AND FAULT_DUR_IN_SEC=-1  AND OSFD.STATUS IS NULL  ";
                sql += " AND UPPER(DIST) in ('" + divName + "')  "; // AND UPPER(OFC.COMPLAINT_CENTRE)=UPPER('" + complaintCentre + "')   

            }

            sql += "  ORDER BY Occurance_Dt DESC, Area ASC   ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }



        public DataTable onmGetDeviceNameList(string strDiviceName, string strDistName, string strTOImeiNo)
        {
            string sql = string.Empty;

            sql = " SELECT trim(UPPER(NAME ||'-'||EMPNO)) username,name,empno,imei_no,DIVISION ,dl.DEVICE_NAME  ";
            sql += "  FROM ONM_LINE_MAN_DETAILS lm ,OMS_DEVICE_LOGIN_MST dl WHERE UPPER(DIVISION)=UPPER(DEVICE_DIVISION) AND active='1' AND IMEI_NO=DEVICE_IMEI  ";
            sql += " AND UPPER(dl.DEVICE_NAME)=UPPER('" + strDiviceName + "')  AND UPPER(DIVISION)=UPPER('" + strDistName + "') AND TO_IMEI IN ('" + strTOImeiNo + "') AND IMEI_NO IS NOT NULL";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        public DataTable onmGetUserDeviceList(string strDist, string strDeviceImeinNo)
        {
            string sql = string.Empty;

            sql = " SELECT trim(UPPER(NAME ||'-'||EMPNO)) username,name,empno,imei_no,DIVISION ,  (SELECT DIV_NAME FROM DIVISION WHERE UPPER(div_code)=UPPER(DIVISION))DIV_NAME  ,dl.DEVICE_NAME, TO_CHAR(TIME_START) time_Start, ";
            sql += "  TO_CHAR(TIME_END) time_End,STATUS_FLG, TO_CHAR(START_TIME) start_Date  ";
            sql += " FROM ONM_LINE_MAN_DETAILS lm ,OMS_DEVICE_LOGIN_MST dl  ";
            sql += " WHERE UPPER(DIVISION)=UPPER(DEVICE_DIVISION) AND active='1' AND IMEI_NO=DEVICE_IMEI AND ACTIVE_FLG='Y' AND EMPNO=LINEMEN_ID ";
            sql += " AND UPPER(DIVISION)=UPPER('" + strDist + "')  AND TO_IMEI IN ('" + strDeviceImeinNo + "')  AND IMEI_NO IS NOT NULL";

            //sql = " SELECT trim(UPPER(NAME ||'-'||EMPNO)) username,name,empno,imei_no,DIVISION ,dl.DEVICE_NAME, TO_CHAR(TIME_START,'hh:mm:ss PM') time_Start, ";
            //sql += "  TO_CHAR(TIME_END,'hh:mm:ss PM') time_End,STATUS_FLG, TO_CHAR(START_TIME,'dd-MON-YYYY hh:mm:ss PM') start_Date  ";
            //sql += " FROM ONM_LINE_MAN_DETAILS lm ,OMS_DEVICE_LOGIN_MST dl  ";
            //sql += " WHERE UPPER(DIVISION)=UPPER(DEVICE_DIVISION) AND active='1' AND IMEI_NO=DEVICE_IMEI AND ACTIVE_FLG='Y' AND EMPNO=LINEMEN_ID ";
            //sql += " AND UPPER(DIVISION)=UPPER('" + strDist + "')   AND IMEI_NO IS NOT NULL";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        public DataTable onmLinemanLoginUser(string strPassword, string strIMEI_No)
        {
            string sql = string.Empty;
            sql = " SELECT LINEMEN_ID, PASSWORD FROM OMS_DEVICE_LOGIN_MST WHERE DEVICE_IMEI='" + strIMEI_No + "' AND PASSWORD ='" + strPassword + "'  ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_ONM(sql);
            if (dt.Rows.Count > 0)
            {
                try
                {
                    string sqlupdate = "update OMS_DEVICE_LOGIN_MST set LOGIN_DATE=sysdate, STATUS_FLG='Y'  ";
                    sqlupdate = sqlupdate + " where DEVICE_IMEI='" + strIMEI_No + "' ";
                    DbFunction objdbfunupdate = new DbFunction();
                    objdbfunupdate.dmlsinglequery_ONM(sqlupdate);
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                    //return false;
                }
            }
            return dt;
        }

        public bool onmLinemanLogoutUser(string strIMEI_No)
        {
            string sql = string.Empty;
            sql = "update OMS_DEVICE_LOGIN_MST set LOGOUT_DATE=sysdate, LOGOUT_FLG='Y'  ";
            sql += " where DEVICE_IMEI='" + strIMEI_No + "' ";

            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlsinglequery_ONM(sql);
        }


        #endregion

        #region Internal Msg App

        public DataTable IMsgLoginCredentials(string strUser_Name, string strPassword, string strGCMId, string strImeiNo, string strAppVersion)
        {
            string sql = " SELECT * FROM IMSG_LOGIN_MST WHERE UPPER(LOGIN_ID)='" + strUser_Name.ToString().Trim().ToUpper() + "' and  PASSWORD='" + strPassword.ToString().Trim() + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery(sql);
            if (dt.Rows.Count > 0)
            {
                string sqlUpdate = "UPDATE IMSG_LOGIN_MST set GCM_ID='" + strGCMId.ToString().Trim() + "'  where LOGIN_ID='" + strUser_Name.ToString().Trim() + "' ";
                objdbfun = new DbFunction();
                bool outPutUpdate = objdbfun.dmlsinglequery(sqlUpdate);
            }
            return dt;
        }

        public DataTable IMsgGCMRegIds(string strComp, string strCompGrpId, string strSubCompId, string strEmpId)
        {
            string sql = " SELECT 'E0000' EMPID,'ALL' GCM_ID,'SELECT' NAME   FROM dual UNION ";
            sql += " SELECT EMPID,GCM_ID, NAME  FROM IMSG_LOGIN_MST ";
            sql += " WHERE 1=1  ";
            if (strComp != "ALL")
                sql += " AND COMP_CODE='" + strComp + "' ";
            if (strCompGrpId != "ALL")
                sql += " AND COMP_GROUP='" + strCompGrpId + "' ";
            if (strSubCompId != "ALL")
                sql += " AND SUB_COMP_GROUP='" + strSubCompId + "' ";
            if (strEmpId != "ALL")
                sql += " AND EMPID='" + strEmpId + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery(sql);
            return dt;
        }

        public DataTable iMsgLoadEmplyees(string strCompId, string strEmpRole)
        {
            string sql = " SELECT '100000' EMPID, 'ALL' NAME, 'ALL' EMP_DESIGNATION,'ALL' GCM_ID,'ALL' IMEI_NO, 'ALL' REG_TITLE FROM dual UNION ";
            sql += " SELECT EMPID,NAME, EMP_DESIGNATION, GCM_ID, IMEI_NO, '' REG_TITLE  FROM IMSG_LOGIN_MST WHERE LOGIN_ID IN ( ";
            sql += " SELECT EMP_ID FROM IMSG_SUB_COMP_GRP_ID WHERE 1=1  ";
            sql += "  ) ";
            if (strCompId != "ALL")
                sql += " AND COMP_CODE='" + strCompId + "' ";
            if (strEmpRole != "ALL")
                sql += " AND ROLE_CODE ='" + strEmpRole + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery(sql);
            return dt;
        }

        public DataTable iMsgCompanyLoad(string strEmpRole, string strComp)
        {
            string sql = " SELECT 'BOTH' COMPANY, 'G000' COMP_GRP_ID, 'ALL' COMP_GRP_NAME FROM dual UNION ";
            sql += " SELECT COMPANY, COMP_GRP_ID, COMP_GRP_NAME FROM IMSG_COMP_GRP WHERE 1=1 ";
            sql += " ORDER BY comp_grp_name ASC ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery(sql);
            return dt;
        }

        public DataTable iMsgCompanyGrpLoad(string strCompId, string strEmpRole)
        {
            string sql = " SELECT 'G000' COMP_GRP_ID, 'S000' COMP_SUB_GRP_ID, 'ALL' COMP_SUB_GRP_NAME FROM dual UNION ";
            sql += " SELECT COMP_GRP_ID, COMP_SUB_GRP_ID, COMP_SUB_GRP_NAME FROM IMSG_COMP_SUB_GRP WHERE 1=1 ";
            if (strCompId != "ALL")
                sql += " AND COMP_GRP_ID='" + strCompId + "' ";
            sql += " ORDER BY COMP_SUB_GRP_NAME ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery(sql);
            return dt;
        }

        public DataTable iMsgCompanySubGrpLoad(string strCompId, string strEmpRole)
        {
            //string sql = " SELECT 'ALL' EMP_ID, 'S000' COMP_SUB_GRP_ID FROM dual UNION ";
            //sql += " SELECT EMP_ID, COMP_SUB_GRP_ID FROM IMSG_SUB_COMP_GRP_ID WHERE 1=1 ";
            //if(strCompId!="ALL")
            //    sql += " AND COMP_SUB_GRP_ID='" + strCompId + "' ";
            //sql += " ORDER BY COMP_SUB_GRP_ID ";

            string sql = " SELECT '100000' EMPID, 'ALL' NAME, 'ALL' EMP_DESIGNATION,'ALL' GCM_ID,'ALL' IMEI_NO, 'ALL' REG_TITLE FROM dual UNION ";
            sql += " SELECT EMPID,NAME, EMP_DESIGNATION, GCM_ID, IMEI_NO, '' REG_TITLE  FROM IMSG_LOGIN_MST WHERE LOGIN_ID IN ( ";
            sql += " SELECT EMP_ID FROM IMSG_SUB_COMP_GRP_ID WHERE 1=1  ";
            if (strCompId != "ALL")
                sql += " AND COMP_SUB_GRP_ID='" + strCompId + "' ";
            sql += "  ) ";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery(sql);
            return dt;
        }

        public bool iMSGMSGTBSEND(string strNotifyId, string strTxtMsg, string strTitle, string strComp, string strCompGrpId, string strSubCompId,
                                            string strEmpId, string strSenderId, string strMsgStatus, string strOther)
        {

            string notifyId = tblMaxId("SEND");
            string sql = " INSERT INTO IMSG_MSG_SEND (NOTIFY_ID, MSG_TITLE, MSG_DESC,COMPANY, SUBCOMPANY, SUBGRPCOMPANY, EMPID, SENDER_ID, SMS_STATUS, OTHER) VALUES ('" + notifyId + "','" + strTitle + "', '" + strTxtMsg + "' , '" + strComp + "', '" + strCompGrpId + "', '" + strSubCompId + "', '" + strEmpId + "','" + strSenderId + "', '" + strMsgStatus + "', '" + strOther + "') ";
            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlsinglequery(sql);
        }


        public string IMsgUpdateLog_IM(string strMsgId, string strMsgSndTo) //10072014
        {
            string UpdateQuery = "UPDATE IMSG_MSG_TBL SET READ_YN='Y' WHERE MSG_ID='" + strMsgId + "'  AND  SEND_TO='" + strMsgSndTo + "' ";

            try
            {
                DbFunction objdbfun = new DbFunction();
                bool outputSql = objdbfun.dmlsinglequery_ONM(UpdateQuery);
                return "1";
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return "0";
            }
        }

        public DataTable IMsgMsgSend(string strEmpId, string strDeviceGCMID, string strEmpRole, string strMsgSDt, string strMsgEDt, string strMsgRead)
        {
            string sql = "  SELECT MSG_ID, to_char(A.ENTRY_DT,'dd-Mon-YYYY') ENTRY_DT, TITLE, MSG_DESC, MSG_TYPE, READ_YN, A.IMG_STRING_PATH, ERROR_MSG,GCMID, A.EMP_ID ,SEND_BY, SEND_TO, B.NAME , B.EMP_DESIGNATION   FROM IMSG_MSG_TBL A, IMSG_LOGIN_MST B  ";
            sql += "  WHERE 1=1  AND A.EMP_ID = B.LOGIN_ID ";
            sql += " AND (( SEND_TO ='" + strEmpId + "' AND send_by ='" + strDeviceGCMID + "' ) OR ( SEND_TO ='" + strDeviceGCMID + "' AND send_by ='" + strEmpId + "' ) ) ";
            if (strMsgSDt != "SELECT")
                sql += " AND TRUNC(ENTRY_DT) BETWEEN '" + strMsgSDt + "' AND '" + strMsgEDt + "' ";
            //if (strEmpId != "ALL")            
            //if (strDeviceGCMID != "ALL")
            //    sql += " AND  GCMID ='" + strDeviceGCMID + "' ";
            if (strMsgRead != "ALL")
                sql += " AND  READ_YN ='" + strMsgRead + "' ";

            sql += " ORDER BY ENTRY_DT ASC ";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery(sql);
            return dt;
        }

        public DataTable IMsgMsgChatList(string strEmpId)
        {
            string sql = " SELECT CHAT_ID,  USER_ONE , USER_TWO , NAME, MOB_NO, EMP_DESIGNATION, DIVISION ";
            sql += "  FROM IMSG_MSG_CHAT_HIST A , IMSG_LOGIN_MST B WHERE 1=1  AND A.USER_TWO = B.LOGIN_ID ";
            sql += " AND  USER_ONE ='" + strEmpId + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery(sql);
            return dt;
        }

        public DataTable GetListOfGCMIds(string COMPANY, string SUBCOMPANY, string SUBGRPCOMPANY, string EMPID)
        {
            string sql = " SELECT GCM_ID, LOGIN_ID FROM IMSG_LOGIN_MST ";
            sql += " WHERE  1=1 ";
            if (COMPANY.ToUpper() != "REPLY")
            {
                if (EMPID != "ALL")
                    sql += " AND LOGIN_ID='" + EMPID + "' ";
                if (COMPANY != "ALL")
                    sql += " AND COMP_CODE='" + COMPANY + "' ";
                if (SUBCOMPANY != "ALL")
                    sql += " AND COMP_GROUP='" + SUBCOMPANY + "' ";
                if (SUBGRPCOMPANY != "ALL")
                    sql += " AND SUB_COMP_GROUP='" + SUBGRPCOMPANY + "' ";
            }
            else
            {
                sql += " AND LOGIN_ID='" + EMPID + "' ";
            }

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery(sql);
            return dt;
        }

        public string Insert_USERMSG_LOG(string MSG_ID, string TITLE, string MSG_DESC, string GCMID, string EMP_ID, string SEND_BY, string SEND_TO)
        {
            try
            {
                string strMaxId = tblMaxId("TBL");

                string strSQL2 = " INSERT INTO IMSG_MSG_TBL (MSG_ID, TITLE, MSG_DESC, GCMID, EMP_ID, SEND_BY, SEND_TO) VALUES ( '" + strMaxId + "' ,'" + TITLE + "','" + MSG_DESC + "','" + GCMID + "','" + EMP_ID + "' ,'" + SEND_BY + "','" + SEND_TO + "') ";
                DbFunction objdbfun = new DbFunction();
                objdbfun.dmlsinglequery(strSQL2);
                return strMaxId;
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return "";
            }
        }

        public string Insert_ChatMSG_List(string MSG_ID, string TITLE, string SEND_BY, string SEND_TO)
        {
            try
            {
                string strMaxId = tblMaxId("CHAT");

                string strSQL2 = " INSERT INTO IMSG_MSG_CHAT_HIST (CHAT_ID, CHAT_TITLE, MSG_ID, USER_ONE, USER_TWO) VALUES ( '" + strMaxId + "' ,'" + TITLE + "','" + MSG_ID + "','" + SEND_BY + "','" + SEND_TO + "' ) ";
                DbFunction objdbfun = new DbFunction();
                objdbfun.dmlsinglequery(strSQL2);
                return strMaxId;
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return "";
            }
        }


        public string InsertChatList(string MSG_ID, string TITLE, string SEND_BY, string SEND_TO)
        {
            string _bReturn = "";
            _bReturn = Insert_ChatMSG_List(MSG_ID, TITLE, SEND_BY, SEND_TO);
            return _bReturn;
        }

        public bool UpdateStatus(string strNotifyId)
        {
            bool _bReturn = false;
            _bReturn = UpdateMsgLog(strNotifyId);
            return _bReturn;
        }

        public bool UpdateMsgLog(string _sCa_No)
        {
            try
            {
                string strSQL2 = "  UPDATE IMSG_MSG_SEND SET MSG_STATUS='Y' WHERE NOTIFY_ID='" + _sCa_No + "' ";
                DbFunction objdbfun = new DbFunction();
                return objdbfun.dmlsinglequery(strSQL2);
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public string GetChatBoxUserCount(string sendBy, string sendTo)
        {
            string sql = " SELECT COUNT(1) VALCOUNT FROM IMSG_MSG_CHAT_HIST WHERE USER_ONE = '" + sendBy + "' AND USER_TWO = '" + sendTo + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery(sql);
            return dt.Rows[0]["VALCOUNT"].ToString();
        }

        public bool CheckUserbasedCount(string sendBy, string sendTo)
        {
            bool _bReturn = false;
            string strValCount = GetChatBoxUserCount(sendBy, sendTo);
            int aValueCount = Convert.ToInt32(strValCount);
            if (aValueCount > 0)
            {
                _bReturn = true;
            }
            else
            {
                _bReturn = false;
            }
            return _bReturn;
        }

        public string GetChatBoxUserCountBiLateral(string sendTo, string sendBy)
        {
            string sql = " SELECT COUNT(1) VALCOUNT FROM IMSG_MSG_CHAT_HIST WHERE USER_ONE = '" + sendBy + "' AND USER_TWO = '" + sendTo + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery(sql);
            return dt.Rows[0]["VALCOUNT"].ToString();
        }

        public bool CheckUserbasedCountBilateral(string sendBy, string sendTo)
        {
            bool _bReturn = false;
            string strValCount = GetChatBoxUserCountBiLateral(sendBy, sendTo);
            int aValueCount = Convert.ToInt32(strValCount);
            if (aValueCount > 0)
            {
                _bReturn = true;
            }
            else
            {
                _bReturn = false;
            }
            return _bReturn;
        }

        public string InsertUserMsg(string MSG_ID, string TITLE, string MSG_DESC, string GCMID, string EMP_ID, string SEND_BY, string SEND_TO)
        {
            string _bReturn = "";
            _bReturn = Insert_USERMSG_LOG(MSG_ID, TITLE, MSG_DESC, GCMID, EMP_ID, SEND_BY, SEND_TO);
            return _bReturn;
        }

        public bool SendNotificationUsingJSON(string regID, string msgTxt, string msgTitle, string emp_id, string strRcvr)
        {
            string RegId = regID;

            var ApplicationID = "AIzaSyBfAYc8T2zJp_UGkEbde6nFgM3xeMOUlo4";
            var SENDER_IDNew = "617913186155";
            string strCallDate = DateTime.Now.ToString("dd-MMM-yyyy HH:mm");
            //var valueTxt = txtboxMsg.Text; //message text box
            try
            {
                string GoogleAppID = ApplicationID; // Token; // 
                //string titleMsg = txtTitle.Text.Trim();
                var SENDER_ID = SENDER_IDNew;
                //var value = valueTxt;
                WebRequest tRequest;
                tRequest = WebRequest.Create("https://fcm.googleapis.com/fcm/send");   //  https://android.googleapis.com/gcm/send");  // https://gcm-http.googleapis.com/gcm/send");
                tRequest.UseDefaultCredentials = true;
                tRequest.PreAuthenticate = true;
                tRequest.Credentials = CredentialCache.DefaultCredentials;
                tRequest.Method = "post";
                tRequest.ContentType = "application/json";
                tRequest.Headers.Add(string.Format("Authorization: key={0}", GoogleAppID));  //(HttpRequestHeader.Authorization, "key=AIzaSyBHeJzNk_y6MPLTV88FPLxpOlbP2c8RTG0");   

                tRequest.Headers.Add(string.Format("Sender: id={0}", SENDER_ID));

                string imageLink = "http://bsesdelhi.com/images/welcome.jpg";

                string postData = "{\"collapse_key\":\"score_update\",\"time_to_live\":108,\"priority\":\"normal\",\"notification\": { \"body\" : " + "\"" + msgTitle + "\",\"title\" : " + "\"" + msgTxt + "\"},,\"data\": { \"title\" : " + "\"" + msgTitle + "\", \"emp_id\" : " + "\"" + emp_id + "\",  \"emp_id_rcv\" : " + "\"" + strRcvr + "\", \"time\" : " + "\"" + strCallDate + "\", \"message\" : " + "\"" + msgTxt + "\"},\"to\":\"" + RegId + "\"}";

                Byte[] byteArray = Encoding.UTF8.GetBytes(postData);
                tRequest.ContentLength = byteArray.Length;

                Stream dataStream = tRequest.GetRequestStream();
                dataStream.Write(byteArray, 0, byteArray.Length);
                dataStream.Close();

                WebResponse tResponse = tRequest.GetResponse();

                dataStream = tResponse.GetResponseStream();

                StreamReader tReader = new StreamReader(dataStream);

                String sResponseFromServer = tReader.ReadToEnd();// {"success":2,"failure":0}

                HttpWebResponse httpResponse = (HttpWebResponse)tResponse;
                string statusCode = httpResponse.StatusCode.ToString();

                if (statusCode == "OK")
                {
                    return true;
                }

                tReader.Close();
                dataStream.Close();
                tResponse.Close();

                return true;
            }
            catch (Exception ex)
            {
                //lblResponse.Text = "Sorry ! Required Internet Connection";
                return false;
            }

        }

        #endregion

        #endregion

        #region BD Application BRPL

        public DataTable getbreakdownbackfeedlistNew(string BREAK_DOWN_ID)
        {
            string sql = "   SELECT FEEDER_CODE LISTCODE, FEEDER_NAME LISTNAME FROM  ONM_SHUTDOWN_DETAILS WHERE  Shutdown_Id" + BREAK_DOWN_ID + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        #endregion

        #region BSES Dashboard Application


        public DataTable getBDSDCountlist(string strStartDate, string strEndDate, string strDivision)
        {
            string sql = string.Empty;
            sql = "  SELECT 'Breakdown' BD_SD_TYP  , NVL(SUM(Open_Count),0) COUNT_TYP FROM (  ";
            sql += " SELECT dist, COUNT(*) Open_Count FROM onm.ONM_ShutDown_Details WHERE  SHUTDOWN_Dt>SYSDATE-365 AND SHUTDOWN_Dt<SYSDATE+1 AND ((FAULT_DUR_IN_SEC > -1  ";
            sql += " AND CLOSING_STATUS IN('NR','TR')) OR (FAULT_DUR_IN_SEC = -1 AND CLOSING_STATUS IS NULL))  AND Circle IN ('SOUTH','WEST') AND Powercut_Type='BD' ";
            if (strDivision.ToUpper() != "All".ToUpper())
                sql += " AND dist='" + strDivision + "'  ";
            sql += "  GROUP BY dist)  UNION ";
            sql += " SELECT 'Shutdown' BD_SD_TYP  , NVL(SUM(Open_Count),0) COUNT_TYP FROM ( ";
            sql += "  SELECT dist, COUNT(*) Open_Count FROM onm.ONM_ShutDown_Details WHERE  SHUTDOWN_Dt>SYSDATE-365 AND SHUTDOWN_Dt<SYSDATE+1 AND ((FAULT_DUR_IN_SEC > -1 ";
            sql += " AND CLOSING_STATUS IN('NR','TR')) OR (FAULT_DUR_IN_SEC = -1 AND CLOSING_STATUS IS NULL))  AND Circle IN ('SOUTH','WEST') AND Powercut_Type='SD' ";
            if (strDivision.ToUpper() != "All".ToUpper())
                sql += " AND dist='" + strDivision + "'  ";
            sql += " GROUP BY dist)  ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        public DataTable getBDSDHTLTTotalCountlist(string strStartDate, string strEndDate, string strDivision, string strHTLTTyp, string strBDSDTyp)
        {
            string sql = string.Empty;

            sql = " SELECT * FROM ( SELECT UNIQUE DIVMST.DIV_NAME DIST, DIVMST.DIV_CODE DISTCODE, NVL(A.Open_Count,0) OPENCOMPLAINTS,NVL(B.Close_Count,0) CLOSECOMPLAINTS  ";
            sql += " FROM ( SELECT dist, COUNT(*) Open_Count FROM onm.ONM_ShutDown_Details WHERE  SHUTDOWN_Dt>SYSDATE-365 AND SHUTDOWN_Dt<SYSDATE+1 AND ((FAULT_DUR_IN_SEC > -1 ";
            sql += " AND CLOSING_STATUS IN('NR','TR')) OR (FAULT_DUR_IN_SEC = -1 AND CLOSING_STATUS IS NULL))  AND Circle IN ('SOUTH','WEST') ";
            sql += " AND FAULTCATEGORY IN ('" + strHTLTTyp + "') ";
            sql += " AND Powercut_Type IN ('" + strBDSDTyp + "') ";
            sql += " GROUP BY dist )A,(SELECT dist, COUNT(*)  Close_Count FROM onm.ONM_ShutDown_Details WHERE (FAULT_DUR_IN_SEC <> -1 AND CLOSING_STATUS IS NOT NULL) AND Circle IN ('SOUTH','WEST') ";
            sql += " AND FAULTCATEGORY IN ('" + strHTLTTyp + "') ";
            sql += " AND Powercut_Type IN ('" + strBDSDTyp + "') ";
            sql += " AND (SHUTDOWN_DT >= TO_DATE('" + strStartDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS') AND SHUTDOWN_DT<= TO_DATE('" + strEndDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS')) ";
            sql += " GROUP BY dist)B, onm.division DIVMST WHERE DIVMST.DIV_CODE = A.DIST(+) AND DIVMST.DIV_CODE = B.DIST(+)  ";
            sql += " AND DIVMST.CIRCLE_ID IN ('1','2') ORDER BY DIVMST.DIV_NAME ) ORDER BY OPENCOMPLAINTS DESC,CLOSECOMPLAINTS DESC, distcode ASC ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_ONM(sql);
            return dt;
        }

        public DataTable GetBDSDHTLTDetailsOnTotal(string strStartDate, string strEndDate, string strDivision, string strHTLTTyp, string strBDSDTyp, string strOpenClose)
        {
            string sql = string.Empty;

            sql += " SELECT OSD.Dist dist, '' EXTERNAL_ID,'' FAULTID ,'' CC_INF_PERSON, OSD.Shutdown_Id,( SELECT div_name FROM onm.DIVISION WHERE div_code=osd.DIST) DIVISION,  OSD.FAULTCATEGORY, osd.BACKFEED_DATETIME, osd.FAULTTYPE, ";
            sql += " osd.EFFECTED_ELEMENT, osd.NO_LOAD,osd.BACKFEED_STATUS,  osd.USERNAME,osd.EMP_NAME, osd.SHUTDOWN_TYPE , osd.Feeder_Code, ";
            sql += " osd.Feeder_Name,osd.Substation_Code,osd.Substation_Name,osd.Grid_Code,osd.Grid_Name  ,osd.RELAY_TRIPPED RELAY,osd.LOAD, ";
            sql += " osd.Fault_Location, osd.reason,TO_CHAR(osd.Shutdown_DT,'dd-Mon-yyyy') OPEN_TIME,TO_CHAR(osd.Shutdown_DT,'hh:mm:ssPM') HOURS_MIN , ";
            sql += " osd.remarks,osd.Emp_No,osd.Emp_Desig,osd.ShutDown_Over,osd.SUB_ELEMENT_PROB, osd.EFFECTED_ELEMENT,osd.LT_FEEDER_FROM, osd.LT_FEEDER_TO, ";
            sql += " osd.SAP_NOTIFICATION,osd.EXPECTED_DUR_IN_HRS, osd.DETAILS_OF_WORK_DONE,osd.CLOSING_STATUS,osd.AC_SHUTDOWN_OVER_DT,    ";
            sql += " osd.CLOSE_USER,osd.LOAD_RECOVERED, osd.COMPLAINT_CENTRE_CODE, osd.DAM_DT_CODE    ";
            sql += " FROM onm.ONM_ShutDown_Details osd WHERE  SHUTDOWN_Dt>SYSDATE-365 AND SHUTDOWN_Dt<SYSDATE+1 AND ((FAULT_DUR_IN_SEC > -1 ";
            sql += " AND CLOSING_STATUS IN('NR','TR')) OR (FAULT_DUR_IN_SEC = -1 AND CLOSING_STATUS IS NULL))  AND Circle IN ('SOUTH','WEST') ";
            sql += " AND OSD.FAULTCATEGORY IN ('" + strHTLTTyp + "') ";
            sql += " AND OSD.Powercut_Type IN ('" + strBDSDTyp + "') ";
            if (strDivision.ToUpper() != "All".ToUpper())
                sql += " AND OSD.Dist='" + strDivision + "'  ";
            if (strOpenClose.ToUpper() != "Open".ToUpper())
                sql += " AND (SHUTDOWN_DT >= TO_DATE('" + strStartDate + " 00:00:00','DD-MON-YYYY HH24:MI:SS') AND SHUTDOWN_DT<= TO_DATE('" + strEndDate + " 23:59:59','DD-MON-YYYY HH24:MI:SS')) ";
            sql += " ORDER BY Shutdown_DT DESC  ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_ONM(sql);

            return dt;

        }

        public DataTable GetBDSDHTLTOnSlctAreaList(string strBDSDId, string strFeederCode)
        {
            string sql = string.Empty;

            sql += " SELECT INITCAP(TS.AREA_NAME || ' - ' || TS.AREA_CODE) AREA_NAME FROM onm.onm_shutdown_details SD , ONM.ONM_TRANSFORMER_SETUP_DETAIL TS WHERE SD.FEEDER_CODE=TS.FEEDER_CODE ";
            sql += " AND SD.FEEDER_CODE='" + strFeederCode + "' ";
            sql += " AND SD.SHUTDOWN_ID='" + strBDSDId + "' ";
            sql += " AND TS.EXTERNAL_ID IS NOT NULL Order by TS.AREA_NAME asc ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_ONM(sql);

            return dt;

        }

        public DataTable GetBDSDHTLTOnAreaListConsCount(string strExternalId, string strDTCode)
        {
            string sql = string.Empty;
            string strDtCodeList = string.Empty;
            string strDtCode = string.Empty;
            string strExternalIdListTop = string.Empty;
            DataTable dt2 = new DataTable();

            sql = "  SELECT DISTINCT  TS.EXTERNAL_ID EXTERNAL_ID, OFC.DAM_DT_CODE FROM onm.onm_shutdown_details OSD, onm.ONM_FAULT_COLLECTIONS OFC, onm.division D, ONM.ONM_TRANSFORMER_SETUP_DETAIL TS ";
            sql += "  WHERE OSD.CIRCLE IN ('SOUTH','WEST') AND OSD.SHUTDOWN_ID=SUBSTR(OFC.INSERTEDFROM,3,12)  ";
            sql += "  AND (OSD.Powercut_Type IN ('SD', 'BD')) AND OFC.NO_LOAD = 0 AND OSD.DIST=D.DIV_CODE AND TS.FEEDER_CODE=OFC.FEEDERCODE  AND TS.EXTERNAL_ID IS NOT NULL ";
            sql += "  AND osd.SHUTDOWN_ID='" + strExternalId + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_ONM(sql);

            if (dt.Rows.Count > 0)
            {
                strDtCodeList = dt.Rows[0]["DAM_DT_CODE"].ToString();
                strExternalIdListTop = dt.Rows[0]["EXTERNAL_ID"].ToString();

                if (strDtCodeList != "")
                {
                    string[] words = strDtCodeList.Split(',');
                    foreach (string word in words)
                    {
                        strDtCode = strDtCode + "'" + word + "',";
                    }
                    strDtCode = strDtCode.Substring(0, strDtCode.Length - 1);
                }


                sql = string.Empty;

                sql = " SELECT COUNT(*) COUNT , 'Total Consumer' Total_Consumer  FROM ( SELECT DISTINCT A.mobile_no  FROM ONM.DM_CONSUMER_MAS a,ONM.DM_CONSUMER_POLE_TAGG B,ONM.DM_FDR_POLE_TAGG C,ONM.DM_LT_FDR_MAS D, ONM.DM_SAP_DT_MAS E ,ONM.DM_SUB_CLUS_MAS F ";
                sql += " WHERE a.sdo_cd = B.sdo_cd AND B.sdo_cd = c.sdo_cd AND c.sdo_cd = d.sdo_cd AND d.sdo_cd = e.sdo_cd AND e.sdo_cd = f.sdo_cd AND a.ca_no=B.ca_no AND B.POLE_ID=C.POLE_ID AND C.LT_FDR_CD=D.LT_FDR_CD AND D.DT_CODE=E.DT_CODE ";
                if (strDtCodeList != "")
                    sql += " AND E.DT_CODE IN (" + strDtCode + ")  ";
                else
                    sql += " AND E.HT_FDR_CD ='" + strExternalIdListTop + "'  ";
                sql += " AND E.SUB_CLUS_CD=F.SUB_CLUS_CD AND A.mobile_no IS NOT NULL)V ";

                DbFunction objdbfun2 = new DbFunction();
                dt2 = objdbfun2.dmlgetquery_ONM(sql);
                return dt2;
            }


            //string[] words = strDTCode.Split(',');
            //foreach (string word in words)
            //{
            //    strDtCodeList = strDtCodeList + "'" + word + "',";
            //}
            //strDtCodeList = strDtCodeList.Substring(0, strDtCodeList.Length - 1);
            //if (strDTCode != "")
            //{
            //    sql += " SELECT COUNT(*) COUNT , 'Total Consumer' Total_Consumer  FROM ( SELECT DISTINCT a.CA_NO  FROM ONM.DM_CONSUMER_MAS a,ONM.DM_CONSUMER_POLE_TAGG B,ONM.DM_FDR_POLE_TAGG C,ONM.DM_LT_FDR_MAS D, ONM.DM_SAP_DT_MAS E ,ONM.DM_SUB_CLUS_MAS F ";
            //    sql += " WHERE a.sdo_cd = B.sdo_cd AND B.sdo_cd = c.sdo_cd AND c.sdo_cd = d.sdo_cd AND d.sdo_cd = e.sdo_cd AND e.sdo_cd = f.sdo_cd AND a.ca_no=B.ca_no AND B.POLE_ID=C.POLE_ID AND C.LT_FDR_CD=D.LT_FDR_CD AND D.DT_CODE=E.DT_CODE ";
            //    sql += " AND E.DT_CODE IN (" + strDtCodeList + ")  ";
            //    sql += " AND E.SUB_CLUS_CD=F.SUB_CLUS_CD AND A.mobile_no IS NOT NULL)V ";
            //}
            //else 
            //{
            //    string strExternalIdListTop = GetExternalIdByBDSDId(strExternalId);
            //    sql += " SELECT COUNT(*) COUNT , 'Total Consumer' Total_Consumer FROM ( SELECT DISTINCT a.CA_NO  FROM ONM.DM_CONSUMER_MAS a,ONM.DM_CONSUMER_POLE_TAGG B,ONM.DM_FDR_POLE_TAGG C, ";
            //    sql += " ONM.DM_LT_FDR_MAS D, ONM.DM_SAP_DT_MAS E ,ONM.DM_SUB_CLUS_MAS F WHERE a.sdo_cd = B.sdo_cd AND B.sdo_cd = c.sdo_cd AND c.sdo_cd = d.sdo_cd ";
            //    sql += " AND d.sdo_cd = e.sdo_cd AND e.sdo_cd = f.sdo_cd AND a.ca_no=B.ca_no AND B.POLE_ID=C.POLE_ID AND C.LT_FDR_CD=D.LT_FDR_CD AND D.DT_CODE=E.DT_CODE AND ";
            //    sql += " E.SUB_CLUS_CD=F.SUB_CLUS_CD AND A.mobile_no IS NOT NULL AND E.HT_FDR_CD ='" + strExternalIdListTop + "' )V   ";
            //}

            //DataTable dt = new DataTable();
            //DbFunction objdbfun = new DbFunction();
            //dt = objdbfun.dmlgetquery_ONM(sql);

            return dt2;

        }

        private string GetExternalIdByBDSDId(string strExternalId)
        {
            string strExternalIdListTop = "Out";

            string sql = string.Empty;
            sql += " SELECT DISTINCT  TS.EXTERNAL_ID EXTERNAL_ID FROM onm.onm_shutdown_details OSD, onm.ONM_FAULT_COLLECTIONS OFC, onm.division D, ONM.ONM_TRANSFORMER_SETUP_DETAIL TS ";
            sql += " WHERE OSD.CIRCLE IN ('SOUTH','WEST') AND OSD.SHUTDOWN_ID=SUBSTR(OFC.INSERTEDFROM,3,12) AND (OSD.Powercut_Type IN ('SD', 'BD')) AND OFC.NO_LOAD = 0 AND OSD.DIST=D.DIV_CODE AND TS.FEEDER_CODE=OFC.FEEDERCODE ";
            sql += " AND TS.EXTERNAL_ID IS NOT NULL  ";
            sql += " AND osd.SHUTDOWN_ID='" + strExternalId + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_ONM(sql);
            if (dt.Rows.Count > 0)
            {
                strExternalIdListTop = dt.Rows[0]["EXTERNAL_ID"].ToString();
            }
            return strExternalIdListTop;
        }

        public DataTable GetBDSDContactList(string strDivCode)
        {
            string sql = string.Empty;

            sql += "  SELECT EMP_NAME, MOB_NO, DISIG FROM onm.OMS_SMS_SEND_USER  ";
            sql += "  WHERE status='Y'  ";
            sql += "  AND DIV ='" + strDivCode + "' ";
            sql += "  AND DISIG IN ('AM','SM','CC','ER','FOM','OT','DGM','AVP') order by DISIG asc ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_ONM(sql);

            return dt;

        }

        public DataTable GetBDSDSMSCountList(string strBDSDId)
        {
            string sql = string.Empty;

            sql += "  SELECT 'null' shutdown_ID, COUNT(*) SMS_Count  FROM onm.OMS_SMS_SEND_FTP WHERE shutdown_ID ='" + strBDSDId + "'  AND  sms_type IN ('BDT','SDT','PSDT') ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_ONM(sql);

            return dt;

        }

        public DataTable GetOutageAlertRPLDetails(string strCANumber)
        {
            string sql = string.Empty;

            sql += "  SELECT CONTACT_NO, OUTAGE_AREA, EXPECTED_RETORATION_TIME, EXPECTED_RETORATION_DT, REASON_OF_OUTAGE, POWERCUT_TYPE ";
            sql += "  FROM onm.BD_OPEN_IVRS WHERE flag='0'  AND TO_CHAR(CREATEDDT) = TO_CHAR(SYSDATE) ";
            sql += "  AND CA='" + strCANumber + "' ORDER BY CREATEDDT DESC ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_ONM(sql);

            return dt;

        }

        #endregion

        #region Send GCM Notification

        public DataTable GetMsgTBSendOn(bool statusChek)
        {
            string sql = " SELECT NOTIFY_ID, MSG_TITLE, MSG_DESC, MSG_STATUS, SMS_STATUS, COMPANY, SUBCOMPANY, SUBGRPCOMPANY, EMPID EMP_SEND_TO, SENDER_ID, OTHER FROM IMSG_MSG_SEND ";
            if (statusChek)
                sql += " WHERE MSG_STATUS='N' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery(sql);
            return dt;
        }

        #endregion

        #region Seva Kendra App

        //public  string getSK_RegDistMsgTxt(string strDist)
        //{
        //    string lblMsgTxt = string.Empty;

        //    string strSKAdd = string.Empty;
        //    string strSKAdd2 = string.Empty;

        //    string idSQL = " SELECT SK_ADDRESS_P2, SK_ADDRESS_P1 FROM dcrep.DSS_SEVAKENDRA_MST WHERE UPPER(district) = UPPER('" + strDist + "') AND active='Y' ";
        //    DataTable dtReqstAddress = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dtReqstAddress = objdbfun.dmlgetquery_dcrep(idSQL);
        //    if (dtReqstAddress.Rows.Count > 0)
        //    {
        //        strSKAdd = dtReqstAddress.Rows[0]["SK_ADDRESS_P2"].ToString();
        //        strSKAdd2 = dtReqstAddress.Rows[0]["SK_ADDRESS_P1"].ToString();

        //        if (strSKAdd != null)
        //        {
        //            idSQL = string.Empty;
        //            idSQL = " SELECT MSG_BODY_SUBMIT_SK FROM dcrep.DSS_OTP_MSG_CONTENT ";
        //            DataTable dtReqstMsgTxt = new DataTable();
        //            objdbfun = new DbFunction();
        //            dtReqstMsgTxt = objdbfun.dmlgetquery_dcrep(idSQL);

        //            if (dtReqstMsgTxt.Rows.Count > 0)
        //            {
        //                string replaceText = dtReqstMsgTxt.Rows[0]["MSG_BODY_SUBMIT_SK"].ToString();

        //                lblMsgTxt = replaceText.Replace("#5", strSKAdd);

        //                return lblMsgTxt + "~" + strSKAdd2; // "Your request has been registered with the order no : #1 with the Name #2 and Address #3 . Your appointment for New Connection is scheduled on #4 .Please visit at #5 with the required document. For any discrepancies, please contact at 399999707.";
        //            }
        //        }
        //    }
        //    return "Your request has been registered with the order no : #1 with the Name #2 and Address #3 . Your appointment for New Connection is scheduled on #4 .";
        //}

        public string getSK_RegDistMsgTxt(string strDist)
        {
            string lblMsgTxt, lblMsgTxtFinal = string.Empty;

            string strSKAdd = string.Empty;
            string strSKAdd2 = string.Empty;

            string strApointIntrvl = string.Empty;
            string strTelPhoneNo = string.Empty;

            string idSQL = " SELECT SK_ADDRESS_P2, SK_ADDRESS_P1 , APOINTMENT_DAYSINTERVAL, TELEPHONE_NO FROM dcrep.DSS_SEVAKENDRA_MST WHERE UPPER(district) = UPPER('" + strDist + "') AND active='Y' ";
            DataTable dtReqstAddress = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dtReqstAddress = objdbfun.dmlgetquery_dcrep(idSQL);
            if (dtReqstAddress.Rows.Count > 0)
            {
                strSKAdd = dtReqstAddress.Rows[0]["SK_ADDRESS_P2"].ToString();
                strSKAdd2 = dtReqstAddress.Rows[0]["SK_ADDRESS_P1"].ToString();

                strApointIntrvl = dtReqstAddress.Rows[0]["APOINTMENT_DAYSINTERVAL"].ToString();
                strTelPhoneNo = dtReqstAddress.Rows[0]["TELEPHONE_NO"].ToString();

                if (strSKAdd != null)
                {
                    idSQL = string.Empty;
                    idSQL = " SELECT MSG_BODY_SUBMIT_SK_MOB FROM dcrep.DSS_OTP_MSG_CONTENT ";
                    DataTable dtReqstMsgTxt = new DataTable();
                    objdbfun = new DbFunction();
                    dtReqstMsgTxt = objdbfun.dmlgetquery_dcrep(idSQL);

                    if (dtReqstMsgTxt.Rows.Count > 0)
                    {
                        string replaceText = dtReqstMsgTxt.Rows[0]["MSG_BODY_SUBMIT_SK_MOB"].ToString();

                        lblMsgTxt = replaceText.Replace("#5", strSKAdd);
                        lblMsgTxtFinal = lblMsgTxt.Replace("#6", strTelPhoneNo);

                        return lblMsgTxtFinal + "~" + strSKAdd2 + "$" + strApointIntrvl; // "Your request has been registered with the order no : #1 with the Name #2 and Address #3 . Your appointment for New Connection is scheduled on #4 .Please visit at #5 with the required document. For any discrepancies, please contact at 399999707.";
                    }
                }
            }
            return "Your request has been registered with the order no : #1 with the Name #2 and Address #3 . Your appointment for New Connection is scheduled on #4 .";
        }

        public DataTable getSK_HolidayMst(string strDist)
        {
            string sql = " SELECT TO_CHAR(H_DATE,'DD/MM/YYYY') date_time FROM dcrep.DSS_HOLIDAY_MST WHERE H_DATE between '" + DateTime.Now.AddDays(3).Date.ToString("dd-MMM-yyyy") + "' and  '" + DateTime.Now.AddDays(120).Date.ToString("dd-MMM-yyyy") + "' ORDER BY h_date ASC ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_dcrep(sql);
            return dt;
        }

        public DataTable getSK_TimeSlot(string strDist) //--set Y or N
        {

            string sql = "select START_TIME||'--'||FINISH_TIME TimeSlot from WEB_SAP_TIME_SLOT WHERE SK_FLAG = '" + strDist + "'";
            sql += " ORDER BY ID";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_dcrep(sql);
            return dt;
        }

        public Boolean getSK_RegDistStatus(string strDist)
        {
            bool isTrue = false;

            string idSQL = " SELECT SK_ADDRESS_P2, SK_ADDRESS_P1 FROM dcrep.DSS_SEVAKENDRA_MST WHERE UPPER(district) = UPPER('" + strDist + "') AND active='Y' ";
            DataTable dtReqstAddress = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dtReqstAddress = objdbfun.dmlgetquery_dcrep(idSQL);
            if (dtReqstAddress.Rows.Count > 0)
            {
                isTrue = true;
            }
            return isTrue;
        }

        public string getSK_RegOrderNoRating(string strOrderNo, string strRating)
        {
            string strOutput = "F";
            bool isTrue = false;

            string idSQL = " Insert into DSS_SEVAKENDRA_FDBCK ( ORDER_NO, RATING) values ('" + strOrderNo + "','" + strRating + "') ";

            DbFunction objdbfun = new DbFunction();
            isTrue = objdbfun.dmlsinglequery(idSQL);
            if (isTrue)
            {
                strOutput = "T";
            }
            return strOutput;
        }

        #endregion

        //#region "LR_Application"

        //public  DataTable MobApp_Circle_DivisionWise(string DivisionID)
        //{
        //    string sql = "  SELECT DISTINCT CIRCLE  FROM DIV_SCHEME_VENDOR_MST WHERE DIVISION_ID='" + DivisionID + "' AND ROWNUM<2 ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "DIV_SCHEME_VENDOR_MST";
        //    return dt;
        //}

        //public  DataTable MobApp_Scheme_DivisionWise(string DivisionID)
        //{
        //    string sql = "  SELECT '-SELECT-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SCHEME_NAME FROM DIV_SCHEME_VENDOR_MST WHERE DIVISION_ID='" + DivisionID + "' AND ACTIVE_FLAG = 'Y' ORDER BY  SCHEME_NAME "; //ADD ACTIVE_FLAG = Y ARVINDER 06072017

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "DIV_SCHEME_VENDOR_MST";
        //    return dt;
        //}

        //public  DataTable MobApp_Scheme_User(string strImeiNo)
        //{
        //    string sql = "  SELECT NAME, IMEI_NO, DIV_CODE,ROL_RGT COMPANY_CODE FROM DIV_SCHEME_VENDOR_USER WHERE IMEI_NO ='" + strImeiNo + "' ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "MobApp_Scheme_User";
        //    return dt;
        //}


        //public  DataTable MobApp_Vendor_DivisionWise(string DivisionID)
        //{
        //    //string sql = " SELECT '-SELECT-' VENDOR_NAME FROM DUAL UNION  SELECT DISTINCT VENDOR_NAME FROM DIV_SCHEME_VENDOR_MST WHERE DIVISION_ID='" + DivisionID + "' ORDER BY VENDOR_NAME ";

        //    //DataTable dt = new DataTable();
        //    //DbFunction objdbfun = new DbFunction();
        //    //dt = objdbfun.dmlgetquery_mobint(sql);
        //    //dt.TableName = "DIV_SCHEME_VENDOR_MST";


        //    string sql = " SELECT '-SELECT-' VENDOR_NAME FROM DUAL UNION  SELECT DISTINCT VENDOR_NAME FROM DIV_VENDOR_MST WHERE STATUS='Y' ORDER BY VENDOR_NAME ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "DIV_VENDOR_MST";
        //    return dt;
        //}

        //public  bool Insert_Scheme_Vendor_MobData(string DivId, string Scheme, string Vendor, string TeamCount, string MetRplOnly, string MetRelOnly,
        //                  string BothActMet, string MetInsQul, string PoleDbRel, string ArmCblRel, string Flag_V_S, string _sIMEINo, string _sCircle, string VS_Entry_DT)
        //{
        //    string sql = "INSERT INTO DIV_SCHEME_VENDOR_DTDATA(SNO,DIVISION_ID, SCHEME_NAME, VENDOR_NAME, TEAM_COUNT, MET_RPL_ONLY, MET_REL_ONLY, BOTH_ACT_MET, MET_INS_QUL, POLE_DB_REL, ARM_CBL_MET, FLAG_V_S,IMEI_NO,CIRCLE,VS_ENTRY_DATE)  ";
        //    sql = sql + " VALUES ";
        //    sql = sql + "  (SEQ_DTDATA.NEXTVAL,'" + DivId + "','" + Scheme + "','" + Vendor + "','" + TeamCount + "','" + MetRplOnly + "','" + MetRelOnly + "','" + BothActMet + "','" + MetInsQul + "','" + PoleDbRel + "','" + ArmCblRel + "','" + Flag_V_S + "','" + _sIMEINo + "','" + _sCircle + "',TO_DATE('" + VS_Entry_DT + "','dd/MM/yyyy')) ";

        //    DbFunction objdbfun = new DbFunction();
        //    return objdbfun.dmlsinglequery_mobint(sql);
        //}

        //public  bool Update_Scheme_Vendor_MobData(string Sno, string DivId, string TeamCount, string MetRplOnly, string MetRelOnly,
        //                            string BothActMet, string MetInsQul, string PoleDbRel, string ArmCblRel, string _sIMEINo, string _sCircle, string VS_Entry_DT)
        //{
        //    string sql = "UPDATE DIV_SCHEME_VENDOR_DTDATA SET DIVISION_ID='" + DivId + "',  TEAM_COUNT='" + TeamCount + "', MET_RPL_ONLY='" + MetRplOnly + "', MET_REL_ONLY='" + MetRelOnly + "', ";
        //    sql = sql + " BOTH_ACT_MET='" + BothActMet + "', MET_INS_QUL='" + MetInsQul + "', POLE_DB_REL='" + PoleDbRel + "', ARM_CBL_MET='" + ArmCblRel + "', CIRCLE='" + _sCircle + "',VS_ENTRY_DATE=TO_DATE('" + VS_Entry_DT + "','dd/MM/yyyy') ";
        //    sql = sql + " WHERE IMEI_NO='" + _sIMEINo + "' AND  SNO='" + Sno + "' ";


        //    DbFunction objdbfun = new DbFunction();
        //    return objdbfun.dmlsinglequery_mobint(sql);
        //}


        //public  DataTable MobApp_Check_SchemeVendor_DuplicatteData(string S_V_Flag, string IMEINo, string SchemeVendor, string VS_Entry_DT)
        //{
        //    string sql = " SELECT SNO FROM DIV_SCHEME_VENDOR_DTDATA  WHERE 1=1 AND VS_ENTRY_DATE=TO_DATE('" + VS_Entry_DT + "','dd/MM/yyyy')";

        //    if (S_V_Flag == "S")
        //    {
        //        sql = sql + " AND IMEI_NO='" + IMEINo + "'  and upper(SCHEME_NAME)=UPPER('" + SchemeVendor + "')";
        //    }
        //    else
        //    {
        //        sql = sql + " AND IMEI_NO='" + IMEINo + "'  and UPPER(VENDOR_NAME)=UPPER('" + SchemeVendor + "')";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "DIV_SCHEME_VENDOR_DTDATA";
        //    return dt;
        //}

        //public  bool Insert_Scheme_ActivityType_MobData(string MeterNo, string PoleNo, string ActTypeList1, string ActTypeList2, string _sIEMINo,
        //                                                       string NEW_METER_NO, string METER_BOX, string BUS_BAR, string CABLE_USED, string SEAL1, string SEAL2,
        //                                                       string SEAL3, string DIV_CODE, string SCHEME_NO, string DBOBS, string PIERCING, string FROM_POLE,
        //                                                        string TO_POLE, string FLAG_TYPE)
        //{
        //    string sql = "INSERT INTO DIV_SCHEME_LR_ACTIVTY(SNO_ID, METER_NO, POLE_NO, ACTIVITY_LIST1,  ACTIVITY_LIST2, IMEI_NO,NEW_METER_NO, METER_BOX, BUS_BAR, CABLE_USED, SEAL1, SEAL2, SEAL3, DIV_CODE, SCHEME_NO, DBOBS, PIERCING, FROM_POLE, TO_POLE, FLAG_TYPE)  ";
        //    sql = sql + " VALUES ";
        //    sql = sql + "  (SEQ_ACTDATA.NEXTVAL,'" + MeterNo + "','" + PoleNo + "','" + ActTypeList1 + "','" + ActTypeList2 + "','" + _sIEMINo + "',";
        //    sql = sql + " '" + NEW_METER_NO + "','" + METER_BOX + "','" + BUS_BAR + "','" + CABLE_USED + "','" + SEAL1 + "','" + SEAL2 + "','" + SEAL3 + "','" + DIV_CODE + "','" + SCHEME_NO + "',";
        //    sql = sql + " '" + DBOBS + "','" + PIERCING + "','" + FROM_POLE + "','" + TO_POLE + "','" + FLAG_TYPE + "') ";

        //    DbFunction objdbfun = new DbFunction();
        //    return objdbfun.dmlsinglequery_mobint(sql);
        //}

        //public  DataTable Mobapp_LRDashborad(string EntryDate)
        //{
        //    string sql = " SELECT RES2.CIRCLE,NVL(RES1.METER_RELATED,0) METER_RELATED,NVL(RES1.DB_RELATED,0) DB_RELATED,NVL(RES1.CABLE_RELATED,0) CABLE_RELATED FROM  ";
        //    sql = sql + " (SELECT CIRCLE,SUM(MET_RPL_ONLY + MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED,SUM(POLE_DB_REL) DB_RELATED, ";
        //    sql = sql + "  SUM(ARM_CBL_MET) CABLE_RELATED ";
        //    sql = sql + " FROM DIV_SCHEME_VENDOR_DTDATA  ";
        //    sql = sql + " WHERE TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
        //    sql = sql + " GROUP BY CIRCLE) RES1,(SELECT UNIQUE CIRCLE,DIV_SEQ FROM DIV_SCHEME_VENDOR_MST) RES2  ";
        //    sql = sql + " WHERE UPPER(RES1.CIRCLE(+))= UPPER(RES2.CIRCLE) ORDER BY RES2.DIV_SEQ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "DIV_SCHEME_VENDOR_DTDATA ";
        //    return dt;
        //}

        //public  DataTable Mobapp_LRDashboradDivWise(string EntryDate)
        //{
        //    string sql = "  SELECT RES2.DIVISION||' ('||RES2.DIVISION_ID||')' DIVISION,NVL(RES1.METER_RELATED,0) METER_RELATED, ";
        //    sql = sql + "   NVL(RES1.DB_RELATED,0) DB_RELATED,NVL(RES1.CABLE_RELATED,0) CABLE_RELATED FROM   ";
        //    sql = sql + "    (SELECT DIVISION_ID,SUM(MET_RPL_ONLY + MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED, ";
        //    sql = sql + "   SUM(POLE_DB_REL) DB_RELATED, SUM(ARM_CBL_MET) CABLE_RELATED FROM DIV_SCHEME_VENDOR_DTDATA    ";
        //    sql = sql + " WHERE TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
        //    sql = sql + "   GROUP BY DIVISION_ID) RES1,(SELECT UNIQUE DIVISION_ID,UPPER(DIVISION) DIVISION,DIV_SEQ FROM DIV_SCHEME_VENDOR_MST) RES2 ";
        //    sql = sql + "   WHERE UPPER(RES1.DIVISION_ID(+))= UPPER(RES2.DIVISION_ID)  ORDER BY RES2.DIV_SEQ ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "DIV_SCHEME_VENDOR_DTDATA ";
        //    return dt;
        //}



        //#endregion

        #region "LR_Application"

        public DataTable MobApp_Circle_DivisionWise(string DivisionID)
        {
            // string sql = "  SELECT DISTINCT CIRCLE  FROM DIV_SCHEME_VENDOR_MST WHERE DIVISION_ID='" + DivisionID + "' AND ROWNUM<2 ";
            string sql = "  SELECT DISTINCT CIRCLE  FROM DIV_SCM_SDC_MST WHERE DIVISION_ID='" + DivisionID + "' AND ROWNUM<2 ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "DIV_SCHEME_VENDOR_MST";
            return dt;
        }

        public DataTable MobApp_Scheme_DivisionWise(string DivisionID)
        {
            string sql = "  SELECT '-SELECT-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SCHEME_NAME FROM DIV_SCHEME_VENDOR_MST WHERE DIVISION_ID='" + DivisionID + "' AND ACTIVE_FLAG = 'Y' ORDER BY  SCHEME_NAME "; //ADD ACTIVE_FLAG = Y ARVINDER 06072017

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "DIV_SCHEME_VENDOR_MST";
            return dt;
        }

        public DataTable MobApp_ValidLogin(string UserID, string Password)
        {
            string sql = " select IMEI_NO from DIV_SCHEME_VENDOR_USER where EMP_ID='" + UserID + "' and PASSWORD='" + Password + "'";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "DIV_SCHEME_VENDOR_USER";
            return dt;
        }

        public DataTable MobApp_Scheme_User(string strImeiNo)
        {
            //string sql = "  SELECT NAME, IMEI_NO, DIV_CODE,ROL_RGT COMPANY_CODE FROM DIV_SCHEME_VENDOR_USER WHERE IMEI_NO ='" + strImeiNo + "'   and STATUS_FLG='Y'   ";
            string sql = "  SELECT NAME, IMEI_NO, DIV_CODE,ROL_RGT COMPANY_CODE FROM DIV_SCHEME_VENDOR_USER WHERE (IMEI_NO ='" + strImeiNo + "' OR IMEI_NO2 ='" + strImeiNo + "')  and STATUS_FLG='Y' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "MobApp_Scheme_User";
            return dt;
        }

        public DataTable MobApp_Scheme_UserPassword(string strUser_Name, string strPassword)
        {
            //string sql = "  SELECT NAME, IMEI_NO, DIV_CODE,ROL_RGT COMPANY_CODE FROM DIV_SCHEME_VENDOR_USER WHERE IMEI_NO ='" + strImeiNo + "'   and STATUS_FLG='Y'   ";
            string sql = "  SELECT NAME, IMEI_NO, DIV_CODE,ROL_RGT COMPANY_CODE FROM MOBINT.div_scheme_vendor_user_121223 WHERE EMP_ID ='" + strUser_Name + "' and PASSWORD ='" + strPassword + "' and STATUS_FLG='Y' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "MobApp_Scheme_UserPassword";
            return dt;
        }

        public DataTable MobApp_Scheme_GetUserDetails(string strUser_Name)
        {
            string sql = "  SELECT PASSWORD FROM MOBINT.div_scheme_vendor_user_121223 WHERE EMP_ID ='" + strUser_Name + "' and STATUS_FLG='Y' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "MobApp_Scheme_UserDetails";
            return dt;
        }

        public bool Update_UserPassword(string strUser_Name, string Password)
        {
            string sql = "UPDATE MOBINT.div_scheme_vendor_user_121223 SET PASSWORD='" + Password + "' WHERE EMP_ID ='" + strUser_Name + "' ";

            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlsinglequery_mobint(sql);
        }



        public DataTable MobApp_Scheme_Login(string strUserId, string strPassword)
        {
            string sql = "  SELECT NAME, IMEI_NO, DIV_CODE,ROL_RGT COMPANY_CODE FROM DIV_SCHEME_VENDOR_USER WHERE UPPER(USER_NAME)=UPPER('" + strUserId + "') AND UPPER(PASSWORD)=UPPER('" + strPassword + "') AND STATUS_FLG='Y'";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "MobApp_Scheme_User";
            return dt;
        }

        public DataTable MobApp_Vendor_DivisionWise(string DivisionID)
        {
            //string sql = " SELECT '-SELECT-' VENDOR_NAME FROM DUAL UNION  SELECT DISTINCT VENDOR_NAME FROM DIV_SCHEME_VENDOR_MST WHERE DIVISION_ID='" + DivisionID + "' ORDER BY VENDOR_NAME ";

            //DataTable dt = new DataTable();
            //DbFunction objdbfun = new DbFunction();
            //dt = objdbfun.dmlgetquery_mobint(sql);
            //dt.TableName = "DIV_SCHEME_VENDOR_MST";


            string sql = " SELECT '-SELECT-' VENDOR_NAME FROM DUAL UNION  SELECT DISTINCT VENDOR_NAME FROM DIV_VENDOR_MST WHERE STATUS='Y' ORDER BY VENDOR_NAME ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "DIV_VENDOR_MST";
            return dt;
        }

        public bool Insert_Scheme_Vendor_MobData(string DivId, string Scheme, string Vendor, string TeamCount, string MetRplOnly, string MetRelOnly,
                          string BothActMet, string MetInsQul, string PoleDbRel, string ArmCblRel, string Flag_V_S, string _sIMEINo, string _sCircle, string VS_Entry_DT, string strSubDiv)
        {
            string sql = "INSERT INTO DIV_SCHEME_VENDOR_DTDATA(SNO,DIVISION_ID, SCHEME_NAME, VENDOR_NAME, TEAM_COUNT, MET_RPL_ONLY, MET_REL_ONLY, BOTH_ACT_MET, MET_INS_QUL, POLE_DB_REL, ARM_CBL_MET, FLAG_V_S,IMEI_NO,CIRCLE,VS_ENTRY_DATE, SUB_DIVISION)  ";
            sql = sql + " VALUES ";
            sql = sql + "  (SEQ_DTDATA.NEXTVAL,'" + DivId + "','" + Scheme + "','" + Vendor + "','" + TeamCount + "','" + MetRplOnly + "','" + MetRelOnly + "','" + BothActMet + "','" + MetInsQul + "','" + PoleDbRel + "','" + ArmCblRel + "','" + Flag_V_S + "','" + _sIMEINo + "','" + _sCircle + "',TO_DATE('" + VS_Entry_DT + "','dd/MM/yyyy'), '" + strSubDiv + "' ) ";

            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlsinglequery_mobint(sql);
        }

        public bool Insert_Scheme_Vendor_MobData1(string DivId, string Scheme, string Vendor, string TeamCount, string MetRplOnly, string MetRelOnly,
                         string BothActMet, string MetInsQul, string PoleDbRel, string ArmCblRel, string Flag_V_S, string _sIMEINo, string _sCircle,
                         string VS_Entry_DT, string strSubDiv, string strlatitude, string strlongitude)
        {
            string sql = "INSERT INTO DIV_SCHEME_VENDOR_DTDATA(SNO,DIVISION_ID, SCHEME_NAME, VENDOR_NAME, TEAM_COUNT, MET_RPL_ONLY, MET_REL_ONLY, BOTH_ACT_MET, MET_INS_QUL, POLE_DB_REL, ARM_CBL_MET, FLAG_V_S,IMEI_NO,CIRCLE,VS_ENTRY_DATE, SUB_DIVISION,latitude,longitude)  ";
            sql = sql + " VALUES ";
            sql = sql + "  (SEQ_DTDATA.NEXTVAL,'" + DivId + "','" + Scheme + "','" + Vendor + "','" + TeamCount + "','" + MetRplOnly + "','" + MetRelOnly + "','" + BothActMet + "','" + MetInsQul + "','" + PoleDbRel + "','" + ArmCblRel + "','" + Flag_V_S + "','" + _sIMEINo + "','" + _sCircle + "',TO_DATE('" + VS_Entry_DT + "','dd/MM/yyyy'), '" + strSubDiv + "','" + strlatitude + "','" + strlongitude + "') ";

            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlsinglequery_mobint(sql);
        }


        public bool Update_Scheme_Vendor_MobData(string Sno, string DivId, string TeamCount, string MetRplOnly, string MetRelOnly,
                                    string BothActMet, string MetInsQul, string PoleDbRel, string ArmCblRel, string _sIMEINo, string _sCircle, string VS_Entry_DT)
        {
            string sql = "UPDATE DIV_SCHEME_VENDOR_DTDATA SET DIVISION_ID='" + DivId + "',  TEAM_COUNT='" + TeamCount + "', MET_RPL_ONLY='" + MetRplOnly + "', MET_REL_ONLY='" + MetRelOnly + "', ";
            sql = sql + " BOTH_ACT_MET='" + BothActMet + "', MET_INS_QUL='" + MetInsQul + "', POLE_DB_REL='" + PoleDbRel + "', ARM_CBL_MET='" + ArmCblRel + "', CIRCLE='" + _sCircle + "',VS_ENTRY_DATE=TO_DATE('" + VS_Entry_DT + "','dd/MM/yyyy') ";
            sql = sql + " WHERE IMEI_NO='" + _sIMEINo + "' AND  SNO='" + Sno + "' ";


            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlsinglequery_mobint(sql);
        }


        public DataTable MobApp_Check_SchemeVendor_DuplicatteData(string S_V_Flag, string IMEINo, string SchemeVendor, string VS_Entry_DT)
        {
            string sql = " SELECT SNO FROM DIV_SCHEME_VENDOR_DTDATA  WHERE 1=1 AND VS_ENTRY_DATE=TO_DATE('" + VS_Entry_DT + "','dd/MM/yyyy')";

            if (S_V_Flag == "S")
            {
                sql = sql + " AND IMEI_NO='" + IMEINo + "'  and upper(SCHEME_NAME)=UPPER('" + SchemeVendor + "')";
            }
            else
            {
                sql = sql + " AND IMEI_NO='" + IMEINo + "'  and UPPER(VENDOR_NAME)=UPPER('" + SchemeVendor + "')";
            }

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "DIV_SCHEME_VENDOR_DTDATA";
            return dt;
        }

        public bool Insert_Scheme_ActivityType_MobData(string MeterNo, string PoleNo, string ActTypeList1, string ActTypeList2, string _sIEMINo,
                                                               string NEW_METER_NO, string METER_BOX, string BUS_BAR, string CABLE_USED, string SEAL1, string SEAL2,
                                                               string SEAL3, string DIV_CODE, string SCHEME_NO, string DBOBS, string PIERCING, string FROM_POLE,
                                                                string TO_POLE, string FLAG_TYPE)
        {
            string sql = "INSERT INTO DIV_SCHEME_LR_ACTIVTY(SNO_ID, METER_NO, POLE_NO, ACTIVITY_LIST1,  ACTIVITY_LIST2, IMEI_NO,NEW_METER_NO, METER_BOX, BUS_BAR, CABLE_USED, SEAL1, SEAL2, SEAL3, DIV_CODE, SCHEME_NO, DBOBS, PIERCING, FROM_POLE, TO_POLE, FLAG_TYPE, SUB_DIVISION)  ";
            sql = sql + " VALUES ";
            sql = sql + "  (SEQ_ACTDATA.NEXTVAL,'" + MeterNo + "','" + PoleNo + "','" + ActTypeList1 + "','" + ActTypeList2 + "','" + _sIEMINo + "',";
            sql = sql + " '" + NEW_METER_NO + "','" + METER_BOX + "','" + BUS_BAR + "','','" + SEAL1 + "','" + SEAL2 + "','" + SEAL3 + "','" + DIV_CODE + "','" + SCHEME_NO + "',";
            sql = sql + " '" + DBOBS + "','" + PIERCING + "','" + FROM_POLE + "','" + TO_POLE + "','" + FLAG_TYPE + "', '" + CABLE_USED + "') ";

            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlsinglequery_mobint(sql);
        }

        public bool Insert_Scheme_ActivityType_MobData1(string MeterNo, string PoleNo, string ActTypeList1, string ActTypeList2, string _sIEMINo,
                                                               string NEW_METER_NO, string METER_BOX, string BUS_BAR, string CABLE_USED, string SEAL1, string SEAL2,
                                                               string SEAL3, string DIV_CODE, string SCHEME_NO, string DBOBS, string PIERCING, string FROM_POLE,
                                                                string TO_POLE, string FLAG_TYPE, string strlatitude, string strlongitude)
        {
            string sql = "INSERT INTO DIV_SCHEME_LR_ACTIVTY(SNO_ID, METER_NO, POLE_NO, ACTIVITY_LIST1,  ACTIVITY_LIST2, IMEI_NO,NEW_METER_NO, METER_BOX, BUS_BAR, CABLE_USED, SEAL1, SEAL2, SEAL3, DIV_CODE, SCHEME_NO, DBOBS, PIERCING, FROM_POLE, TO_POLE, FLAG_TYPE, SUB_DIVISION,latitude,longitude)  ";
            sql = sql + " VALUES ";
            sql = sql + "  (SEQ_ACTDATA.NEXTVAL,'" + MeterNo + "','" + PoleNo + "','" + ActTypeList1 + "','" + ActTypeList2 + "','" + _sIEMINo + "',";
            sql = sql + " '" + NEW_METER_NO + "','" + METER_BOX + "','" + BUS_BAR + "','','" + SEAL1 + "','" + SEAL2 + "','" + SEAL3 + "','" + DIV_CODE + "','" + SCHEME_NO + "',";
            sql = sql + " '" + DBOBS + "','" + PIERCING + "','" + FROM_POLE + "','" + TO_POLE + "','" + FLAG_TYPE + "', '" + CABLE_USED + "','" + strlatitude + "','" + strlongitude + "') ";

            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlsinglequery_mobint(sql);
        }

        //public DataTable Mobapp_LRDashborad(string EntryDate)
        //{
        //    string sql = " SELECT RES2.CIRCLE,NVL(RES1.METER_RELATED,0) METER_RELATED,NVL(RES1.DB_RELATED,0) DB_RELATED,NVL(RES1.CABLE_RELATED,0) CABLE_RELATED FROM  ";
        //    sql = sql + " (SELECT CIRCLE,SUM(MET_RPL_ONLY + MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED,SUM(POLE_DB_REL) DB_RELATED, ";
        //    sql = sql + "  SUM(ARM_CBL_MET) CABLE_RELATED ";
        //    sql = sql + " FROM DIV_SCHEME_VENDOR_DTDATA  ";
        //    sql = sql + " WHERE TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
        //    sql = sql + " GROUP BY CIRCLE) RES1,(SELECT UNIQUE CIRCLE FROM DIV_SCM_SDC_MST ORDER BY CIRCLE) RES2  ";
        //    sql = sql + " WHERE UPPER(RES1.CIRCLE(+))= UPPER(RES2.CIRCLE) ORDER BY RES2.CIRCLE";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "DIV_SCHEME_VENDOR_DTDATA ";
        //    return dt;
        //}

        //public DataTable Mobapp_LRDashboradDivWise(string EntryDate)
        //{

        //    string sql = "  SELECT RES2.DIVISION||' ('||RES2.DIVISION_ID||')' DIVISION,NVL(RES1.METER_RELATED,0) METER_RELATED, ";
        //    sql = sql + "   NVL(RES1.DB_RELATED,0) DB_RELATED,NVL(RES1.CABLE_RELATED,0) CABLE_RELATED FROM   ";
        //    sql = sql + "    (SELECT DIVISION_ID,SUM(MET_RPL_ONLY + MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED, ";
        //    sql = sql + "   SUM(POLE_DB_REL) DB_RELATED, SUM(ARM_CBL_MET) CABLE_RELATED FROM DIV_SCHEME_VENDOR_DTDATA    ";
        //    sql = sql + " WHERE TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
        //    sql = sql + "   GROUP BY DIVISION_ID) RES1,(SELECT UNIQUE DIVISION_ID,UPPER(DIVISION) DIVISION FROM DIV_SCM_SDC_MST) RES2 ";
        //    sql = sql + "   WHERE UPPER(RES1.DIVISION_ID(+))= UPPER(RES2.DIVISION_ID)  ORDER BY RES2.DIVISION ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "DIV_SCHEME_VENDOR_DTDATA ";
        //    return dt;
        //}

        //public DataTable Mobapp_LRDashboradSubDivWise(string EntryDate)
        //{
        //    string sql = " SELECT RES2.SUB_DIVISION DIVISION,NVL(RES1.METER_RELATED,0) METER_RELATED, NVL(RES1.DB_RELATED,0) DB_RELATED,NVL(RES1.CABLE_RELATED,0) CABLE_RELATED FROM ";
        //    sql = sql + "  (SELECT SUB_DIVISION,SUM(MET_RPL_ONLY + MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED, SUM(POLE_DB_REL) DB_RELATED, SUM(ARM_CBL_MET) CABLE_RELATED FROM DIV_SCHEME_VENDOR_DTDATA  ";
        //    sql = sql + "  WHERE TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
        //    sql = sql + "  GROUP BY SUB_DIVISION) RES1,(SELECT UNIQUE SUB_DIVISION FROM DIV_SCM_SDC_MST) RES2 WHERE UPPER(RES1.SUB_DIVISION(+))= UPPER(RES2.SUB_DIVISION) ORDER BY RES2.SUB_DIVISION ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "DIV_SCHEME_VENDOR_DTDATA ";
        //    return dt;
        //}

        public DataTable Mobint_LRObservationList(string strSubDiv, string strDivName, string strRolRght, string SubCluster)
        {
            string sql = " SELECT SNO_ID, OBSERVATION_TYPE, VISIT_DATE, NVL(METER_NO, '0') METER_NO, NVL(CA_NUMBER,'0') CA_NUMBER, NVL(POLE_NO,'0') POLE_NO, ";
            sql = sql + " ACTION_TAKEN_FLG, REMARKS, OTHER_RKS, TYPE_OF_ABNORMALITY, SITE_ADDRESS, ADJ_METER_NO1, ADJ_METER_NO2, ";
            sql = sql + " NC_TYPE, UPPER(NEAR_POLE_NO) NEAR_POLE_NO, TO_CHAR(A.ENTRY_DATE,'dd/mm/yyyy') ENTRY_DT  FROM DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B";
            sql = sql + " WHERE UPPER(A.DIVISION)=UPPER('" + strDivName + "') AND A.SNO_ID = B.OBSER_ID ";
            if (strSubDiv != "-SELECT-" && strSubDiv != "" && strSubDiv.ToUpper() != "-ALL-" && strSubDiv != "ALL")
            {
                sql = sql + " AND UPPER(SUB_DIVISION)=UPPER('" + strSubDiv + "') ";
            }
            if (SubCluster != "-SELECT-" && SubCluster != "")
            {
                sql = sql + " AND UPPER(SUB_CLUSTER)=UPPER('" + SubCluster + "') ";
            }
            if (strRolRght == "Street Light")
            {
                sql = sql + " AND (B.NC_SLIGHT = 'Y' OR B.ABN_TYP = 'Y') ";
                sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%' ) ";
            }
            else if (strRolRght == "O & M")
            {
                sql = sql + " AND (B.NC_ONM = 'Y' OR B.ABN_TYP = 'Y') ";
                sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR ";
                sql = sql + " NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%' ";
                sql = sql + " OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  )  ";
            }
            else if (strRolRght == "MMG")
            {
                sql = sql + " AND (B.NC_MMG = 'Y' OR B.ABN_TYP = 'Y') ";
                sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%' ) ";
            }
            else if (strRolRght == "Enforcement")
            {
                sql = sql + " AND (B.NC_ENFORCEMNT = 'Y' OR B.ABN_TYP = 'Y') ";
                sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR  NC_TYPE LIKE '%30%'";
                sql = sql + " OR TYPE_OF_ABNORMALITY LIKE '%Theft%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' )  ";
            }
            else if (strRolRght == "Business")
            {
                sql = sql + " AND (B.NC_BUSINESS = 'Y' OR B.ABN_TYP = 'Y') ";
                sql = sql + " AND (NC_TYPE LIKE '%06%' )  ";
            }
            else if (strRolRght == "QC")
            {

                sql = string.Empty;
                sql = " SELECT SEQ_NO SNO_ID, VISIT_DATE, NVL(CA_NO,'0') CA_NUMBER,NVL(METER_NO, '0') METER_NO, NVL(POLE_NO,'0') POLE_NO, ";
                sql = sql + "   SUB_AREA_TYP NC_TYPE, SUB_AREA_TYP_SLCTD, RMKS REMARKS, SCHEME, TO_CHAR(A.ENTRY_DATE,'dd/mm/yyyy') ENTRY_DT FROM DIV_SCHEME_QC_TRANS A, DIV_SCHEME_QC_TYP B   ";
                sql = sql + "   WHERE UPPER(DIVISION_NAME)=UPPER('" + strDivName + "')  ";

                if (strSubDiv != "-SELECT-" && strSubDiv != "" && strSubDiv.ToUpper() != "-ALL-" && strSubDiv.ToUpper() != "ALL")
                {
                    sql = sql + " AND UPPER(SUB_DIVISION)=UPPER('" + strSubDiv + "') ";
                }

                sql = sql + " AND A.SEQ_NO = B.OBSER_ID  and QC_PD_REL ='X' ";

            }
            else
            {

            }

            sql = sql + "  ORDER BY A.ENTRY_DATE DESC ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }
        //public DataTable Mobint_LRObservationList(string strSubDiv, string strDivName, string strRolRght)
        //{
        //    string sql = " SELECT SNO_ID, OBSERVATION_TYPE, VISIT_DATE, NVL(METER_NO, '0') METER_NO, NVL(CA_NUMBER,'0') CA_NUMBER, NVL(POLE_NO,'0') POLE_NO, ";
        //    sql = sql + " ACTION_TAKEN_FLG, REMARKS, OTHER_RKS, TYPE_OF_ABNORMALITY, SITE_ADDRESS, ADJ_METER_NO1, ADJ_METER_NO2, ";
        //    sql = sql + " NC_TYPE, UPPER(NEAR_POLE_NO) NEAR_POLE_NO, TO_CHAR(A.ENTRY_DATE,'dd/mm/yyyy') ENTRY_DT FROM DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B  ";
        //    sql = sql + " WHERE UPPER(DIVISION)=UPPER('" + strDivName + "') AND A.SNO_ID = B.OBSER_ID ";
        //    if (strSubDiv != "-SELECT-" && strSubDiv != "")
        //    {
        //        sql = sql + " AND UPPER(SUB_DIVISION)=UPPER('" + strSubDiv + "') ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = sql + " AND (B.NC_SLIGHT = 'Y' OR B.ABN_TYP = 'Y') ";
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%' ) ";
        //    }
        //    else if (strRolRght == "O & M")
        //    {
        //        sql = sql + " AND (B.NC_ONM = 'Y' OR B.ABN_TYP = 'Y') ";
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR ";
        //        sql = sql + " NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%'";
        //        sql = sql + " OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%')  ";
        //    }
        //    else if (strRolRght == "MMG")
        //    {
        //        sql = sql + " AND (B.NC_MMG = 'Y' OR B.ABN_TYP = 'Y') ";
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%' ) ";
        //    }
        //    else if (strRolRght == "Enforcement")
        //    {
        //        sql = sql + " AND (B.NC_ENFORCEMNT = 'Y' OR B.ABN_TYP = 'Y') ";
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' ";
        //        sql = sql + " OR TYPE_OF_ABNORMALITY LIKE '%Theft%'  )  ";
        //    }
        //    else if (strRolRght == "Business")
        //    {
        //        sql = sql + " AND (B.NC_BUSINESS = 'Y' OR B.ABN_TYP = 'Y') ";
        //        sql = sql + " AND (NC_TYPE LIKE '%06%' )  ";
        //    }
        //    else if (strRolRght == "QC")
        //    {

        //        sql = string.Empty;
        //        sql = " SELECT SEQ_NO SNO_ID, VISIT_DATE, NVL(CA_NO,'0') CA_NUMBER,NVL(METER_NO, '0') METER_NO, NVL(POLE_NO,'0') POLE_NO, ";
        //        sql = sql + "   SUB_AREA_TYP NC_TYPE, SUB_AREA_TYP_SLCTD, RMKS REMARKS, SCHEME, TO_CHAR(A.ENTRY_DATE,'dd/mm/yyyy') ENTRY_DT FROM DIV_SCHEME_QC_TRANS A, DIV_SCHEME_QC_TYP B   ";
        //        sql = sql + "   WHERE UPPER(DIVISION_NAME)=UPPER('" + strDivName + "')  ";

        //        if (strSubDiv != "-SELECT-" && strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION)=UPPER('" + strSubDiv + "') ";
        //        }

        //        sql = sql + " AND A.SEQ_NO = B.OBSER_ID  and QC_PD_REL ='X' ";

        //    }
        //    else
        //    {

        //    }

        //    sql = sql + "  ORDER BY A.ENTRY_DATE DESC ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        public DataTable Mobint_LRObservationList(string strDivName)
        {
            string sql = " SELECT SNO_ID, OBSERVATION_TYPE, VISIT_DATE, NVL(METER_NO, '0') METER_NO, NVL(CA_NUMBER,'0') CA_NUMBER, NVL(POLE_NO,'0') POLE_NO, ";
            sql = sql + " ACTION_TAKEN_FLG, REMARKS, OTHER_RKS, TYPE_OF_ABNORMALITY, SITE_ADDRESS, ADJ_METER_NO1, ADJ_METER_NO2, ";
            sql = sql + " NC_TYPE, UPPER(NEAR_POLE_NO) NEAR_POLE_NO, TO_CHAR(ENTRY_DATE,'dd/mm/yyyy') ENTRY_DT FROM DIV_SCHEME_SURVEILLANCE ";
            sql = sql + " WHERE UPPER(DIVISION)=UPPER('" + strDivName + "') ";
            sql = sql + "  ORDER BY ENTRY_DATE DESC ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }

        public string SelectNextVal()
        {

            string strSql = " SELECT SEQ_DIV_SCHEME_SURVEILLANCE.NEXTVAL SRNO FROM DUAL ";

            DataTable dt = new DataTable();
            DbFunction dbFunction = new DbFunction();
            dt = dbFunction.dmlgetquery_mobint(strSql);

            string strOutput = "";

            if (dt.Rows.Count > 0)
            {
                strOutput = dt.Rows[0]["SRNO"].ToString().Trim();
            }

            return strOutput;
        }

        #region Commented_23_07_2024_Divyesh
        //public DataTable MobApp_Cluster_Mapping(string subdivision)
        //{
        //    string sql = "";
        //    if (subdivision != "x")
        //        sql = "SELECT '-SELECT-' SUB_CLUSTER FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION_AREA SUB_CLUSTER FROM enforcement_subdivision_mst WHERE upper(SUB_DIVISION_DESC)=upper('" + subdivision + "') AND ACTIVE_FLAG = 'Y'";
        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "DIV_SCHEME_VENDOR_MST";
        //    return dt;
        //}
        #endregion

        public DataTable MobApp_Cluster_Mapping(string subdivision)
        {
            string sql = "";
            if (subdivision != "x")
            {
                if (subdivision.ToUpper() == "JAUNAPUR")
                    sql = "SELECT '-SELECT-' SUB_CLUSTER FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION_AREA SUB_CLUSTER FROM enforcement_subdivision_mst WHERE upper(SUB_DIVISION_DESC)=upper('" + subdivision + "') AND ACTIVE_FLAG = 'Y' and SUB_DIVISION_AREA NOT IN ('A and B  BLK AYA NGR', 'AYA NAGAR VILLAGE', 'CLUB DRIVE SULTANPUR', 'E , F , G and H  BLK AYA NGR')";
                else if (subdivision.ToUpper() == "AAYA NAGAR")
                {
                    subdivision = "JAUNAPUR";
                    sql = "SELECT '-SELECT-' SUB_CLUSTER FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION_AREA SUB_CLUSTER FROM enforcement_subdivision_mst WHERE upper(SUB_DIVISION_DESC)=upper('" + subdivision + "') AND ACTIVE_FLAG = 'Y' and SUB_DIVISION_AREA  IN ('A and B  BLK AYA NGR', 'AYA NAGAR VILLAGE', 'CLUB DRIVE SULTANPUR', 'E , F , G and H  BLK AYA NGR')";
                }
                else if (subdivision.ToUpper() == "MITRAON")
                {
                    subdivision = "MITRON";
                    sql = "SELECT '-SELECT-' SUB_CLUSTER FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION_AREA SUB_CLUSTER FROM enforcement_subdivision_mst WHERE upper(SUB_DIVISION_DESC)=upper('" + subdivision + "') AND ACTIVE_FLAG = 'Y' and SUB_DIVISION_AREA IN ('GOPAL NAGAR (MITRAON)', 'KHAIRA DABAR VILL', 'SUREHRA VILLAGE', 'VILL KHAR KHARI (MITRAON)', 'VILL MITRAON')";
                }
                else if (subdivision.ToUpper() == "KANCHANKUNJ")
                    sql = " SELECT '-SELECT-' SUB_CLUSTER FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION_AREA SUB_CLUSTER FROM MOBINT.enforcement_subdivision_mst WHERE (upper(SUB_DIVISION_DESC)=upper('SARITA VIHAR') or upper(SUB_DIVISION_DESC)=upper('SOURABH VIHAR')) AND ACTIVE_FLAG = 'Y' and SUB_DIVISION_AREA  IN ('JAITPUR EXT PART-II', 'KANCHAN KUNJ', 'KHADDA A-B BLK and VISHWAKARMA CLY', 'KHADDA LVDS', 'MADANPUR KHADAR- EXTN', 'MADANPUR KHADAR- EXTN 2') ";
                else if (subdivision.ToUpper() == "SARITA VIHAR" || subdivision.ToUpper() == "SOURABH VIHAR")
                    sql = " SELECT '-SELECT-' SUB_CLUSTER FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION_AREA SUB_CLUSTER FROM MOBINT.enforcement_subdivision_mst WHERE (upper(SUB_DIVISION_DESC)=upper('SARITA VIHAR') or upper(SUB_DIVISION_DESC)=upper('SOURABH VIHAR')) AND ACTIVE_FLAG = 'Y' and SUB_DIVISION_AREA NOT IN ('JAITPUR EXT PART-II', 'KANCHAN KUNJ', 'KHADDA A-B BLK and VISHWAKARMA CLY', 'KHADDA LVDS', 'MADANPUR KHADAR- EXTN', 'MADANPUR KHADAR- EXTN 2') ";
                else
                    sql = "SELECT '-SELECT-' SUB_CLUSTER FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION_AREA SUB_CLUSTER FROM enforcement_subdivision_mst WHERE upper(SUB_DIVISION_DESC)=upper('" + subdivision + "') AND ACTIVE_FLAG = 'Y'";
            }

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "DIV_SCHEME_VENDOR_MST";
            return dt;
        }

        public bool Insert_LR_Surveillane(string _sObserType, string _sVistDate, string _sCircle, string _sDivision, string _sMeterNo, string _sCANo,
                                      string _sPoleNo, string _sActionTkFlg, string _sRemarks, string _sNCType, string _sTypeOfAbnormality,
                                      string _sSiteAddress, string _sAdjMeterNo1, string _sAdjMeterNo2, string _sNearPoleNo, string _sOther,
                                    string strImeiNo, string subdivision, string SubCluster)
        {
            try
            {
                string strSrNo = SelectNextVal();

                //New Added
                string _ncrlst = "";
                string[] _arrnctyp = _sNCType.Trim().Split('|');

                for (int i = 0; i < _arrnctyp.Length; i++)
                {
                    if (!string.IsNullOrEmpty(_arrnctyp[i].ToString()))
                    {

                        if (_arrnctyp[i].ToString() != "null")
                        {
                            _ncrlst += _arrnctyp[i].ToString();
                            _ncrlst += "|";
                        }

                    }
                }
                //End

                string sqlinsert = "INSERT INTO DIV_SCHEME_SURVEILLANCE(SNO_ID,OBSERVATION_TYPE, VISIT_DATE, CIRCLE, DIVISION, METER_NO, CA_NUMBER, POLE_NO, ACTION_TAKEN_FLG, REMARKS, NC_TYPE, TYPE_OF_ABNORMALITY, SITE_ADDRESS, ADJ_METER_NO1, ADJ_METER_NO2, NEAR_POLE_NO,OTHER_RKS, IMEI_NO, SUB_DIVISION,SUB_CLUSTER)";
                sqlinsert = sqlinsert + " VALUES('" + strSrNo + "','" + _sObserType.ToString().Trim() + "','" + _sVistDate.ToString().Trim() + "','" + _sCircle.Trim().ToUpper() + "','" + _sDivision.Trim().ToUpper() + "','" + _sMeterNo.Trim() + "','" + _sCANo.Trim() + "','" + _sPoleNo.Trim() + "','" + _sActionTkFlg + "',";
                sqlinsert = sqlinsert + " '" + _sRemarks.Trim() + "','" + _ncrlst.Trim() + "','" + _sTypeOfAbnormality.Trim() + "','" + _sSiteAddress.Trim() + "','" + _sAdjMeterNo1.Trim() + "','" + _sAdjMeterNo2.Trim() + "','" + _sNearPoleNo.Trim() + "','" + _sOther.Trim() + "', '" + strImeiNo + "', '" + subdivision.Trim().ToUpper() + "','" + SubCluster.Trim().ToUpper() + "')";
                DbFunction objdbfunsqlinsert = new DbFunction();

                bool isTrue = false;
                if (objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert))
                {
                    isTrue = true;

                    //Start

                    string sqlinsert_new = " INSERT INTO DIV_SCHEME_SURV_NC_TYP (OBSER_ID, NC_SLIGHT,NC_SL_DT, NC_BUSINESS, NC_BUSI_DT,";
                    sqlinsert_new = sqlinsert_new + "  NC_ENFORCEMNT, NC_ENF_DT, NC_MMG, NC_MMG_DT, NC_ONM, NC_ONM_DT, ABN_TYP , ABN_TYP_DT)  ";
                    sqlinsert_new = sqlinsert_new + " VALUES('" + strSrNo + "', ";
                    if (_sNCType.Contains("26") || _sNCType.Contains("27") || _sNCType.Contains("28"))
                    { //SLight Flag
                        sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                    }
                    else
                    {
                        sqlinsert_new = sqlinsert_new + " 'X', '' ,";
                    }

                    if (_sNCType.Contains("06"))
                    { //Business Flag
                        sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                    }
                    else
                    {
                        sqlinsert_new = sqlinsert_new + " 'X', '' ,";
                    }

                    if (_sNCType.Contains("17") || _sNCType.Contains("18") || _sNCType.Contains("19"))
                    { //Enforcement Flag
                        sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                    }
                    else
                    {
                        sqlinsert_new = sqlinsert_new + " 'X', '' ,";
                    }

                    if (_sNCType.Contains("03") || _sNCType.Contains("04"))
                    { //MMG Flag
                        sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                    }
                    else
                    {
                        sqlinsert_new = sqlinsert_new + " 'X', '' ,";
                    }

                    if (_sNCType.Contains("01") || _sNCType.Contains("02") || _sNCType.Contains("05") || _sNCType.Contains("07") || _sNCType.Contains("08") || _sNCType.Contains("09") || _sNCType.Contains("10") || _sNCType.Contains("11") || _sNCType.Contains("12") || _sNCType.Contains("13") || _sNCType.Contains("14") || _sNCType.Contains("15") || _sNCType.Contains("16") || _sNCType.Contains("20") || _sNCType.Contains("21") || _sNCType.Contains("22") || _sNCType.Contains("23") || _sNCType.Contains("24") || _sNCType.Contains("25") || _sNCType.Contains("29") || _sNCType.Contains("30"))
                    { //O & M Flag
                        sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                    }
                    else
                    {
                        sqlinsert_new = sqlinsert_new + " 'X', '' ,";
                    }

                    if (_sTypeOfAbnormality.Contains("PL/PPL") || _sTypeOfAbnormality.Contains("Consumer Refusal") || _sTypeOfAbnormality.Contains("Theft") || _sTypeOfAbnormality.Contains("Other"))
                    { //Abnormality Flag
                        sqlinsert_new = sqlinsert_new + " 'Y', '' )";
                    }
                    else
                    {
                        sqlinsert_new = sqlinsert_new + " 'X', '' )";
                    }

                    bool checkIt = objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert_new);
                    //End

                }
                return isTrue;
            }
            catch (Exception ex)
            {
                WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public bool Insert_LR_Surveillane1(string _sObserType, string _sVistDate, string _sCircle, string _sDivision, string _sMeterNo, string _sCANo,
                                   string _sPoleNo, string _sActionTkFlg, string _sRemarks, string _sNCType, string _sTypeOfAbnormality,
                                   string _sSiteAddress, string _sAdjMeterNo1, string _sAdjMeterNo2, string _sNearPoleNo, string _sOther,
                                 string strImeiNo, string subdivision, string SubCluster, string strlatitude, string strlongitude)
        {
            try
            {
                string strSrNo = SelectNextVal();

                //New Added
                string _ncrlst = "";
                string[] _arrnctyp = _sNCType.Trim().Split('|');

                for (int i = 0; i < _arrnctyp.Length; i++)
                {
                    if (!string.IsNullOrEmpty(_arrnctyp[i].ToString()))
                    {

                        if (_arrnctyp[i].ToString() != "null")
                        {
                            _ncrlst += _arrnctyp[i].ToString();
                            _ncrlst += "|";
                        }

                    }
                }
                //End

                string sqlinsert = "INSERT INTO DIV_SCHEME_SURVEILLANCE(SNO_ID,OBSERVATION_TYPE, VISIT_DATE, CIRCLE, DIVISION, METER_NO, CA_NUMBER, POLE_NO, ACTION_TAKEN_FLG, REMARKS, NC_TYPE, TYPE_OF_ABNORMALITY, SITE_ADDRESS, ADJ_METER_NO1, ADJ_METER_NO2, NEAR_POLE_NO,OTHER_RKS, IMEI_NO, SUB_DIVISION,SUB_CLUSTER,latitude,longitude)";
                sqlinsert = sqlinsert + " VALUES('" + strSrNo + "','" + _sObserType.ToString().Trim() + "','" + _sVistDate.ToString().Trim() + "','" + _sCircle.Trim().ToUpper() + "','" + _sDivision.Trim().ToUpper() + "','" + _sMeterNo.Trim() + "','" + _sCANo.Trim() + "','" + _sPoleNo.Trim() + "','" + _sActionTkFlg + "',";
                sqlinsert = sqlinsert + " '" + _sRemarks.Trim() + "','" + _ncrlst.Trim() + "','" + _sTypeOfAbnormality.Trim() + "','" + _sSiteAddress.Trim() + "','" + _sAdjMeterNo1.Trim() + "','" + _sAdjMeterNo2.Trim() + "','" + _sNearPoleNo.Trim() + "','" + _sOther.Trim() + "', '" + strImeiNo + "', '" + subdivision.Trim().ToUpper() + "','" + SubCluster.Trim().ToUpper() + "','" + strlatitude + "','" + strlongitude + "')";
                DbFunction objdbfunsqlinsert = new DbFunction();

                bool isTrue = false;
                if (objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert))
                {
                    isTrue = true;

                    //Start

                    string sqlinsert_new = " INSERT INTO DIV_SCHEME_SURV_NC_TYP (OBSER_ID, NC_SLIGHT,NC_SL_DT, NC_BUSINESS, NC_BUSI_DT,";
                    sqlinsert_new = sqlinsert_new + "  NC_ENFORCEMNT, NC_ENF_DT, NC_MMG, NC_MMG_DT, NC_ONM, NC_ONM_DT, ABN_TYP , ABN_TYP_DT)  ";
                    sqlinsert_new = sqlinsert_new + " VALUES('" + strSrNo + "', ";
                    if (_sNCType.Contains("26") || _sNCType.Contains("27") || _sNCType.Contains("28"))
                    { //SLight Flag
                        sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                    }
                    else
                    {
                        sqlinsert_new = sqlinsert_new + " 'X', '' ,";
                    }

                    if (_sNCType.Contains("06"))
                    { //Business Flag
                        sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                    }
                    else
                    {
                        sqlinsert_new = sqlinsert_new + " 'X', '' ,";
                    }

                    if (_sNCType.Contains("17") || _sNCType.Contains("18") || _sNCType.Contains("19"))
                    { //Enforcement Flag
                        sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                    }
                    else
                    {
                        sqlinsert_new = sqlinsert_new + " 'X', '' ,";
                    }

                    if (_sNCType.Contains("03") || _sNCType.Contains("04"))
                    { //MMG Flag
                        sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                    }
                    else
                    {
                        sqlinsert_new = sqlinsert_new + " 'X', '' ,";
                    }

                    if (_sNCType.Contains("01") || _sNCType.Contains("02") || _sNCType.Contains("05") || _sNCType.Contains("07") || _sNCType.Contains("08") || _sNCType.Contains("09") || _sNCType.Contains("10") || _sNCType.Contains("11") || _sNCType.Contains("12") || _sNCType.Contains("13") || _sNCType.Contains("14") || _sNCType.Contains("15") || _sNCType.Contains("16") || _sNCType.Contains("20") || _sNCType.Contains("21") || _sNCType.Contains("22") || _sNCType.Contains("23") || _sNCType.Contains("24") || _sNCType.Contains("25") || _sNCType.Contains("29") || _sNCType.Contains("30"))
                    { //O & M Flag
                        sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                    }
                    else
                    {
                        sqlinsert_new = sqlinsert_new + " 'X', '' ,";
                    }

                    if (_sTypeOfAbnormality.Contains("PL/PPL") || _sTypeOfAbnormality.Contains("Consumer Refusal") || _sTypeOfAbnormality.Contains("Theft") || _sTypeOfAbnormality.Contains("Other"))
                    { //Abnormality Flag
                        sqlinsert_new = sqlinsert_new + " 'Y', '' )";
                    }
                    else
                    {
                        sqlinsert_new = sqlinsert_new + " 'X', '' )";
                    }

                    bool checkIt = objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert_new);
                    //End

                }
                return isTrue;
            }
            catch (Exception ex)
            {
                WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        //public bool Insert_LR_Surveillane(string _sObserType, string _sVistDate, string _sCircle, string _sDivision, string _sMeterNo, string _sCANo,
        //                              string _sPoleNo, string _sActionTkFlg, string _sRemarks, string _sNCType, string _sTypeOfAbnormality,
        //                              string _sSiteAddress, string _sAdjMeterNo1, string _sAdjMeterNo2, string _sNearPoleNo, string _sOther, string strImeiNo, string subdivision)
        //{
        //    try
        //    {
        //        string strSrNo = SelectNextVal();

        //        //New Added
        //        string _ncrlst = "";
        //        string[] _arrnctyp = _sNCType.Trim().Split('|');

        //        for (int i = 0; i < _arrnctyp.Length; i++)
        //        {
        //            if (!string.IsNullOrEmpty(_arrnctyp[i].ToString()))
        //            {

        //                if (_arrnctyp[i].ToString() != "null")
        //                {
        //                    _ncrlst += _arrnctyp[i].ToString();
        //                    _ncrlst += "|";
        //                }

        //            }
        //        }
        //        //End

        //        string sqlinsert = "INSERT INTO DIV_SCHEME_SURVEILLANCE(SNO_ID,OBSERVATION_TYPE, VISIT_DATE, CIRCLE, DIVISION, METER_NO, CA_NUMBER, POLE_NO, ACTION_TAKEN_FLG, REMARKS, NC_TYPE, TYPE_OF_ABNORMALITY, SITE_ADDRESS, ADJ_METER_NO1, ADJ_METER_NO2, NEAR_POLE_NO,OTHER_RKS, IMEI_NO, SUB_DIVISION)";
        //        sqlinsert = sqlinsert + " VALUES('" + strSrNo + "','" + _sObserType.ToString().Trim() + "','" + _sVistDate.ToString().Trim() + "','" + _sCircle.Trim().ToUpper() + "','" + _sDivision.Trim().ToUpper() + "','" + _sMeterNo.Trim() + "','" + _sCANo.Trim() + "','" + _sPoleNo.Trim() + "','" + _sActionTkFlg + "',";
        //        sqlinsert = sqlinsert + " '" + _sRemarks.Trim() + "','" + _ncrlst.Trim() + "','" + _sTypeOfAbnormality.Trim() + "','" + _sSiteAddress.Trim() + "','" + _sAdjMeterNo1.Trim() + "','" + _sAdjMeterNo2.Trim() + "','" + _sNearPoleNo.Trim() + "','" + _sOther.Trim() + "', '" + strImeiNo + "', '" + subdivision.Trim().ToUpper() + "' )";
        //        DbFunction objdbfunsqlinsert = new DbFunction();

        //        bool isTrue = false;
        //        if (objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert))
        //        {
        //            isTrue = true;

        //            //Start

        //            string sqlinsert_new = " INSERT INTO DIV_SCHEME_SURV_NC_TYP (OBSER_ID, NC_SLIGHT,NC_SL_DT, NC_BUSINESS, NC_BUSI_DT,";
        //            sqlinsert_new = sqlinsert_new + "  NC_ENFORCEMNT, NC_ENF_DT, NC_MMG, NC_MMG_DT, NC_ONM, NC_ONM_DT, ABN_TYP , ABN_TYP_DT)  ";
        //            sqlinsert_new = sqlinsert_new + " VALUES('" + strSrNo + "', ";
        //            if (_sNCType.Contains("26") || _sNCType.Contains("27") || _sNCType.Contains("28"))
        //            { //SLight Flag
        //                sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
        //            }
        //            else
        //            {
        //                sqlinsert_new = sqlinsert_new + " 'X', '' ,";
        //            }

        //            if (_sNCType.Contains("06"))
        //            { //Business Flag
        //                sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
        //            }
        //            else
        //            {
        //                sqlinsert_new = sqlinsert_new + " 'X', '' ,";
        //            }

        //            if (_sNCType.Contains("17") || _sNCType.Contains("18") || _sNCType.Contains("19"))
        //            { //Enforcement Flag
        //                sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
        //            }
        //            else
        //            {
        //                sqlinsert_new = sqlinsert_new + " 'X', '' ,";
        //            }

        //            if (_sNCType.Contains("03") || _sNCType.Contains("04"))
        //            { //MMG Flag
        //                sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
        //            }
        //            else
        //            {
        //                sqlinsert_new = sqlinsert_new + " 'X', '' ,";
        //            }

        //            if (_sNCType.Contains("01") || _sNCType.Contains("02") || _sNCType.Contains("05") || _sNCType.Contains("07") || _sNCType.Contains("08") || _sNCType.Contains("09") || _sNCType.Contains("10") || _sNCType.Contains("11") || _sNCType.Contains("12") || _sNCType.Contains("13") || _sNCType.Contains("14") || _sNCType.Contains("15") || _sNCType.Contains("16") || _sNCType.Contains("20") || _sNCType.Contains("21") || _sNCType.Contains("22") || _sNCType.Contains("23") || _sNCType.Contains("24") || _sNCType.Contains("25") || _sNCType.Contains("29")|| _sNCType.Contains("30"))
        //            { //O & M Flag
        //                sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
        //            }
        //            else
        //            {
        //                sqlinsert_new = sqlinsert_new + " 'X', '' ,";
        //            }

        //            if (_sTypeOfAbnormality.Contains("PL/PPL") || _sTypeOfAbnormality.Contains("Consumer Refusal") || _sTypeOfAbnormality.Contains("Theft") || _sTypeOfAbnormality.Contains("Other"))
        //            { //Abnormality Flag
        //                sqlinsert_new = sqlinsert_new + " 'Y', '' )";
        //            }
        //            else
        //            {
        //                sqlinsert_new = sqlinsert_new + " 'X', '' )";
        //            }

        //            bool checkIt = objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert_new);
        //            //End

        //        }
        //        return isTrue;
        //    }
        //    catch (Exception ex)
        //    {
        //        WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
        //        return false;
        //    }
        //}

        //public bool Insert_LR_Surv_Atr(string ObserId, string ObserType, string Remarks, string NCTypeResolved, string NCTypeNotResolved, string TypOfAbnormResolv, string TypOfAbnormNtResolv, string strDepartment, string strImeiNo,string enf_Case_ID)
        //{
        //    try
        //    {
        //        string sqlinsert = string.Empty;

        //        if (strDepartment == "Street Light")
        //        {
        //            sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, IMEI_NO )";
        //            sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
        //            sqlinsert = sqlinsert + " '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "' ) ";
        //        }
        //        else if (strDepartment == "O & M")
        //        {
        //            sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, ONM_IMEI_NO )";
        //            sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
        //            sqlinsert = sqlinsert + " '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "' ) ";
        //        }
        //        else if (strDepartment == "MMG")
        //        {
        //            sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, MMG_IMEI_NO )";
        //            sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
        //            sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "' ) ";
        //        }
        //        else if (strDepartment == "Enforcement")
        //        {
        //            sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, ENF_IMEI_NO,ENF_CASE_ID)";
        //            sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
        //            sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "','"+ enf_Case_ID + "' ) ";
        //        }
        //        else if (strDepartment == "Business")
        //        {
        //            sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, BUSI_IMEI_NO )";
        //            sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
        //            sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "' ) ";
        //        }
        //        else if (strDepartment == "QC") //Insert
        //        {
        //            sqlinsert = string.Empty;
        //            sqlinsert = "INSERT INTO DIV_SCHEME_QC_ATR( SR_ID, OBSER_ID, QC_PD_REL_RESOLVED, QC_PD_REL_N_RESOLVED, QC_PD_REL_RMKS, QC_PD_REL_DT, QC_CABLE_REL_RESOLVED, QC_CABLE_REL_N_RESOLVED, QC_CABLE_REL_RMKS, QC_CABLE_REL_DT, QC_MTR_REL_RESOLVED, QC_MTR_REL_N_RESOLVED, QC_MTR_REL_RMKS, QC_MTR_REL_DT, IMEI_NO )";
        //            sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_QC_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
        //            sqlinsert = sqlinsert + " '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate , '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate , '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate , '" + strImeiNo + "' ) ";
        //        }
        //        else
        //        {
        //            sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, IMEI_NO )";
        //            sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
        //            sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '" + Remarks + "', '" + ObserType + "', '" + strImeiNo + "' ) ";
        //        }

        //        DbFunction objdbfunsqlinsert = new DbFunction();

        //        bool isTrue = false;

        //        if (objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert))
        //        {
        //            isTrue = true;

        //            string strUpdate = " UPDATE DIV_SCHEME_SURV_NC_TYP SET ";

        //            if (strDepartment == "Street Light")
        //            {
        //                strUpdate = strUpdate + " NC_SLIGHT = 'N', NC_SL_DT= SYSDATE ";
        //                if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
        //                {
        //                    strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
        //                }
        //            }
        //            else if (strDepartment == "O & M")
        //            {
        //                strUpdate = strUpdate + " NC_ONM='N' , NC_ONM_DT= SYSDATE ";
        //                if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
        //                {
        //                    strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
        //                }
        //            }
        //            else if (strDepartment == "MMG")
        //            {
        //                strUpdate = strUpdate + " NC_MMG='N' , NC_MMG_DT= SYSDATE ";
        //                if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
        //                {
        //                    strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
        //                }
        //            }
        //            else if (strDepartment == "Enforcement")
        //            {
        //                strUpdate = strUpdate + " NC_ENFORCEMNT='N' , NC_ENF_DT= SYSDATE ";
        //                if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
        //                {
        //                    strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
        //                }
        //            }
        //            else if (strDepartment == "Business")
        //            {
        //                strUpdate = strUpdate + " NC_BUSINESS='N' , NC_BUSI_DT= SYSDATE ";
        //                if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
        //                {
        //                    strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
        //                }
        //            }
        //            else if (strDepartment == "QC")
        //            {
        //                strUpdate = string.Empty;
        //                strUpdate = strUpdate + " UPDATE DIV_SCHEME_QC_TYP SET QC_PD_REL='N' , QC_PD_REL_DT= SYSDATE , QC_CABLE_REL='N', QC_CABLE_REL_DT=SYSDATE, QC_MTR_REL='N', QC_MTR_REL_DT=SYSDATE ";

        //            }
        //            else
        //            {
        //                strUpdate = strUpdate + " ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
        //            }

        //            strUpdate = strUpdate + " WHERE OBSER_ID='" + ObserId.ToString() + "' ";

        //            bool checkIt = objdbfunsqlinsert.dmlsinglequery_mobint(strUpdate);

        //        }
        //        return isTrue;
        //    }
        //    catch (Exception ex)
        //    {
        //        WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
        //        return false;
        //    }
        //}

        public bool Insert_LR_Surv_Atr(string ObserId, string ObserType, string Remarks, string NCTypeResolved, string NCTypeNotResolved, string TypOfAbnormResolv, string TypOfAbnormNtResolv, string strDepartment, string strImeiNo, string enf_Case_ID)
        {
            string StreetLight = string.Empty;
            string OM = string.Empty;
            string MMG = string.Empty;
            string Enforcement = string.Empty;
            string Business = string.Empty;
            string strUpdate = string.Empty;
            string StreetLight1 = string.Empty;
            string OM1 = string.Empty;
            string MMG1 = string.Empty;
            string Enforcement1 = string.Empty;
            string Business1 = string.Empty;
            try
            {
                string sqlinsert = string.Empty;

                if (strDepartment == "Street Light")
                {
                    sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, IMEI_NO )";
                    sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                    sqlinsert = sqlinsert + " '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "' ) ";
                }
                else if (strDepartment == "O & M")
                {
                    sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, ONM_IMEI_NO )";
                    sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                    sqlinsert = sqlinsert + " '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "' ) ";
                }
                else if (strDepartment == "MMG")
                {
                    sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, MMG_IMEI_NO )";
                    sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                    sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "' ) ";
                }
                else if (strDepartment == "Enforcement")
                {
                    sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, ENF_IMEI_NO,ENF_CASE_ID)";
                    sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                    sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "','" + enf_Case_ID + "' ) ";
                }
                else if (strDepartment == "Business")
                {
                    sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, BUSI_IMEI_NO )";
                    sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                    sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "' ) ";
                }
                else if (strDepartment == "QC") //Insert
                {
                    sqlinsert = string.Empty;
                    sqlinsert = "INSERT INTO DIV_SCHEME_QC_ATR( SR_ID, OBSER_ID, QC_PD_REL_RESOLVED, QC_PD_REL_N_RESOLVED, QC_PD_REL_RMKS, QC_PD_REL_DT, QC_CABLE_REL_RESOLVED, QC_CABLE_REL_N_RESOLVED, QC_CABLE_REL_RMKS, QC_CABLE_REL_DT, QC_MTR_REL_RESOLVED, QC_MTR_REL_N_RESOLVED, QC_MTR_REL_RMKS, QC_MTR_REL_DT, IMEI_NO )";
                    sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_QC_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                    sqlinsert = sqlinsert + " '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate , '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate , '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate , '" + strImeiNo + "' ) ";
                }
                else
                {
                    sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, IMEI_NO )";
                    sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                    sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '" + Remarks + "', '" + ObserType + "', '" + strImeiNo + "' ) ";
                }
                DbFunction objdbfunsqlinsert = new DbFunction();
                bool isTrue = false;
                if (objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert))
                {
                    isTrue = true;
                    if (isTrue == true && strDepartment != "QC" && strDepartment != "Unmetered")
                    {
                        sqlinsert = "SELECT NC_SLIGHT,NC_BUSINESS,NC_ENFORCEMNT,NC_MMG,NC_ONM FROM MOBINT.DIV_SCHEME_SURV_NC_TYP WHERE OBSER_ID='" + ObserId.ToString() + "' ";
                        DataTable dt1 = new DataTable();
                        DbFunction objdbfun = new DbFunction();
                        dt1 = objdbfun.dmlgetquery_mobint(sqlinsert);
                        StreetLight = dt1.Rows[0]["NC_SLIGHT"].ToString();
                        OM = dt1.Rows[0]["NC_ONM"].ToString();
                        MMG = dt1.Rows[0]["NC_MMG"].ToString();
                        Enforcement = dt1.Rows[0]["NC_ENFORCEMNT"].ToString();
                        Business = dt1.Rows[0]["NC_BUSINESS"].ToString();
                        //}
                        strUpdate = " UPDATE DIV_SCHEME_SURV_NC_TYP SET ";
                        if (strDepartment == "Street Light")
                        {
                            strUpdate = strUpdate + " NC_SLIGHT = 'N', NC_SL_DT= SYSDATE ";
                            if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
                            {
                                strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                            }
                        }
                        else if (strDepartment == "O & M")
                        {
                            strUpdate = strUpdate + " NC_ONM='N' , NC_ONM_DT= SYSDATE ";
                            if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
                            {
                                strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                            }
                        }
                        else if (strDepartment == "MMG")
                        {
                            strUpdate = strUpdate + " NC_MMG='N' , NC_MMG_DT= SYSDATE ";
                            if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
                            {
                                strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                            }
                        }
                        else if (strDepartment == "Enforcement")
                        {
                            strUpdate = strUpdate + " NC_ENFORCEMNT='N' , NC_ENF_DT= SYSDATE";
                            if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
                            {
                                strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                            }
                        }
                        else if (strDepartment == "Business")
                        {
                            strUpdate = strUpdate + " NC_BUSINESS='N' , NC_BUSI_DT= SYSDATE";
                            if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
                            {
                                strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                            }
                        }
                    }
                    else if (strDepartment == "QC")
                    {
                        strUpdate = string.Empty;
                        strUpdate = strUpdate + " UPDATE DIV_SCHEME_QC_TYP SET QC_PD_REL='N' , QC_PD_REL_DT= SYSDATE , QC_CABLE_REL='N', QC_CABLE_REL_DT=SYSDATE, QC_MTR_REL='N', QC_MTR_REL_DT=SYSDATE ";
                    }
                    else if (strDepartment == "Unmetered")
                    {
                        // strUpdate = " UPDATE DIV_SCHEME_SURV_NC_TYP SET ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                        sqlinsert = "SELECT NC_SLIGHT,NC_BUSINESS,NC_ENFORCEMNT,NC_MMG,NC_ONM FROM MOBINT.DIV_SCHEME_SURV_NC_TYP WHERE OBSER_ID='" + ObserId.ToString() + "' ";
                        DataTable dt2 = new DataTable();
                        DbFunction objdbfun = new DbFunction();
                        dt2 = objdbfun.dmlgetquery_mobint(sqlinsert);
                        StreetLight1 = dt2.Rows[0]["NC_SLIGHT"].ToString();
                        OM1 = dt2.Rows[0]["NC_ONM"].ToString();
                        MMG1 = dt2.Rows[0]["NC_MMG"].ToString();
                        Enforcement1 = dt2.Rows[0]["NC_ENFORCEMNT"].ToString();
                        Business1 = dt2.Rows[0]["NC_BUSINESS"].ToString();
                        strUpdate = " UPDATE DIV_SCHEME_SURV_NC_TYP SET ABN_TYP = 'N',ABN_TYP_DT = SYSDATE ";
                        if (StreetLight1 == "Y")
                        {
                            strUpdate = strUpdate + ",NC_SLIGHT = 'N'";
                        }
                        if (OM1 == "Y")
                        {
                            strUpdate = strUpdate + ",NC_ONM = 'N'";
                        }
                        if (MMG1 == "Y")
                        {
                            strUpdate = strUpdate + ",NC_MMG = 'N'";
                        }
                        if (Enforcement1 == "Y")
                        {
                            strUpdate = strUpdate + ",NC_ENFORCEMNT = 'N'";
                        }
                        if (Business1 == "Y")
                        {
                            strUpdate = strUpdate + ",NC_BUSINESS = 'N'";
                        }
                    }
                    else
                    {
                        if (StreetLight == "Y")
                        {
                            strUpdate = strUpdate + " NC_SLIGHT = 'N',";
                        }
                        if (OM == "Y")
                        {
                            strUpdate = strUpdate + " NC_ONM = 'N',";
                        }
                        if (MMG == "Y")
                        {
                            strUpdate = strUpdate + " NC_MMG = 'N',";
                        }
                        if (Enforcement == "Y")
                        {
                            strUpdate = strUpdate + " NC_ENFORCEMNT = 'N',";
                        }
                        if (Business == "Y")
                        {
                            strUpdate = strUpdate + " NC_BUSINESS = 'N',";
                        }
                    }
                    //strUpdate = strUpdate + " ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                    strUpdate = strUpdate + " WHERE OBSER_ID='" + ObserId.ToString() + "' ";
                    bool checkIt = objdbfunsqlinsert.dmlsinglequery_mobint(strUpdate);
                }
                return isTrue;
            }
            catch (Exception ex)
            {
                WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public bool Insert_LR_Surv_Atr1(string ObserId, string ObserType, string Remarks, string NCTypeResolved, string NCTypeNotResolved, string TypOfAbnormResolv,
                                        string TypOfAbnormNtResolv, string strDepartment, string strImeiNo, string enf_Case_ID,
                                        string strlatitude, string strlongitude, string leadRepeated)
        {
            string StreetLight = string.Empty;
            string OM = string.Empty;
            string MMG = string.Empty;
            string Enforcement = string.Empty;
            string Business = string.Empty;
            string strUpdate = string.Empty;
            string StreetLight1 = string.Empty;
            string OM1 = string.Empty;
            string MMG1 = string.Empty;
            string Enforcement1 = string.Empty;
            string Business1 = string.Empty;
            try
            {
                string sqlinsert = string.Empty;

                if (strDepartment == "Street Light")
                {
                    sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, IMEI_NO,latitude,longitude,LEADREPEATED,OBSER_ID_NEW)";
                    sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                    sqlinsert = sqlinsert + " '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "','" + strlatitude + "','" + strlongitude + "','" + leadRepeated + "','') ";
                }
                else if (strDepartment == "O & M")
                {
                    sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, ONM_IMEI_NO,latitude,longitude,LEADREPEATED,OBSER_ID_NEW)";
                    sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                    sqlinsert = sqlinsert + " '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "','" + strlatitude + "','" + strlongitude + "','" + leadRepeated + "','') ";
                }
                else if (strDepartment == "MMG")
                {
                    sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, MMG_IMEI_NO,latitude,longitude,LEADREPEATED,OBSER_ID_NEW)";
                    sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                    sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "','" + strlatitude + "','" + strlongitude + "','" + leadRepeated + "','') ";
                }
                else if (strDepartment == "Enforcement")
                {
                    if (leadRepeated == "Lead Repeated")
                    {
                        sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, ENF_IMEI_NO,ENF_CASE_ID,latitude,longitude,LEADREPEATED,OBSER_ID_NEW)";
                        sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                        sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "','" + enf_Case_ID + "','" + strlatitude + "','" + strlongitude + "','" + leadRepeated + "','" + ObserId.ToString() + "_1" + "') ";
                    }
                    else
                    {
                        sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, ENF_IMEI_NO,ENF_CASE_ID,latitude,longitude,LEADREPEATED,OBSER_ID_NEW)";
                        sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                        sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "','" + enf_Case_ID + "','" + strlatitude + "','" + strlongitude + "','" + leadRepeated + "','') ";
                    }
                }
                else if (strDepartment == "Business")
                {
                    sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, BUSI_IMEI_NO,latitude,longitude,LEADREPEATED,OBSER_ID_NEW)";
                    sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                    sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "','" + strlatitude + "','" + strlongitude + "','" + leadRepeated + "','') ";
                }
                else if (strDepartment == "QC") //Insert
                {
                    sqlinsert = string.Empty;
                    sqlinsert = "INSERT INTO DIV_SCHEME_QC_ATR( SR_ID, OBSER_ID, QC_PD_REL_RESOLVED, QC_PD_REL_N_RESOLVED, QC_PD_REL_RMKS, QC_PD_REL_DT, QC_CABLE_REL_RESOLVED, QC_CABLE_REL_N_RESOLVED, QC_CABLE_REL_RMKS, QC_CABLE_REL_DT, QC_MTR_REL_RESOLVED, QC_MTR_REL_N_RESOLVED, QC_MTR_REL_RMKS, QC_MTR_REL_DT, IMEI_NO,latitude,longitude,LEADREPEATED,OBSER_ID_NEW)";
                    sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_QC_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                    sqlinsert = sqlinsert + " '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate , '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate , '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate , '" + strImeiNo + "','" + strlatitude + "','" + strlongitude + "','" + leadRepeated + "','') ";
                }
                else
                {
                    sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, IMEI_NO,latitude,longitude,LEADREPEATED,OBSER_ID_NEW)";
                    sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                    sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '" + Remarks + "', '" + ObserType + "', '" + strImeiNo + "','" + strlatitude + "','" + strlongitude + "','" + leadRepeated + "','') ";
                }
                DbFunction objdbfunsqlinsert = new DbFunction();
                bool isTrue = false;
                if (objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert))
                {
                    if (leadRepeated == "Lead Repeated")
                    {
                        sqlinsert = " INSERT INTO mobint.DIV_SCHEME_SURVEILLANCE (SNO_ID,OBSERVATION_TYPE,VISIT_DATE,CIRCLE,DIVISION,METER_NO,CA_NUMBER,POLE_NO,ACTION_TAKEN_FLG, TYPE_OF_ABNORMALITY,SUB_DIVISION,SAP_FLAG,MODE_OF_THEFT) ";
                        sqlinsert = sqlinsert + " select SNO_ID ||'_1',OBSERVATION_TYPE,VISIT_DATE,CIRCLE,DIVISION,METER_NO,CA_NUMBER,POLE_NO,ACTION_TAKEN_FLG,'Other' TYPE_OF_ABNORMALITY, ";
                        sqlinsert = sqlinsert + " SUB_DIVISION,SAP_FLAG,MODE_OF_THEFT from mobint.DIV_SCHEME_SURVEILLANCE where sno_id='" + ObserId.ToString() + "'  ";
                        if (objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert))
                        {
                            sqlinsert = " INSERT INTO mobint.DIV_SCHEME_SURV_NC_TYP(OBSER_ID,NC_SLIGHT,NC_BUSINESS,NC_ENFORCEMNT,NC_MMG,NC_ONM,NC_ONM_DT,ABN_TYP) ";
                            sqlinsert = sqlinsert + " VALUES('" + ObserId.Trim().ToString() + "_1" + "','X','X','X','X','Y',SYSDATE,'X') ";
                            objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert);
                        }
                    }

                    isTrue = true;
                    if (isTrue == true && strDepartment != "QC" && strDepartment != "Unmetered")
                    {
                        sqlinsert = "SELECT NC_SLIGHT,NC_BUSINESS,NC_ENFORCEMNT,NC_MMG,NC_ONM FROM MOBINT.DIV_SCHEME_SURV_NC_TYP WHERE OBSER_ID='" + ObserId.ToString() + "' ";
                        DataTable dt1 = new DataTable();
                        DbFunction objdbfun = new DbFunction();
                        dt1 = objdbfun.dmlgetquery_mobint(sqlinsert);
                        StreetLight = dt1.Rows[0]["NC_SLIGHT"].ToString();
                        OM = dt1.Rows[0]["NC_ONM"].ToString();
                        MMG = dt1.Rows[0]["NC_MMG"].ToString();
                        Enforcement = dt1.Rows[0]["NC_ENFORCEMNT"].ToString();
                        Business = dt1.Rows[0]["NC_BUSINESS"].ToString();
                        //}
                        strUpdate = " UPDATE DIV_SCHEME_SURV_NC_TYP SET ";
                        if (strDepartment == "Street Light")
                        {
                            strUpdate = strUpdate + " NC_SLIGHT = 'N', NC_SL_DT= SYSDATE ";
                            if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
                            {
                                strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                            }
                        }
                        else if (strDepartment == "O & M")
                        {
                            strUpdate = strUpdate + " NC_ONM='N' , NC_ONM_DT= SYSDATE ";
                            if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
                            {
                                strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                            }
                        }
                        else if (strDepartment == "MMG")
                        {
                            strUpdate = strUpdate + " NC_MMG='N' , NC_MMG_DT= SYSDATE ";
                            if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
                            {
                                strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                            }
                        }
                        else if (strDepartment == "Enforcement")
                        {
                            strUpdate = strUpdate + " NC_ENFORCEMNT='N' , NC_ENF_DT= SYSDATE";
                            if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
                            {
                                strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                            }
                        }
                        else if (strDepartment == "Business")
                        {
                            strUpdate = strUpdate + " NC_BUSINESS='N' , NC_BUSI_DT= SYSDATE";
                            if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
                            {
                                strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                            }
                        }
                    }
                    else if (strDepartment == "QC")
                    {
                        strUpdate = string.Empty;
                        strUpdate = strUpdate + " UPDATE DIV_SCHEME_QC_TYP SET QC_PD_REL='N' , QC_PD_REL_DT= SYSDATE , QC_CABLE_REL='N', QC_CABLE_REL_DT=SYSDATE, QC_MTR_REL='N', QC_MTR_REL_DT=SYSDATE ";
                    }
                    else if (strDepartment == "Unmetered")
                    {
                        // strUpdate = " UPDATE DIV_SCHEME_SURV_NC_TYP SET ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                        sqlinsert = "SELECT NC_SLIGHT,NC_BUSINESS,NC_ENFORCEMNT,NC_MMG,NC_ONM FROM MOBINT.DIV_SCHEME_SURV_NC_TYP WHERE OBSER_ID='" + ObserId.ToString() + "' ";
                        DataTable dt2 = new DataTable();
                        DbFunction objdbfun = new DbFunction();
                        dt2 = objdbfun.dmlgetquery_mobint(sqlinsert);
                        StreetLight1 = dt2.Rows[0]["NC_SLIGHT"].ToString();
                        OM1 = dt2.Rows[0]["NC_ONM"].ToString();
                        MMG1 = dt2.Rows[0]["NC_MMG"].ToString();
                        Enforcement1 = dt2.Rows[0]["NC_ENFORCEMNT"].ToString();
                        Business1 = dt2.Rows[0]["NC_BUSINESS"].ToString();
                        strUpdate = " UPDATE DIV_SCHEME_SURV_NC_TYP SET ABN_TYP = 'N',ABN_TYP_DT = SYSDATE ";
                        if (StreetLight1 == "Y")
                        {
                            strUpdate = strUpdate + ",NC_SLIGHT = 'N'";
                        }
                        if (OM1 == "Y")
                        {
                            strUpdate = strUpdate + ",NC_ONM = 'N'";
                        }
                        if (MMG1 == "Y")
                        {
                            strUpdate = strUpdate + ",NC_MMG = 'N'";
                        }
                        if (Enforcement1 == "Y")
                        {
                            strUpdate = strUpdate + ",NC_ENFORCEMNT = 'N'";
                        }
                        if (Business1 == "Y")
                        {
                            strUpdate = strUpdate + ",NC_BUSINESS = 'N'";
                        }
                    }
                    else
                    {
                        if (StreetLight == "Y")
                        {
                            strUpdate = strUpdate + " NC_SLIGHT = 'N',";
                        }
                        if (OM == "Y")
                        {
                            strUpdate = strUpdate + " NC_ONM = 'N',";
                        }
                        if (MMG == "Y")
                        {
                            strUpdate = strUpdate + " NC_MMG = 'N',";
                        }
                        if (Enforcement == "Y")
                        {
                            strUpdate = strUpdate + " NC_ENFORCEMNT = 'N',";
                        }
                        if (Business == "Y")
                        {
                            strUpdate = strUpdate + " NC_BUSINESS = 'N',";
                        }
                    }
                    //strUpdate = strUpdate + " ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                    strUpdate = strUpdate + " WHERE OBSER_ID='" + ObserId.ToString() + "' ";
                    bool checkIt = objdbfunsqlinsert.dmlsinglequery_mobint(strUpdate);
                }
                return isTrue;
            }
            catch (Exception ex)
            {
                WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }


        public DataTable LR_SurvellanceDivMIS_List(string strDivName, string strRolRght)
        {
            string sql = string.Empty;

            if (strRolRght == "O & M")
            {
                sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                if (strDivName != "ALL")
                {
                    sql = sql + " AND UPPER(DIVISION) =UPPER('" + strDivName + "') ";
                }
                sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'   ) ";
                sql = sql + " GROUP BY DIVISION	 ";
            }
            if (strRolRght == "Business")
            {
                sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                if (strDivName != "ALL")
                {
                    sql = sql + " AND UPPER(DIVISION) =UPPER('" + strDivName + "') ";
                }
                sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY DIVISION ";
            }
            if (strRolRght == "Street Light")
            {
                sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                if (strDivName != "ALL")
                {
                    sql = sql + " AND UPPER(DIVISION) =UPPER('" + strDivName + "') ";
                }
                sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY DIVISION ";

            }
            if (strRolRght == "Enforcement")
            {
                sql = " SELECT DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
                if (strDivName != "ALL")
                {
                    sql = sql + " AND UPPER(DIVISION) =UPPER('" + strDivName + "') ";
                }
                sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%'  ) GROUP BY DIVISION ";
            }
            if (strRolRght == "MMG")
            {
                sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                if (strDivName != "ALL")
                {
                    sql = sql + " AND UPPER(DIVISION) =UPPER('" + strDivName + "') ";
                }
                sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY DIVISION	 ";
            }

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }

        public DataTable LR_SurvellanceCircleMIS_List(string strDivName, string strRolRght)
        {
            string sql = string.Empty;

            if (strRolRght == "O & M")
            {
                sql = " SELECT CIRCLE , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                if (strDivName != "ALL")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                }
                sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%' ) ";
                sql = sql + " GROUP BY CIRCLE	 ";
            }
            if (strRolRght == "Business")
            {
                sql = " SELECT CIRCLE , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                if (strDivName != "ALL")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                }
                sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY CIRCLE ";
            }
            if (strRolRght == "Street Light")
            {
                sql = " SELECT CIRCLE , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                if (strDivName != "ALL")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                }
                sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY CIRCLE ";

            }
            if (strRolRght == "Enforcement")
            {
                sql = " SELECT CIRCLE , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
                if (strDivName != "ALL")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                }
                sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%'  ) GROUP BY CIRCLE ";
            }
            if (strRolRght == "MMG")
            {
                sql = " SELECT CIRCLE , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                if (strDivName != "ALL")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                }
                sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY CIRCLE	 ";
            }

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }

        //public DataTable LR_SurvellanceCircleDivMIS_List(string strDivName, string strRolRght)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
        //        sql = sql + " GROUP BY CIRCLE, DIVISION	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY CIRCLE, DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY CIRCLE, DIVISION ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) GROUP BY CIRCLE, DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY CIRCLE, DIVISION	 ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        public static DataTable LR_ActivityModuleMIS_List(string strDivName, string strScheme, string strDate)
        {
            string sql = " SELECT Y.DIVISION , NVL(CABLE_RELATED,0) CABLE_RELATED, NVL(DB_RELATED,0) DB_RELATED, NVL(METER_RELATED,0) METER_RELATED  ";
            sql = sql + " FROM  (SELECT A.DIV_CODE, SUM(CASE WHEN ACTIVITY_LIST1 = 'Armored Cable (meter)' THEN 1 ELSE 0 END) CABLE_RELATED, SUM(CASE WHEN ACTIVITY_LIST1 = 'Pole DB Related' THEN 1 ELSE 0 END) DB_RELATED, SUM(CASE WHEN ACTIVITY_LIST1 NOT IN ('Pole DB Related','Armored Cable (meter)') THEN 1 ELSE 0 END) METER_RELATED ";

            sql = sql + " FROM MOBINT.DIV_SCHEME_LR_ACTIVTY  A WHERE 1=1   ";
            sql = sql + " AND TRUNC(ENTRY_DATE) = TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) ";
            sql = sql + "GROUP BY DIV_CODE )x, (SELECT UNIQUE DIVISION,DIVISION_ID FROM MOBINT.DIV_SCHEME_VENDOR_MST ) y  WHERE x.DIV_CODE = y.DIVISION_ID ";

            if (strDivName != "ALL")
            {
                sql = sql + " AND UPPER(Y.DIVISION)=UPPER('" + strDivName + "') ";
            }
            sql = sql + " ORDER BY METER_RELATED DESC ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }

        public static DataTable LR_ActivityModuleMIS_List(string strScheme, string strDate)
        {
            string sql = " SELECT A.SCHEME_NO DIVISION, SUM(CASE WHEN ACTIVITY_LIST1 = 'Armored Cable (meter)' THEN 1 ELSE 0 END) CABLE_RELATED,  ";
            sql = sql + "  SUM(CASE WHEN ACTIVITY_LIST1 = 'Pole DB Related' THEN 1 ELSE 0 END) DB_RELATED, SUM(CASE WHEN ACTIVITY_LIST1 NOT IN ('Pole DB Related','Armored Cable (meter)') THEN 1 ELSE 0 END) METER_RELATED ";
            sql = sql + "   FROM MOBINT.DIV_SCHEME_LR_ACTIVTY  A WHERE 1=1   ";
            sql = sql + " AND TRUNC(ENTRY_DATE) = TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) ";
            if (strScheme != "SELECT")
            {
                sql = sql + " AND A.SCHEME_NO = '" + strScheme + "' ";
            }
            sql = sql + " GROUP BY SCHEME_NO ORDER BY METER_RELATED DESC  ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }

        public static DataTable LR_ActivityModuleSchemeMIS_List(string strDiv, string strScheme, string strDate)
        {
            string sql = " SELECT SCHEME_NO DIVISION , NVL(CABLE_RELATED,0) CABLE_RELATED, NVL(DB_RELATED,0) DB_RELATED, NVL(METER_RELATED,0) METER_RELATED ";
            sql = sql + "  FROM  (SELECT A.SCHEME_NO,DIV_CODE, SUM(CASE WHEN ACTIVITY_LIST1 = 'Armored Cable (meter)' THEN 1 ELSE 0 END) CABLE_RELATED, SUM(CASE WHEN ACTIVITY_LIST1 = 'Pole DB Related' THEN 1 ELSE 0 END) DB_RELATED, SUM(CASE WHEN ACTIVITY_LIST1 NOT IN ('Pole DB Related','Armored Cable (meter)') THEN 1 ELSE 0 END) METER_RELATED ";
            sql = sql + "  FROM MOBINT.DIV_SCHEME_LR_ACTIVTY  A WHERE 1=1 ";
            sql = sql + " AND TRUNC(ENTRY_DATE) = TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) ";
            if (strScheme != "ALL")
            {
                sql = sql + " AND SCHEME_NO='" + strScheme + "' ";
            }
            sql = sql + " GROUP BY SCHEME_NO, DIV_CODE )x, (SELECT UNIQUE DIVISION,DIVISION_ID FROM MOBINT.DIV_SCHEME_VENDOR_MST ) y  WHERE x.DIV_CODE = y.DIVISION_ID ";
            if (strDiv != "ALL")
            {
                sql = sql + " AND UPPER(Y.DIVISION)=UPPER('" + strDiv + "') ";
            }


            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }

        public static DataTable LR_ActivityModuleSchemeMIS_List(string strDiv, string strScheme, string strDate, string strToDate)
        {
            string sql = " SELECT A.SCHEME_NO DIVISION,nvl(SUM(CASE WHEN FLAG_TYPE = 'cable' THEN 1 ELSE 0 END),0) CABLE_RELATED,";
            sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'pole' THEN 1 ELSE 0 END),0) DB_RELATED,";
            sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'meter' THEN 1 ELSE 0 END),0) METER_RELATED";
            sql += " FROM MOBINT.DIV_SCHEME_LR_ACTIVTY A WHERE 1 = 1";
            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy'))";
            if (strScheme != "ALL")
            {
                sql = sql + " AND SCHEME_NO='" + strScheme + "' ";
            }
            if (strDiv != "ALL")
            {
                sql += " AND UPPER(SUB_DIVISION)=UPPER('" + strDiv + "') ";
            }
            sql += " AND SCHEME_NO IS NOT NULL";
            sql += " GROUP BY SCHEME_NO ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }

        public DataTable LR_QC_CIRCLE_MIS_List(string strDivName, string strScheme)
        {
            string sql = " SELECT A.CIRCLE_NAME SCHEME, nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, (SELECT NVL(SUM(COUNT(OBSER_ID)),0) FROM DIV_SCHEME_QC_TYP WHERE OBSER_ID  IN (SELECT SEQ_NO FROM DIV_SCHEME_QC_TRANS WHERE CIRCLE_NAME =  A.CIRCLE_NAME)  AND  (QC_PD_REL ='N')  GROUP BY OBSER_ID) as NC_Reported, ";
            sql = sql + " (SELECT NVL(SUM(COUNT(OBSER_ID)),0) FROM DIV_SCHEME_QC_TYP WHERE OBSER_ID  IN (SELECT SEQ_NO FROM DIV_SCHEME_QC_TRANS WHERE CIRCLE_NAME =  A.CIRCLE_NAME)  AND  (QC_PD_REL ='X')  GROUP BY OBSER_ID) NC_Cleared ";
            sql = sql + " FROM DIV_SCHEME_QC_TRANS A WHERE 1=1 ";
            if (strScheme != "ALL")
            {
                sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strScheme + "') ";
            }
            if (strDivName != "ALL")
            {
                sql = sql + " AND UPPER(DIVISION_NAME) =UPPER('" + strDivName + "')  ";
            }
            sql = sql + " GROUP BY A.CIRCLE_NAME ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }

        public DataTable LR_QC_DIVISION_MIS_List(string strDivName, string strScheme)
        {
            string sql = " SELECT A.DIVISION_NAME SCHEME, nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, (SELECT NVL(SUM(COUNT(OBSER_ID)),0) FROM MOBINT.DIV_SCHEME_QC_TYP WHERE OBSER_ID  IN (SELECT SEQ_NO FROM MOBINT.DIV_SCHEME_QC_TRANS WHERE DIVISION_NAME =  A.DIVISION_NAME) AND  (QC_PD_REL ='N')  GROUP BY OBSER_ID) as NC_Reported, ";
            sql = sql + " (SELECT NVL(SUM(COUNT(OBSER_ID)),0) FROM DIV_SCHEME_QC_TYP WHERE OBSER_ID  IN (SELECT SEQ_NO FROM DIV_SCHEME_QC_TRANS WHERE DIVISION_NAME =  A.DIVISION_NAME)  AND  (QC_PD_REL ='X')  GROUP BY OBSER_ID) NC_Cleared ";
            sql = sql + " FROM DIV_SCHEME_QC_TRANS A WHERE 1=1 ";
            if (strScheme != "ALL")
            {
                sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strScheme + "') ";
            }
            if (strDivName != "ALL")
            {
                sql = sql + " AND UPPER(DIVISION_NAME) =UPPER('" + strDivName + "')  ";
            }
            sql = sql + " GROUP BY A.DIVISION_NAME ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }

        public DataTable LR_QC_MIS_List(string strDivName, string strScheme)
        {
            string sql = " SELECT A.SCHEME, nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, (SELECT NVL(SUM(COUNT(OBSER_ID)),0) FROM DIV_SCHEME_QC_TYP WHERE OBSER_ID  IN (SELECT SEQ_NO FROM DIV_SCHEME_QC_TRANS WHERE SCHEME =  A.SCHEME)  AND  (QC_PD_REL ='N')  GROUP BY OBSER_ID) NC_Reported, ";
            sql = sql + " (SELECT NVL(SUM(COUNT(OBSER_ID)),0) FROM DIV_SCHEME_QC_TYP WHERE OBSER_ID  IN (SELECT SEQ_NO FROM DIV_SCHEME_QC_TRANS WHERE SCHEME =  A.SCHEME)  AND  (QC_PD_REL ='X')  GROUP BY OBSER_ID) NC_Cleared ";
            sql = sql + " FROM DIV_SCHEME_QC_TRANS A WHERE 1=1 ";
            if (strDivName != "")
            {
                sql = sql + " AND UPPER(DIVISION_NAME) =UPPER('" + strDivName + "') ";
            }
            if (strScheme != "")
            {
                sql = sql + " AND A.SCHEME ='" + strScheme + "' ";
            }
            sql = sql + " GROUP BY A.SCHEME ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }

        public string SelectNextValQC()
        {

            string strSql = " SELECT SEQ_DIV_SCHEME_QC.NEXTVAL SRNO FROM DUAL ";

            DataTable dt = new DataTable();
            DbFunction dbFunction = new DbFunction();
            dt = dbFunction.dmlgetquery_mobint(strSql);

            string strOutput = "";

            if (dt.Rows.Count > 0)
            {
                strOutput = dt.Rows[0]["SRNO"].ToString().Trim();
            }

            return strOutput;
        }

        public bool Insert_LR_QCheck(string _sVistDate, string _sCircle, string _sDivision,
                                                    string _sMeterNo, string _sCANo,
                                                   string _sRemarks, string _sQCType,
                                                   string _sQCSlctd,
                                                    string Other, string strScheme, string strImei, string strPoleNo, string subdivision)
        {
            bool isTrue = false;

            try
            {
                string strSrNo = SelectNextValQC();

                //New Added
                string _qclst = ""; // _sQCSlctd
                string[] _arrnctyp = _sQCSlctd.Trim().Split('|');

                for (int i = 0; i < _arrnctyp.Length; i++)
                {
                    if (!string.IsNullOrEmpty(_arrnctyp[i].ToString()))
                    {

                        if (_arrnctyp[i].ToString() != "null")
                        {
                            _qclst += _arrnctyp[i].ToString();
                            _qclst += "|";
                        }

                    }
                }

                string _qctyplst = ""; //_sQCType
                string[] _arrQctyp = _sQCType.Trim().Split('|');

                for (int i = 0; i < _arrQctyp.Length; i++)
                {
                    if (!string.IsNullOrEmpty(_arrQctyp[i].ToString()))
                    {

                        if (_arrQctyp[i].ToString() != "null")
                        {
                            _qctyplst += _arrQctyp[i].ToString();
                            _qctyplst += "|";
                        }

                    }
                }
                //End
                //POLE_NO, IMEI_NO , IMEI_NO

                // NDS ndsCon = new NDS();
                // OracleConnection ocon_MobAppInt = new OracleConnection(ndsCon.con_mobinternal_new());
                DbFunction objdbfunsqlinsert = new DbFunction();
                string sqlinsert = string.Empty;

                try
                {
                    //if (ocon_MobAppInt.State == ConnectionState.Closed)
                    //{
                    //    ocon_MobAppInt.Open();
                    //}
                    //OracleCommand oleDbCommand = new OracleCommand(sqlinsert, ocon_MobAppInt);
                    //OracleParameter SEQ_NO = oleDbCommand.Parameters.Add("@SEQ_NO", OracleDbType.NVarchar2, 20);
                    //OracleParameter VISIT_DATE = oleDbCommand.Parameters.Add("@VISIT_DATE", OracleDbType.NVarchar2, 60);
                    //OracleParameter CIRCLE_NAME = oleDbCommand.Parameters.Add("@CIRCLE_NAME", OracleDbType.NVarchar2, 20);

                    //OracleParameter DIVISION_NAME = oleDbCommand.Parameters.Add("@DIVISION_NAME", OracleDbType.NVarchar2, 20);
                    //OracleParameter CA_NO = oleDbCommand.Parameters.Add("@CA_NO", OracleDbType.NVarchar2, 15);
                    //OracleParameter METER_NO = oleDbCommand.Parameters.Add("@METER_NO", OracleDbType.NVarchar2, 12);

                    //OracleParameter SUB_AREA_TYP = oleDbCommand.Parameters.Add("@SUB_AREA_TYP", OracleDbType.NVarchar2, 100);
                    //OracleParameter SUB_AREA_TYP_SLCTD = oleDbCommand.Parameters.Add("@SUB_AREA_TYP_SLCTD", OracleDbType.NVarchar2, 500);
                    //OracleParameter RMKS = oleDbCommand.Parameters.Add("@RMKS", OracleDbType.NVarchar2, 1000);

                    //OracleParameter SCHEME = oleDbCommand.Parameters.Add("@SCHEME", OracleDbType.NVarchar2, 50);

                    //OracleParameter POLENO = oleDbCommand.Parameters.Add("@POLE_NO", OracleDbType.NVarchar2, 11);
                    //OracleParameter IMEINO = oleDbCommand.Parameters.Add("@IMEI_NO", OracleDbType.NVarchar2, 20);

                    //OracleParameter SUB_DIVISION = oleDbCommand.Parameters.Add("@SUB_DIVISION", OracleDbType.NVarchar2, 100);


                    //SEQ_NO.Value = strSrNo;
                    //VISIT_DATE.Value = _sVistDate;
                    //CIRCLE_NAME.Value = _sCircle;

                    //DIVISION_NAME.Value = _sDivision;
                    //CA_NO.Value = _sCANo;
                    //METER_NO.Value = _sMeterNo;

                    //SUB_AREA_TYP.Value = _qctyplst;
                    //SUB_AREA_TYP_SLCTD.Value = _qclst;
                    //RMKS.Value = Other;

                    //SCHEME.Value = strScheme;

                    //POLENO.Value = strPoleNo;
                    //IMEINO.Value = strImei;

                    //SUB_DIVISION.Value = subdivision;

                    //int intOut = oleDbCommand.ExecuteNonQuery();
                    sqlinsert = "INSERT INTO DIV_SCHEME_QC_TRANS (SEQ_NO, VISIT_DATE, CIRCLE_NAME, DIVISION_NAME, CA_NO, METER_NO, SUB_AREA_TYP, SUB_AREA_TYP_SLCTD, RMKS, SCHEME, POLE_NO, IMEI_NO, SUB_DIVISION)";
                    sqlinsert = sqlinsert + " VALUES( '" + strSrNo + "', '" + _sVistDate + "', '" + _sCircle + "', '" + _sDivision + "', '" + _sCANo + "', '" + _sMeterNo + "', '" + _qctyplst + "', '" + _qclst + "', '" + Other + "', '" + strScheme + "', '" + strPoleNo + "', '" + strImei + "', '" + subdivision + "') ";

                    if (objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert) == true)
                    {
                        isTrue = true;

                        string sqlinsert_new = " INSERT INTO DIV_SCHEME_QC_TYP (obser_id, qc_pd_rel, qc_pd_rel_dt, qc_cable_rel,";
                        sqlinsert_new = sqlinsert_new + "  qc_cable_rel_dt, qc_mtr_rel, qc_mtr_rel_dt)  ";
                        sqlinsert_new = sqlinsert_new + " VALUES('" + strSrNo + "', ";
                        if (_sQCType.Equals("Pole and DB related"))
                        {
                            sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                        }
                        else
                        {
                            sqlinsert_new = sqlinsert_new + " 'X', '' ,";
                        }

                        if (_sQCType.Contains("Cable related"))
                        {
                            sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                        }
                        else
                        {
                            sqlinsert_new = sqlinsert_new + " 'X', '' ,";
                        }

                        if (_sQCType.Contains("Meter & Bus Bar Related"))
                        {
                            sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                        }
                        else
                        {
                            sqlinsert_new = sqlinsert_new + " 'X', '' )";
                        }

                        //DbFunction objdbfunsqlinsert = new DbFunction();


                        isTrue = objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert_new);
                    }
                }
                catch (Exception ex)
                {
                    WriteIntoFile(DateTime.Now.ToString() + "New Connection Method : con_mobinternal_new " + ex.ToString() + sqlinsert);
                    return true;
                }
                finally
                {
                    //if (ocon_MobAppInt.State == ConnectionState.Open)
                    //{
                    //    ocon_MobAppInt.Close();
                    //}
                }

                return isTrue;
            }
            catch (Exception ex)
            {
                WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }



        public string Check_QC_Duplicate(string _sMeterCANo)
        {
            //string strSql = " SELECT ENTRY_DATE FROM DIV_SCHEME_QC_TRANS WHERE METER_NO='" + _sMeterCANo + "' OR CA_NO='" + _sMeterCANo + "' OR POLE_NO ='" + _sMeterCANo + "' ";

            string strSql = " SELECT A.ENTRY_DATE FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B WHERE A.SEQ_NO = B.OBSER_ID  ";
            strSql = strSql + " AND (METER_NO='" + _sMeterCANo + "' OR CA_NO='" + _sMeterCANo + "' OR POLE_NO='" + _sMeterCANo + "') ";
            strSql = strSql + " AND (QC_PD_REL='X' OR QC_CABLE_REL ='X' OR QC_MTR_REL='X') ";

            DataTable dt = new DataTable();
            DbFunction dbFunction = new DbFunction();
            dt = dbFunction.dmlgetquery_mobint(strSql);

            if (dt.Rows.Count > 0)
            {
                return dt.Rows[0][0].ToString();
            }
            else
            {
                return "0";
            }
        }

        public string Check_Surveillance_Duplicate(string _sMeterCANo)
        {
            // string strSql = " SELECT ENTRY_DATE FROM DIV_SCHEME_SURVEILLANCE WHERE METER_NO='" + _sMeterCANo + "'  OR CA_NUMBER='" + _sMeterCANo + "' OR POLE_NO='" + _sMeterCANo + "' ";

            string strSql = " SELECT A.ENTRY_DATE FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID  ";
            strSql = strSql + " AND (METER_NO='" + _sMeterCANo + "' OR CA_NUMBER='" + _sMeterCANo + "' OR POLE_NO='" + _sMeterCANo + "') ";
            strSql = strSql + " AND (NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR NC_ONM='Y' OR ABN_TYP='Y') ";

            DataTable dt = new DataTable();
            DbFunction dbFunction = new DbFunction();
            dt = dbFunction.dmlgetquery_mobint(strSql);

            if (dt.Rows.Count > 0)
            {
                return dt.Rows[0][0].ToString();
            }
            else
            {
                return "0";
            }
        }

        #endregion

        #region "RCM Services"

        public DataTable GetRCM_DataCAWise(string _sCANumber)
        {
            string sql = "SELECT  CONS_REF, CYCLE, DISTRICT,   METERNO,  NAME, ADD1, ADD2, ADD3, FATHER_NAME, LAND_MARK, SANCT_LOAD, CSTS_CD, PREV_MTR_READING,PREV_MTR_READINGDATE, ";
            sql = sql + "PREV_MD_KWH, UNITCONSUMED1, FORMY_READTYPE, BILLED_UNIT, BILLED_NET_AMT,  DOWNL_FLAG,BINDER_SEQ, ACCNO_SEQ, ACCNO_SUB_SEQ, AREA_CODE, ALLOTEDDATE, MRI_ID,";
            sql = sql + "  LOAD_PROFILE_DAYS, SAP_CONTRACT_ACCOUNT, SAP_CYCLE, SAP_NAME, SAP_FATHER_NAME, SAP_ADD1, SAP_ADD2, SAP_ADD3, SAP_LANDMARK, SAP_POLE_ID,  ";
            sql = sql + "  SAP_MRD_DOC_KWH_REGISTERS,SAP_NO_OF_REGISTERS, SAP_MR_REASON_CODE, SAP_MR_REASON_CODE_ORIG, SAP_MR_TYPE, SAP_MR_UNIT, SAP_SEQ_NO, SAP_MR_CODE, ";
            sql = sql + "   SAP_MR_NAME, SAP_COMPANY, SAP_DIVISION, SAP_DEPARTMENT, POLE_ID,MOBILE_NO FROM rcmpa.SAP_SLCC_FORMY WHERE CONS_REF='" + _sCANumber + "' AND ROWNUM=1";


            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_RCM(sql);
            dt.TableName = "SAP_SLCC_FORMY";
            return dt;
        }


        //public  DataTable GetRCMSAP_DataCAWise(string _sCANumber)
        //{
        //    string sql = " SELECT NVL('00'||CONS_REF,' ') as \"Ca_Number\",' ' as \"Bp_Number\",NVL(NAME,' ') as \"Bp_Name\",' ' as \"Bp_Type\",' ' as \"Search_Term1\",NVL(SAP_DEPARTMENT,' ') as \"Search_Term2\", SAP_ADD1 as \"House_Number\", ";
        //    sql = sql + " NVL(ADD1,' ') as \"House_Number_Sup\",' ' as \"Floor\",' ' as \"Premise_Type\",' ' as \"Street\",' ' as \"Street2\",NVL(ADD3,' ') as \"Street3\",' ' as \"Street4\",' ' as \"City\",' ' as \"Post_Code\",";
        //    sql = sql + " 'DEL' as \"Region\",'IN' as \"Country\",' ' as \"Desc_Con_Object\",NVL(SAP_DIVISION,' ') as \"Reg_Str_Group\",'0000000000' || METERNO as \"Device_Sr_Number\",";
        //    sql = sql + " NVL(MOBILE_NO,' ') as \"Telephone_No\",' ' as \"Mru\",' ' as \"Func_Descr\",'000000' as \"Outage_Fromtime\",'000000' as \"Outage_Totime\",' ' as \"Legacy_Acct\",";
        //    sql = sql + "' ' as \"Bill_Class\",' ' as \"Rate_Cat\",' ' as \"Activity\",' ' as \"Adr_Notes\",NVL(MOBILE_NO,' ') as \"Tel1_Number\",' ' as \"Vertrag\",' ' as \"E_Mail\",";
        //    sql = sql + "' ' as \"Move_Out_Date\",' ' as \"Con_Obj_No\",' ' as \"Clerk_Id\",' ' as \"Text\",' ' as \"Status\",' ' as \"Discreason\",' ' as \"TARIFTYP\", NVL(SANCT_LOAD,' ') as \"WERT1\",' ' as \"POLE_NO\"";
        //    sql = sql + " FROM SAP_SLCC_FORMY WHERE CONS_REF = '" + _sCANumber + "'";
        //    sql = sql + " UNION ";
        //    sql = sql + "SELECT NVL('00'||CONS_REF,' ') Ca_Number,' ' Bp_Number,NVL(NAME,' ') Bp_Name,' ' Bp_Type,' ' Search_Term1,NVL(SAP_DEPARTMENT,' ') Search_Term2, NVL(SAP_ADD1, ' ') House_Number,";
        //    sql = sql + " NVL(ADD1,' ') House_Number_Sup,' ' FLOOR,' ' Premise_Type,' ' Street,' ' Street2,NVL(ADD3,' ') Street3,' ' Street4, ";
        //    sql = sql + "' ' City,' ' Post_Code,'DEL' Region,'IN' Country,' ' Desc_Con_Object,NVL(SAP_DIVISION,' ') Reg_Str_Group,'0000000000' || METERNO Device_Sr_Number,";
        //    sql = sql + "' ' Telephone_No,' ' Mru,' ' Func_Descr,'000000' Outage_Fromtime,'000000' Outage_Totime,";
        //    sql = sql + "' ' Legacy_Acct,' ' Bill_Class,' ' Rate_Cat,' ' Activity,' ' Adr_Notes,' ' Tel1_Number,' ' Vertrag,' ' E_Mail,";
        //    sql = sql + "' ' Move_Out_Date,' ' Con_Obj_No,' ' Clerk_Id,' ' Text,' ' Status,' ' Discreason,' ' TARIFTYP, NVL(SANCT_LOAD,' ') WERT1,' ' POLE_NO";
        //    sql = sql + " FROM SAP_FORMY  WHERE CONS_REF = '" + _sCANumber + "'";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_RCM(sql);
        //    dt.TableName = "ISUSTDTable";
        //    return dt;
        //}

        #endregion

        #region Supply Code

        public bool Insert_DOCLIST_New_Update(string strOrderNo, string strDocStatus, string strDocument_Type)
        {
            try
            {
                if (strDocument_Type == "1")
                    strDocument_Type = "001";
                else if (strDocument_Type == "2")
                    strDocument_Type = "002";
                else if (strDocument_Type == "3")
                    strDocument_Type = "003";
                else if (strDocument_Type == "4")
                    strDocument_Type = "004";
                else if (strDocument_Type == "5")
                    strDocument_Type = "005";
                else if (strDocument_Type == "6")
                    strDocument_Type = "006";
                else if (strDocument_Type == "7")
                    strDocument_Type = "007";
                else if (strDocument_Type == "8")
                    strDocument_Type = "008";
                else if (strDocument_Type == "9")
                    strDocument_Type = "009";
                else if (strDocument_Type == "10")
                    strDocument_Type = "010";
                else if (strDocument_Type == "11")
                    strDocument_Type = "011";
                else if (strDocument_Type == "12")
                    strDocument_Type = "012";
                else if (strDocument_Type == "13")
                    strDocument_Type = "013";
                else if (strDocument_Type == "14")
                    strDocument_Type = "014";
                else if (strDocument_Type == "15")
                    strDocument_Type = "015";
                else if (strDocument_Type == "16")
                    strDocument_Type = "016";
                else if (strDocument_Type == "17")
                    strDocument_Type = "017";
                else if (strDocument_Type == "18")
                    strDocument_Type = "018";
                else if (strDocument_Type == "9")
                    strDocument_Type = "019";
                else if (strDocument_Type == "20")
                    strDocument_Type = "020";
                else if (strDocument_Type == "21")
                    strDocument_Type = "021";
                else if (strDocument_Type == "22")
                    strDocument_Type = "022";

                string sqlinsert = "INSERT INTO DOCLIST_NEW(ORDER_NO,DOCUMENT_TYPE, DOC_STATUS)";
                sqlinsert = sqlinsert + " VALUES('" + strOrderNo.ToString().Trim() + "','" + strDocument_Type.ToString().Trim() + "','" + strDocStatus + "')";
                DbFunction objdbfunsqlinsert = new DbFunction();
                return objdbfunsqlinsert.dmlsinglequery(sqlinsert);
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public bool Insert_Deficiency_Update(string strOrderNo, string strDocument_Type)
        {
            try
            {
                if (strDocument_Type.ToString() != "")
                {
                    string sqlinsert = "INSERT INTO SCODE_DEFICIENCY_DOCUMENT(ORDERNO,DOC_ID)";
                    sqlinsert = sqlinsert + " VALUES('" + strOrderNo.ToString().Trim() + "','" + strDocument_Type.ToString().Trim() + "')";
                    DbFunction objdbfunsqlinsert = new DbFunction();
                    return objdbfunsqlinsert.dmlsinglequery(sqlinsert);
                }
                else
                {
                    return true;
                }
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public bool SUPPLY_CODE_NEW_CONN_DATA(string strOrderNo, string strAppliedPortion, string strDwellingUnit, string strResonForNewMtr, string strDPCCClrncRqd,
       string strSStnSpaceAvail, string strTotalLoadPlot, string strTotalNoConn, string strDTMeter, string strDTCode)
        {
            try
            {
                string sql = " select 1 from NEW_CONN_OTHR_INFO where upper(ORDERNO)='" + strOrderNo.ToString().Trim().ToUpper() + "'";
                DataTable dt = new DataTable();
                DbFunction objdbfun = new DbFunction();
                dt = objdbfun.dmlgetquery(sql);
                if (dt.Rows.Count > 0)
                {
                    try
                    {
                        string sqlupdate = "update NEW_CONN_OTHR_INFO set";
                        sqlupdate = sqlupdate + " ORDERNO='" + strOrderNo.ToString().Trim() + "',";
                        sqlupdate = sqlupdate + " APPLIED_PORTION='" + strAppliedPortion.ToString().Trim() + "',";
                        sqlupdate = sqlupdate + " DWELLING_UNIT='" + strDwellingUnit.ToString().Trim() + "',";
                        sqlupdate = sqlupdate + " RSON_FOR_NW_MTR='" + strResonForNewMtr.ToString().Trim() + "',";
                        sqlupdate = sqlupdate + " S_STN_SPACE_AVBL='" + strSStnSpaceAvail.ToString().Trim() + "',";
                        sqlupdate = sqlupdate + " TOTAL_LOAD_PLOT='" + strTotalLoadPlot.ToString().Trim() + "',";
                        sqlupdate = sqlupdate + " TOTAL_NO_CONN='" + strTotalNoConn.ToString().Trim() + "',";
                        sqlupdate = sqlupdate + " DT_MTR='" + strDTMeter.ToString().Trim() + "',";
                        sqlupdate = sqlupdate + " DT_CODE='" + strDTCode.ToString().Trim() + "',";
                        sqlupdate = sqlupdate + " DPCC_CLRNC_RQD='" + strDPCCClrncRqd.ToString().Trim() + "' ";
                        sqlupdate = sqlupdate + " where ORDERNO='" + strOrderNo.ToString().Trim() + "'";
                        DbFunction objdbfunupdate = new DbFunction();
                        return objdbfunupdate.dmlsinglequery(sqlupdate);
                    }
                    catch (Exception ex)
                    {
                        NewClassFile newClassFile = new NewClassFile();
                        newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                        return false;
                    }
                }
                else
                {
                    string sqlNew = " insert into NEW_CONN_OTHR_INFO (ORDERNO, APPLIED_PORTION, DWELLING_UNIT, RSON_FOR_NW_MTR, DPCC_CLRNC_RQD, S_STN_SPACE_AVBL, TOTAL_LOAD_PLOT, TOTAL_NO_CONN, DT_MTR, DT_CODE) ";
                    sqlNew = sqlNew + " values('" + strOrderNo.ToString().Trim() + "','" + strAppliedPortion.ToString() + "', '" + strDwellingUnit.ToString() + "' ,'" + strResonForNewMtr.ToString() + "' ,'" + strDPCCClrncRqd.ToString() + "', '" + strSStnSpaceAvail.ToString() + "' ,'" + strTotalLoadPlot.ToString() + "' ,'" + strTotalNoConn.ToString() + "', '" + strDTMeter.ToString() + "' ,'" + strDTCode.ToString() + "') ";
                    objdbfun = new DbFunction();
                    return objdbfun.dmlsinglequery(sqlNew);
                }
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public bool SUPPLY_CODE_NEW_CONN_IMG(string strOrderNo, string strOtherImg1, string strOtherImg2, string strOtherImg3, string strOtherImg4)
        {
            try
            {
                string sql = " select 1 from NEW_CONN_OTHR_IMG where upper(ORDERNO)='" + strOrderNo.ToString().Trim().ToUpper() + "'";
                DataTable dt = new DataTable();
                DbFunction objdbfun = new DbFunction();
                dt = objdbfun.dmlgetquery(sql);
                if (dt.Rows.Count > 0)
                {
                    byte[] _byImg = null;
                    string strOtherImg11 = string.Empty, strOtherImg22 = string.Empty, strOtherImg33 = string.Empty, strOtherImg44 = string.Empty;
                    try
                    {
                        _byImg = Convert.FromBase64String(strOtherImg1);
                        strOtherImg11 = byteArrayToImage(_byImg, strOrderNo + "_OTHR_IMG1");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile newClassFile = new NewClassFile();
                        newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in other image 1" + ex.ToString());
                    }
                    try
                    {
                        _byImg = Convert.FromBase64String(strOtherImg2);
                        strOtherImg22 = byteArrayToImage(_byImg, strOrderNo + "_OTHR_IMG2");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile newClassFile = new NewClassFile();
                        newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in other image 2" + ex.ToString());
                    }

                    try
                    {
                        _byImg = Convert.FromBase64String(strOtherImg3);
                        strOtherImg33 = byteArrayToImage(_byImg, strOrderNo + "_OTHR_IMG3");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile newClassFile = new NewClassFile();
                        newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in other image 3" + ex.ToString());
                    }

                    try
                    {
                        _byImg = Convert.FromBase64String(strOtherImg4);
                        strOtherImg44 = byteArrayToImage(_byImg, strOrderNo + "_OTHR_IMG4");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile newClassFile = new NewClassFile();
                        newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in other image 4" + ex.ToString());
                    }

                    try
                    {
                        string sqlupdate = "update NEW_CONN_OTHR_IMG set";
                        sqlupdate = sqlupdate + " ORDERNO='" + strOrderNo.ToString().Trim() + "',";
                        sqlupdate = sqlupdate + " OTHR_IMG1_PATH='" + strOtherImg11.ToString().Trim() + "',";
                        sqlupdate = sqlupdate + " OTHR_IMG2_PATH='" + strOtherImg22.ToString().Trim() + "',";
                        sqlupdate = sqlupdate + " OTHR_IMG3_PATH='" + strOtherImg33.ToString().Trim() + "',";
                        sqlupdate = sqlupdate + " OTHR_IMG4_PATH='" + strOtherImg44.ToString().Trim() + "' ";
                        sqlupdate = sqlupdate + " where ORDERNO='" + strOrderNo.ToString().Trim() + "'";
                        DbFunction objdbfunupdate = new DbFunction();
                        return objdbfunupdate.dmlsinglequery(sqlupdate);
                    }
                    catch (Exception ex)
                    {
                        NewClassFile newClassFile = new NewClassFile();
                        newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                        return false;
                    }
                }
                else
                {

                    byte[] _byImg = null;
                    string strOtherImg11 = string.Empty, strOtherImg22 = string.Empty, strOtherImg33 = string.Empty, strOtherImg44 = string.Empty;
                    try
                    {
                        _byImg = Convert.FromBase64String(strOtherImg1);
                        strOtherImg11 = byteArrayToImage(_byImg, strOrderNo + "_OTHR_IMG1");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile newClassFile = new NewClassFile();
                        newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in other image 1" + ex.ToString());
                    }
                    try
                    {
                        _byImg = Convert.FromBase64String(strOtherImg2);
                        strOtherImg22 = byteArrayToImage(_byImg, strOrderNo + "_OTHR_IMG2");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile newClassFile = new NewClassFile();
                        newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in other image 2" + ex.ToString());
                    }

                    try
                    {
                        _byImg = Convert.FromBase64String(strOtherImg3);
                        strOtherImg33 = byteArrayToImage(_byImg, strOrderNo + "_OTHR_IMG3");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile newClassFile = new NewClassFile();
                        newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in other image 3" + ex.ToString());
                    }

                    try
                    {
                        _byImg = Convert.FromBase64String(strOtherImg4);
                        strOtherImg44 = byteArrayToImage(_byImg, strOrderNo + "_OTHR_IMG4");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile newClassFile = new NewClassFile();
                        newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in other image 4" + ex.ToString());
                    }

                    try
                    {
                        string sqlinsert = "INSERT INTO NEW_CONN_OTHR_IMG(ORDERNO, OTHR_IMG1_PATH, OTHR_IMG2_PATH, OTHR_IMG3_PATH, OTHR_IMG4_PATH )";
                        sqlinsert = sqlinsert + " values('" + strOrderNo.ToString().Trim() + "','" + strOtherImg11.ToString().Trim() + "','" + strOtherImg22.ToString().Trim() + "',";
                        sqlinsert = sqlinsert + " '" + strOtherImg33.ToString().Trim() + "','" + strOtherImg44.ToString().Trim() + "' )";

                        DbFunction objdbfuninsert = new DbFunction();
                        return objdbfuninsert.dmlsinglequery(sqlinsert);
                    }
                    catch (Exception ex)
                    {
                        NewClassFile newClassFile = new NewClassFile();
                        newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                        return false;
                    }
                }
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }


        #endregion

        //#region "LR_Surveillane"

        //public DataTable Mobint_LRObservationList(string strDivName, string strRolRght)
        //{
        //    string sql = " SELECT SNO_ID, OBSERVATION_TYPE, VISIT_DATE, NVL(METER_NO, '0') METER_NO, NVL(CA_NUMBER,'0') CA_NUMBER, NVL(POLE_NO,'0') POLE_NO, ";
        //    sql = sql + " ACTION_TAKEN_FLG, REMARKS, OTHER_RKS, TYPE_OF_ABNORMALITY, SITE_ADDRESS, ADJ_METER_NO1, ADJ_METER_NO2, ";
        //    sql = sql + " NC_TYPE, UPPER(NEAR_POLE_NO) NEAR_POLE_NO, TO_CHAR(A.ENTRY_DATE,'dd/mm/yyyy') ENTRY_DT FROM DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B  ";
        //    sql = sql + " WHERE UPPER(DIVISION)=UPPER('" + strDivName + "') AND A.SNO_ID = B.OBSER_ID ";
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = sql + " AND (B.NC_SLIGHT = 'Y' OR B.ABN_TYP = 'Y') ";
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%' ) ";
        //    }
        //    else if (strRolRght == "O & M")
        //    {
        //        sql = sql + " AND (B.NC_ONM = 'Y' OR B.ABN_TYP = 'Y') ";
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR ";
        //        sql = sql + " NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' ";
        //        sql = sql + " OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%')  ";
        //    }
        //    else if (strRolRght == "MMG")
        //    {
        //        sql = sql + " AND (B.NC_MMG = 'Y' OR B.ABN_TYP = 'Y') ";
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%' ) ";
        //    }
        //    else if (strRolRght == "Enforcement")
        //    {
        //        sql = sql + " AND (B.NC_ENFORCEMNT = 'Y' OR B.ABN_TYP = 'Y') ";
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' ";
        //        sql = sql + " OR TYPE_OF_ABNORMALITY LIKE '%Theft%'  )  ";
        //    }
        //    else if (strRolRght == "Business")
        //    {
        //        sql = sql + " AND (B.NC_BUSINESS = 'Y' OR B.ABN_TYP = 'Y') ";
        //        sql = sql + " AND (NC_TYPE LIKE '%06%' )  ";
        //    }
        //    else if (strRolRght == "QC")
        //    {

        //        sql = string.Empty;
        //        sql = " SELECT SEQ_NO SNO_ID, VISIT_DATE, NVL(CA_NO,'0') CA_NUMBER,NVL(METER_NO, '0') METER_NO, NVL(POLE_NO,'0') POLE_NO, ";
        //        sql = sql + "   SUB_AREA_TYP NC_TYPE, SUB_AREA_TYP_SLCTD, RMKS REMARKS, SCHEME, TO_CHAR(A.ENTRY_DATE,'dd/mm/yyyy') ENTRY_DT FROM DIV_SCHEME_QC_TRANS A, DIV_SCHEME_QC_TYP B   ";
        //        sql = sql + "   WHERE UPPER(DIVISION_NAME)=UPPER('" + strDivName + "')  ";
        //        sql = sql + " AND A.SEQ_NO = B.OBSER_ID  and QC_PD_REL ='X'  AND SUB_AREA_TYP_SLCTD IS NOT NULL ";

        //    }
        //    else
        //    {

        //    }

        //    sql = sql + "  ORDER BY A.ENTRY_DATE DESC ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public DataTable Mobint_LRObservationList(string strDivName)
        //{
        //    string sql = " SELECT SNO_ID, OBSERVATION_TYPE, VISIT_DATE, NVL(METER_NO, '0') METER_NO, NVL(CA_NUMBER,'0') CA_NUMBER, NVL(POLE_NO,'0') POLE_NO, ";
        //    sql = sql + " ACTION_TAKEN_FLG, REMARKS, OTHER_RKS, TYPE_OF_ABNORMALITY, SITE_ADDRESS, ADJ_METER_NO1, ADJ_METER_NO2, ";
        //    sql = sql + " NC_TYPE, UPPER(NEAR_POLE_NO) NEAR_POLE_NO, TO_CHAR(ENTRY_DATE,'dd/mm/yyyy') ENTRY_DT FROM DIV_SCHEME_SURVEILLANCE ";
        //    sql = sql + " WHERE UPPER(DIVISION)=UPPER('" + strDivName + "') ";
        //    sql = sql + "  ORDER BY ENTRY_DATE DESC ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public string SelectNextVal()
        //{

        //    string strSql = " SELECT SEQ_DIV_SCHEME_SURVEILLANCE.NEXTVAL SRNO FROM DUAL ";

        //    DataTable dt = new DataTable();
        //    DbFunction dbFunction = new DbFunction();
        //    dt = dbFunction.dmlgetquery_mobint(strSql);

        //    string strOutput = "";

        //    if (dt.Rows.Count > 0)
        //    {
        //        strOutput = dt.Rows[0]["SRNO"].ToString().Trim();
        //    }

        //    return strOutput;
        //}

        //public bool Insert_LR_Surveillane(string _sObserType, string _sVistDate, string _sCircle, string _sDivision, string _sMeterNo, string _sCANo,
        //                                          string _sPoleNo, string _sActionTkFlg, string _sRemarks, string _sNCType, string _sTypeOfAbnormality,
        //                                          string _sSiteAddress, string _sAdjMeterNo1, string _sAdjMeterNo2, string _sNearPoleNo, string _sOther, string strImeiNo)
        //{
        //    try
        //    {
        //        string strSrNo = SelectNextVal();

        //        //New Added
        //        string _ncrlst = "";
        //        string[] _arrnctyp = _sNCType.Trim().Split('|');

        //        for (int i = 0; i < _arrnctyp.Length; i++)
        //        {
        //            if (!string.IsNullOrEmpty(_arrnctyp[i].ToString()))
        //            {

        //                if (_arrnctyp[i].ToString() != "null")
        //                {
        //                    _ncrlst += _arrnctyp[i].ToString();
        //                    _ncrlst += "|";
        //                }

        //            }
        //        }
        //        //End

        //        string sqlinsert = "INSERT INTO DIV_SCHEME_SURVEILLANCE(SNO_ID,OBSERVATION_TYPE, VISIT_DATE, CIRCLE, DIVISION, METER_NO, CA_NUMBER, POLE_NO, ACTION_TAKEN_FLG, REMARKS, NC_TYPE, TYPE_OF_ABNORMALITY, SITE_ADDRESS, ADJ_METER_NO1, ADJ_METER_NO2, NEAR_POLE_NO,OTHER_RKS, IMEI_NO)";
        //        sqlinsert = sqlinsert + " VALUES('" + strSrNo + "','" + _sObserType.ToString().Trim() + "','" + _sVistDate.ToString().Trim() + "','" + _sCircle.Trim() + "','" + _sDivision.Trim() + "','" + _sMeterNo.Trim() + "','" + _sCANo.Trim() + "','" + _sPoleNo.Trim() + "','" + _sActionTkFlg + "',";
        //        sqlinsert = sqlinsert + " '" + _sRemarks.Trim() + "','" + _ncrlst.Trim() + "','" + _sTypeOfAbnormality.Trim() + "','" + _sSiteAddress.Trim() + "','" + _sAdjMeterNo1.Trim() + "','" + _sAdjMeterNo2.Trim() + "','" + _sNearPoleNo.Trim() + "','" + _sOther.Trim() + "', '"+ strImeiNo + "' )";
        //        DbFunction objdbfunsqlinsert = new DbFunction();

        //        bool isTrue = false;
        //        if (objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert))
        //        {
        //            isTrue = true;

        //            //Start

        //            string sqlinsert_new = " INSERT INTO DIV_SCHEME_SURV_NC_TYP (OBSER_ID, NC_SLIGHT,NC_SL_DT, NC_BUSINESS, NC_BUSI_DT,";
        //            sqlinsert_new = sqlinsert_new + "  NC_ENFORCEMNT, NC_ENF_DT, NC_MMG, NC_MMG_DT, NC_ONM, NC_ONM_DT, ABN_TYP , ABN_TYP_DT)  ";
        //            sqlinsert_new = sqlinsert_new + " VALUES('" + strSrNo + "', ";
        //            if (_sNCType.Contains("26") || _sNCType.Contains("27") || _sNCType.Contains("28"))
        //            { //SLight Flag
        //                sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
        //            }
        //            else
        //            {
        //                sqlinsert_new = sqlinsert_new + " 'X', '' ,";
        //            }

        //            if (_sNCType.Contains("06"))
        //            { //Business Flag
        //                sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
        //            }
        //            else
        //            {
        //                sqlinsert_new = sqlinsert_new + " 'X', '' ,";
        //            }

        //            if (_sNCType.Contains("17") || _sNCType.Contains("18") || _sNCType.Contains("19"))
        //            { //Enforcement Flag
        //                sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
        //            }
        //            else
        //            {
        //                sqlinsert_new = sqlinsert_new + " 'X', '' ,";
        //            }

        //            if (_sNCType.Contains("03") || _sNCType.Contains("04"))
        //            { //MMG Flag
        //                sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
        //            }
        //            else
        //            {
        //                sqlinsert_new = sqlinsert_new + " 'X', '' ,";
        //            }

        //            if (_sNCType.Contains("01") || _sNCType.Contains("02") || _sNCType.Contains("05") || _sNCType.Contains("07") || _sNCType.Contains("08") || _sNCType.Contains("09") || _sNCType.Contains("10") || _sNCType.Contains("11") || _sNCType.Contains("12") || _sNCType.Contains("13") || _sNCType.Contains("14") || _sNCType.Contains("15") || _sNCType.Contains("16") || _sNCType.Contains("20") || _sNCType.Contains("21") || _sNCType.Contains("22") || _sNCType.Contains("23") || _sNCType.Contains("24") || _sNCType.Contains("25") || _sNCType.Contains("29"))
        //            { //O & M Flag
        //                sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
        //            }
        //            else
        //            {
        //                sqlinsert_new = sqlinsert_new + " 'X', '' ,";
        //            }

        //            if (_sTypeOfAbnormality.Contains("PL/PPL") || _sTypeOfAbnormality.Contains("Consumer Refusal") || _sTypeOfAbnormality.Contains("Theft") || _sTypeOfAbnormality.Contains("Other"))
        //            { //Abnormality Flag
        //                sqlinsert_new = sqlinsert_new + " 'Y', '' )";
        //            }
        //            else
        //            {
        //                sqlinsert_new = sqlinsert_new + " 'X', '' )";
        //            }

        //            bool checkIt = objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert_new);
        //            //End

        //        }
        //        return isTrue;
        //    }
        //    catch (Exception ex)
        //    {
        //        NewClassFile newClassFile = new NewClassFile();
        //        newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
        //        return false;
        //    }
        //}

        //public  bool Insert_LR_Surv_Atr(string ObserId, string ObserType, string Remarks, string NCTypeResolved, string NCTypeNotResolved, string TypOfAbnormResolv, string TypOfAbnormNtResolv, string strDepartment, string strImeiNo)
        //{
        //    try
        //    {
        //        string sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, IMEI_NO )";
        //        sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";

        //        if (strDepartment == "Street Light")
        //        {
        //            sqlinsert = sqlinsert + " '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '"+ strImeiNo + "' ) ";
        //        }
        //        else if (strDepartment == "O & M")
        //        {
        //            sqlinsert = sqlinsert + " '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "' ) ";
        //        }
        //        else if (strDepartment == "MMG")
        //        {
        //            sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "' ) ";
        //        }
        //        else if (strDepartment == "Enforcement")
        //        {
        //            sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "' ) ";
        //        }
        //        else if (strDepartment == "Business")
        //        {
        //            sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "' ) ";
        //        }
        //        else if (strDepartment == "QC") //Insert
        //        {
        //            sqlinsert = string.Empty;
        //            sqlinsert = "INSERT INTO DIV_SCHEME_QC_ATR( SR_ID, OBSER_ID, QC_PD_REL_RESOLVED, QC_PD_REL_N_RESOLVED, QC_PD_REL_RMKS, QC_PD_REL_DT, QC_CABLE_REL_RESOLVED, QC_CABLE_REL_N_RESOLVED, QC_CABLE_REL_RMKS, QC_CABLE_REL_DT, QC_MTR_REL_RESOLVED, QC_MTR_REL_N_RESOLVED, QC_MTR_REL_RMKS, QC_MTR_REL_DT, IMEI_NO )";
        //            sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_QC_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
        //            sqlinsert = sqlinsert + " '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate , '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate , '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate , '" + strImeiNo + "' ) ";
        //        }
        //        else
        //        {
        //            sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '" + Remarks + "', '" + ObserType + "', '" + strImeiNo + "' ) ";
        //        }

        //        DbFunction objdbfunsqlinsert = new DbFunction();

        //        bool isTrue = false;

        //        if (objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert))
        //        {
        //            isTrue = true;

        //            string strUpdate = " UPDATE DIV_SCHEME_SURV_NC_TYP SET ";

        //            if (strDepartment == "Street Light")
        //            {
        //                strUpdate = strUpdate + " NC_SLIGHT = 'N', NC_SL_DT= SYSDATE ";
        //                if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
        //                {
        //                    strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
        //                }
        //            }
        //            else if (strDepartment == "O & M")
        //            {
        //                strUpdate = strUpdate + " NC_ONM='N' , NC_ONM_DT= SYSDATE ";
        //                if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
        //                {
        //                    strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
        //                }
        //            }
        //            else if (strDepartment == "MMG")
        //            {
        //                strUpdate = strUpdate + " NC_MMG='N' , NC_MMG_DT= SYSDATE ";
        //                if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
        //                {
        //                    strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
        //                }
        //            }
        //            else if (strDepartment == "Enforcement")
        //            {
        //                strUpdate = strUpdate + " NC_ENFORCEMNT='N' , NC_ENF_DT= SYSDATE ";
        //                if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
        //                {
        //                    strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
        //                }
        //            }
        //            else if (strDepartment == "Business")
        //            {
        //                strUpdate = strUpdate + " NC_BUSINESS='N' , NC_BUSI_DT= SYSDATE ";
        //                if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
        //                {
        //                    strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
        //                }
        //            }
        //            else if (strDepartment == "QC")
        //            {
        //                strUpdate = string.Empty;
        //                strUpdate = strUpdate + " UPDATE DIV_SCHEME_QC_TYP SET QC_PD_REL='N' , QC_PD_REL_DT= SYSDATE , QC_CABLE_REL='N', QC_CABLE_REL_DT=SYSDATE, QC_MTR_REL='N', QC_MTR_REL_DT=SYSDATE ";

        //            }
        //            else
        //            {
        //                strUpdate = strUpdate + " ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
        //            }

        //            strUpdate = strUpdate + " WHERE OBSER_ID='" + ObserId.ToString() + "' ";

        //            bool checkIt = objdbfunsqlinsert.dmlsinglequery_mobint(strUpdate);

        //        }
        //        return isTrue;
        //    }
        //    catch (Exception ex)
        //    {
        //        NewClassFile newClassFile = new NewClassFile();
        //        newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
        //        return false;
        //    }
        //}

        //public DataTable LR_SurvellanceDivMIS_List(string strDivName, string strRolRght)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY DIVISION	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY DIVISION ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY DIVISION	 ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public DataTable LR_SurvellanceCircleMIS_List(string strDivName, string strRolRght)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT CIRCLE , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY CIRCLE	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT CIRCLE , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY CIRCLE ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT CIRCLE , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY CIRCLE ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT CIRCLE , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY CIRCLE ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT CIRCLE , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY CIRCLE	 ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public DataTable LR_SurvellanceCircleDivMIS_List(string strDivName, string strRolRght)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY CIRCLE, DIVISION	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY CIRCLE, DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY CIRCLE, DIVISION ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY CIRCLE, DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY CIRCLE, DIVISION	 ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleMIS_List(string strDivName, string strScheme, string strDate)
        //{
        //    string sql = " SELECT Y.DIVISION , NVL(CABLE_RELATED,0) CABLE_RELATED, NVL(DB_RELATED,0) DB_RELATED, NVL(METER_RELATED,0) METER_RELATED  ";
        //    sql = sql + " FROM  (SELECT A.DIV_CODE, SUM(CASE WHEN ACTIVITY_LIST1 = 'Armored Cable (meter)' THEN 1 ELSE 0 END) CABLE_RELATED, SUM(CASE WHEN ACTIVITY_LIST1 = 'Pole DB Related' THEN 1 ELSE 0 END) DB_RELATED, SUM(CASE WHEN ACTIVITY_LIST1 NOT IN ('Pole DB Related','Armored Cable (meter)') THEN 1 ELSE 0 END) METER_RELATED ";

        //    sql = sql + " FROM MOBINT.DIV_SCHEME_LR_ACTIVTY  A WHERE 1=1   ";
        //    sql = sql + " AND TRUNC(ENTRY_DATE) = TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) ";
        //    sql = sql + "GROUP BY DIV_CODE )x, (SELECT UNIQUE DIVISION,DIVISION_ID FROM MOBINT.DIV_SCHEME_VENDOR_MST ) y  WHERE x.DIV_CODE = y.DIVISION_ID ";

        //    if (strDivName != "ALL")
        //    {
        //        sql = sql + " AND UPPER(Y.DIVISION)=UPPER('" + strDivName + "') ";
        //    }
        //    sql = sql + " ORDER BY METER_RELATED DESC ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleMIS_List(string strScheme, string strDate)
        //{
        //    //string sql = " SELECT A.SCHEME_NO DIVISION, SUM(CASE WHEN ACTIVITY_LIST1 = 'Armored Cable (meter)' THEN 1 ELSE 0 END) CABLE_RELATED,  ";
        //    //sql = sql + "  SUM(CASE WHEN ACTIVITY_LIST1 = 'Pole DB Related' THEN 1 ELSE 0 END) DB_RELATED, SUM(CASE WHEN ACTIVITY_LIST1 NOT IN ('Pole DB Related','Armored Cable (meter)') THEN 1 ELSE 0 END) METER_RELATED ";
        //    //sql = sql + "   FROM MOBINT.DIV_SCHEME_LR_ACTIVTY  A WHERE 1=1   ";
        //    //sql = sql + " AND TRUNC(ENTRY_DATE) = TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) ";
        //    //if (strScheme != "SELECT")
        //    //{
        //    //    sql = sql + " AND A.SCHEME_NO = '" + strScheme + "' ";
        //    //}
        //    //sql = sql + " GROUP BY SCHEME_NO ORDER BY METER_RELATED DESC  ";

        //    string sql = " SELECT A.SCHEME_NO DIVISION, SUM(CASE WHEN ACTIVITY_LIST1 = 'Armored Cable(meter), other than service cable' THEN 1 ELSE 0 END) CABLE_RELATED,  ";
        //    sql = sql + "  SUM(CASE WHEN ACTIVITY_LIST1 = 'Pole related quality to limit theft' THEN 1 ELSE 0 END) DB_RELATED, SUM(CASE WHEN ACTIVITY_LIST1 NOT IN ('Pole related quality to limit theft','Armored Cable(meter), other than service cable','Consumer Refusal') THEN 1 ELSE 0 END) METER_RELATED ";
        //    sql = sql + "   FROM MOBINT.DIV_SCHEME_LR_ACTIVTY  A WHERE 1=1   ";
        //    sql = sql + " AND TRUNC(ENTRY_DATE) = TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) ";
        //    if (strScheme != "SELECT")
        //    {
        //        sql = sql + " AND A.SCHEME_NO = '" + strScheme + "' ";
        //    }
        //    sql = sql + " GROUP BY SCHEME_NO ORDER BY METER_RELATED DESC  ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_List(string strDiv, string strScheme, string strDate)
        //{
        //    string sql = " SELECT SCHEME_NO DIVISION , NVL(CABLE_RELATED,0) CABLE_RELATED, NVL(DB_RELATED,0) DB_RELATED, NVL(METER_RELATED,0) METER_RELATED ";
        //    sql = sql + "  FROM  (SELECT A.SCHEME_NO,DIV_CODE, SUM(CASE WHEN ACTIVITY_LIST1 = 'Armored Cable (meter)' THEN 1 ELSE 0 END) CABLE_RELATED, SUM(CASE WHEN ACTIVITY_LIST1 = 'Pole DB Related' THEN 1 ELSE 0 END) DB_RELATED, SUM(CASE WHEN ACTIVITY_LIST1 NOT IN ('Pole DB Related','Armored Cable (meter)') THEN 1 ELSE 0 END) METER_RELATED ";
        //    sql = sql + "  FROM MOBINT.DIV_SCHEME_LR_ACTIVTY  A WHERE 1=1 ";
        //    sql = sql + " AND TRUNC(ENTRY_DATE) = TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) ";
        //    if (strScheme != "ALL")
        //    {
        //        sql = sql + " AND SCHEME_NO='" + strScheme + "' ";
        //    }
        //    sql = sql + " GROUP BY SCHEME_NO, DIV_CODE )x, (SELECT UNIQUE DIVISION,DIVISION_ID FROM MOBINT.DIV_SCHEME_VENDOR_MST ) y  WHERE x.DIV_CODE = y.DIVISION_ID ";
        //    if (strDiv != "ALL")
        //    {
        //        sql = sql + " AND UPPER(Y.DIVISION)=UPPER('" + strDiv + "') ";
        //    }


        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public DataTable LR_QC_CIRCLE_MIS_List(string strDivName, string strScheme)
        //{
        //    string sql = " SELECT A.CIRCLE_NAME SCHEME, nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
        //    sql = sql + " SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END) NC_Reported, SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END) NC_Cleared ";
        //    sql = sql + "  FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B WHERE 1=1  AND A.SEQ_NO = B.OBSER_ID AND SUB_AREA_TYP_SLCTD IS NOT NULL ";
        //    if (strScheme != "ALL")
        //    {
        //        sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strScheme + "') ";
        //    }
        //    if (strDivName != "ALL")
        //    {
        //        sql = sql + " AND UPPER(DIVISION_NAME) =UPPER('" + strDivName + "')  ";
        //    }
        //    sql = sql + " GROUP BY A.CIRCLE_NAME ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public DataTable LR_QC_DIVISION_MIS_List(string strDivName, string strScheme)
        //{
        //    string sql = " SELECT A.DIVISION_NAME SCHEME, nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
        //    sql = sql + " SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END) NC_Reported, SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END) NC_Cleared ";
        //    sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B WHERE 1=1  AND A.SEQ_NO = B.OBSER_ID AND SUB_AREA_TYP_SLCTD IS NOT NULL  ";
        //    if (strScheme != "ALL")
        //    {
        //        sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strScheme + "') ";
        //    }
        //    if (strDivName != "ALL")
        //    {
        //        sql = sql + " AND UPPER(DIVISION_NAME) =UPPER('" + strDivName + "')  ";
        //    }
        //    sql = sql + " GROUP BY A.DIVISION_NAME ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public DataTable LR_QC_MIS_List(string strDivName, string strScheme)
        //{
        //    string sql = " SELECT A.SCHEME, nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
        //    sql = sql + " SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END) NC_Reported, SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END) NC_Cleared ";
        //    sql = sql + "  FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B WHERE 1=1  AND A.SEQ_NO = B.OBSER_ID AND SUB_AREA_TYP_SLCTD IS NOT NULL ";
        //    if (strDivName != "")
        //    {
        //        sql = sql + " AND UPPER(DIVISION_NAME) =UPPER('" + strDivName + "') ";
        //    }
        //    if (strScheme != "")
        //    {
        //        sql = sql + " AND A.SCHEME ='" + strScheme + "' ";
        //    }
        //    sql = sql + " GROUP BY A.SCHEME ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public string SelectNextValQC()
        //{

        //    string strSql = " SELECT SEQ_DIV_SCHEME_QC.NEXTVAL SRNO FROM DUAL ";

        //    DataTable dt = new DataTable();
        //    DbFunction dbFunction = new DbFunction();
        //    dt = dbFunction.dmlgetquery_mobint(strSql);

        //    string strOutput = "";

        //    if (dt.Rows.Count > 0)
        //    {
        //        strOutput = dt.Rows[0]["SRNO"].ToString().Trim();
        //    }

        //    return strOutput;
        //}

        //public bool Insert_LR_QCheck(string _sVistDate, string _sCircle, string _sDivision,
        //                                             string _sMeterNo, string _sCANo,
        //                                            string _sRemarks, string _sQCType,
        //                                            string _sQCSlctd,
        //                                             string Other, string strScheme, string strImei, string strPoleNo)
        //{
        //    bool isTrue = false;

        //    try
        //    {
        //        string strSrNo = SelectNextValQC();

        //        //New Added
        //        string _qclst = ""; // _sQCSlctd
        //        string[] _arrnctyp = _sQCSlctd.Trim().Split('|');

        //        for (int i = 0; i < _arrnctyp.Length; i++)
        //        {
        //            if (!string.IsNullOrEmpty(_arrnctyp[i].ToString()))
        //            {

        //                if (_arrnctyp[i].ToString() != "null")
        //                {
        //                    _qclst += _arrnctyp[i].ToString();
        //                    _qclst += "|";
        //                }

        //            }
        //        }

        //        string _qctyplst = ""; //_sQCType
        //        string[] _arrQctyp = _sQCType.Trim().Split('|');

        //        for (int i = 0; i < _arrQctyp.Length; i++)
        //        {
        //            if (!string.IsNullOrEmpty(_arrQctyp[i].ToString()))
        //            {

        //                if (_arrQctyp[i].ToString() != "null")
        //                {
        //                    _qctyplst += _arrQctyp[i].ToString();
        //                    _qctyplst += "|";
        //                }

        //            }
        //        }
        //        //End
        //        //POLE_NO, IMEI_NO , IMEI_NO
        //        string sqlinsert = "INSERT INTO DIV_SCHEME_QC_TRANS (SEQ_NO, VISIT_DATE, CIRCLE_NAME, DIVISION_NAME, CA_NO, METER_NO, SUB_AREA_TYP, SUB_AREA_TYP_SLCTD, RMKS, SCHEME, POLE_NO, IMEI_NO)";
        //        sqlinsert = sqlinsert + " VALUES( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";

        //        NDS ndsCon = new NDS();
        //        OracleConnection ocon_MobAppInt = new OracleConnection(ndsCon.con_mobinternal_new());

        //        try
        //        {
        //            if (ocon_MobAppInt.State == ConnectionState.Closed)
        //            {
        //                ocon_MobAppInt.Open();
        //            }
        //            OracleCommand oleDbCommand = new OracleCommand(sqlinsert, ocon_MobAppInt);
        //            OracleParameter SEQ_NO = oleDbCommand.Parameters.Add("@SEQ_NO", OracleDbType.NVarchar2, 20);
        //            OracleParameter VISIT_DATE = oleDbCommand.Parameters.Add("@VISIT_DATE", OracleDbType.NVarchar2, 60);
        //            OracleParameter CIRCLE_NAME = oleDbCommand.Parameters.Add("@CIRCLE_NAME", OracleDbType.NVarchar2, 20);

        //            OracleParameter DIVISION_NAME = oleDbCommand.Parameters.Add("@DIVISION_NAME", OracleDbType.NVarchar2, 20);
        //            OracleParameter CA_NO = oleDbCommand.Parameters.Add("@CA_NO", OracleDbType.NVarchar2, 15);
        //            OracleParameter METER_NO = oleDbCommand.Parameters.Add("@METER_NO", OracleDbType.NVarchar2, 12);

        //            OracleParameter SUB_AREA_TYP = oleDbCommand.Parameters.Add("@SUB_AREA_TYP", OracleDbType.NVarchar2, 100);
        //            OracleParameter SUB_AREA_TYP_SLCTD = oleDbCommand.Parameters.Add("@SUB_AREA_TYP_SLCTD", OracleDbType.NVarchar2, 500);
        //            OracleParameter RMKS = oleDbCommand.Parameters.Add("@RMKS", OracleDbType.NVarchar2, 1000);

        //            OracleParameter SCHEME = oleDbCommand.Parameters.Add("@SCHEME", OracleDbType.NVarchar2, 50);

        //            OracleParameter POLENO = oleDbCommand.Parameters.Add("@POLE_NO", OracleDbType.NVarchar2, 11);
        //            OracleParameter IMEINO = oleDbCommand.Parameters.Add("@IMEI_NO", OracleDbType.NVarchar2, 20);

        //            SEQ_NO.Value = strSrNo;
        //            VISIT_DATE.Value = _sVistDate;
        //            CIRCLE_NAME.Value = _sCircle;

        //            DIVISION_NAME.Value = _sDivision;
        //            CA_NO.Value = _sCANo;
        //            METER_NO.Value = _sMeterNo;

        //            SUB_AREA_TYP.Value = _qctyplst;
        //            SUB_AREA_TYP_SLCTD.Value = _qclst;
        //            RMKS.Value = Other;

        //            SCHEME.Value = strScheme;

        //            POLENO.Value = strPoleNo;
        //            IMEINO.Value = strImei;

        //            int intOut = oleDbCommand.ExecuteNonQuery();

        //            if (intOut != 0)
        //            {
        //                isTrue = true;

        //                string sqlinsert_new = " INSERT INTO DIV_SCHEME_QC_TYP (obser_id, qc_pd_rel, qc_pd_rel_dt, qc_cable_rel,";
        //                sqlinsert_new = sqlinsert_new + "  qc_cable_rel_dt, qc_mtr_rel, qc_mtr_rel_dt)  ";
        //                sqlinsert_new = sqlinsert_new + " VALUES('" + strSrNo + "', ";
        //                if (_sQCType.Equals("Pole and DB related"))
        //                {
        //                    sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
        //                }
        //                else
        //                {
        //                    sqlinsert_new = sqlinsert_new + " 'X', '' ,";
        //                }

        //                if (_sQCType.Contains("Cable related"))
        //                {
        //                    sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
        //                }
        //                else
        //                {
        //                    sqlinsert_new = sqlinsert_new + " 'X', '' ,";
        //                }

        //                if (_sQCType.Contains("Meter & Bus Bar Related"))
        //                {
        //                    sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
        //                }
        //                else
        //                {
        //                    sqlinsert_new = sqlinsert_new + " 'X', '' )";
        //                }

        //                DbFunction objdbfunsqlinsert = new DbFunction();


        //                isTrue = objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert_new);
        //            }
        //        }
        //        catch (Exception ex)
        //        {
        //            WriteIntoFile(DateTime.Now.ToString() + "New Connection Method : con_mobinternal_new " + ex.ToString() + sqlinsert);
        //            return true;
        //        }
        //        finally
        //        {
        //            if (ocon_MobAppInt.State == ConnectionState.Open)
        //            {
        //                ocon_MobAppInt.Close();
        //            }
        //        }

        //        return isTrue;
        //    }
        //    catch (Exception ex)
        //    {
        //        WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
        //        return false;
        //    }
        //}

        //public string Check_QC_Duplicate(string _sMeterCANo)
        //{
        //    string strSql = " SELECT ENTRY_DATE FROM DIV_SCHEME_QC_TRANS WHERE METER_NO='" + _sMeterCANo + "' OR CA_NO='" + _sMeterCANo + "' ";

        //    DataTable dt = new DataTable();
        //    DbFunction dbFunction = new DbFunction();
        //    dt = dbFunction.dmlgetquery_mobint(strSql);

        //    if (dt.Rows.Count > 0)
        //    {
        //        return dt.Rows[0][0].ToString();
        //    }
        //    else
        //    {
        //        return "0";
        //    }
        //}

        //public string Check_Surveillance_Duplicate(string _sMeterCANo)
        //{
        //    string strSql = " SELECT ENTRY_DATE FROM DIV_SCHEME_SURVEILLANCE WHERE METER_NO='" + _sMeterCANo + "'  OR CA_NUMBER='" + _sMeterCANo + "' ";

        //    DataTable dt = new DataTable();
        //    DbFunction dbFunction = new DbFunction();
        //    dt = dbFunction.dmlgetquery_mobint(strSql);

        //    if (dt.Rows.Count > 0)
        //    {
        //        return dt.Rows[0][0].ToString();
        //    }
        //    else
        //    {
        //        return "0";
        //    }
        //}

        //#endregion

        #region "MCR Punching"

        public static DataTable CheckValid_UserID_Data(string strUserID, string strPassword)
        {
            string sql = string.Empty;

            sql = "  SELECT LOGIN_ID FROM MCR_LOGIN_MST WHERE UPPER(LOGIN_ID)=UPPER('" + strUserID + "') AND PASSWORD='" + strPassword + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);

            return dt;
        }

        public static DataTable CheckValid_UserID_DTDetails(string strUserID, string strPassword)
        {
            string sql = string.Empty;

            //sql = " SELECT EMP_NAME, EMP_ID, IMEI_NO, DIVISION, LOGIN_DATE, ROLE, MUD.ACTIVE_FLAG,LOGIN_TYPE FROM MCR_USER_DETAILS MUD, MCR_LOGIN_MST MLM WHERE MUD.EMP_ID= MLM.LOGIN_ID AND UPPER(EMP_ID)=UPPER('" + strUserID + "') AND PASSWORD='" + strPassword + "' ";
            sql = " SELECT EMP_NAME, EMP_ID, IMEI_NO, DIVISION, LOGIN_DATE, ROLE, MUD.ACTIVE_FLAG,LOGIN_TYPE,(SELECT version FROM MCR_APP_VERSION WHERE status='Y' AND ROWNUM=1) APP_VERSION_WEB FROM MCR_USER_DETAILS MUD, MCR_LOGIN_MST MLM WHERE MUD.EMP_ID= MLM.LOGIN_ID AND UPPER(EMP_ID)=UPPER('" + strUserID + "') AND PASSWORD='" + strPassword + "' ";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);

            return dt;

        }

        public static DataTable Get_MCR_InputData_Details(string strLoginType, string strID, string stringLatitude, string stringLongitude)
        {
            string sql = string.Empty;

            if (strLoginType == "V")
            {
                sql = " SELECT AUART ORDER_TYPE, COMP_CODE, PSTING_DATE, ORDERID, METER_NO, DIVISION, VENDOR_CODE, BP_NO, CA_NO, NAME, ADDRESS, FATHER_NAME, TEL_NO, REQUEST_TYPE, POLE_NO, STICKER_NO, ACCOUNT_CLASS, SANCTIONED_LOAD, ZDSS,";
                sql += " PLANNER_GROUP, CABLE_SIZE, CABLE_LENGTH, MCR_PUNCH_FLAG, START_DATE, FINISH_DATE, ENTRY_DATE,ILART_ACTIVITY_TYPE, SORT1_SEARCH_TERM,ZZSCODE_SUB_AREA_CODE, ZZSEQUN_SEQUENCE_NUMBER, ZZBUILDG_BUILDING_CODE, ZZMCORO_METER_POSITION,METER_NO METRNO_OLD, HAPPY_CODE_GEN HAPPY_CODE FROM MCR_INPUT_DETAILS WHERE VENDOR_CODE='" + strID + "' AND FLAG='N'";
            }
            else
            {
                sql = " SELECT AUART ORDER_TYPE, COMP_CODE, PSTING_DATE, ORDERID, METER_NO, DIVISION, VENDOR_CODE, BP_NO, CA_NO, NAME, ADDRESS, FATHER_NAME, TEL_NO, REQUEST_TYPE, POLE_NO, STICKER_NO, ACCOUNT_CLASS, SANCTIONED_LOAD, ZDSS, ";
                sql += " PLANNER_GROUP, CABLE_SIZE, CABLE_LENGTH, MCR_PUNCH_FLAG, START_DATE, FINISH_DATE, ENTRY_DATE,ILART_ACTIVITY_TYPE, SORT1_SEARCH_TERM,ZZSCODE_SUB_AREA_CODE, ZZSEQUN_SEQUENCE_NUMBER, ZZBUILDG_BUILDING_CODE, ZZMCORO_METER_POSITION,METER_NO METRNO_OLD, HAPPY_CODE_GEN HAPPY_CODE FROM MCR_INPUT_DETAILS WHERE ORDERID IN (SELECT ORDER_NO FROM MCR_VEND_ORDER_INST_MAP WHERE INSTALLER_ID='" + strID + "')  AND FLAG='Y'";
            }



            // bool isInserted = FillMCRMapDetails(strID, stringLatitude, stringLongitude);

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);

            return dt;

        }

        public static DataTable Get_MCR_InputData_DetailsNew(string strLoginType, string strID, string stringLatitude, string stringLongitude)
        {
            string sql = string.Empty;
            DataTable _dtOutPut = new DataTable();

            if (strLoginType == "V")
            {
                sql = " SELECT AUART ORDER_TYPE, COMP_CODE, PSTING_DATE, ORDERID, METER_NO, DIVISION, VENDOR_CODE, BP_NO, CA_NO, NAME, ADDRESS, FATHER_NAME, TEL_NO, REQUEST_TYPE, POLE_NO, STICKER_NO, ACCOUNT_CLASS, SANCTIONED_LOAD, ZDSS,";
                sql += " PLANNER_GROUP, CABLE_SIZE, CABLE_LENGTH, MCR_PUNCH_FLAG, START_DATE, FINISH_DATE, ENTRY_DATE,OLD_METERNO_SERNR METRNO_OLD, '0' KWH_OLD, '0' KVAH_OLD, '0' KWH_DATE_OLD, '0' KW_OLD, '0' KVA_OLD, '0' KW_DATE_OLD,ILART_ACTIVITY_TYPE, SORT1_SEARCH_TERM, ZZSCODE_SUB_AREA_CODE, ZZSEQUN_SEQUENCE_NUMBER, ZZBUILDG_BUILDING_CODE, ZZMCORO_METER_POSITION, HAPPY_CODE_GEN HAPPY_CODE FROM MCR_INPUT_DETAILS WHERE VENDOR_CODE='" + strID + "' AND FLAG='N'";
            }
            else
            {
                sql = " SELECT AUART ORDER_TYPE, COMP_CODE, PSTING_DATE, ORDERID, METER_NO, DIVISION, VENDOR_CODE, BP_NO, CA_NO, NAME, ADDRESS, FATHER_NAME, TEL_NO, REQUEST_TYPE, POLE_NO, STICKER_NO, ACCOUNT_CLASS, SANCTIONED_LOAD, ZDSS, ";
                sql += " PLANNER_GROUP, CABLE_SIZE, CABLE_LENGTH, MCR_PUNCH_FLAG, START_DATE, FINISH_DATE, ENTRY_DATE,OLD_METERNO_SERNR METRNO_OLD, '0' KWH_OLD, '0' KVAH_OLD, '0' KWH_DATE_OLD, '0' KW_OLD, '0' KVA_OLD, '0' KW_DATE_OLD,ILART_ACTIVITY_TYPE, SORT1_SEARCH_TERM, ZZSCODE_SUB_AREA_CODE, ZZSEQUN_SEQUENCE_NUMBER, ZZBUILDG_BUILDING_CODE, ZZMCORO_METER_POSITION, HAPPY_CODE_GEN HAPPY_CODE FROM MCR_INPUT_DETAILS WHERE ORDERID IN (SELECT ORDER_NO FROM MCR_VEND_ORDER_INST_MAP WHERE INSTALLER_ID='" + strID + "')  AND FLAG='Y'";
            }


            // bool isInserted = FillMCRMapDetails(strID, stringLatitude, stringLongitude);

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            _dtOutPut = ADD_RCM_dataInformation(dt);
            _dtOutPut.AcceptChanges();

            return _dtOutPut;

        }

        private static bool FillMCRMapDetails(string strUserId, string stringLatitude, string stringLongitude)
        {
            string sql = string.Empty;
            sql = "  INSERT INTO MCR_MAP_DTLS (USER_ID, LATITUDE, LONGITUDE) VALUES (?, ?, ?) ";

            NDS ndsCon = new NDS();
            OracleConnection ocon_mobinternal = new OracleConnection(ndsCon.con_mobinternal());

            try
            {
                if (ocon_mobinternal.State == ConnectionState.Closed)
                {
                    ocon_mobinternal.Open();
                }
                OracleCommand oleDbCommand = new OracleCommand(sql, ocon_mobinternal);
                OracleParameter USER_ID = oleDbCommand.Parameters.Add("@USER_ID", OracleDbType.NVarchar2, 20);
                OracleParameter LATITUDE = oleDbCommand.Parameters.Add("@LATITUDE", OracleDbType.NVarchar2, 60);
                OracleParameter LONGITUDE = oleDbCommand.Parameters.Add("@LONGITUDE", OracleDbType.NVarchar2, 60);

                USER_ID.Value = strUserId;
                LATITUDE.Value = stringLatitude;
                LONGITUDE.Value = stringLongitude;

                int intOut = oleDbCommand.ExecuteNonQuery();

                if (intOut != 0)
                {
                    return true;
                }
            }
            catch (Exception ex)
            {
                WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString() + sql);
                return true;
            }
            finally
            {
                if (ocon_mobinternal.State == ConnectionState.Open)
                {
                    ocon_mobinternal.Close();
                    ocon_mobinternal.Dispose();
                }
            }

            return true;
        }

        public static DataTable ADD_RCM_dataInformation(DataTable _dtMCRData)
        {
            DataTable _dtRCMData = new DataTable();
            DbFunction objdbfun = new DbFunction();
            string strSql = string.Empty;

            for (int i = 0; i < _dtMCRData.Rows.Count; i++)
            {
                strSql = "SELECT METERNO AS METRNO_OLD, KWH AS KWH_OLD,KVAH AS KVAH_OLD,READING_DATE AS KWH_DATE_OLD,KWH AS KW_OLD, KVAH AS KVA_OLD, READING_DATE AS KW_DATE_OLD ";
                strSql += "  FROM rcmpa.sap_slcc_formy  WHERE cons_ref='" + _dtMCRData.Rows[i]["CA_NO"].ToString().Substring(2, _dtMCRData.Rows[i]["CA_NO"].ToString().Length - 2) + "' AND READING_DATE IS NOT NULL ";
                strSql += "  UNION ";
                strSql += " SELECT METERNO AS METRNO_OLD,KWH,KVAH,READING_DATE AS KWH_DATE_OLD, MD_KWH,MD_KVAH,READING_DATE AS KW_DATE_OLD ";
                strSql += " FROM rcmpa.SAP_FORMY  WHERE cons_ref='" + _dtMCRData.Rows[i]["CA_NO"].ToString().Substring(2, _dtMCRData.Rows[i]["CA_NO"].ToString().Length - 2) + "'  AND READING_DATE IS NOT NULL ";

                _dtRCMData = objdbfun.dmlgetquery_RCM(strSql);

                if (_dtRCMData.Rows.Count > 0)
                {
                    // _dtMCRData.Rows[i]["KWH_OLD"] = _dtRCMData.Rows[0]["KWH_OLD"].ToString();
                    _dtMCRData.Rows[i]["KVAH_OLD"] = _dtRCMData.Rows[0]["KVAH_OLD"].ToString();
                    _dtMCRData.Rows[i]["KWH_DATE_OLD"] = _dtRCMData.Rows[0]["KWH_DATE_OLD"].ToString();
                    _dtMCRData.Rows[i]["KW_OLD"] = _dtRCMData.Rows[0]["KW_OLD"].ToString();
                    _dtMCRData.Rows[i]["KVA_OLD"] = _dtRCMData.Rows[0]["KVA_OLD"].ToString();
                    _dtMCRData.Rows[i]["KW_DATE_OLD"] = _dtRCMData.Rows[0]["KW_DATE_OLD"].ToString();
                }
            }

            return _dtMCRData;
        }

        public static string GetCAOnOrderNo(string oRDERNO)
        {
            string strSql = "SELECT CA_NO FROM MCR_INPUT_DETAILS WHERE orderid= '" + oRDERNO + "' ";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(strSql);

            if (dt.Rows.Count > 0)
                return dt.Rows[0]["CA_NO"].ToString();
            else
                return "";
        }

        public static bool Insert_MCR_IamgeListNEW(string strOrderNo, string strStickerNo, string strDeviceNo, string strImage1, string strImage2, string strImage3,
                                               string strImageMCR, string strMtrRptImg, string strLabelRptImg, string strImgSignature, string strImage4,
                                               string strImageOLD1Img, string strImageOLD2Img, string strImageSignImg, string strCaNo)
        {
            try
            {
                byte[] _byImg = null;
                string _strImage1 = string.Empty, _strImage2 = string.Empty, _strImage3 = string.Empty, _strImage4 = string.Empty, _strImageMCR = string.Empty;
                string _strMtrRptImg = string.Empty, _strLabelRptImg = string.Empty, _strImgSignature = string.Empty;

                string strCA = string.Empty;
                strCA = strCaNo;

                string strDate = DateTime.Now.ToString("ddMMyyyy");

                if (strImage1.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImage1);
                        _strImage1 = byteArrayToImage_MCR(_byImg, strCA + strDate + "A");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image 1" + ex.ToString());
                    }
                }

                if (strImage2.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImage2);
                        _strImage2 = byteArrayToImage_MCR(_byImg, strCA + strDate + "B");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image 2" + ex.ToString());
                    }
                }

                if (strImage3.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImage3);
                        _strImage3 = byteArrayToImage_MCR(_byImg, strCA + strDate + "C");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image 3" + ex.ToString());
                    }
                }

                if (strImageMCR.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImageMCR);
                        _strImageMCR = byteArrayToImage_MCR(_byImg, strCA + strDate + "D");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image" + ex.ToString());
                    }
                }

                if (strMtrRptImg.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strMtrRptImg);
                        _strMtrRptImg = byteArrayToImage_MCR(_byImg, strCA + strDate + "E");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR Meter" + ex.ToString());
                    }
                }

                if (strLabelRptImg.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strLabelRptImg);
                        _strLabelRptImg = byteArrayToImage_MCR(_byImg, strCA + strDate + "F");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR Label" + ex.ToString());
                    }
                }
                if (strImgSignature.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImgSignature);
                        _strImgSignature = byteArrayToImage_MCR(_byImg, strCA + strDate + "G");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR Signature" + ex.ToString());
                    }
                }
                if (strImage4.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImage4);
                        _strImage4 = byteArrayToImage_MCR(_byImg, strCA + strDate + "H");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image 4" + ex.ToString());
                    }
                }

                if (strImageOLD1Img.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImageOLD1Img);
                        strImageOLD1Img = byteArrayToImage_MCR(_byImg, strCA + strDate + "I");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image 4" + ex.ToString());
                    }
                }
                if (strImageOLD2Img.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImageOLD2Img);
                        strImageOLD2Img = byteArrayToImage_MCR(_byImg, strCA + strDate + "J");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image 4" + ex.ToString());
                    }
                }
                if (strImageSignImg.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImageSignImg);
                        strImageSignImg = byteArrayToImage_MCR(_byImg, strCA + strDate + "K");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image 4" + ex.ToString());
                    }
                }

                try
                {
                    string sqlinsert = "INSERT INTO MCR_IMAGE_DETAILS(ORDERID, STICKERNO, DEVICENO, IMAGE1, IMAGE2, IMAGE3, IMEAGE_MCR, IMAGE_METERTESTREPORT, IMAGE_LABTESTINGREPORT, IMAGE_SIGNATURE,IMAGE4,IMAGE1_OLD,IMAGE2_OLD,IMAGE_SIGNATURE_OLD )";
                    sqlinsert = sqlinsert + " values('" + strOrderNo.ToString().Trim() + "','" + strStickerNo.ToString().Trim() + "','" + strDeviceNo.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + _strImage1.ToString().Trim() + "','" + _strImage2.ToString().Trim() + "','" + _strImage3.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + _strImageMCR.ToString().Trim() + "','" + _strMtrRptImg.ToString().Trim() + "','" + _strLabelRptImg.ToString().Trim() + "','" + _strImgSignature.ToString().Trim() + "','" + _strImage4 + "','" + strImageOLD1Img + "','" + strImageOLD2Img + "','" + strImageSignImg + "')";

                    DbFunction objdbfuninsert = new DbFunction();
                    return objdbfuninsert.dmlsinglequery_mobint(sqlinsert);
                }
                catch (Exception ex)
                {
                    NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                    return false;
                }
            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }


        public static bool Insert_MCR_IamgeList(string strOrderNo, string strStickerNo, string strDeviceNo, string strImage1, string strImage2, string strImage3,
                                                string strImageMCR, string strMtrRptImg, string strLabelRptImg, string strImgSignature, string strImage4, string strCaNo)
        {
            try
            {
                byte[] _byImg = null;
                string _strImage1 = string.Empty, _strImage2 = string.Empty, _strImage3 = string.Empty, _strImage4 = string.Empty, _strImageMCR = string.Empty;
                string _strMtrRptImg = string.Empty, _strLabelRptImg = string.Empty, _strImgSignature = string.Empty;

                string strCA = string.Empty;
                strCA = strCaNo;

                string strDate = DateTime.Now.ToString("ddMMyyyy");

                if (strImage1.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImage1);
                        _strImage1 = byteArrayToImage_MCR(_byImg, strCA + strDate + "A");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image 1" + ex.ToString());
                    }
                }

                if (strImage2.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImage2);
                        _strImage2 = byteArrayToImage_MCR(_byImg, strCA + strDate + "B");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image 2" + ex.ToString());
                    }
                }

                if (strImage3.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImage3);
                        _strImage3 = byteArrayToImage_MCR(_byImg, strCA + strDate + "C");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image 3" + ex.ToString());
                    }
                }

                if (strImageMCR.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImageMCR);
                        _strImageMCR = byteArrayToImage_MCR(_byImg, strCA + strDate + "D");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image" + ex.ToString());
                    }
                }

                if (strMtrRptImg.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strMtrRptImg);
                        _strMtrRptImg = byteArrayToImage_MCR(_byImg, strCA + strDate + "E");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR Meter" + ex.ToString());
                    }
                }

                if (strLabelRptImg.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strLabelRptImg);
                        _strLabelRptImg = byteArrayToImage_MCR(_byImg, strCA + strDate + "F");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR Label" + ex.ToString());
                    }
                }
                if (strImgSignature.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImgSignature);
                        _strImgSignature = byteArrayToImage_MCR(_byImg, strCA + strDate + "G");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR Signature" + ex.ToString());
                    }
                }
                if (strImage4.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImage4);
                        _strImage4 = byteArrayToImage_MCR(_byImg, strCA + strDate + "H");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image 4" + ex.ToString());
                    }
                }

                try
                {
                    string sqlinsert = "INSERT INTO MCR_IMAGE_DETAILS(ORDERID, STICKERNO, DEVICENO, IMAGE1, IMAGE2, IMAGE3, IMEAGE_MCR, IMAGE_METERTESTREPORT, IMAGE_LABTESTINGREPORT, IMAGE_SIGNATURE,IMAGE4 )";
                    sqlinsert = sqlinsert + " values('" + strOrderNo.ToString().Trim() + "','" + strStickerNo.ToString().Trim() + "','" + strDeviceNo.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + _strImage1.ToString().Trim() + "','" + _strImage2.ToString().Trim() + "','" + _strImage3.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + _strImageMCR.ToString().Trim() + "','" + _strMtrRptImg.ToString().Trim() + "','" + _strLabelRptImg.ToString().Trim() + "','" + _strImgSignature.ToString().Trim() + "','" + _strImage4 + "')";

                    DbFunction objdbfuninsert = new DbFunction();
                    return objdbfuninsert.dmlsinglequery_mobint(sqlinsert);
                }
                catch (Exception ex)
                {
                    NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                    return false;
                }
            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public static bool Insert_MCR_InputData(string strOrderNo, string strDeviceNo, string strStickerNo, string strELCB_Inst, string strInstBusBar, string strBusBarSize, string strBusBarNo,
                                                string strDurmSize, string strActivityReason, string strCableSize, string strCableIntType, string strRunLenFrm, string strRunLenTo, string strCableLen,
                                                string strTerSeal1, string strTerSeal2, string strMtrBoxSeal1, string strMtrBoxSeal2, string strBusBarSeal1, string strBusBarSeal2,
                                                string strInstallcation, string strPoleNo, string strActDate, string strMR_KWH, string strMR_KW, string strMR_KVAH,
                                                string strMR_KVA, string strTakePhotGraph, string strMeterDownload, string strDBLock, string strEarthing,
                                                string strMeterHeight, string strAnyJoint, string strOverHeadCable, string strOverHeadCablePole, string strFlowmade,
                                                string strAdditionAccess, string strOutPutBusLen, string strOutPutCableLen, string strEarthingPole, string _gB_BAR_CABLE_SIZE,
                                                string strTAB_ID, string strTAB_NAME, string strGIS_LAT, string strGIS_LONG, string strGIS_STATUS, string strIMEI_NO)
        {
            try
            {
                string sqlinsert = "INSERT INTO MCR_DETAILS (ORDERID,DEVICENO,OTHERSTICKER,ELCB_INSTALLED,INSTALLEDBUSBAR,BUSBARSIZE,BUS_BAR_NO,DRUMSIZE,ACTIVITY_REASON, ";
                sqlinsert = sqlinsert + " CABLESIZE2,CABLEINSTALLTYPE,RUNNINGLENGTHFROM,RUNNINGLENGTHTO,CABLELENGTH,TERMINAL_SEAL,OTHER_SEAL, ";
                sqlinsert = sqlinsert + " METERBOXSEAL1,METERBOXSEAL2,BUSBARSEAL1,BUSBARSEAL2,INSTALLATION,POLENUMBER, ";
                sqlinsert = sqlinsert + " ACTIVITY_DATE,MR_KWH,MR_KW,MR_KVAH,MR_KVA,TAKEPHOTOGRAPH,METERDOWNLOAD,DBLOCKED,EARTHING,HEIGHTOFMETER, ";
                sqlinsert = sqlinsert + " ANYJOINTS,OVERHEADCABLE,OVERHEADCABLEPOLE,FLOWMADE,ADDITIONALACCESSORIES,OUTPUTBUSLENGTH,OUTPUTCABLELENGTH,EARTHINGPOLE, B_BAR_CABLE_SIZE,TAB_LOGIN_ID, TAB_LN_ID_NAME,GIS_LAT,GIS_LONG,GIS_STATUS,IMEI_NO) ";
                sqlinsert = sqlinsert + " VALUES('" + strOrderNo.ToString().Trim() + "','" + strDeviceNo.ToString().Trim() + "','" + strStickerNo.ToString().Trim() + "','" + strELCB_Inst.ToString().Trim() + "','" + strInstBusBar.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strBusBarSize.ToString().Trim() + "', '" + strBusBarNo.ToString().Trim() + "','" + strDurmSize.ToString().Trim() + "','" + strActivityReason.ToString().Trim() + "','" + strCableSize.ToString().Trim() + "','" + strCableIntType.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strRunLenFrm.ToString().Trim() + "','" + strRunLenTo.ToString().Trim() + "','" + strCableLen.ToString().Trim() + "','" + strTerSeal1.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strTerSeal2.ToString().Trim() + "','" + strMtrBoxSeal1.ToString().Trim() + "','" + strMtrBoxSeal2.ToString().Trim() + "','" + strBusBarSeal1.ToString().Trim() + "','" + strBusBarSeal2.ToString().Trim() + "','" + strInstallcation.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strPoleNo.ToString().Trim() + "',TO_DATE('" + strActDate + "','dd/MM/yyyy'),";
                sqlinsert = sqlinsert + " '" + strMR_KWH.ToString().Trim() + "','" + strMR_KW.ToString().Trim() + "','" + strMR_KVAH.ToString().Trim() + "','" + strMR_KVA.ToString().Trim() + "','" + strTakePhotGraph.ToString().Trim() + "','" + strMeterDownload.ToString().Trim() + "','" + strDBLock.ToString().Trim() + "','" + strEarthing.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strMeterHeight.ToString().Trim() + "','" + strAnyJoint.ToString().Trim() + "','" + strOverHeadCable.ToString().Trim() + "','" + strOverHeadCablePole.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strFlowmade.ToString().Trim() + "','" + strAdditionAccess.ToString().Trim() + "','" + strOutPutBusLen + "','" + strOutPutCableLen + "','" + strEarthingPole + "', '" + _gB_BAR_CABLE_SIZE + "',";
                sqlinsert = sqlinsert + " '" + strTAB_ID.ToString().Trim() + "','" + strTAB_NAME.ToString().Trim() + "','" + strGIS_LAT.ToString().Trim() + "','" + strGIS_LONG.ToString().Trim() + "','" + strGIS_STATUS.ToString().Trim() + "','" + strIMEI_NO.ToString().Trim() + "')";

                DbFunction objdbfunsqlinsert = new DbFunction();
                return objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert);

            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }


        public static bool Insert_MCR_InputDataEXTRA7(string strOrderNo, string strDeviceNo, string strStickerNo, string strOthStickerNo, string strELCB_Inst, string strInstBusBar, string strBusBarSize, string strBusBarNo,
                                           string strDurmSize, string strActivityReason, string strCableSize, string strCableIntType, string strRunLenFrm, string strRunLenTo, string strCableLen,
                                           string strTerSeal1, string strTerSeal2, string strMtrBoxSeal1, string strMtrBoxSeal2, string strBusBarSeal1, string strBusBarSeal2,
                                           string strInstallcation, string strPoleNo, string strActDate, string strMR_KWH, string strMR_KW, string strMR_KVAH,
                                           string strMR_KVA, string strTakePhotGraph, string strMeterDownload, string strDBLock, string strEarthing,
                                           string strMeterHeight, string strAnyJoint, string strOverHeadCable, string strOverHeadCablePole, string strFlowmade,
                                           string strAdditionAccess, string strOutPutBusLen, string strOutPutCableLen, string strEarthingPole, string _gB_BAR_CABLE_SIZE,
                                           string strTAB_ID, string strTAB_NAME, string strGIS_LAT, string strGIS_LONG, string strGIS_STATUS, string strIMEI_NO, string _gSUBMIT_DATETIME,
                                           string strDRUMNUMBERBB, string strVALINSTALLTYPEBB, string strRUNNINGLENGTHFROMBB, string strRUNNINGLENGTHTOBB, string strELCBSUBMITVAL,
                                           string strMETERSCANNEDVAL, string strEXTRA1, string strEXTRA2, string strEXTRA3, string strEXTRA4, string strEXTRA5,
                                           string strEXTRA6, string strEXTRA7, string strORDER_TYPE, string strPM_ACTIVITY, string strDivision)
        {
            try
            {
                string _sCableReq = "N";

                if (strCableLen.ToString().Trim() != "0")
                    _sCableReq = "Y";

                string sqlinsert = "INSERT INTO MCR_DETAILS (ORDERID,DEVICENO,STICKERNO,OTHERSTICKER,ELCB_INSTALLED,INSTALLEDBUSBAR,BUSBARSIZE,BUS_BAR_NO,DRUMSIZE,ACTIVITY_REASON, ";
                sqlinsert = sqlinsert + " CABLESIZE2,CABLEINSTALLTYPE,RUNNINGLENGTHFROM,RUNNINGLENGTHTO,CABLELENGTH,TERMINAL_SEAL,OTHER_SEAL, ";
                sqlinsert = sqlinsert + " METERBOXSEAL1,METERBOXSEAL2,BUSBARSEAL1,BUSBARSEAL2,INSTALLATION,POLENUMBER, ";
                sqlinsert = sqlinsert + " ACTIVITY_DATE,MR_KWH,MR_KW,MR_KVAH,MR_KVA,TAKEPHOTOGRAPH,METERDOWNLOAD,DBLOCKED,EARTHING,HEIGHTOFMETER, ";
                sqlinsert = sqlinsert + " ANYJOINTS,OVERHEADCABLE,OVERHEADCABLEPOLE,FLOWMADE,ADDITIONALACCESSORIES,OUTPUTBUSLENGTH,OUTPUTCABLELENGTH,EARTHINGPOLE, B_BAR_CABLE_SIZE,TAB_LOGIN_ID, TAB_LN_ID_NAME,GIS_LAT,GIS_LONG,GIS_STATUS,IMEI_NO,SUBMIT_DATETIME,";
                sqlinsert = sqlinsert + "  DRUM_NUMBER_BB, VALINSTALL_TYPE_BB, RUNNING_LENGTH_FROM_BB, RUNNING_LENGTH_TO_BB, ELCB_SUBMIT_VAL, METER_SCANNED_VAL, EXTRA1, EXTRA2, EXTRA3, EXTRA4, EXTRA5, EXTRA6, PUNCH_MODE,CABLE_REQD,ORDER_TYPE,PM_ACTIVITY,DIVISION) ";
                sqlinsert = sqlinsert + " VALUES('" + strOrderNo.ToString().Trim() + "','" + strDeviceNo.ToString().Trim() + "','" + strStickerNo.ToString().Trim() + "','" + strOthStickerNo.ToString().Trim() + "','" + strELCB_Inst.ToString().Trim() + "','" + strInstBusBar.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strBusBarSize.ToString().Trim() + "', '" + strBusBarNo.ToString().Trim() + "','" + strDurmSize.ToString().Trim() + "','" + strActivityReason.ToString().Trim() + "','" + strCableSize.ToString().Trim() + "','" + strCableIntType.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strRunLenFrm.ToString().Trim() + "','" + strRunLenTo.ToString().Trim() + "','" + strCableLen.ToString().Trim() + "','" + strTerSeal1.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strTerSeal2.ToString().Trim() + "','" + strMtrBoxSeal1.ToString().Trim() + "','" + strMtrBoxSeal2.ToString().Trim() + "','" + strBusBarSeal1.ToString().Trim() + "','" + strBusBarSeal2.ToString().Trim() + "','" + strInstallcation.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strPoleNo.ToString().Trim() + "',TO_DATE('" + strActDate + "','dd/MM/yyyy'),";
                sqlinsert = sqlinsert + " '" + strMR_KWH.ToString().Trim() + "','" + strMR_KW.ToString().Trim() + "','" + strMR_KVAH.ToString().Trim() + "','" + strMR_KVA.ToString().Trim() + "','" + strTakePhotGraph.ToString().Trim() + "','" + strMeterDownload.ToString().Trim() + "','" + strDBLock.ToString().Trim() + "','" + strEarthing.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strMeterHeight.ToString().Trim() + "','" + strAnyJoint.ToString().Trim() + "','" + strOverHeadCable.ToString().Trim() + "','" + strOverHeadCablePole.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strFlowmade.ToString().Trim() + "','" + strAdditionAccess.ToString().Trim() + "','" + strOutPutBusLen + "','" + strOutPutCableLen + "','" + strEarthingPole + "', '" + _gB_BAR_CABLE_SIZE + "',";
                sqlinsert = sqlinsert + " '" + strTAB_ID.ToString().Trim() + "','" + strTAB_NAME.ToString().Trim() + "','" + strGIS_LAT.ToString().Trim() + "','" + strGIS_LONG.ToString().Trim() + "','" + strGIS_STATUS.ToString().Trim() + "','" + strIMEI_NO.ToString().Trim() + "','" + _gSUBMIT_DATETIME + "',";
                sqlinsert = sqlinsert + " '" + strDRUMNUMBERBB.ToString().Trim() + "','" + strVALINSTALLTYPEBB.ToString().Trim() + "','" + strRUNNINGLENGTHFROMBB.ToString().Trim() + "','" + strRUNNINGLENGTHTOBB.ToString().Trim() + "','" + strELCBSUBMITVAL.ToString().Trim() + "','" + strMETERSCANNEDVAL.ToString().Trim() + "',";
                sqlinsert = sqlinsert + "  '" + strEXTRA1.ToString().Trim() + "','" + strEXTRA2.ToString().Trim() + "','" + strEXTRA3.ToString().Trim() + "','" + strEXTRA4.ToString().Trim() + "','" + strEXTRA5.ToString().Trim() + "','" + strEXTRA6.ToString().Trim() + "','" + strEXTRA7.ToString().Trim() + "','" + _sCableReq + "','" + strORDER_TYPE + "','" + strPM_ACTIVITY + "','" + strDivision + "')";

                DbFunction objdbfunsqlinsert = new DbFunction();
                return objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert);

            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }


        public static bool Insert_MCR_InputDataNEW(string strOrderNo, string strDeviceNo, string strStickerNo, string strELCB_Inst, string strInstBusBar, string strBusBarSize, string strBusBarNo,
                                              string strDurmSize, string strActivityReason, string strCableSize, string strCableIntType, string strRunLenFrm, string strRunLenTo, string strCableLen,
                                              string strTerSeal1, string strTerSeal2, string strMtrBoxSeal1, string strMtrBoxSeal2, string strBusBarSeal1, string strBusBarSeal2,
                                              string strInstallcation, string strPoleNo, string strActDate, string strMR_KWH, string strMR_KW, string strMR_KVAH,
                                              string strMR_KVA, string strTakePhotGraph, string strMeterDownload, string strDBLock, string strEarthing,
                                              string strMeterHeight, string strAnyJoint, string strOverHeadCable, string strOverHeadCablePole, string strFlowmade,
                                              string strAdditionAccess, string strOutPutBusLen, string strOutPutCableLen, string strEarthingPole, string _gB_BAR_CABLE_SIZE,
                                              string strTAB_ID, string strTAB_NAME, string strGIS_LAT, string strGIS_LONG, string strGIS_STATUS, string strIMEI_NO, string _gSUBMIT_DATETIME,
                                              string strDRUMNUMBERBB, string strVALINSTALLTYPEBB, string strRUNNINGLENGTHFROMBB, string strRUNNINGLENGTHTOBB, string strELCBSUBMITVAL,
                                              string strMETERSCANNEDVAL, string strEXTRA1, string strEXTRA2, string strEXTRA3, string strEXTRA4, string strEXTRA5,
                                              string strEXTRA6, string strEXTRA7, string strORDER_TYPE, string strPM_ACTIVITY, string strOLD_M_READING, string strMRKWH_OLD, string strMRKW_OLD,
                                              string strMRKVAH_OLD, string strMRKVA_OLD, string strINSTALLEDCABLE_OLD, string strCABLESIZE_OLD, string strDRUMSIZE_OLD, string strCABLEINSTALLTYPE_OLD,
                                              string strRUNNINGLENGTHFROM_OLD, string strRUNNINGLENGTHTO_OLD, string strCABLELENGTH_OLD, string strOUTPUTBUSLENGTH_OLD, string strTERMINALSEAL1_OLD,
                                              string strTERMINALSEAL2_OLD, string strMETERBOXSEAL1_OLD, string strMETERBOXSEAL2_OLD, string strBUSBARSEAL1_OLD, string strBUSBARSEAL2_OLD,
                                              string strBOX_OLD, string strGLANDS_OLD, string strTCOVER_OLD, string strBRASSSCREW_OLD, string strBUSBAR_OLD, string strTHIMBLE_OLD, string strSADDLE_OLD,
                                              string strGUNNYBAG_OLD, string strGUNNYBAGSEAL_OLD, string strLABTESTING_DATE_OLD, string strMETERRELOCATE_OLD, string strSAP_FLAG, string strDivsion)
        {
            try
            {
                string _sCableReq = "N";

                if (strCableLen.ToString().Trim() != "0")
                    _sCableReq = "Y";

                string sqlinsert = "INSERT INTO MCR_DETAILS (DIVISION,ORDERID,DEVICENO,OTHERSTICKER,ELCB_INSTALLED,INSTALLEDBUSBAR,BUSBARSIZE,BUS_BAR_NO,DRUMSIZE,ACTIVITY_REASON, ";
                sqlinsert = sqlinsert + " CABLESIZE2,CABLEINSTALLTYPE,RUNNINGLENGTHFROM,RUNNINGLENGTHTO,CABLELENGTH,TERMINAL_SEAL,OTHER_SEAL, ";
                sqlinsert = sqlinsert + " METERBOXSEAL1,METERBOXSEAL2,BUSBARSEAL1,BUSBARSEAL2,INSTALLATION,POLENUMBER, ";
                sqlinsert = sqlinsert + " ACTIVITY_DATE,MR_KWH,MR_KW,MR_KVAH,MR_KVA,TAKEPHOTOGRAPH,METERDOWNLOAD,DBLOCKED,EARTHING,HEIGHTOFMETER, ";
                sqlinsert = sqlinsert + " ANYJOINTS,OVERHEADCABLE,OVERHEADCABLEPOLE,FLOWMADE,ADDITIONALACCESSORIES,OUTPUTBUSLENGTH,OUTPUTCABLELENGTH,EARTHINGPOLE, B_BAR_CABLE_SIZE,TAB_LOGIN_ID, TAB_LN_ID_NAME,GIS_LAT,GIS_LONG,GIS_STATUS,IMEI_NO,SUBMIT_DATETIME,";
                sqlinsert = sqlinsert + "  DRUM_NUMBER_BB, VALINSTALL_TYPE_BB, RUNNING_LENGTH_FROM_BB, RUNNING_LENGTH_TO_BB, ELCB_SUBMIT_VAL, METER_SCANNED_VAL, EXTRA1, EXTRA2, EXTRA3, EXTRA4, EXTRA5, EXTRA6, EXTRA7, ";
                sqlinsert = sqlinsert + "  ORDER_TYPE,PM_ACTIVITY,OLD_M_READING,MRKWH_OLD,MRKW_OLD,MRKVAH_OLD,MRKVA_OLD,INSTALLEDCABLE_OLD,CABLESIZE_OLD,  ";
                sqlinsert = sqlinsert + "    DRUMSIZE_OLD,CABLEINSTALLTYPE_OLD,RUNNINGLENGTHFROM_OLD,RUNNINGLENGTHTO_OLD,CABLELENGTH_OLD,OUTPUTBUSLENGTH_OLD,TERMINALSEAL1_OLD, ";
                sqlinsert = sqlinsert + "    TERMINALSEAL2_OLD, METERBOXSEAL1_OLD,METERBOXSEAL2_OLD, BUSBARSEAL1_OLD,BUSBARSEAL2_OLD,BOX_OLD,GLANDS_OLD,TCOVER_OLD,BRASSSCREW_OLD, ";
                sqlinsert = sqlinsert + "    BUSBAR_OLD,THIMBLE_OLD,SADDLE_OLD,GUNNYBAG_OLD,GUNNYBAGSEAL_OLD,LABTESTING_DATE_OLD,METERRELOCATE_OLD,CABLE_REQD, SAP_FLAG) ";
                sqlinsert = sqlinsert + " VALUES('" + strDivsion + "','" + strOrderNo.ToString().Trim() + "','" + strDeviceNo.ToString().Trim() + "','" + strStickerNo.ToString().Trim() + "','" + strELCB_Inst.ToString().Trim() + "','" + strInstBusBar.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strBusBarSize.ToString().Trim() + "', '" + strBusBarNo.ToString().Trim() + "','" + strDurmSize.ToString().Trim() + "','" + strActivityReason.ToString().Trim() + "','" + strCableSize.ToString().Trim() + "','" + strCableIntType.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strRunLenFrm.ToString().Trim() + "','" + strRunLenTo.ToString().Trim() + "','" + strCableLen.ToString().Trim() + "','" + strTerSeal1.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strTerSeal2.ToString().Trim() + "','" + strMtrBoxSeal1.ToString().Trim() + "','" + strMtrBoxSeal2.ToString().Trim() + "','" + strBusBarSeal1.ToString().Trim() + "','" + strBusBarSeal2.ToString().Trim() + "','" + strInstallcation.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strPoleNo.ToString().Trim() + "',TO_DATE('" + strActDate + "','dd/MM/yyyy'),";
                sqlinsert = sqlinsert + " '" + strMR_KWH.ToString().Trim() + "','" + strMR_KW.ToString().Trim() + "','" + strMR_KVAH.ToString().Trim() + "','" + strMR_KVA.ToString().Trim() + "','" + strTakePhotGraph.ToString().Trim() + "','" + strMeterDownload.ToString().Trim() + "','" + strDBLock.ToString().Trim() + "','" + strEarthing.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strMeterHeight.ToString().Trim() + "','" + strAnyJoint.ToString().Trim() + "','" + strOverHeadCable.ToString().Trim() + "','" + strOverHeadCablePole.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strFlowmade.ToString().Trim() + "','" + strAdditionAccess.ToString().Trim() + "','" + strOutPutBusLen + "','" + strOutPutCableLen + "','" + strEarthingPole + "', '" + _gB_BAR_CABLE_SIZE + "',";
                sqlinsert = sqlinsert + " '" + strTAB_ID.ToString().Trim() + "','" + strTAB_NAME.ToString().Trim() + "','" + strGIS_LAT.ToString().Trim() + "','" + strGIS_LONG.ToString().Trim() + "','" + strGIS_STATUS.ToString().Trim() + "','" + strIMEI_NO.ToString().Trim() + "','" + _gSUBMIT_DATETIME + "',";
                sqlinsert = sqlinsert + " '" + strDRUMNUMBERBB.ToString().Trim() + "','" + strVALINSTALLTYPEBB.ToString().Trim() + "','" + strRUNNINGLENGTHFROMBB.ToString().Trim() + "','" + strRUNNINGLENGTHTOBB.ToString().Trim() + "','" + strELCBSUBMITVAL.ToString().Trim() + "','" + strMETERSCANNEDVAL.ToString().Trim() + "',";
                sqlinsert = sqlinsert + "  '" + strEXTRA1.ToString().Trim() + "','" + strEXTRA2.ToString().Trim() + "','" + strEXTRA3.ToString().Trim() + "','" + strEXTRA4.ToString().Trim() + "','" + strEXTRA5.ToString().Trim() + "','" + strEXTRA6.ToString().Trim() + "','" + strEXTRA7.ToString().Trim() + "',";
                sqlinsert = sqlinsert + "  '" + strORDER_TYPE.ToString().Trim() + "','" + strPM_ACTIVITY.ToString().Trim() + "','" + strOLD_M_READING.ToString().Trim() + "','" + strMRKWH_OLD.ToString().Trim() + "','" + strMRKW_OLD.ToString().Trim() + "','" + strMRKVAH_OLD.ToString().Trim() + "','" + strMRKVA_OLD.ToString().Trim() + "', )";
                sqlinsert = sqlinsert + "  '" + strINSTALLEDCABLE_OLD.ToString().Trim() + "','" + strCABLESIZE_OLD.ToString().Trim() + "','" + strDRUMSIZE_OLD.ToString().Trim() + "','" + strCABLEINSTALLTYPE_OLD.ToString().Trim() + "','" + strRUNNINGLENGTHFROM_OLD.ToString().Trim() + "','" + strRUNNINGLENGTHTO_OLD.ToString().Trim() + "','" + strCABLELENGTH_OLD.ToString().Trim() + "',)";
                sqlinsert = sqlinsert + "  '" + strOUTPUTBUSLENGTH_OLD.ToString().Trim() + "','" + strTERMINALSEAL1_OLD.ToString().Trim() + "','" + strTERMINALSEAL2_OLD.ToString().Trim() + "','" + strMETERBOXSEAL1_OLD.ToString().Trim() + "','" + strMETERBOXSEAL2_OLD.ToString().Trim() + "','" + strBUSBARSEAL1_OLD.ToString().Trim() + "','" + strBUSBARSEAL2_OLD.ToString().Trim() + "', )";
                sqlinsert = sqlinsert + "  '" + strBOX_OLD.ToString().Trim() + "','" + strGLANDS_OLD.ToString().Trim() + "','" + strTCOVER_OLD.ToString().Trim() + "','" + strBRASSSCREW_OLD.ToString().Trim() + "','" + strBUSBAR_OLD.ToString().Trim() + "','" + strTHIMBLE_OLD.ToString().Trim() + "','" + strSADDLE_OLD.ToString().Trim() + "',)";
                sqlinsert = sqlinsert + "  '" + strGUNNYBAG_OLD.ToString().Trim() + "','" + strGUNNYBAGSEAL_OLD.ToString().Trim() + "',TO_DATE('" + strLABTESTING_DATE_OLD + "','dd/MM/yyyy'),'" + strMETERRELOCATE_OLD.ToString().Trim() + "','" + _sCableReq + "','" + strSAP_FLAG + "')";

                DbFunction objdbfunsqlinsert = new DbFunction();
                return objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert);

            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }


        public static bool Insert_MCR_InputDataNEWRV(string strOrderNo, string strDeviceNo, string strStickerNo, string strELCB_Inst, string strInstBusBar, string strBusBarSize, string strBusBarNo,
                                            string strDurmSize, string strActivityReason, string strCableSize, string strCableIntType, string strRunLenFrm, string strRunLenTo, string strCableLen,
                                            string strTerSeal1, string strTerSeal2, string strMtrBoxSeal1, string strMtrBoxSeal2, string strBusBarSeal1, string strBusBarSeal2,
                                            string strInstallcation, string strPoleNo, string strActDate, string strMR_KWH, string strMR_KW, string strMR_KVAH,
                                            string strMR_KVA, string strTakePhotGraph, string strMeterDownload, string strDBLock, string strEarthing,
                                            string strMeterHeight, string strAnyJoint, string strOverHeadCable, string strOverHeadCablePole, string strFlowmade,
                                            string strAdditionAccess, string strOutPutBusLen, string strOutPutCableLen, string strEarthingPole, string _gB_BAR_CABLE_SIZE,
                                            string strTAB_ID, string strTAB_NAME, string strGIS_LAT, string strGIS_LONG, string strGIS_STATUS, string strIMEI_NO, string _gSUBMIT_DATETIME,
                                            string strDRUMNUMBERBB, string strVALINSTALLTYPEBB, string strRUNNINGLENGTHFROMBB, string strRUNNINGLENGTHTOBB, string strELCBSUBMITVAL,
                                            string strMETERSCANNEDVAL, string strEXTRA1, string strEXTRA2, string strEXTRA3, string strEXTRA4, string strEXTRA5,
                                            string strEXTRA6, string strEXTRA7, string strORDER_TYPE, string strPM_ACTIVITY, string strOLD_M_READING, string strMRKWH_OLD, string strMRKW_OLD,
                                            string strMRKVAH_OLD, string strMRKVA_OLD, string strINSTALLEDCABLE_OLD, string strCABLESIZE_OLD, string strDRUMSIZE_OLD, string strCABLEINSTALLTYPE_OLD,
                                            string strRUNNINGLENGTHFROM_OLD, string strRUNNINGLENGTHTO_OLD, string strCABLELENGTH_OLD, string strOUTPUTBUSLENGTH_OLD, string strTERMINALSEAL1_OLD,
                                            string strTERMINALSEAL2_OLD, string strMETERBOXSEAL1_OLD, string strMETERBOXSEAL2_OLD, string strBUSBARSEAL1_OLD, string strBUSBARSEAL2_OLD,
                                            string strBOX_OLD, string strGLANDS_OLD, string strTCOVER_OLD, string strBRASSSCREW_OLD, string strBUSBAR_OLD, string strTHIMBLE_OLD, string strSADDLE_OLD,
                                            string strGUNNYBAG_OLD, string strGUNNYBAGSEAL_OLD, string strLABTESTING_DATE_OLD, string strMETERRELOCATE_OLD, string strSAP_FLAG,
                                            string strTF_STCKR_STUS, string strHV_U_INSTALL_NW_CBL, string strORDER_STATUS, string strMTR_LOC_SHIFT, string strRMVD_MTR_BASE_PLT, string strOLD_MTR_STATUS,
                                            string strOLD_MTR_IF_AVBL, string strOLD_MTR_IF_NOT_AVBL, string strLAB_TSTNG_NTC, string strMTR_LOC_RELOCT, string strDivision, string HAPPY_CODE,
                                              string strINST_BB_CABLE_OPT, string strBB_CABLE_USED, string strCABLE_LEN_USED, string strOUTPUT_CABLE_LEN_USED, string strSIFT_DONE_BY,
                                              string strCAB_REMOVE_FRM_SITE, string strREPLACEMENT_DONE_CABL, string strCAB_RMVD_FRM_SITE, string strIS_GNY_BAG_PREPD,
                                              string strGNY_PREPD_NO_RESN, string strGNY_PREPD_NO_RESN_RMK, string strMTR_READ_AVAIL, string strMETER_REMOVED_BY, string strNOTICE_DATE,
                                              string strstartDate, string strcustomerName, string strcustomerAddress, string strcustomerMobile, string strcustomerPole, string strcustomerMeter, string straccountClass,
                                              string strconnCategory, string strcustomerCA, string strlooseOther1, string strlooseOther2, string strlooseFlag,
                                              string strcableNotInstallReason, string strnoHappyCodeReason, string strsmartMeterBool, string strsmartMeterSimNo,
                                            string strsmartMeterSimCode, string strSubdivision)
        {
            try
            {

                string _sCableReq = "N";

                if (strCableLen.ToString().Trim() != "0")
                    _sCableReq = "Y";

                string sqlinsert = "INSERT INTO MCR_DETAILS (DIVISION,ORDERID,DEVICENO,OTHERSTICKER,ELCB_INSTALLED,INSTALLEDBUSBAR,BUSBARSIZE,BUS_BAR_NO,DURM_NO,ACTIVITY_REASON, ";
                sqlinsert = sqlinsert + "  CABLESIZE2,CABLEINSTALLTYPE,RUNNINGLENGTHFROM,RUNNINGLENGTHTO,CABLELENGTH,TERMINAL_SEAL,OTHER_SEAL,  ";
                sqlinsert = sqlinsert + " METERBOXSEAL1,METERBOXSEAL2,BUSBARSEAL1,BUSBARSEAL2,INSTALLATION,POLENUMBER, ";
                sqlinsert = sqlinsert + " ACTIVITY_DATE,MR_KWH,MR_KW,MR_KVAH,MR_KVA,TAKEPHOTOGRAPH,METERDOWNLOAD,DBLOCKED,EARTHING,HEIGHTOFMETER, ";
                sqlinsert = sqlinsert + " ANYJOINTS,OVERHEADCABLE,OVERHEADCABLEPOLE,FLOWMADE,ADDITIONALACCESSORIES,OUTPUTBUSLENGTH,OUTPUTCABLELENGTH,EARTHINGPOLE, B_BAR_CABLE_SIZE,TAB_LOGIN_ID, TAB_LN_ID_NAME,GIS_LAT,GIS_LONG,GIS_STATUS,IMEI_NO,SUBMIT_DATETIME,";
                sqlinsert = sqlinsert + "   DRUM_NUMBER_BB, VALINSTALL_TYPE_BB, RUNNING_LENGTH_FROM_BB, RUNNING_LENGTH_TO_BB, ELCB_SUBMIT_VAL, METER_SCANNED_VAL, PUNCH_REMARKS, CUS_BUS_BAR_SIZE, EXTRA3, EXTRA4, EXTRA5, EXTRA6, PUNCH_MODE, ";
                sqlinsert = sqlinsert + "    ORDER_TYPE,PM_ACTIVITY,OLD_M_READING,OLD_MR_KWH,OLD_MR_KW,MRKVAH_OLD,OLD_MR_KVA,INSTALLEDCABLE_OLD,CABLESIZE_OLD, ";
                sqlinsert = sqlinsert + "       DRUMSIZE_OLD,CABLEINSTALLTYPE_OLD,RUNNINGLENGTHFROM_OLD,RUNNINGLENGTHTO_OLD,CABLELENGTH_OLD,OUTPUTBUSLENGTH_OLD,REM_TERMINAL_SEAL, ";
                sqlinsert = sqlinsert + "      REM_OTHER_SEAL, REM_BOX_SEAL1,REM_BOX_SEAL2, REM_BUSBAR_SEAL1,REM_BUSBAR_SEAL2,BOX_OLD,GLANDS_OLD,TCOVER_OLD,BRASSSCREW_OLD,  ";
                sqlinsert = sqlinsert + "      BUSBAR_OLD,THIMBLE_OLD,SADDLE_OLD,GUNNYBAG_OLD,GUNNYBAGSEAL_OLD,LABTESTING_DATE_OLD,METERRELOCATE_OLD,CABLE_REQD, SAP_FLAG, ";
                sqlinsert = sqlinsert + "      TF_STCKR_STUS,HV_U_INSTALL_NW_CBL,ORDER_STATUS,MTR_LOC_SHIFT,RMVD_MTR_BASE_PLT,OLD_MTR_STATUS,OLD_MTR_IF_AVBL,OLD_MTR_IF_NOT_AVBL, LAB_TSTNG_NTC, ";
                sqlinsert = sqlinsert + "      MTR_LOC_RELOCT, HAPPY_CODE , ";
                sqlinsert = sqlinsert + " INST_BB_CABLE_OPT, BB_CABLE_USED, CABLE_LEN_USED, OUTPUT_CABLE_LEN_USED, SIFT_DONE_BY, CAB_REMOVE_FRM_SITE, REPLACEMENT_DONE_CABL, ";
                sqlinsert = sqlinsert + " CAB_RMVD_FRM_SITE, IS_GNY_BAG_PREPD, GNY_PREPD_NO_RESN, GNY_PREPD_NO_RESN_RMK, MTR_READ_AVAIL,METER_REMOVED_BY,NOTICE_DATE,";
                sqlinsert = sqlinsert + " LM_STARTDATE, LM_CUSTOMERNAME, LM_CUSTOMERADDRESS, LM_CUSTOMERMOBILE, LM_CUSTOMERPOLE, LM_CUSTOMERMETER, LM_ACCOUNTCLASS, LM_CONNCATEGORY, LM_CUSTOMERCA, LM_LOOSEOTHER1, LM_LOOSEOTHER2, LM_LOOSEFLAG,CABLENOTINSTALLREASON, NOHAPPYCODEREASON, SMARTMETERBOOL, SMARTMETERSIMNO, SMARTMETERSIMCODE,BWART_MOVEMENT_TYPE,SUb_DIVISION) ";

                sqlinsert = sqlinsert + " VALUES('" + strDivision + "','" + strOrderNo.ToString().Trim() + "','" + strDeviceNo.ToString().Trim() + "','" + strStickerNo.ToString().Trim() + "','" + strELCB_Inst.ToString().Trim() + "','" + strInstBusBar.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strBusBarSize.ToString().Trim() + "', '" + strBusBarNo.ToString().Trim() + "','" + strDurmSize.ToString().Trim() + "','" + strActivityReason.ToString().Trim() + "','" + strCableSize.ToString().Trim() + "','" + strCableIntType.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strRunLenFrm.ToString().Trim() + "','" + strRunLenTo.ToString().Trim() + "','" + strCableLen.ToString().Trim() + "','" + strTerSeal1.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strTerSeal2.ToString().Trim() + "','" + strMtrBoxSeal1.ToString().Trim() + "','" + strMtrBoxSeal2.ToString().Trim() + "','" + strBusBarSeal1.ToString().Trim() + "','" + strBusBarSeal2.ToString().Trim() + "','" + strInstallcation.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strPoleNo.ToString().Trim() + "',TO_DATE('" + strActDate + "','dd/MM/yyyy'),";
                sqlinsert = sqlinsert + " '" + strMR_KWH.ToString().Trim() + "','" + strMR_KW.ToString().Trim() + "','" + strMR_KVAH.ToString().Trim() + "','" + strMR_KVA.ToString().Trim() + "','" + strTakePhotGraph.ToString().Trim() + "','" + strMeterDownload.ToString().Trim() + "','" + strDBLock.ToString().Trim() + "','" + strEarthing.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strMeterHeight.ToString().Trim() + "','" + strAnyJoint.ToString().Trim() + "','" + strOverHeadCable.ToString().Trim() + "','" + strOverHeadCablePole.ToString().Trim() + "',";
                sqlinsert = sqlinsert + " '" + strFlowmade.ToString().Trim() + "','" + strAdditionAccess.ToString().Trim() + "','" + strOutPutBusLen + "','" + strOutPutCableLen + "','" + strEarthingPole + "', '" + _gB_BAR_CABLE_SIZE + "',";
                sqlinsert = sqlinsert + " '" + strTAB_ID.ToString().Trim() + "','" + strTAB_NAME.ToString().Trim() + "','" + strGIS_LAT.ToString().Trim() + "','" + strGIS_LONG.ToString().Trim() + "','" + strGIS_STATUS.ToString().Trim() + "','" + strIMEI_NO.ToString().Trim() + "','" + _gSUBMIT_DATETIME + "',";
                sqlinsert = sqlinsert + " '" + strDRUMNUMBERBB.ToString().Trim() + "','" + strVALINSTALLTYPEBB.ToString().Trim() + "','" + strRUNNINGLENGTHFROMBB.ToString().Trim() + "','" + strRUNNINGLENGTHTOBB.ToString().Trim() + "','" + strELCBSUBMITVAL.ToString().Trim() + "','" + strMETERSCANNEDVAL.ToString().Trim() + "',";
                sqlinsert = sqlinsert + "  '" + strEXTRA1.ToString().Trim() + "','" + strEXTRA2.ToString().Trim() + "','" + strEXTRA3.ToString().Trim() + "','" + strEXTRA4.ToString().Trim() + "','" + strEXTRA5.ToString().Trim() + "','" + strEXTRA6.ToString().Trim() + "','" + strEXTRA7.ToString().Trim() + "',";
                sqlinsert = sqlinsert + "  '" + strORDER_TYPE.ToString().Trim() + "','" + strPM_ACTIVITY.ToString().Trim() + "','" + strOLD_M_READING.ToString().Trim() + "','" + strMRKWH_OLD.ToString().Trim() + "','" + strMRKW_OLD.ToString().Trim() + "','" + strMRKVAH_OLD.ToString().Trim() + "','" + strMRKVA_OLD.ToString().Trim() + "', ";
                sqlinsert = sqlinsert + "  '" + strINSTALLEDCABLE_OLD.ToString().Trim() + "','" + strCABLESIZE_OLD.ToString().Trim() + "','" + strDRUMSIZE_OLD.ToString().Trim() + "','" + strCABLEINSTALLTYPE_OLD.ToString().Trim() + "','" + strRUNNINGLENGTHFROM_OLD.ToString().Trim() + "','" + strRUNNINGLENGTHTO_OLD.ToString().Trim() + "','" + strCABLELENGTH_OLD.ToString().Trim() + "',";
                sqlinsert = sqlinsert + "  '" + strOUTPUTBUSLENGTH_OLD.ToString().Trim() + "','" + strTERMINALSEAL1_OLD.ToString().Trim() + "','" + strTERMINALSEAL2_OLD.ToString().Trim() + "','" + strMETERBOXSEAL1_OLD.ToString().Trim() + "','" + strMETERBOXSEAL2_OLD.ToString().Trim() + "','" + strBUSBARSEAL1_OLD.ToString().Trim() + "','" + strBUSBARSEAL2_OLD.ToString().Trim() + "', ";
                sqlinsert = sqlinsert + "  '" + strBOX_OLD.ToString().Trim() + "','" + strGLANDS_OLD.ToString().Trim() + "','" + strTCOVER_OLD.ToString().Trim() + "','" + strBRASSSCREW_OLD.ToString().Trim() + "','" + strBUSBAR_OLD.ToString().Trim() + "','" + strTHIMBLE_OLD.ToString().Trim() + "','" + strSADDLE_OLD.ToString().Trim() + "', ";

                // sqlinsert = sqlinsert + "  '" + strGUNNYBAG_OLD.ToString().Trim() + "','" + strGUNNYBAGSEAL_OLD.ToString().Trim() + "',TO_DATE('" + strLABTESTING_DATE_OLD + "','dd/MM/yyyy'),'" + strMETERRELOCATE_OLD.ToString().Trim() + "','" + _sCableReq + "','" + strSAP_FLAG + "', ";
                sqlinsert = sqlinsert + "  '" + strGUNNYBAG_OLD.ToString().Trim() + "','" + strGUNNYBAGSEAL_OLD.ToString().Trim() + "', ";

                if (strLABTESTING_DATE_OLD.Trim() != "")
                    sqlinsert = sqlinsert + "  TO_DATE('" + strLABTESTING_DATE_OLD + "','dd/MM/yyyy'), ";
                else
                    sqlinsert = sqlinsert + "  NULL, ";

                sqlinsert = sqlinsert + " '" + strMETERRELOCATE_OLD.ToString().Trim() + "','" + _sCableReq + "','" + strSAP_FLAG + "', ";

                sqlinsert = sqlinsert + "  '" + strTF_STCKR_STUS + "','" + strHV_U_INSTALL_NW_CBL + "','" + strORDER_STATUS + "','" + strMTR_LOC_SHIFT + "','" + strRMVD_MTR_BASE_PLT + "','" + strOLD_MTR_STATUS + "','" + strOLD_MTR_IF_AVBL + "','" + strOLD_MTR_IF_NOT_AVBL + "','" + strLAB_TSTNG_NTC + "','" + strMTR_LOC_RELOCT + "', '" + HAPPY_CODE + "',";

                sqlinsert = sqlinsert + "  '" + strINST_BB_CABLE_OPT + "','" + strBB_CABLE_USED + "','" + strCABLE_LEN_USED + "','" + strOUTPUT_CABLE_LEN_USED + "','" + strSIFT_DONE_BY + "','" + strCAB_REMOVE_FRM_SITE + "',";
                sqlinsert = sqlinsert + " '" + strREPLACEMENT_DONE_CABL + "','" + strCAB_RMVD_FRM_SITE + "','" + strIS_GNY_BAG_PREPD + "','" + strGNY_PREPD_NO_RESN + "','" + strGNY_PREPD_NO_RESN_RMK + "','" + strMTR_READ_AVAIL + "', '" + strMETER_REMOVED_BY + "',TO_DATE('" + strNOTICE_DATE + "','dd/MM/yyyy'), ";
                sqlinsert = sqlinsert + " TO_DATE('" + strstartDate + "','dd/MM/yyyy'), '" + strcustomerName + "','" + strcustomerAddress + "','" + strcustomerMobile + "','" + strcustomerPole + "','" + strcustomerMeter + "','" + straccountClass + "', ";
                sqlinsert = sqlinsert + " '" + strconnCategory + "','" + strcustomerCA + "','" + strlooseOther1 + "','" + strlooseOther2 + "','" + strlooseFlag + "','" + strcableNotInstallReason + "','" + strnoHappyCodeReason + "','" + strsmartMeterBool + "','" + strsmartMeterSimNo + "','" + strsmartMeterSimCode + "',";

                if (strSAP_FLAG == "L")
                    sqlinsert = sqlinsert + " '941','" + strSubdivision + "' ) ";
                else
                    sqlinsert = sqlinsert + " '0','" + strSubdivision + "' ) ";


                DbFunction objdbfunsqlinsert = new DbFunction();
                return objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert);

            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }



        public static bool Insert_MCR_IamgeListNEW(string strOrderNo, string strStickerNo, string strDeviceNo, string strImage1, string strImage2, string strImage3,
                                               string strImageMCR, string strMtrRptImg, string strLabelRptImg, string strImgSignature, string strImage4,
                                               string strImageOLD1Img, string strImageOLD2Img, string strImageSignImg, string strCaNo, string strSAP_FLAG)
        {
            try
            {
                byte[] _byImg = null;
                string _strImage1 = string.Empty, _strImage2 = string.Empty, _strImage3 = string.Empty, _strImage4 = string.Empty, _strImageMCR = string.Empty;
                string _strMtrRptImg = string.Empty, _strLabelRptImg = string.Empty, _strImgSignature = string.Empty;
                string _strImageOld1 = string.Empty, _strImageOld2 = string.Empty;

                string strCA = string.Empty;
                strCA = strCaNo;

                string strDate = DateTime.Now.ToString("ddMMyyyy");

                if (strImage1.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImage1);
                        _strImage1 = byteArrayToImage_MCR(_byImg, strCA + strDate + "A");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image 1" + ex.ToString());
                    }
                }

                if (strImage2.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImage2);
                        _strImage2 = byteArrayToImage_MCR(_byImg, strCA + strDate + "B");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image 2" + ex.ToString());
                    }
                }

                if (strImage3.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImage3);
                        _strImage3 = byteArrayToImage_MCR(_byImg, strCA + strDate + "C");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image 3" + ex.ToString());
                    }
                }

                if (strImageMCR.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImageMCR);
                        _strImageMCR = byteArrayToImage_MCR(_byImg, strCA + strDate + "D");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image" + ex.ToString());
                    }
                }

                if (strMtrRptImg.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strMtrRptImg);
                        _strMtrRptImg = byteArrayToImage_MCR(_byImg, strCA + strDate + "E");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR Meter" + ex.ToString());
                    }
                }

                if (strLabelRptImg.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strLabelRptImg);
                        _strLabelRptImg = byteArrayToImage_MCR(_byImg, strCA + strDate + "F");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR Label" + ex.ToString());
                    }
                }
                if (strImgSignature.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImgSignature);
                        _strImgSignature = byteArrayToImage_MCR(_byImg, strCA + strDate + "G");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR Signature" + ex.ToString());
                    }
                }
                if (strImage4.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImage4);
                        _strImage4 = byteArrayToImage_MCR(_byImg, strCA + strDate + "H");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image 4" + ex.ToString());
                    }
                }

                if (strImageOLD1Img.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImageOLD1Img);
                        _strImageOld1 = byteArrayToImage_MCR(_byImg, strCA + strDate + "I");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image Old1" + ex.ToString());
                    }
                }
                if (strImageOLD2Img.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImageOLD2Img);
                        _strImageOld2 = byteArrayToImage_MCR(_byImg, strCA + strDate + "J");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image Old2" + ex.ToString());
                    }
                }

                if (strImageSignImg.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strImageSignImg);
                        strImageSignImg = byteArrayToImage_MCR(_byImg, strCA + strDate + "K");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR image 4" + ex.ToString());
                    }
                }


                try
                {
                    string sqlinsert = "INSERT INTO MCR_IMAGE_DETAILS(ORDERID, STICKERNO, DEVICENO, IMAGE1, IMAGE2, IMAGE3, IMEAGE_MCR, IMAGE_METERTESTREPORT, IMAGE_LABTESTINGREPORT, IMAGE_SIGNATURE,IMAGE4,IMAGE1_OLD,IMAGE2_OLD,TRANSFER_FLAG )";
                    sqlinsert = sqlinsert + " values('" + strOrderNo.ToString().Trim() + "','" + strStickerNo.ToString().Trim() + "','" + strDeviceNo.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + _strImage1.ToString().Trim() + "','" + _strImage2.ToString().Trim() + "','" + _strImage3.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + " '" + _strImageMCR.ToString().Trim() + "','" + _strMtrRptImg.ToString().Trim() + "','" + _strLabelRptImg.ToString().Trim() + "','" + _strImgSignature.ToString().Trim() + "','" + _strImage4 + "','" + _strImageOld1 + "','" + _strImageOld2 + "','" + strSAP_FLAG + "')";

                    DbFunction objdbfuninsert = new DbFunction();


                    //NewClassFile.WriteIntoFile_MCR("Insert IMEAGE_MCR: " + strImageMCR.ToString());
                    //NewClassFile.WriteIntoFile_MCR("Insert Image: " + sqlinsert.ToString());

                    return objdbfuninsert.dmlsinglequery_mobint(sqlinsert);

                }
                catch (Exception ex)
                {
                    NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                    return false;
                }
            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public static DataTable Get_MCR_Complete_InputData(string strID)
        {
            string sql = string.Empty;

            sql = " SELECT AUART ORDER_TYPE, COMP_CODE, PSTING_DATE, ORDERID, METER_NO, DIVISION, VENDOR_CODE, BP_NO, CA_NO, NAME, ADDRESS, FATHER_NAME, TEL_NO, REQUEST_TYPE, POLE_NO, STICKER_NO, ACCOUNT_CLASS, SANCTIONED_LOAD, ZDSS, ";
            sql += " PLANNER_GROUP, CABLE_SIZE, CABLE_LENGTH, MCR_PUNCH_FLAG, START_DATE, FINISH_DATE, ENTRY_DATE,METER_NO METRNO_OLD, HAPPY_CODE_GEN HAPPY_CODE FROM MCR_INPUT_DETAILS WHERE  FLAG='C' AND PUNCH_DATE>SYSDATE-3 AND UPPER(PUNCH_BY) = UPPER('" + strID + "')";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);

            return dt;
        }

        public static DataTable GetSubDivision_DivWise(string _sDivCode)
        {
            string sql = string.Empty;

            sql = " SELECT '0' SUB_DIVISION,'-SELECT-' SUB_DIV_DESC FROM dual UNION ";
            sql += " SELECT SUB_DIVISION, (SUB_DIVISION ||' - ' ||SUB_DIVISION_DESC)SUB_DIV_DESC ";
            sql += " FROM MCR_SUBDIVISION_MST WHERE DIVISION='" + _sDivCode + "' ORDER BY SUB_DIV_DESC  ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);

            return dt;
        }

        public static DataTable GetCancel_RemarksData(string _sOrdType)
        {
            string sql = string.Empty;

            sql = " SELECT '0' CANCEL_ID,'-SELECT-' CAN_REMARK FROM dual UNION ";
            sql += " SELECT CANCEL_ID, CAN_REMARK FROM MCR_CANCEL_RMKS_MST WHERE ORDER_TYPE LIKE ('%" + _sOrdType + "%') ORDER BY CAN_REMARK ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);

            return dt;

        }

        public static DataTable GetOrderTypeData_OrdIDWise(string _sOrderID)
        {
            string sql = string.Empty;

            sql = "SELECT AUART,ILART_ACTIVITY_TYPE, (SELECT DISTINCT SAP_SENT_FLAG FROM MCR_ORDER_PM_MASTER WHERE PM_ACTIVTY=ILART_ACTIVITY_TYPE AND ROWNUM<2)SAP_FLAG,DIVISION FROM MCR_INPUT_DETAILS where ORDERID='" + _sOrderID + "'";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);

            return dt;
        }

        public static DataTable CheckValid_SealDeails(string strSealNo)
        {
            string sql = string.Empty;

            sql = " SELECT DISTINCT CONSUM_SEAL_FLAG FROM MCR_SEAL_DETAILS WHERE SEAL='" + strSealNo + "' AND CONSUM_SEAL_FLAG='Y' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);

            return dt;

        }

        public static bool Update_MCRSealFlag(string strSealNo, string strOrderNo)
        {
            try
            {
                string sqlinsert = " UPDATE MCR_SEAL_DETAILS SET CONSUM_SEAL_FLAG='C', PUNCH_DATE=sysdate, ORDERID='" + strOrderNo + "' WHERE SEAL='" + strSealNo + "' ";

                DbFunction objdbfuninsert = new DbFunction();
                return objdbfuninsert.dmlsinglequery_mobint(sqlinsert);
            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public static bool Insert_InstallerData(string strInstallerName, string strInstID, string strIMEI, string strDivision, string strVendorID)
        {
            try
            {
                string sqlinsert = " INSERT INTO MCR_USER_DETAILS (EMP_NAME, EMP_ID, IMEI_NO, DIVISION, EMP_TYPE, ROLE, VENDOR_ID, ACTIVE_FLAG) ";
                sqlinsert = sqlinsert + "  VALUES   ('" + strInstallerName + "', '" + strInstID + "', '" + strIMEI + "', '" + strDivision + "', 'I', 'USER', '" + strVendorID + "', 'Y') ";

                DbFunction objdbfuninsert = new DbFunction();
                return objdbfuninsert.dmlsinglequery_mobint(sqlinsert);
            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public static bool Insert_InstallerLoginData(string strInstallerID)
        {
            try
            {
                string sqlinsert = "  INSERT INTO MCR_LOGIN_MST (LOGIN_ID, PASSWORD, OLD_PASSWORD, NEW_PASSWORD, LOGIN_TYPE) ";
                sqlinsert = sqlinsert + "       VALUES   ('" + strInstallerID + "', '1234', '1234', '1234', 'I') ";

                DbFunction objdbfuninsert = new DbFunction();
                return objdbfuninsert.dmlsinglequery_mobint(sqlinsert);
            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public static DataTable GetInstaller_DataList_VendorWise(string strVendorID)
        {
            string sql = string.Empty;
            sql = " SELECT EMP_NAME,EMP_ID FROM MCR_USER_DETAILS WHERE EMP_TYPE='I' AND VENDOR_ID='" + strVendorID + "' ORDER BY EMP_NAME ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);

            return dt;

        }

        public static bool Assign_OrderInstaller_InputData(string strOrder, string strVendorID)
        {
            try
            {
                string sqlinsert = " UPDATE MCR_INPUT_DETAILS SET FLAG='Y', ALLOCATE_DATE = SYSDATE,ALLOCATE_BY='" + strVendorID + "' WHERE ORDERID='" + strOrder + "' ";

                DbFunction objdbfuninsert = new DbFunction();
                return objdbfuninsert.dmlsinglequery_mobint(sqlinsert);
            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public static bool PunchOrder_Installer_InputData(string strOrder, string strInstallerID, string strDeviceNo)
        {
            try
            {
                string sqlinsert = " UPDATE MCR_INPUT_DETAILS SET FLAG='C', PUNCH_DATE = SYSDATE,PUNCH_BY='" + strInstallerID + "' WHERE ORDERID='" + strOrder + "' AND METER_NO='" + strDeviceNo + "' ";

                DbFunction objdbfuninsert = new DbFunction();
                return objdbfuninsert.dmlsinglequery_mobint(sqlinsert);
            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public static bool PunchLooseOrder_Installer_InputData(string strInstallerID, string strDeviceNo)
        {
            try
            {
                string sqlinsert = " UPDATE MCR_LOOSE_METER_DETAILS SET FLAG='C', PUNCH_DATE = SYSDATE,PUNCH_BY='" + strInstallerID + "' WHERE BWART_MOVEMENT_TYPE='941' AND SERNR_SERIAL_NO='" + strDeviceNo + "' ";

                DbFunction objdbfuninsert = new DbFunction();
                return objdbfuninsert.dmlsinglequery_mobint(sqlinsert);
            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }
        public static bool MapData_OrderInstaller_InputData(string strOrder, string strMeterNo, string strVendorID, string strInstallerID)
        {
            try
            {
                string sqlinsert = " INSERT INTO MCR_VEND_ORDER_INST_MAP (ORDER_NO, METER_NO, VENDOR_CODE, INSTALLER_ID, ORDER_TYPE) ";
                sqlinsert = sqlinsert + "    VALUES  ('" + strOrder + "', '" + strMeterNo + "', '" + strVendorID + "', '" + strInstallerID + "', 'ZDIN') ";

                DbFunction objdbfuninsert = new DbFunction();
                return objdbfuninsert.dmlsinglequery_mobint(sqlinsert);
            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public static bool Update_PasswordData(string UserID, string OldPass, string NewPass)
        {
            try
            {
                string sqlinsert = " UPDATE MCR_LOGIN_MST SET PASSWORD='" + NewPass + "' WHERE LOGIN_ID ='" + UserID + "'";

                DbFunction objdbfuninsert = new DbFunction();
                return objdbfuninsert.dmlsinglequery_mobint(sqlinsert);
            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        /// <summary>
        /// Developed by Gourav goutam on Date 15.11.2017 guide by swati kaushik,
        /// Developed for send Alloted Seal from Oracle Database to Mobile App
        /// </summary>
        /// <param name="strVendorID"></param>
        /// <returns></returns>
        public static DataTable GetSeal_Details_AllotedFrom_Vendor(string Installer_ID)
        {
            string sql = string.Empty;
            sql = " SELECT seal, SERIAL_NO FROM MCR_SEAL_DETAILS WHERE  CONSUM_SEAL_FLAG='Y' AND ALLOTED_TO='" + Installer_ID + "' ORDER BY seal ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);

            return dt;

        }

        public static DataTable GetMeter_DT_AllotedFrom_Vnd_LoosMtr(string Installer_ID)
        {
            string sql = string.Empty;
            sql = " SELECT SERNR_SERIAL_NO seal,SERNR_SERIAL_NO  SERIAL_NO FROM MCR_LOOSE_METER_DETAILS WHERE FLAG='Y' AND ALLOCATE_TO='" + Installer_ID + "' ORDER BY SERNR_SERIAL_NO ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);

            return dt;
        }

        public static bool Update_OrderStatus(string Order_ID, string _gInstallerID)
        {
            try
            {
                string sqlinsert = " UPDATE MCR_INPUT_DETAILS SET FLAG='E', PUNCH_BY='" + _gInstallerID + "', PUNCH_DATE=sysdate WHERE ORDERID='" + Order_ID + "'";

                DbFunction objdbfuninsert = new DbFunction();
                return objdbfuninsert.dmlsinglequery_mobint(sqlinsert);
            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public static bool insert_OrderCancelDetails(string _gORDERID, string _gREASON, string _gINSTALLER_ID, string _gREMARKS, string _gImagePath,
                                                                                string strCustName, string strCustNo, string _gCustEntDateTime)
        {
            byte[] _byImg = null;
            if (_gImagePath.Trim() != "")
            {
                try
                {
                    _byImg = Convert.FromBase64String(_gImagePath);
                    _gImagePath = byteArrayToImage_MCR(_byImg, _gORDERID + "_Img_Cancel_order");
                }
                catch (Exception ex)
                {
                    NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in MCR Cancel Order" + ex.ToString());
                }
            }

            try
            {
                string sqlinsert = " INSERT INTO mcr_order_cancel(ORDERID, REASON, INSTALLER_ID, REMARKS, IMAGE_PATH, CUST_NAME, CUST_NO, CUST_ENT_DATTIME) VALUES('" + _gORDERID + "','" + _gREASON + "','" + _gINSTALLER_ID + "','" + _gREMARKS + "', '" + _gImagePath + "', '" + strCustName + "', '" + strCustNo + "','" + _gCustEntDateTime + "') ";

                DbFunction objdbfuninsert = new DbFunction();
                return objdbfuninsert.dmlsinglequery_mobint(sqlinsert);
            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }


        public static void WriteIntoFile_MCR(string _smsg)
        {
            //using (StreamWriter sw = File.AppendText(HttpContext.Current.Server.MapPath(@"~\App_Data\ApplicationLog.txt")))
            using (StreamWriter sw = File.AppendText(HttpContext.Current.Server.MapPath(@"~\App_Data\ApplicationLog" + "_" + DateTime.Now.Date.ToString("dd-MM-yyyy") + ".txt")))
            {
                sw.WriteLine(_smsg);
                sw.Close();
            }
        }

        //public static string byteArrayToImage_MCR(byte[] byteArrayIn, string filename)
        //{
        //    try
        //    {
        //        DirectoryInfo _DirInfo = new DirectoryInfo(HttpContext.Current.Server.MapPath("~/UPLOADEDIMAGES") + "\\" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString());
        //        if (_DirInfo.Exists == false)
        //            _DirInfo.Create();

        //        string _sPath = _DirInfo.FullName + "\\" + filename + ".jpeg";
        //        string _sFileNameWithoutExt = _DirInfo.FullName + "\\" + filename;
        //        int _iFileIndex = 1;
        //        while (File.Exists(_sPath))
        //        {
        //            _sPath = _sFileNameWithoutExt + "_" + _iFileIndex.ToString() + ".jpeg";
        //            _iFileIndex++;
        //        }

        //        //BinaryWriter fs = new BinaryWriter(new FileStream(_sPath, FileMode.Append, FileAccess.Write));
        //        //fs.Write(byteArrayIn);
        //        //fs.Close();
        //        File.WriteAllBytes(_sPath, byteArrayIn); 
        //        return _sPath;
        //    }
        //    catch (Exception ex)
        //    {
        //        WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
        //        return "";
        //    }
        //}

        public static string byteArrayToImage_MCR(byte[] byteArrayIn, string filename)
        {
            Utilities.Network.NetworkDrive nd = new Utilities.Network.NetworkDrive();
            string pth = string.Empty, sl = string.Empty;

            try
            {
                pth = @"\\10.125.64.236\UploadedImages";
                nd.MapNetworkDrive(@"\\10.125.64.236\UploadedImages", "Z:", "uploadimages", "Bses@123");
                sl = pth;

                string _sDir = sl + "\\MCR\\" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString();

                DirectoryInfo _DirInfo = new DirectoryInfo(_sDir);
                if (_DirInfo.Exists == false)
                    _DirInfo.Create();

                string _sPath = _DirInfo.FullName + "\\" + filename + ".jpeg";
                string _sFileNameWithoutExt = _DirInfo.FullName + "\\" + filename;
                int _iFileIndex = 1;
                while (File.Exists(_sPath))
                {
                    _sPath = "X"; // _sFileNameWithoutExt + "_" + _iFileIndex.ToString() + ".jpeg";
                    _iFileIndex++;
                }

                if (_sPath != "X")
                    File.WriteAllBytes(_sPath, byteArrayIn);

                return _sPath;
            }
            catch (Exception ex)
            {
                return "";
            }

        }

        public static string byteArrayToImage_LR(byte[] byteArrayIn, string filename)
        {
            Utilities.Network.NetworkDrive nd = new Utilities.Network.NetworkDrive();
            string pth = string.Empty, sl = string.Empty;

            try
            {
                pth = @"\\10.125.64.236\UploadedImages";
                nd.MapNetworkDrive(@"\\10.125.64.236\UploadedImages", "Z:", "uploadimages", "Bses@123");
                sl = pth;

                string _sDir = sl + "\\LR_IMAGE\\" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString();

                DirectoryInfo _DirInfo = new DirectoryInfo(_sDir);
                if (_DirInfo.Exists == false)
                    _DirInfo.Create();

                string _sPath = _DirInfo.FullName + "\\" + filename + ".jpeg";
                string _sFileNameWithoutExt = _DirInfo.FullName + "\\" + filename;
                int _iFileIndex = 1;

                while (File.Exists(_sPath))
                {
                    _sPath = _sFileNameWithoutExt + "_" + _iFileIndex.ToString() + ".jpeg";
                    _iFileIndex++;
                }

                File.WriteAllBytes(_sPath, byteArrayIn);
                return _sPath;
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return "";
            }

        }

        #endregion

        #region Recovery Services

        public static DataTable bindCategory() //15022018
        {
            string sql = "SELECT '' CATID,'-All-' CATEGORY FROM DUAL UNION SELECT UNIQUE CATID,CATEGORY FROM RECAPP_CATEGORY_MST WHERE ACTIVE = 'Y' ORDER BY CATEGORY";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_Rec(sql);
            return dt;
        }

        public static DataTable bindAmountBucket()  //28022018
        {
            string sql = "SELECT '' AMTBKTID,'-All-' AMOUNT_BUCKET,9999999999 RANGE_FROM,9999999999 RANGE_TO FROM DUAL UNION SELECT UNIQUE AMTBKTID,AMOUNT_BUCKET,RANGE_FROM,RANGE_TO FROM RECAPP_AMTBKT_MST WHERE ACTIVE = 'Y' ORDER BY RANGE_TO DESC";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_Rec(sql);
            return dt;
        }

        public static DataTable bindAgingBucket()   //15022018
        {
            string sql = "SELECT '' AGIBKTID,'-All-' AGING_BUCKET,0 RANGE_FROM,0 RANGE_TO FROM DUAL UNION SELECT UNIQUE AGIBKTID,AGING_BUCKET,RANGE_FROM,RANGE_TO FROM RECAPP_AGIBKT_MST WHERE ACTIVE = 'Y' ORDER BY RANGE_TO";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_Rec(sql);
            return dt;
        }

        public static DataTable bindAccountClass()  //15022018
        {
            string sql = "SELECT '' ACLASSID,'-All-' ACOUNT_CLASS FROM DUAL UNION SELECT UNIQUE ACLASSID,ACOUNT_CLASS FROM RECAPP_ACLASS_MST WHERE ACTIVE = 'Y' ORDER BY ACOUNT_CLASS";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_Rec(sql);
            return dt;
        }

        public static DataTable bindATRStatus() //28022018
        {
            string sql = "SELECT '00' CODE,'-ACTION TAKEN-' DESCRIPTION FROM DUAL UNION SELECT CODE,DESCRIPTION FROM DEFLTR_COR_SYS_TYPE WHERE CORETYPE = 'RECOVRY_STATUS' AND ACCOUNT_CLASS IS NULL AND ACTIVE_FLAG = 'Y' ORDER BY DESCRIPTION";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_Rec(sql);
            return dt;
        }

        public static DataTable bindAllocDefltr(string _sCategory, string _sAmtBktID, string _sAgeBktID, string _sAccountClass, string _sDishonorFlag, string _sFEID) //28022018
        {
            string sql = "SELECT A.COMPANY, A.CA_NUMBER, A.METER_NO, A.CRN_NUMBER, A.CYCLE_NO, A.ACCOUNT_CLASS, A.DIVISION, A.NAME, A.TELEPHONE_NO, A.HOUSE_NUMBER, A.STREET1, A.STREET2,";
            sql += "A.STREET3, A.POLE_NO, A.POSTAL_CODE, A.STREET, A.SEQUENCE_NUMBER, A.RATE_CATEGORY, A.BILL_STATUS, A.DISHONOR_FLAG,";
            sql += "(CASE WHEN A.LAST_PAYMENT_DT IS NULL THEN '' ELSE (A.LAST_PAYMENT_DT || ' (' || TRUNC(TRUNC(MONTHS_BETWEEN (TRUNC(SYSDATE),TO_DATE(A.LAST_PAYMENT_DT,'dd/MM/yyyy')))/12) || ' Years ' ||";
            sql += " MOD(TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), TO_DATE(A.LAST_PAYMENT_DT,'dd/MM/yyyy'))), 12) || ' Months ' ||";
            sql += " ROUND( TRUNC(SYSDATE) - ADD_MONTHS(( TO_DATE(A.LAST_PAYMENT_DT,'dd/MM/yyyy')), TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), TO_DATE(A.LAST_PAYMENT_DT,'dd/MM/yyyy')))),0) || ' Days)') END) LAST_PAYMENT_DT,";
            sql += "A.DUE_DATE, A.CONTRACT, A.MOVE_IN_DATE, A.CURRENT_DEMAND, A.LAST_PAYMENT_AMT, A.SANCTION_LOAD, A.DEFAULT_AMT, A.LPSC_AMOUNT, A.PRINCIPAL_VALUE, A.CONSUMER_STATUS,";
            sql += "A.SOFT_DISCONNECTION_DT, A.RUNNING_BAL_AS_ON_DT, A.CONNECTION_DT, A.INITIAL_BUCKET, A.NEW_OLD_FLAG, A.UPLOAD_CYCLE, A.UPDATION_ID, A.INITIAL_DEFAULT_AMT,";
            sql += "A.PAYMNT_AMT, A.PAYMNT_ENTRY_DT, A.PAYMENT_MODE,B.ASSIGN_USER_CODE ASSIGNED_FE_ID, (SELECT UNIQUE C.FE_NAME_DISP FROM DEFLTR_AGENCY_FE_MST C WHERE B.ASSIGN_USER_CODE = C.FE_ID) ASSIGNED_FE_NAME";
            sql += " FROM DEFLTR_LIST_MAIN A, DEFLTR_CA_ASSIGN_LINK_DTLS B WHERE 1=1";

            if (_sCategory != "")
            {
                if (_sCategory == "CAT0002")    //Cheque Dishonor
                    sql += " AND A.DISHONOR_FLAG = 'Y'";
                else if (_sCategory == "CAT0003")   //Never Paid
                    sql += " AND (A.LAST_PAYMENT_AMT = 0 OR LAST_PAYMENT_DT IS NULL)";
                if (_sCategory == "CAT0004")    //Chronic                
                    sql += " AND FLOOR(TO_DATE(SYSDATE) - NVL(TO_DATE(A.LAST_PAYMENT_DT,'dd/MM/yyyy'),TO_DATE(SUBSTR(A.CONNECTION_DT,0,10),'dd/MM/yyyy'))) > 180";
            }
            if (_sAmtBktID != "")
                sql += " AND A.DEFAULT_AMT BETWEEN (SELECT UNIQUE RANGE_FROM FROM RECAPP_AMTBKT_MST WHERE AMTBKTID = '" + _sAmtBktID + "') AND (SELECT UNIQUE RANGE_TO FROM RECAPP_AMTBKT_MST WHERE AMTBKTID = '" + _sAmtBktID + "')";
            if (_sAgeBktID != "")
            {
                sql += " AND FLOOR(TO_DATE('01/' ||  SUBSTR(A.UPDATION_ID,5,2) || '/' || SUBSTR(A.UPDATION_ID,0,4),'dd/MM/yyyy') - NVL(TO_DATE(A.LAST_PAYMENT_DT,'dd/MM/yyyy'),TO_DATE(SUBSTR(A.CONNECTION_DT,0,10),'dd/MM/yyyy'))) BETWEEN";
                sql += " (SELECT UNIQUE RANGE_FROM FROM RECAPP_AGIBKT_MST WHERE AGIBKTID = '" + _sAgeBktID + "') AND (SELECT UNIQUE RANGE_TO FROM RECAPP_AGIBKT_MST WHERE AGIBKTID = '" + _sAgeBktID + "')";
            }
            if (_sAccountClass != "")
                sql += " AND A.ACCOUNT_CLASS = '" + _sAccountClass + "'";
            if (_sDishonorFlag != "")
                sql += " AND A.DISHONOR_FLAG = 'X'";

            //sql += " AND A.UPDATION_ID = TO_CHAR(SYSDATE,'yyyyMM')";//ARVINDER 02072018
            sql += " AND A.UPDATION_ID = (SELECT UNIQUE TO_CHAR(MAX(TO_DATE(UPDATION_ID || '01','YYYYMMDD')),'yyyyMM') FROM DEFLTR_LIST_MAIN)";
            sql += " AND A.INITIAL_BUCKET IN ('DIV','MLCC')";

            if (_sFEID != "")
                sql += " AND UPPER(B.ASSIGN_USER_CODE) = UPPER('" + _sFEID + "')";

            sql += " AND B.STATUS IS NULL AND A.PAYMNT_AMT = 0";
            sql += " AND A.CA_NUMBER = B.CA_NUMBER AND A.UPDATION_ID = B.UPDATION_ID_DTLS AND A.INITIAL_BUCKET = B.INITIAL_BUCKET_DTLS";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_Rec(sql);
            return dt;
        }

        public static DataTable searchDefltrs(string _sCANumber, string _sMeterNumber, string _sFEID)   //28022018
        {
            string sql = "SELECT A.COMPANY, A.CA_NUMBER, A.METER_NO, A.CRN_NUMBER, A.CYCLE_NO, A.ACCOUNT_CLASS, A.DIVISION, A.NAME, A.TELEPHONE_NO, A.HOUSE_NUMBER, A.STREET1, A.STREET2,";
            sql += "A.STREET3, A.POLE_NO, A.POSTAL_CODE, A.STREET, A.SEQUENCE_NUMBER, A.RATE_CATEGORY, A.BILL_STATUS, A.DISHONOR_FLAG,";
            sql += "(CASE WHEN A.LAST_PAYMENT_DT IS NULL THEN '' ELSE (A.LAST_PAYMENT_DT || ' (' || TRUNC(TRUNC(MONTHS_BETWEEN (TRUNC(SYSDATE),TO_DATE(A.LAST_PAYMENT_DT,'dd/MM/yyyy')))/12) || ' Years ' ||";
            sql += " MOD(TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), TO_DATE(A.LAST_PAYMENT_DT,'dd/MM/yyyy'))), 12) || ' Months ' ||";
            sql += " ROUND( TRUNC(SYSDATE) - ADD_MONTHS(( TO_DATE(A.LAST_PAYMENT_DT,'dd/MM/yyyy')), TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), TO_DATE(A.LAST_PAYMENT_DT,'dd/MM/yyyy')))),0) || ' Days)') END) LAST_PAYMENT_DT,";
            sql += "A.DUE_DATE, A.CONTRACT, A.MOVE_IN_DATE, A.CURRENT_DEMAND, A.LAST_PAYMENT_AMT, A.SANCTION_LOAD, A.DEFAULT_AMT, A.LPSC_AMOUNT, A.PRINCIPAL_VALUE, A.CONSUMER_STATUS,";
            sql += "A.SOFT_DISCONNECTION_DT, A.RUNNING_BAL_AS_ON_DT, A.CONNECTION_DT, A.INITIAL_BUCKET, A.NEW_OLD_FLAG, A.UPLOAD_CYCLE, A.UPDATION_ID, A.INITIAL_DEFAULT_AMT,";
            sql += "A.PAYMNT_AMT, A.PAYMNT_ENTRY_DT, A.PAYMENT_MODE,B.ASSIGN_USER_CODE ASSIGNED_FE_ID, (SELECT UNIQUE C.FE_NAME_DISP FROM DEFLTR_AGENCY_FE_MST C WHERE B.ASSIGN_USER_CODE = C.FE_ID) ASSIGNED_FE_NAME";
            sql += " FROM DEFLTR_LIST_MAIN A, DEFLTR_CA_ASSIGN_LINK_DTLS B WHERE 1=1";
            if (_sCANumber != "")
                sql += " AND A.CA_NUMBER = '" + _sCANumber + "'";
            if (_sMeterNumber != "")
                sql += " AND A.METER_NO = '" + _sMeterNumber + "'";

            //sql += " AND A.UPDATION_ID = TO_CHAR(SYSDATE,'yyyyMM')";  //ARVINDER 02072018
            sql += " AND A.UPDATION_ID = (SELECT UNIQUE TO_CHAR(MAX(TO_DATE(UPDATION_ID || '01','YYYYMMDD')),'yyyyMM') FROM DEFLTR_LIST_MAIN)";

            sql += " AND A.INITIAL_BUCKET IN ('DIV','MLCC')";
            if (_sFEID != "")
                sql += " AND B.ASSIGN_USER_CODE = '" + _sFEID + "'";
            sql += " AND B.STATUS IS NULL AND A.PAYMNT_AMT = 0";
            sql += " AND A.CA_NUMBER = B.CA_NUMBER AND A.UPDATION_ID = B.UPDATION_ID_DTLS AND A.INITIAL_BUCKET = B.INITIAL_BUCKET_DTLS";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_Rec(sql);
            return dt;
        }

        public static DataTable getPayment(string _sCANumber, string _sMeterNumber)     //28022018
        {
            string sql = "SELECT UNIQUE PAYMNT_AMT,(CASE WHEN PAYMNT_ENTRY_DT IS NULL THEN '' ELSE TO_CHAR(PAYMNT_ENTRY_DT,'dd-Mon-yyyy') END) PAYMNT_ENTRY_DT FROM DEFLTR_LIST_MAIN A WHERE 1=1";
            if (_sCANumber != "")
                sql += " AND A.CA_NUMBER = '" + _sCANumber + "'";
            if (_sMeterNumber != "")
                sql += " AND A.METER_NO = '" + _sMeterNumber + "'";

            //sql += " AND A.UPDATION_ID = TO_CHAR(SYSDATE,'yyyyMM')";  //ARVINDER 02072018
            sql += " AND A.UPDATION_ID = (SELECT UNIQUE TO_CHAR(MAX(TO_DATE(UPDATION_ID || '01','YYYYMMDD')),'yyyyMM') FROM DEFLTR_LIST_MAIN)";

            sql += " AND A.INITIAL_BUCKET IN ('DIV','MLCC')";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_Rec(sql);
            return dt;
        }

        public static DataTable chkRecordExist(string _sCANumber, string _sFEID, string _sChkInTable)
        {
            string sql = "";

            if (_sChkInTable == "DEFLTR_ATR")
                sql = "SELECT * FROM DEFLTR_ATR WHERE CA_NUMBER = '" + _sCANumber + "' AND UPDATION_ID = TO_CHAR(SYSDATE,'yyyyMM') AND ASSIGN_USER_CODE = '" + _sFEID + "'";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_Rec(sql);
            return dt;
        }

        public static bool updateTable(string _sCANumber, string _sStatus, string _sFEID, string _sIPAddr, string _sUpdInTable, string _sTabUpdStatus, string _sRemarks,
            string _sImgFlg, string _sImg, string _sFollowDate, string _sAltContNo, string _sAltEmailID) //28022018
        {
            string sql = "";

            if (_sUpdInTable == "DEFLTR_ATR")
            {
                sql = "UPDATE DEFLTR_ATR SET STATUS = '" + _sStatus + "',TAB_UPD_DT = SYSDATE, TAB_UPD_BY = '" + _sFEID + "', TAB_IPADDR = '" + _sIPAddr + "'";
                sql += " WHERE CA_NUMBER = '" + _sCANumber + "' AND UPDATION_ID = TO_CHAR(SYSDATE,'yyyyMM') AND ASSIGN_USER_CODE = '" + _sFEID + "'";
            }
            else if (_sUpdInTable == "DEFLTR_CA_ASSIGN_LINK_DTLS")
            {
                try
                {
                    if (_sImgFlg == "Y")
                    {
                        byte[] _byImg = Convert.FromBase64String(_sImg);
                        _sImg = byteArrayToImage_Rec(_byImg, _sCANumber + DateTime.Now.ToString("yyyyMMdd"));
                    }
                }
                catch (Exception ex)
                {
                    NewClassFile newClassFile = new NewClassFile();
                    newClassFile.WriteIntoFile(DateTime.Now.ToString() + "Error in insertATR Method Image Save : " + ex.ToString());
                    return false;
                }

                sql = "UPDATE DEFLTR_CA_ASSIGN_LINK_DTLS SET STATUS = '" + _sStatus + "',TAB_UPD_DT = SYSDATE, TAB_UPD_BY = '" + _sFEID + "', TAB_IPADDR = '" + _sIPAddr + "',";
                sql += " TAB_UPD_STATUS = '" + _sTabUpdStatus + "', STATUS_REMARKS = '" + _sRemarks + "', TAB_IMAGE_FLG = '" + _sImgFlg + "', TAB_IMAGE_PATH = '" + _sImg + "',";
                sql += " FOLLOWUP_DATE = TO_DATE('" + _sFollowDate + "','dd/MM/yyyy'), ALT_CONTACTNO = '" + _sAltContNo + "', ALT_EMAILID = '" + _sAltEmailID + "'";
                sql += " WHERE CA_NUMBER = '" + _sCANumber + "' AND UPDATION_ID_DTLS = TO_CHAR(SYSDATE,'yyyyMM') AND ASSIGN_USER_CODE = '" + _sFEID + "'";
            }

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            return (objdbfun.dmlsinglequery_Rec(sql));
        }

        public static bool insertTable(string _sCANumber, string _sStatus, string _sFEID, string _sIPAddr, string _sInsInTable)
        {
            string sql = "";

            if (_sInsInTable == "DEFLTR_ATR")
            {
                sql = "INSERT INTO DEFLTR_ATR (CA_NUMBER, UPDATION_ID, ASSIGN_USER_CODE, STATUS, ASSIGN_BY, TAB_ENTRY_DATE, TAB_UPD_BY, TAB_IPADDR)";
                sql += " SELECT UNIQUE CA_NUMBER,UPDATION_ID_DTLS,ASSIGN_USER_CODE,'" + _sStatus + "' STATUS,ASSIGN_BY,SYSDATE,'" + _sFEID + "' TAB_UPD_BY,'" + _sIPAddr + "' TAB_IP";
                sql += " FROM DEFLTR_CA_ASSIGN_LINK_DTLS WHERE CA_NUMBER = '" + _sCANumber + "' AND UPDATION_ID_DTLS = TO_CHAR(SYSDATE,'yyyyMM') AND ASSIGN_USER_CODE = '" + _sFEID + "'";
            }

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            return (objdbfun.dmlsinglequery_Rec(sql));
        }

        public static DataTable getSummaryData(string _sFEID, string _sParam)   //23022018
        {
            string sql = "";

            sql = "SELECT NVL(COUNT(UNIQUE A.CA_NUMBER),0) CNT,NVL(SUM(DEFAULT_AMT),0) DEFAULT_AMT FROM DEFLTR_LIST_MAIN A,DEFLTR_CA_ASSIGN_LINK_DTLS B";
            sql += " WHERE A.ACCOUNT_CLASS IN ('SLCC','MLCC')";
            sql += " AND A.UPDATION_ID = TO_CHAR(SYSDATE,'yyyyMM')";
            sql += " AND A.INITIAL_BUCKET IN ('DIV','MLCC')";
            sql += " AND B.ASSIGN_USER_CODE = '" + _sFEID + "'";
            sql += " AND A.CA_NUMBER = B.CA_NUMBER AND A.UPDATION_ID = B.UPDATION_ID_DTLS AND A.INITIAL_BUCKET = B.INITIAL_BUCKET_DTLS";
            if (_sParam == "Payment_Received")
                sql += " AND (B.STATUS IS NOT NULL OR B.STATUS != '') AND A.PAYMNT_AMT > 0";
            else if (_sParam == "Meter_Removed")
                sql += " AND B.STATUS = '01' AND A.PAYMNT_AMT = 0";
            else if (_sParam == "Disconnection")
                sql += " AND B.STATUS = '15' AND A.PAYMNT_AMT = 0";
            else if (_sParam == "Other_ATR")
                sql += " AND B.STATUS IN ('02','03','04','05','06','07','08','09') AND A.PAYMNT_AMT = 0";
            else if (_sParam == "Pending_Cases")
                sql += " AND (B.STATUS IS NULL OR B.STATUS = '') AND A.PAYMNT_AMT = 0";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_Rec(sql);
            return dt;
        }

        public static DataTable clsLogin(string _sLogin, string _sPassword, string _sIMEINo) //28022018
        {
            string sql = "SELECT UNIQUE FE_ID LOGIN_ID, PASSWRD, FE_NAME_DISP NAME, DIV_RIGHTS DIVCODE,(SELECT UNIQUE SAP_DIVISION_NAME FROM DEFLTR_DIVISIONS_MST WHERE TO_CHAR(DIV_RIGHTS) = TO_CHAR(SDO_CD)) DIV_RIGHTS,";
            sql += "MOB_NO, FE_ADDRESS,PASSWRD FROM DEFLTR_AGENCY_FE_MST WHERE UPPER(FE_ID) = UPPER('" + _sLogin + "') AND UPPER(PASSWRD) = UPPER('" + _sPassword + "') AND FE_CRITERIA_STATUS = 'IH' AND STATUS_FLAG2 = 'Y'";
            if (_sIMEINo != "")
                sql += " AND IMEI_NO = '" + _sIMEINo + "'";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            // objdbfun.dmlgetqueryForOracle(sql);
            dt = objdbfun.dmlgetquery_Rec(sql);
            return dt;
        }

        public static bool changePassword(string _sLogin, string _sOldPassword, string _sNewPassword)   //28022018
        {
            string sql = "";

            sql = "UPDATE DEFLTR_AGENCY_FE_MST SET PASSWRD = '" + _sNewPassword + "' WHERE UPPER(FE_ID) = UPPER('" + _sLogin + "') AND UPPER(PASSWRD) = UPPER('" + _sOldPassword + "')";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            return (objdbfun.dmlsinglequery_Rec(sql));
        }

        public static bool insertLog(string _sFEID, string _sCANO, string _sMeterNo, string _sInTime, string _sOutTime, string _sNetStatus, string _sLatitude, string _sLongitude, string _sInsDate)   //15022018
        {
            string sql = "";

            sql = "INSERT INTO RECAPP_LOG (FE_ID, CA_NO, METER_NO, LOGGED_IN_TIME, LOGGED_OFF_TIME, NETWORK_STATUS, LATITUDE, LONGITUDE, INSERTED_DATE)";
            sql += " VALUES ('" + _sFEID + "','" + _sCANO + "','" + _sMeterNo + "','" + _sInTime + "','" + _sOutTime + "','" + _sNetStatus + "','" + _sLatitude + "','" + _sLongitude + "',TO_DATE('" + _sInsDate + "','dd/MM/yyyy'))";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            return (objdbfun.dmlsinglequery_Rec(sql));
        }

        public static bool insertSMS(string _sMobileNo, string _sMessage, string _sCANumber, string _sUpdationID, string _sIPAddress)   //28022018
        {
            string sql = "";

            sql = "INSERT INTO RECAPP_SMS (MOBILE_NO, MESSAGE_TXT, IP_ADDRESS, CA_NUMBER, UPDATION_ID)";
            sql += " VALUES ('" + _sMobileNo + "','" + _sMessage + "','" + _sIPAddress + "','" + _sCANumber + "','" + _sUpdationID + "')";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            return (objdbfun.dmlsinglequery_Rec(sql));
        }

        public static string byteArrayToImage_Rec(byte[] byteArrayIn, string filename) //08032018
        {
            Utilities.Network.NetworkDrive nd = new Utilities.Network.NetworkDrive();
            string pth = string.Empty, sl = string.Empty;

            try
            {
                pth = @"\\10.125.64.236\UploadedImages";
                nd.MapNetworkDrive(@"\\10.125.64.236\UploadedImages", "Z:", "uploadimages", "Bses@123");
                sl = pth;

                string _sDir = sl + "\\RECOVERY\\" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString();

                DirectoryInfo _DirInfo = new DirectoryInfo(_sDir);
                if (_DirInfo.Exists == false)
                    _DirInfo.Create();

                string _sPath = _DirInfo.FullName + "\\" + filename + ".jpeg";
                string _sFileNameWithoutExt = _DirInfo.FullName + "\\" + filename;
                int _iFileIndex = 1;
                while (File.Exists(_sPath))
                {
                    _sPath = _sFileNameWithoutExt + "_" + _iFileIndex.ToString() + ".jpeg";
                    _iFileIndex++;
                }
                File.WriteAllBytes(_sPath, byteArrayIn);

                return _sPath;
            }
            catch (Exception ex)
            {
                NewClassFile newClassFile = new NewClassFile();
                newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return "";
            }

        }

        //public static string byteArrayToImage_Rec(byte[] byteArrayIn, string filename) //08032018
        //{
        //    try
        //    {
        //        DirectoryInfo _DirInfo = new DirectoryInfo(HttpContext.Current.Server.MapPath("~/UPLOADEDIMAGESREC") + "\\" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString());
        //        if (_DirInfo.Exists == false)
        //            _DirInfo.Create();

        //        string _sPath = _DirInfo.FullName + "\\" + filename + ".jpeg";
        //        string _sFileNameWithoutExt = _DirInfo.FullName + "\\" + filename;
        //        int _iFileIndex = 1;
        //        while (File.Exists(_sPath))
        //        {
        //            _sPath = _sFileNameWithoutExt + "_" + _iFileIndex.ToString() + ".jpeg";
        //            _iFileIndex++;
        //        }

        //        //BinaryWriter fs = new BinaryWriter(new FileStream(_sPath, FileMode.Append, FileAccess.Write));
        //        //fs.Write(byteArrayIn);
        //        //fs.Close();
        //        File.WriteAllBytes(_sPath, byteArrayIn);
        //        return _sPath;
        //    }
        //    catch (Exception ex)
        //    {
        //        NewClassFile newClassFile = new NewClassFile();
        //        newClassFile.WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
        //        return "";
        //    }
        //}

        //public static DataTable getDateDiff(string _sCANumber, string _sMeterNumber, string _sFEID)   //28021018
        //{
        //    string sql = "   SELECT TRUNC(TRUNC(MONTHS_BETWEEN (TRUNC(SYSDATE),TO_DATE(LAST_PAYMENT_DT,'dd/MM/yyyy')))/12) yrs,";
        //    sql += "MOD(TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), TO_DATE(LAST_PAYMENT_DT,'dd/MM/yyyy'))), 12) mnths,";
        //    sql += "ROUND( TRUNC(SYSDATE) - ADD_MONTHS(( TO_DATE(LAST_PAYMENT_DT,'dd/MM/yyyy')), TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE), TO_DATE(LAST_PAYMENT_DT,'dd/MM/yyyy')))),0) dys";
        //    sql += " FROM DEFLTR_LIST_MAIN A, DEFLTR_CA_ASSIGN_LINK_DTLS B WHERE 1=1";
        //    if (_sCANumber != "")
        //        sql += " AND A.CA_NUMBER = '" + _sCANumber + "'";
        //    if (_sMeterNumber != "")
        //        sql += " AND A.METER_NO = '" + _sMeterNumber + "'";
        //    sql += " AND A.UPDATION_ID = TO_CHAR(SYSDATE,'yyyyMM')";
        //    sql += " AND A.INITIAL_BUCKET = 'DIV'";
        //    if (_sFEID != "")
        //        sql += " AND B.ASSIGN_USER_CODE = '" + _sFEID + "'";
        //    sql += " AND B.STATUS IS NULL AND A.PAYMNT_AMT = 0";
        //    sql += " AND A.CA_NUMBER = B.CA_NUMBER AND A.UPDATION_ID = B.UPDATION_ID_DTLS AND A.INITIAL_BUCKET = B.INITIAL_BUCKET_DTLS";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    // objdbfun.dmlgetqueryForOracle(sql);
        //    dt = objdbfun.dmlgetquery(sql);
        //    return dt;
        //}

        #endregion

        #region "ZBAPI_CNTAPP_DETAILMOB"

        public static DataTable GetTimeSlot(string strFlag)
        {
            string sql = string.Empty;

            sql = " SELECT START_TIME, START_TIME ||'--' ||FINISH_TIME SLOTTIME FROM WEB_SAP_TIME_SLOT WHERE SK_FLAG = '" + strFlag + "' ORDER BY ID ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_dcrep(sql);

            return dt;

        }

        public static DataTable GetMaxCnt_TimeSlot(string strDivsion)
        {
            string sql = string.Empty;

            sql = " SELECT APP_SLOT_CNT FROM DSS_SEVAKENDRA_MST where DISTRICT='" + strDivsion + "' AND ACTIVE='Y' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_dcrep(sql);

            return dt;

        }


        #endregion

        #region New LR

        public DataTable MobApp_Scheme_Select(string circle, string division, string subdivision, string scheme)
        {
            string sql = "";
            if (circle != "x")
                sql = sql + "  SELECT '-SELECT-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT DIVISION SCHEME_NAME FROM DIV_SCM_SDC_MST WHERE upper(CIRCLE)=upper('" + circle + "') ";
            else if (division != "x")
            {
                if (division.ToUpper() == "JAFFARPUR")
                    sql = sql + "  SELECT '-SELECT-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(DIVISION)=upper('" + division + "' ) AND UPPER(SUB_DIVISION) != 'MUNDELLA'  ";
                else
                    sql = sql + "  SELECT '-SELECT-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(DIVISION)=upper('" + division + "' )  ";
            }
            else if (subdivision != "x")
                sql = sql + "  SELECT '-SELECT-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SCHEME_NAME FROM DIV_SCM_SDC_MST WHERE upper(SUB_DIVISION)=upper('" + subdivision + "') AND ACTIVE_FLAG = 'Y'  ";
            else
                sql = sql + "  SELECT '-SELECT-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT CIRCLE SCHEME_NAME FROM DIV_SCM_SDC_MST   ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "DIV_SCHEME_VENDOR_MST";
            return dt;
        }

        #region Commented_23_07_2024_Divyesh
        //public DataTable MobApp_Scheme_Select_110524(string circle, string division, string subdivision, string scheme)
        //{
        //    string sql = "";
        //    if (circle != "x")
        //        sql = sql + "  SELECT '-SELECT-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(CIRCLE)=upper('" + circle + "') ";
        //    else if (division != "x")
        //        sql = sql + "  SELECT '-SELECT-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(DIVISION)=upper('" + division + "')  ";
        //    else if (subdivision != "x")
        //        sql = sql + "  SELECT '-SELECT-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(SUB_DIVISION)=upper('" + subdivision + "') AND ACTIVE_FLAG = 'Y'  ";
        //    else
        //        sql = sql + "  SELECT '-SELECT-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT CIRCLE SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524   ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "DIV_SCHEME_VENDOR_MST";
        //    return dt;
        //}

        #endregion

        //public DataTable MobApp_Scheme_Select_110524(string circle, string division, string subdivision, string scheme)
        //{
        //    string sql = "";
        //    if (circle != "x")
        //        sql = sql + "  SELECT '-SELECT-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(CIRCLE)=upper('" + circle + "') ";
        //    else if (division != "x")
        //    {
        //        if (division.ToUpper() == "JAFFARPUR")
        //            sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(DIVISION)=upper('" + division + "') and UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') ";
        //        else
        //            sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(DIVISION)=upper('" + division + "')  ";
        //    }
        //    else if (subdivision != "x")
        //        sql = sql + "  SELECT '-SELECT-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(SUB_DIVISION)=upper('" + subdivision + "') AND ACTIVE_FLAG = 'Y'  ";
        //    else
        //        sql = sql + "  SELECT '-SELECT-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT CIRCLE SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524   ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "DIV_SCHEME_VENDOR_MST";
        //    return dt;
        //}

        public DataTable MobApp_Scheme_Select_110524(string circle, string division, string subdivision, string scheme)
        {
            string sql = "";
            if (circle != "x")
                sql = sql + "  SELECT '-SELECT-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(CIRCLE)=upper('" + circle + "') ";
            else if (division != "x")
            {
                if (division.ToUpper() == "JAFFARPUR")
                    sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(DIVISION)=upper('" + division + "') and UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')  ";
                else if (division.ToUpper() == "MITRAON")
                    sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(DIVISION) in ('JAFFARPUR' , 'MITRAON') and UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
                else if (division.ToUpper() == "NEW FRIENDS COLONY")
                    sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(DIVISION) in ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')  ";
                else if (division.ToUpper() == "SARITA VIHAR")
                    sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(DIVISION) in ('SARITA VIHAR RURAL', 'SARITA VIHAR')  ";
                else
                    sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(DIVISION)=upper('" + division + "')  ";
            }
            else if (subdivision != "x")
                sql = sql + "  SELECT '-SELECT-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(SUB_DIVISION)=upper('" + subdivision + "') AND ACTIVE_FLAG = 'Y'  ";
            else
                sql = sql + "  SELECT '-SELECT-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT CIRCLE SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524   ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "DIV_SCHEME_VENDOR_MST";
            return dt;
        }

        public DataTable MobApp_Scheme_ALL(string circle, string division, string subdivision, string scheme)
        {
            string sql = "";
            if (circle != "x")
                sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT DIVISION SCHEME_NAME FROM DIV_SCM_SDC_MST WHERE upper(CIRCLE)=upper('" + circle + "')  ";
            else if (division != "x")
            {
                if (division.ToUpper() == "JAFFARPUR")
                    sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(DIVISION)=upper('" + division + "') and UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') ";
                else
                    sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(DIVISION)=upper('" + division + "')  ";
            }
            else if (subdivision != "x")
                sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SCHEME_NAME FROM DIV_SCM_SDC_MST WHERE upper(SUB_DIVISION)=upper('" + subdivision + "') AND ACTIVE_FLAG = 'Y'  ";
            else
                sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT CIRCLE SCHEME_NAME FROM DIV_SCM_SDC_MST   ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "DIV_SCHEME_VENDOR_MST";
            return dt;
        }

        //public static DataTable LR_ActivityModuleSchemeMIS_DIV(string strDiv, string strScheme, string strDate, string strToDate)
        //{
        //    string sql = " SELECT DIVISION, CABLE_RELATED, DB_RELATED, METER_RELATED FROM (SELECT DIV_CODE,nvl(SUM(CASE WHEN FLAG_TYPE = 'cable' THEN 1 ELSE 0 END),0) CABLE_RELATED, ";
        //    sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'pole' THEN 1 ELSE 0 END),0) DB_RELATED, ";
        //    sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'meter' THEN 1 ELSE 0 END),0) METER_RELATED ";
        //    sql += " FROM DIV_SCHEME_LR_ACTIVTY A WHERE 1 = 1 ";
        //    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy'))";
        //    sql += " AND SCHEME_NO IS NOT NULL ";
        //    sql += " GROUP BY DIV_CODE)x,  (SELECT UNIQUE DIVISION, DIVISION_ID FROM DIV_SCM_SDC_MST ) y WHERE x.DIV_CODE = y.DIVISION_ID order by DIVISION asc ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_SDIV(string strDiv, string strScheme, string strDate, string strToDate)
        //{
        //    string sql = " SELECT DIVISION, CABLE_RELATED, DB_RELATED, METER_RELATED FROM (SELECT DIV_CODE,nvl(SUM(CASE WHEN FLAG_TYPE = 'cable' THEN 1 ELSE 0 END),0) CABLE_RELATED, ";
        //    sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'pole' THEN 1 ELSE 0 END),0) DB_RELATED, ";
        //    sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'meter' THEN 1 ELSE 0 END),0) METER_RELATED ";
        //    sql += " FROM DIV_SCHEME_LR_ACTIVTY A WHERE 1 = 1 ";
        //    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy'))";
        //    sql += " AND SCHEME_NO IS NOT NULL ";
        //    sql += " GROUP BY DIV_CODE)x,  (SELECT UNIQUE DIVISION, DIVISION_ID FROM DIV_SCM_SDC_MST ) y WHERE x.DIV_CODE = y.DIVISION_ID ";
        //    sql += " AND y.DIVISION_ID = '" + strDiv + "' ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_SUBDIV(string strDiv, string strScheme, string strDate, string strToDate)
        //{
        //    string sql = " SELECT SUB_DIVISION DIVISION, CABLE_RELATED, DB_RELATED, METER_RELATED FROM (SELECT SUB_DIVISION, nvl(SUM(CASE WHEN FLAG_TYPE = 'cable' THEN 1 ELSE 0 END),0) CABLE_RELATED, ";
        //    sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'pole' THEN 1 ELSE 0 END),0) DB_RELATED, ";
        //    sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'meter' THEN 1 ELSE 0 END),0) METER_RELATED ";
        //    sql += " FROM DIV_SCHEME_LR_ACTIVTY A WHERE 1 = 1 ";
        //    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy'))";
        //    sql += " AND SUB_DIVISION IS NOT NULL ";
        //    sql += " GROUP BY SUB_DIVISION)X,  (SELECT UNIQUE SUB_DIVISION AS DIVISION,DIVISION_ID  FROM DIV_SCM_SDC_MST) y WHERE x.SUB_DIVISION = y.DIVISION ";
        //    sql += " AND y.DIVISION_ID = '" + strDiv + "' ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_SSUBDIV(string strDiv, string strScheme, string strDate, string strToDate)
        //{
        //    string sql = " SELECT SUB_DIVISION DIVISION,nvl(SUM(CASE WHEN FLAG_TYPE = 'cable' THEN 1 ELSE 0 END),0) CABLE_RELATED, ";
        //    sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'pole' THEN 1 ELSE 0 END),0) DB_RELATED, ";
        //    sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'meter' THEN 1 ELSE 0 END),0) METER_RELATED ";
        //    sql += " FROM DIV_SCHEME_LR_ACTIVTY A WHERE 1 = 1 ";
        //    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy'))";
        //    sql += " AND SUB_DIVISION IS NOT NULL ";
        //    sql += " AND UPPER(SUB_DIVISION) = UPPER('" + strDiv + "') ";
        //    sql += " GROUP BY SUB_DIVISION ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        public static DataTable LR_ActivityModuleSchemeMIS_SCHM(string strDiv, string strScheme, string strDate, string strToDate)
        {
            string SQL = " SELECT A.SCHEME_NO DIVISION,nvl(SUM(CASE WHEN FLAG_TYPE = 'cable' THEN 1 ELSE 0 END),0) CABLE_RELATED,";
            SQL += " nvl(SUM(CASE WHEN FLAG_TYPE = 'pole' THEN 1 ELSE 0 END),0) DB_RELATED,";
            SQL += " nvl(SUM(CASE WHEN FLAG_TYPE = 'meter' THEN 1 ELSE 0 END),0) METER_RELATED";
            SQL += " FROM MOBINT.DIV_SCHEME_LR_ACTIVTY A WHERE 1 = 1";
            SQL += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy'))";
            SQL += " AND SCHEME_NO IS NOT NULL";
            SQL += " AND UPPER(SUB_DIVISION) = UPPER('" + strDiv + "') ";
            SQL += " GROUP BY SCHEME_NO ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(SQL);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }

        public static DataTable LR_ActivityModuleSchemeMIS_SLCDSCHM(string strDiv, string strScheme, string strDate, string strToDate)
        {
            string SQL = " SELECT A.SCHEME_NO DIVISION,nvl(SUM(CASE WHEN FLAG_TYPE = 'cable' THEN 1 ELSE 0 END),0) CABLE_RELATED,";
            SQL += " nvl(SUM(CASE WHEN FLAG_TYPE = 'pole' THEN 1 ELSE 0 END),0) DB_RELATED,";
            SQL += " nvl(SUM(CASE WHEN FLAG_TYPE = 'meter' THEN 1 ELSE 0 END),0) METER_RELATED";
            SQL += " FROM MOBINT.DIV_SCHEME_LR_ACTIVTY A WHERE 1 = 1";
            SQL += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy'))";
            SQL += " AND SCHEME_NO='" + strDiv + "' ";
            SQL += " AND SCHEME_NO IS NOT NULL";
            SQL += " GROUP BY SCHEME_NO ";

            DataTable dt = new DataTable();

            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(SQL);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }

        //public static DataTable LR_ActivityModuleSchemeMIS_ALLC(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN (NC_ONM ='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO  AND C.STATUS_FLG='Y'  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALLC")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY CIRCLE	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN NC_BUSINESS ='N' THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO  AND C.STATUS_FLG='Y'  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY CIRCLE ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN NC_SLIGHT ='N' THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO  AND C.STATUS_FLG='Y'  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY CIRCLE ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN (NC_ENFORCEMNT ='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO  AND C.STATUS_FLG='Y'  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY CIRCLE ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN NC_MMG ='N' THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO  AND C.STATUS_FLG='Y'  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY CIRCLE	 ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  , DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO  AND C.STATUS_FLG='Y'  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";

        //        sql += " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%'  ";
        //        sql += " OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'   ";
        //        sql += " OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' ";
        //        sql += " OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'   ";
        //        sql += " OR TYPE_OF_ABNORMALITY LIKE '%Other%' OR NC_TYPE LIKE '%06%'  OR NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%' OR  ";
        //        sql += " NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') ";

        //        sql += "  GROUP BY CIRCLE ";
        //    }
        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        #region"Old Surv MIS Querry"

        //public static DataTable LR_ActivityModuleSchemeMIS_ALLC(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN (NC_ONM ='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO   ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALLC")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY CIRCLE	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN NC_BUSINESS ='N' THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY CIRCLE ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN NC_SLIGHT ='N' THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO   ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY CIRCLE ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN (NC_ENFORCEMNT ='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY CIRCLE ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN NC_MMG ='N' THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY CIRCLE	 ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  , DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";

        //        sql += " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%'  ";
        //        sql += " OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'   ";
        //        sql += " OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' ";
        //        sql += " OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'   ";
        //        sql += " OR TYPE_OF_ABNORMALITY LIKE '%Other%' OR NC_TYPE LIKE '%06%'  OR NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%' OR  ";
        //        sql += " NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') ";

        //        sql += "  GROUP BY CIRCLE ";
        //    }
        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_SLCDC(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO   ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY DIVISION ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY DIVISION ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY DIVISION ORDER BY DIVISION ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY DIVISION ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY DIVISION ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT '' X, DIVISION CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  , DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO  ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";

        //        sqlther%' ";
        //        sql += " OR NC_TYPE LIKE '%06%' OR NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%' OR ";
        //        sql += " NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%'  ";
        //        sql += " OR NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') ";

        //        sql += "  GROUP BY DIVISION ORDER BY DIVISION ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_ALLD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO   ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY DIVISION order by division	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY DIVISION order by division ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY DIVISION order by division ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY DIVISION order by division ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO   ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY DIVISION order by division ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  , DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";

        //        sqlther%'  ";
        //        sql += " OR NC_TYPE LIKE '%06%'  ";
        //        sql += " OR NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%'  ";
        //        sql += " OR NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ";
        //        sql += " OR NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%' ) ";


        //        sql += "  GROUP BY DIVISION ORDER BY DIVISION ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_SLCD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY SUB_DIVISION order by SUB_DIVISION	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO   ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  , DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";

        //        sqlther%'  ";
        //        sql += " OR NC_TYPE LIKE '%06%'  ";
        //        sql += " OR NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%'  ";
        //        sql += " OR NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ";
        //        sql += " OR NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%' ) ";

        //        sql += "  GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_SLCSD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY SUB_DIVISION order by SUB_DIVISION	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO   ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO   ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  , DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND  C.IMEI_NO=A.IMEI_NO    ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";

        //        sqlther%'   ";
        //        sql += " OR NC_TYPE LIKE '%06%'  ";
        //        sql += " OR NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%'  ";
        //        sql += " OR NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ";
        //        sql += " OR NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%' ) ";

        //        sql += "  GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        #endregion

        #region "Surv MIS Querry"


        //public static DataTable LR_ActivityModuleSchemeMIS_ALLC(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN (NC_ONM ='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B, mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID  AND  C.IMEI_NO=A.IMEI_NO  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALLC")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%'  OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY CIRCLE	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN NC_BUSINESS ='N' THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND C.IMEI_NO=A.IMEI_NO   ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY CIRCLE ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN NC_SLIGHT ='N' THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND C.IMEI_NO=A.IMEI_NO ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY CIRCLE ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN (NC_ENFORCEMNT ='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID  AND C.IMEI_NO=A.IMEI_NO";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY CIRCLE ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN NC_MMG ='N' THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND C.IMEI_NO=A.IMEI_NO   ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY CIRCLE	 ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C ";
        //        sql += "  WHERE  A.SNO_ID = B.OBSER_ID  AND C.IMEI_NO=A.IMEI_NO  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";

        //        sql += " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%'  ";
        //        sql += " OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'   ";
        //        sql += " OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' ";
        //        sql += " OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%'  OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'   ";
        //        sql += " OR TYPE_OF_ABNORMALITY LIKE '%Other%' OR NC_TYPE LIKE '%06%'  OR NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%' OR  ";
        //        sql += " NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') ";

        //        sql += "  GROUP BY CIRCLE ";
        //    }
        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_SLCDC(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND C.IMEI_NO=A.IMEI_NO   ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%'  OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY DIVISION ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY DIVISION ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID  AND C.IMEI_NO=A.IMEI_NO  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY DIVISION ORDER BY DIVISION ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID  AND C.IMEI_NO=A.IMEI_NO ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY DIVISION ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND C.IMEI_NO=A.IMEI_NO   ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY DIVISION ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT '' X, DIVISION CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C ";
        //        sql += "   WHERE  A.SNO_ID = B.OBSER_ID  AND C.IMEI_NO=A.IMEI_NO";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";

        //        sql += " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%'  OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ";
        //        sql += " OR NC_TYPE LIKE '%06%' OR NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%' OR ";
        //        sql += " NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%'  ";
        //        sql += " OR NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') ";

        //        sql += "  GROUP BY DIVISION ORDER BY DIVISION ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_ALLD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND C.IMEI_NO=A.IMEI_NO";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY DIVISION order by division	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND C.IMEI_NO=A.IMEI_NO";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY DIVISION order by division ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND C.IMEI_NO=A.IMEI_NO";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY DIVISION order by division ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID  AND C.IMEI_NO=A.IMEI_NO";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY DIVISION order by division ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID  AND C.IMEI_NO=A.IMEI_NO";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY DIVISION order by division ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C ";
        //        sql += "   WHERE  A.SNO_ID = B.OBSER_ID  AND C.IMEI_NO=A.IMEI_NO  ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%'  ";
        //        sql += " OR NC_TYPE LIKE '%06%'  ";
        //        sql += " OR NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%'  ";
        //        sql += " OR NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ";
        //        sql += " OR NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%' ) ";
        //        sql += "  GROUP BY DIVISION ORDER BY DIVISION ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_SLCD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND C.IMEI_NO=A.IMEI_NO";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%'  OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY SUB_DIVISION order by SUB_DIVISION	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID  AND C.IMEI_NO=A.IMEI_NO ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND C.IMEI_NO=A.IMEI_NO ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID  AND C.IMEI_NO=A.IMEI_NO";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID  AND C.IMEI_NO=A.IMEI_NO";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C ";
        //        sql += "   WHERE  A.SNO_ID = B.OBSER_ID AND C.IMEI_NO=A.IMEI_NO";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";

        //        sql += " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%'  OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%'  ";
        //        sql += " OR NC_TYPE LIKE '%06%'  ";
        //        sql += " OR NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%'  ";
        //        sql += " OR NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ";
        //        sql += " OR NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%' ) ";

        //        sql += "  GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_SLCSD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%'  OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY SUB_DIVISION order by SUB_DIVISION	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID AND C.IMEI_NO=A.IMEI_NO    ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID  AND C.IMEI_NO=A.IMEI_NO  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID  AND C.IMEI_NO=A.IMEI_NO  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C WHERE  A.SNO_ID = B.OBSER_ID  AND C.IMEI_NO=A.IMEI_NO  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B,mobint.DIV_SCHEME_VENDOR_USER C ";
        //        sql += "   WHERE  A.SNO_ID = B.OBSER_ID    AND C.IMEI_NO=A.IMEI_NO ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";

        //        sql += " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%'   ";
        //        sql += " OR NC_TYPE LIKE '%06%'  ";
        //        sql += " OR NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%'  ";
        //        sql += " OR NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ";
        //        sql += " OR NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%' ) ";

        //        sql += "  GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}


        //public static DataTable LR_ActivityModuleSchemeMIS_ALLC(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN (NC_ONM IN ='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALLC")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY CIRCLE	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN NC_BUSINESS ='N' THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY CIRCLE ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN NC_SLIGHT ='N' THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY CIRCLE ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN (NC_ENFORCEMNT ='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY CIRCLE ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN NC_MMG ='N' THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY CIRCLE	 ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += "  GROUP BY CIRCLE ";
        //    }
        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_SLCDC(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY DIVISION ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY DIVISION ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY DIVISION ORDER BY DIVISION ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY DIVISION ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY DIVISION ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT '' X, DIVISION CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += "  GROUP BY DIVISION ORDER BY DIVISION ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_ALLD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY DIVISION order by division	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY DIVISION order by division ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY DIVISION order by division ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY DIVISION order by division ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY DIVISION order by division ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += "  GROUP BY DIVISION ORDER BY DIVISION ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_SLCD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY SUB_DIVISION order by SUB_DIVISION	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += "  GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_SLCSD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY SUB_DIVISION order by SUB_DIVISION	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += "  GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}


        //public static DataTable LR_ActivityModuleSchemeMIS_ALLC(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT DIVISION, nvl(COUNT(*),0) Total , SUM(CASE WHEN (NC_ONM  ='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALLC")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%' ) ";
        //        sql = sql + " GROUP BY DIVISION	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT DIVISION, nvl(COUNT(*),0) Total , SUM(CASE WHEN NC_BUSINESS ='N' THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT DIVISION, nvl(COUNT(*),0) Total , SUM(CASE WHEN NC_SLIGHT ='N' THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY DIVISION ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT DIVISION, nvl(COUNT(*),0) Total , SUM(CASE WHEN (NC_ENFORCEMNT ='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) GROUP BY DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT DIVISION, nvl(COUNT(*),0) Total , SUM(CASE WHEN NC_MMG ='N' THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY DIVISION	 ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += "  GROUP BY DIVISION ";
        //    }
        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}
        ////public static DataTable LR_ActivityModuleSchemeMIS_ALLC(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN (NC_ONM IN ='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALLC")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) ";
        //        sql = sql + " GROUP BY CIRCLE	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN NC_BUSINESS ='N' THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY CIRCLE ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN NC_SLIGHT ='N' THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY CIRCLE ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN (NC_ENFORCEMNT ='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ) GROUP BY CIRCLE ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , SUM(CASE WHEN NC_MMG ='N' THEN 1 ELSE 0 END) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        //if (strDivName != "ALL")
        //        //{
        //        //    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        //}
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY CIRCLE	 ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT '' X, CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += "  GROUP BY CIRCLE ";
        //    }
        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_SLCDC(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
        //        sql = sql + " GROUP BY DIVISION ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY DIVISION ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY DIVISION ORDER BY DIVISION ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) GROUP BY DIVISION ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT '' X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY DIVISION ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT '' X, DIVISION CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += "  GROUP BY DIVISION ORDER BY DIVISION ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_ALLD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
        //        sql = sql + " GROUP BY DIVISION order by division	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY DIVISION order by division ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY DIVISION order by division ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%'  ) GROUP BY DIVISION order by division ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY DIVISION order by division ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += "  GROUP BY DIVISION ORDER BY DIVISION ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_SLCD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%' ) ";
        //        sql = sql + " GROUP BY SUB_DIVISION order by SUB_DIVISION	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += "  GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_ActivityModuleSchemeMIS_SLCSD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%' ) ";
        //        sql = sql + " GROUP BY SUB_DIVISION order by SUB_DIVISION	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%'  ) GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += "  GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        #endregion


        public static DataTable LR_QC_MIS_List_ALLC(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        {
            string sql = " SELECT A.CIRCLE_NAME SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
            sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
            sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
            sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
            sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
            if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
            {
                sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
            }
            sql = sql + " AND UPPER(A.DIVISION_NAME) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' )  ";
            sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0 GROUP BY A.CIRCLE_NAME  ";




            if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
            {
                sql = sql + " UNION  ";
                sql += " SELECT 'MITRAON' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND (UPPER(A.DIVISION_NAME) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION_NAME) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON'))  ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0   ";
                sql = sql + " UNION  ";
                sql += " SELECT 'JAFFARPUR' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION_NAME) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')   ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  ";
            }


            if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
            {
                sql = sql + " UNION  ";
                sql += " SELECT 'SARITA VIHAR' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION_NAME) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')   ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  ";
                sql = sql + " UNION  ";
                sql += " SELECT 'NEW FRIENDS COLONY' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION_NAME) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')    ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  ";
            }




            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }



        //public static DataTable LR_QC_MIS_List_ALLC(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    //string sql = " SELECT A.CIRCLE_NAME SCHEME, nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, (SELECT NVL(SUM(COUNT(OBSER_ID)),0) FROM DIV_SCHEME_QC_TYP WHERE OBSER_ID  IN (SELECT SEQ_NO FROM DIV_SCHEME_QC_TRANS WHERE CIRCLE_NAME =  A.CIRCLE_NAME AND SUB_AREA_TYP_SLCTD IS NOT NULL)  AND  (QC_PD_REL ='N') AND TRUNC(ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) GROUP BY OBSER_ID) as NC_Reported, ";
        //    //sql = sql + " (SELECT NVL(SUM(COUNT(OBSER_ID)),0) FROM DIV_SCHEME_QC_TYP WHERE OBSER_ID  IN (SELECT SEQ_NO FROM DIV_SCHEME_QC_TRANS WHERE CIRCLE_NAME =  A.CIRCLE_NAME  AND SUB_AREA_TYP_SLCTD IS NOT NULL)  AND  (QC_PD_REL ='X') AND TRUNC(ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy'))  GROUP BY OBSER_ID) NC_Cleared ";
        //    //sql = sql + " FROM DIV_SCHEME_QC_TRANS A WHERE 1=1 ";

        //    ////if (strSubDiv != "ALL")
        //    ////{
        //    ////    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
        //    ////}
        //    ////if (strDivName != "ALL")
        //    ////{
        //    ////    sql = sql + " AND UPPER(DIVISION_NAME) =UPPER('" + strDivName + "')  ";
        //    ////}

        //    //sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //    //sql = sql + "  AND  A.SUB_AREA_TYP_SLCTD IS NOT NULL GROUP BY A.CIRCLE_NAME ";

        //    string sql = " SELECT A.CIRCLE_NAME SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
        //    sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
        //    sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
        //    sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
        //    sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //    if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
        //    {
        //        sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
        //    }
        //    sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO GROUP BY A.CIRCLE_NAME  ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        public static DataTable LR_QC_MIS_List_SLCCC(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        {
            string sql = " SELECT A.CIRCLE_NAME SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
            sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
            sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
            sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
            sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";

            if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
            {
                sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
            }
            sql = sql + " AND UPPER(A.DIVISION_NAME) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' )  ";
            sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  GROUP BY A.CIRCLE_NAME  ";


            if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
            {
                sql = sql + " UNION  ";
                sql += " SELECT 'MITRAON' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND (UPPER(A.DIVISION_NAME) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION_NAME) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON'))  ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0   ";
                sql = sql + " UNION  ";
                sql += " SELECT 'JAFFARPUR' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION_NAME) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')   ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  ";
            }


            if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
            {
                sql = sql + " UNION  ";
                sql += " SELECT 'SARITA VIHAR' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION_NAME) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')   ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  ";
                sql = sql + " UNION  ";
                sql += " SELECT 'NEW FRIENDS COLONY' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION_NAME) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')    ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  ";
            }

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }



        //public static DataTable LR_QC_MIS_List_SLCCC(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    //string sql = " SELECT A.CIRCLE_NAME SCHEME, nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, (SELECT NVL(SUM(COUNT(OBSER_ID)),0) FROM DIV_SCHEME_QC_TYP WHERE OBSER_ID  IN (SELECT SEQ_NO FROM DIV_SCHEME_QC_TRANS WHERE CIRCLE_NAME =  A.CIRCLE_NAME  AND SUB_AREA_TYP_SLCTD IS NOT NULL)  AND  (QC_PD_REL ='N') AND TRUNC(ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) GROUP BY OBSER_ID) as NC_Reported, ";
        //    //sql = sql + " (SELECT NVL(SUM(COUNT(OBSER_ID)),0) FROM DIV_SCHEME_QC_TYP WHERE OBSER_ID  IN (SELECT SEQ_NO FROM DIV_SCHEME_QC_TRANS WHERE CIRCLE_NAME =  A.CIRCLE_NAME  AND SUB_AREA_TYP_SLCTD IS NOT NULL)  AND  (QC_PD_REL ='X') AND TRUNC(ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy'))  GROUP BY OBSER_ID) NC_Cleared ";
        //    //sql = sql + " FROM DIV_SCHEME_QC_TRANS A WHERE 1=1 ";
        //    //if (strSubDiv != "ALL")
        //    //{
        //    //    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
        //    //}
        //    ////if (strDivName != "ALL")
        //    ////{
        //    ////    sql = sql + " AND UPPER(DIVISION_NAME) =UPPER('" + strDivName + "')  ";
        //    ////}
        //    //sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //    //sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL  GROUP BY A.CIRCLE_NAME ";

        //    string sql = " SELECT A.CIRCLE_NAME SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
        //    sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
        //    sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
        //    sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
        //    sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";

        //    if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
        //    {
        //        sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
        //    }

        //    sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO GROUP BY A.CIRCLE_NAME  ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        //public static DataTable LR_QC_MIS_List_ALLD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    //string sql = " SELECT A.DIVISION_NAME SCHEME, nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, (SELECT NVL(SUM(COUNT(OBSER_ID)),0) FROM DIV_SCHEME_QC_TYP WHERE OBSER_ID  IN (SELECT SEQ_NO FROM DIV_SCHEME_QC_TRANS WHERE DIVISION_NAME =  A.DIVISION_NAME  AND SUB_AREA_TYP_SLCTD IS NOT NULL)  AND  (QC_PD_REL ='N') AND TRUNC(ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) GROUP BY OBSER_ID) as NC_Reported, ";
        //    //sql = sql + " (SELECT NVL(SUM(COUNT(OBSER_ID)),0) FROM DIV_SCHEME_QC_TYP WHERE OBSER_ID  IN (SELECT SEQ_NO FROM DIV_SCHEME_QC_TRANS WHERE DIVISION_NAME =  A.DIVISION_NAME  AND SUB_AREA_TYP_SLCTD IS NOT NULL)  AND  (QC_PD_REL ='X') AND TRUNC(ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy'))  GROUP BY OBSER_ID) NC_Cleared ";
        //    //sql = sql + " FROM DIV_SCHEME_QC_TRANS A WHERE 1=1 ";

        //    //if (strSubDiv != "ALL")
        //    //{
        //    //    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
        //    //}
        //    ////if (strDivName != "ALL")
        //    ////{
        //    ////    sql = sql + " AND UPPER(DIVISION_NAME) =UPPER('" + strDivName + "')  ";
        //    ////}
        //    //sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //    //sql = sql + "  AND A.SUB_AREA_TYP_SLCTD IS NOT NULL GROUP BY A.DIVISION_NAME ";

        //    string sql = " SELECT A.DIVISION_NAME SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
        //    sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
        //    sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
        //    sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
        //    sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";

        //    if (strSubDiv != "ALL")
        //    {
        //        sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
        //    }

        //    sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO GROUP BY A.DIVISION_NAME  ";


        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        public static DataTable LR_QC_MIS_List_SLCD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        {
            string sql = " SELECT A.SUB_DIVISION SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
            sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
            sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
            sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
            sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";

            if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "" && strSubDiv.ToUpper() != "-ALL-")
            {
                sql = sql + " AND UPPER(DIVISION_NAME) =UPPER('" + strSubDiv + "') ";
            }
            sql = sql + " AND UPPER(A.DIVISION_NAME) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' )  ";
            sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  GROUP BY A.SUB_DIVISION  ";

            if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
            {
                sql = sql + " UNION  ";
                sql += " SELECT 'MITRAON' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND (UPPER(A.DIVISION_NAME) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION_NAME) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON'))  ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0   ";
                sql = sql + " UNION  ";
                sql += " SELECT 'JAFFARPUR' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION_NAME) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')   ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  ";
            }

            if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
            {
                sql = sql + " UNION  ";
                sql += " SELECT 'SARITA VIHAR' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION_NAME) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')   ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  ";
                sql = sql + " UNION  ";
                sql += " SELECT 'NEW FRIENDS COLONY' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION_NAME) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')    ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  ";
            }


            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }



        //public static DataTable LR_QC_MIS_List_SLCD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    //string sql = " SELECT A.SUB_DIVISION SCHEME, nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, (SELECT NVL(SUM(COUNT(OBSER_ID)),0) FROM DIV_SCHEME_QC_TYP WHERE OBSER_ID  IN (SELECT SEQ_NO FROM DIV_SCHEME_QC_TRANS WHERE SUB_DIVISION =  A.SUB_DIVISION  AND SUB_AREA_TYP_SLCTD IS NOT NULL )  AND  (QC_PD_REL ='N') AND TRUNC(ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) GROUP BY OBSER_ID) as NC_Reported, ";
        //    //sql = sql + " (SELECT NVL(SUM(COUNT(OBSER_ID)),0) FROM DIV_SCHEME_QC_TYP WHERE OBSER_ID  IN (SELECT SEQ_NO FROM DIV_SCHEME_QC_TRANS WHERE SUB_DIVISION =  A.SUB_DIVISION  AND SUB_AREA_TYP_SLCTD IS NOT NULL)  AND  (QC_PD_REL ='X') AND TRUNC(ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy'))  GROUP BY OBSER_ID) NC_Cleared ";
        //    //sql = sql + " FROM DIV_SCHEME_QC_TRANS A WHERE 1=1 ";
        //    ////if (strSubDiv != "ALL")
        //    ////{
        //    ////    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
        //    ////}
        //    //if (strSubDiv != "ALL")
        //    //{
        //    //    sql = sql + " AND UPPER(DIVISION_NAME) =UPPER('" + strSubDiv + "')  ";
        //    //}
        //    //sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //    //sql = sql + "  AND A.SUB_AREA_TYP_SLCTD IS NOT NULL GROUP BY A.SUB_DIVISION ";

        //    string sql = " SELECT A.SUB_DIVISION SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
        //    sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
        //    sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
        //    sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
        //    sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";

        //    if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "" && strSubDiv.ToUpper() != "-ALL-")
        //    {
        //        if (strSubDiv.ToUpper() == "JAFFARPUR")
        //            sql = sql + " AND UPPER(DIVISION_NAME) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
        //        else if (strSubDiv.ToUpper() == "MITRAON")
        //            sql = sql + " AND (UPPER(DIVISION_NAME) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION_NAME) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
        //        else if (strSubDiv.ToUpper() == "SARITA VIHAR RURAL" || strSubDiv.ToUpper() == "SARITA VIHAR")
        //            sql = sql + " AND UPPER(DIVISION_NAME) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
        //        else if (strSubDiv.ToUpper() == "SARITA VIHAR URBAN" || strSubDiv.ToUpper() == "NEW FRIENDS COLONY")
        //            sql = sql + " AND (UPPER(DIVISION_NAME) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
        //        else
        //            sql = sql + " AND UPPER(DIVISION_NAME) =UPPER('" + strSubDiv + "') ";
        //    }

        //    sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO GROUP BY A.SUB_DIVISION  ";


        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        public static DataTable LR_QC_MIS_List_SLCSD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        {
            string sql = " SELECT A.SCHEME SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
            sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
            sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
            sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
            sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";

            if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
            {
                sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
            }
            sql = sql + " AND UPPER(A.DIVISION_NAME) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' )  ";
            sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0 GROUP BY A.SCHEME  ";


            if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
            {
                sql = sql + " UNION  ";
                sql += " SELECT 'MITRAON' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND (UPPER(A.DIVISION_NAME) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION_NAME) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON'))  ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0   ";
                sql = sql + " UNION  ";
                sql += " SELECT 'JAFFARPUR' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION_NAME) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')   ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  ";
            }


            if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
            {
                sql = sql + " UNION  ";
                sql += " SELECT 'SARITA VIHAR' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION_NAME) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')   ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  ";
                sql = sql + " UNION  ";
                sql += " SELECT 'NEW FRIENDS COLONY' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION_NAME) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')    ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  ";
            }

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }


        //public static DataTable LR_QC_MIS_List_SLCSD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    //string sql = " SELECT A.SCHEME SCHEME, nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, (SELECT NVL(SUM(COUNT(OBSER_ID)),0) FROM DIV_SCHEME_QC_TYP WHERE OBSER_ID  IN (SELECT SEQ_NO FROM DIV_SCHEME_QC_TRANS WHERE SCHEME =  A.SCHEME  AND SUB_AREA_TYP_SLCTD IS NOT NULL)  AND  (QC_PD_REL ='N') AND TRUNC(ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) GROUP BY OBSER_ID) as NC_Reported, ";
        //    //sql = sql + " (SELECT NVL(SUM(COUNT(OBSER_ID)),0) FROM DIV_SCHEME_QC_TYP WHERE OBSER_ID  IN (SELECT SEQ_NO FROM DIV_SCHEME_QC_TRANS WHERE SCHEME =  A.SCHEME  AND SUB_AREA_TYP_SLCTD IS NOT NULL)  AND  (QC_PD_REL ='X') AND TRUNC(ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy'))  GROUP BY OBSER_ID) NC_Cleared ";
        //    //sql = sql + " FROM DIV_SCHEME_QC_TRANS A WHERE 1=1 ";
        //    ////if (strSubDiv != "ALL")
        //    ////{
        //    ////    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
        //    ////}
        //    //if (strSubDiv != "ALL")
        //    //{
        //    //    sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "')  ";
        //    //}
        //    //sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //    //sql = sql + "  AND A.SUB_AREA_TYP_SLCTD IS NOT NULL GROUP BY A.SCHEME ";

        //    string sql = " SELECT A.SCHEME SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
        //    sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
        //    sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
        //    sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
        //    sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";

        //    if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
        //    {
        //        sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "') ";
        //    }

        //    sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO GROUP BY A.SCHEME  ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        public static DataTable LR_QC_MIS_List_SLCSCHM(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        {
            string sql = " SELECT A.SCHEME SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
            sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
            sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
            sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
            sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";

            if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
            {
                sql = sql + " AND UPPER(SCHEME) =UPPER('" + strSubDiv + "') ";
            }
            sql = sql + " AND UPPER(A.DIVISION_NAME) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' )  ";
            sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0 GROUP BY A.SCHEME  ";

            if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
            {
                sql = sql + " UNION  ";
                sql += " SELECT 'MITRAON' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND (UPPER(A.DIVISION_NAME) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION_NAME) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON'))  ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0   ";
                sql = sql + " UNION  ";
                sql += " SELECT 'JAFFARPUR' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION_NAME) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')   ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  ";
            }

            if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
            {
                sql = sql + " UNION  ";
                sql += " SELECT 'SARITA VIHAR' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION_NAME) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')   ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  ";
                sql = sql + " UNION  ";
                sql += " SELECT 'NEW FRIENDS COLONY' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION_NAME) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')    ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  ";
            }


            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }


        //public static DataTable LR_QC_MIS_List_SLCSCHM(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    //string sql = " SELECT A.SCHEME SCHEME, nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, (SELECT NVL(SUM(COUNT(OBSER_ID)),0) FROM DIV_SCHEME_QC_TYP WHERE OBSER_ID  IN (SELECT SEQ_NO FROM DIV_SCHEME_QC_TRANS WHERE SCHEME =  A.SCHEME  AND SUB_AREA_TYP_SLCTD IS NOT NULL)  AND  (QC_PD_REL ='N') AND TRUNC(ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) GROUP BY OBSER_ID) as NC_Reported, ";
        //    //sql = sql + " (SELECT NVL(SUM(COUNT(OBSER_ID)),0) FROM DIV_SCHEME_QC_TYP WHERE OBSER_ID  IN (SELECT SEQ_NO FROM DIV_SCHEME_QC_TRANS WHERE SCHEME =  A.SCHEME  AND SUB_AREA_TYP_SLCTD IS NOT NULL)  AND  (QC_PD_REL ='X') AND TRUNC(ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy'))  GROUP BY OBSER_ID) NC_Cleared ";
        //    //sql = sql + " FROM DIV_SCHEME_QC_TRANS A WHERE 1=1 ";
        //    ////if (strSubDiv != "ALL")
        //    ////{
        //    ////    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
        //    ////}
        //    //if (strSubDiv != "ALL")
        //    //{
        //    //    sql = sql + " AND UPPER(SCHEME) =UPPER('" + strSubDiv + "')  ";
        //    //}
        //    //sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //    //sql = sql + "  AND A.SUB_AREA_TYP_SLCTD IS NOT NULL GROUP BY A.SCHEME ";

        //    string sql = " SELECT A.SCHEME SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
        //    sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
        //    sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
        //    sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
        //    sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";

        //    if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
        //    {
        //        sql = sql + " AND UPPER(SCHEME) =UPPER('" + strSubDiv + "') ";
        //    }

        //    sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO GROUP BY A.SCHEME  ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}


        #endregion

        #region"OPower"

        public static DataTable GetOPower_Data(string _sCaNo)
        {
            string sql = string.Empty;
            sql = "SELECT cano FROM mobapp.SSO_SAML_BRPL WHERE cano='" + _sCaNo + "' ";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobApp(sql);

            return dt;
        }

        #endregion

        #region"Seva Kendra"

        public static DataTable get_Seva_Kendra_Login(string _User_id, string _Password, string _IMEI, string _Longitude, string _Latitude)
        {
            string sql = string.Empty;
            sql = "SELECT NAME,USER_ID,PASSWORD,ROLE_ID, COMPANY, EMP_ID, DESIGNATION, DIVISION, PHONE_NUMBER, EMAIL_ID FROM SK_LOGIN_MST WHERE UPPER(USER_ID)=UPPER('" + _User_id + "') AND PASSWORD='" + _Password + "' and ACTIVE='Y' and role_id='Seva_MA' ";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobApp(sql);

            return dt;
        }

        public static DataTable get_SevaKendra_Login_Details(string _sUser_id, string _Password)
        {
            string sql = string.Empty;
            sql = "SELECT NAME,USER_ID,PASSWORD,ROLE_ID, COMPANY, EMP_ID, DESIGNATION, DIVISION, PHONE_NUMBER, EMAIL_ID FROM SK_LOGIN_MST WHERE UPPER(USER_ID)=UPPER('" + _sUser_id + "') AND PASSWORD='" + _Password + "' and ACTIVE='Y' and role_id='Seva_MA' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobApp(sql);

            return dt;
        }

        public static bool update_Seva_User_Password(string _sUser_id, string _Password, string _New_Password)
        {
            string sql = "UPDATE SK_LOGIN_MST SET PASSWORD='" + _New_Password + "' WHERE UPPER(USER_ID)=UPPER('" + _sUser_id + "') AND PASSWORD='" + _Password + "' and ACTIVE='Y' and role_id='Seva_MA' ";

            DbFunction objdbfun = new DbFunction();
            return (objdbfun.dmlsinglequery_mobApp(sql));
        }

        public static DataTable get_SevaKendra_Order_Details(string _sUser_id, string _Division)
        {
            string sql = string.Empty;
            sql = " SELECT aufnr orderno, TITLE||' '||NAME2||' ' ||NAMEMIDDLE ||' '|| NAME1 NAME, SECONDNAME FATHERNAME, CITY_CODE CITY, POST_CODE1 PINCODE, VAPLZ DIVISION, (SELECT DESCRIPTION FROM MOBAPP.SK_REQUESTTYPE_MST WHERE CODE=ILART AND ROWNUM<2) REQ_TYPE, ZZ_RLOAD, E_MAIL EMAIL, STREET ||' ' ||HOUSE_NUM1||' ' || STR_SUPPL1|| ' '||STR_SUPPL2||' '|| STR_SUPPL3 ADDRESS, TEL_NUMBER MObileNO, a.FLAG, TO_CHAR(TO_DATE(TO_CHAR(strmn),'YYYY-MM-DD'),'dd-MM-yyyy')||' '||STRUR AppDT, TO_CHAR(TO_DATE(TO_CHAR(REstrmn),'YYYY-MM-DD'),'dd-MM-yyyy')||' '||RESTRUR REAppDT,  AUFNR, AUART, ERDAT, BUKRS, VAPLZ, KUNUM, ILART, GSTRP, GSUZP, BPKIND, TITLE, NAME_ORG1, NAME_ORG2, NAME_ORG3, NAME_ORG4, LEGAL_ENTY, NAME_LAST, NAME_FIRST, NAME_LAST2, NAMEMIDDLE, SECONDNAME, NAME1, NAME2, CITY_CODE, POST_CODE1, TEL_NUMBER, TEL_EXTENS, E_MAIL, STREET, HOUSE_NUM1, STR_SUPPL1, STR_SUPPL2, STR_SUPPL3, XDFADR, ADDRNUMBER, XSEXU, STRMN, STRUR, LTRMN, LTRUR, RUN_FOR_DATE, RUN_ON_DATE, RESTRMN, RESTRMN_DATE, ZZ_RLOAD, ZZ_RLOADKVA, ZZ_CONNTYPE, ZZ_VKONT, FECOD, RESTRUR, RELTRUR, APP_CNT ";
            sql += " FROM SAP_SEVAKENDRA a, dcrep.dss_sevakendra_mst b, SK_ALLOTTED_DTLS c  WHERE a.VAPLZ=b.DISTRICT and a.aufnr=c.order_no  ";
            sql += " and aufnr NOT IN ( SELECT order_no FROM SK_NEW_CON_REQUEST UNION SELECT order_no FROM SK_CCP_REQUEST)  ";
            sql += " and CANCEL_FLAG='Mobile' ";
            sql += " and c.engg_name='" + _sUser_id + "' ";
            sql += " AND VAPLZ in ('" + _Division + "')  ";
            sql += " union   ";
            sql += " SELECT aufnr orderno, TITLE||' '||NAME2||' ' ||NAMEMIDDLE ||' '|| NAME1 NAME, SECONDNAME FATHERNAME, CITY_CODE CITY, POST_CODE1 PINCODE, VAPLZ DIVISION, (SELECT DESCRIPTION FROM MOBAPP.SK_REQUESTTYPE_MST WHERE CODE=ILART AND ROWNUM<2) REQ_TYPE, ZZ_RLOAD, E_MAIL EMAIL, STREET ||' ' ||HOUSE_NUM1||' ' || STR_SUPPL1|| ' '||STR_SUPPL2||' '|| STR_SUPPL3 ADDRESS, TEL_NUMBER MObileNO, a.FLAG, TO_CHAR(TO_DATE(TO_CHAR(strmn),'YYYY-MM-DD'),'dd-MM-yyyy')||' '||STRUR AppDT, TO_CHAR(TO_DATE(TO_CHAR(REstrmn),'YYYY-MM-DD'),'dd-MM-yyyy')||' '||RESTRUR REAppDT,  AUFNR, AUART, ERDAT, BUKRS, VAPLZ, KUNUM, ILART, GSTRP, GSUZP, BPKIND, TITLE, NAME_ORG1, NAME_ORG2, NAME_ORG3, NAME_ORG4, LEGAL_ENTY, NAME_LAST, NAME_FIRST, NAME_LAST2, NAMEMIDDLE, SECONDNAME, NAME1, NAME2, CITY_CODE, POST_CODE1, TEL_NUMBER, TEL_EXTENS, E_MAIL, STREET, HOUSE_NUM1, STR_SUPPL1, STR_SUPPL2, STR_SUPPL3, XDFADR, ADDRNUMBER, XSEXU, STRMN, STRUR, LTRMN, LTRUR, RUN_FOR_DATE, RUN_ON_DATE, RESTRMN, RESTRMN_DATE, ZZ_RLOAD, ZZ_RLOADKVA, ZZ_CONNTYPE, ZZ_VKONT, FECOD, RESTRUR, RELTRUR, APP_CNT  ";
            sql += " FROM SAP_SEVAKENDRA a, dcrep.dss_sevakendra_mst b  WHERE a.VAPLZ=b.DISTRICT and aufnr NOT IN ( SELECT order_no FROM SK_NEW_CON_REQUEST UNION SELECT order_no FROM SK_CCP_REQUEST)   and CANCEL_FLAG='N'  and a.Ilart!='U01'  ";
            sql += " AND VAPLZ in ('" + _Division + "')  ";
            sql += " order by Appdt ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobApp(sql);

            return dt;
        }

        public static DataTable get_SevaKendra_Order_Wise_Complete_Details(string _sOrder_NO)
        {
            string sql = string.Empty;
            sql = " SELECT AUFNR, AUART, ERDAT, BUKRS, VAPLZ, KUNUM, ILART, GSTRP, GSUZP, BPKIND, TITLE, NAME_ORG1, NAME_ORG2, NAME_ORG3, NAME_ORG4, LEGAL_ENTY, NAME_LAST, NAME_FIRST, NAME_LAST2, NAMEMIDDLE, SECONDNAME, NAME1, NAME2, CITY_CODE, POST_CODE1, TEL_NUMBER, TEL_EXTENS, E_MAIL, STREET, HOUSE_NUM1, STR_SUPPL1, STR_SUPPL2, STR_SUPPL3, XDFADR, ADDRNUMBER, XSEXU, STRMN, STRUR, LTRMN, LTRUR, RUN_FOR_DATE, RUN_ON_DATE, RESTRMN, RESTRMN_DATE, ZZ_RLOAD, ZZ_RLOADKVA, ZZ_CONNTYPE, ZZ_VKONT, FECOD, RESTRUR, RELTRUR, APP_CNT FROM SAP_SEVAKENDRA  WHERE aufnr='" + _sOrder_NO + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobApp(sql);

            return dt;
        }

        public static DataTable seva_getPresonalInformation(string _gOrderNO)
        {
            string sql = "  select KUNUM, SECONDNAME, NAME_LAST, NAME_FIRST, NAME_LAST2, NAMEMIDDLE, TEL_NUMBER, E_MAIL, STREET, HOUSE_NUM1, STR_SUPPL1, STR_SUPPL2, STR_SUPPL3 from SAP_SEVAKENDRA ";
            sql += " where aufnr='" + _gOrderNO + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobApp(sql);

            return dt;
        }

        public static bool Seva_UpdateInformation(string _gOrderNO, string _gKUNUM, string _gNAME_LAST, string _gNAME_FIRST, string _gNAME_LAST2, string _gNAMEMIDDLE, string _gTEL_NUMBER, string _gE_MAIL, string _gSTREET, string _gHOUSE_NUM1, string _gSTR_SUPPL1, string _gSTR_SUPPL2, string _gSTR_SUPPL3, string _gUserID)
        {
            string sql = " insert into sk_prsnl_detail_log ";
            sql += " (order_no, kunum, NAME_LAST, NAME_FIRST, NAME_LAST2, NAMEMIDDLE, TEL_NUMBER, E_MAIL, STREET, HOUSE_NUM1, STR_SUPPL1, STR_SUPPL2, STR_SUPPL3, USER_ID, STATUS) ";
            sql += " values ";
            sql += " ('" + _gOrderNO + "','" + _gKUNUM + "','" + _gNAME_LAST + "','" + _gNAME_FIRST + "','" + _gNAME_LAST2 + "','" + _gNAMEMIDDLE + "','" + _gTEL_NUMBER + "','" + _gE_MAIL + "','" + _gSTREET + "','" + _gHOUSE_NUM1 + "','" + _gSTR_SUPPL1 + "','" + _gSTR_SUPPL2 + "','" + _gSTR_SUPPL3 + "','" + _gUserID + "', 'Update') ";

            DbFunction objdbfun = new DbFunction();
            return (objdbfun.dmlsinglequery_mobApp(sql));
        }

        public static bool Seva_UpdateIntoMSTForKYC(string _gOrderNO, string _gKUNUM, string _gTEL_NUMBER, string _gE_MAIL)
        {
            string sql = " update SAP_SEVAKENDRA ";
            sql += " set TEL_NUMBER='" + _gTEL_NUMBER + "', E_MAIL='" + _gE_MAIL + "' ";
            sql += " where aufnr='" + _gOrderNO + "' and kunum='" + _gKUNUM + "' ";

            DbFunction objdbfun = new DbFunction();
            return (objdbfun.dmlsinglequery_mobApp(sql));
        }

        public static bool Seva_UpdateSapServiceTable(string _gOrderNO, string _gStatus, string _gRemarks, string _gUserID)
        {
            string sql = " insert into SK_SAP_SERVICE_LOG (ORDER_NO, STATUS, REMARKS, USER_ID) values ('" + _gOrderNO + "', '" + _gStatus + "', '" + _gRemarks + "', '" + _gUserID + "') ";

            DbFunction objdbfun = new DbFunction();
            return (objdbfun.dmlsinglequery_mobApp(sql));
        }

        public static bool Seva_UpdateIntoMST(string _gOrderNO, string _gKUNUM, string _gNAME_LAST, string _gNAME_FIRST, string _gNAME_LAST2, string _gNAMEMIDDLE, string _gTEL_NUMBER, string _gE_MAIL, string _gSTREET, string _gHOUSE_NUM1, string _gSTR_SUPPL1, string _gSTR_SUPPL2, string _gSTR_SUPPL3)
        {
            string sql = " update SAP_SEVAKENDRA ";
            sql += " set NAME_LAST='" + _gNAME_LAST + "', NAME_FIRST='" + _gNAME_FIRST + "', NAME_LAST2='" + _gNAME_LAST2 + "', NAMEMIDDLE='" + _gNAMEMIDDLE + "', TEL_NUMBER='" + _gTEL_NUMBER + "', E_MAIL='" + _gE_MAIL + "', STREET='" + _gSTREET + "', HOUSE_NUM1='" + _gHOUSE_NUM1 + "', STR_SUPPL1='" + _gSTR_SUPPL1 + "', STR_SUPPL2='" + _gSTR_SUPPL2 + "', STR_SUPPL3='" + _gSTR_SUPPL3 + "', SECONDNAME='" + _gNAME_LAST2 + "' ";
            sql += " where aufnr='" + _gOrderNO + "' and kunum='" + _gKUNUM + "' ";

            DbFunction objdbfun = new DbFunction();
            return (objdbfun.dmlsinglequery_mobApp(sql));
        }


        public static string Seva_kendra_insertRequest(string _sOrderNo, string _sRegType, string _sFname, string _sMname, string _sLname, string _sTitle, string _sGender, string _sDOB, string _sFatherName, string _sMotherName,
    string _sFN_AS, string _sMN_AS, string _sLN_AS, string _sDesig, string _sOrgType, string _sDOI, string _sHouseNo, string _sBName, string _sStreet, string _sArea, string _sPin, string _sLandmark, string _sMobileNo, string _sPhoneNo, string _sEmail,
    string _sHouseNoPA, string _sBNamePA, string _sStreetPA, string _sAreaPA, string _sPinPA, string _sLandmarkPA, string _sMobileNoPA, string _sPhoneNoPA, string _sEmailPA,
    string _sAppliedCategory, string _sNewOrExist, string _sService_Req, string _sBillingType, string _sAreaType, string _sPremisesType, string _sPurpose, string _sMeter_Choice,
    string _sLoadType, string _sAppliedLoad, string _sAppliedVolLvl, string _sAppliedPhase, string _sPANNo, string _sAadharNo, string _sID_No,
    string _sPicName, string _sSignName, string _sFingerName, string _sCompany, string _sDOA, string _sRemark, string _sZZ_CONNTYPE) //06042017
        {
            string orcl_error = "";

            // string sql = "INSERT INTO mobapp.SK_NEW_CON_REQUEST(ORDER_NO, REGTYPE, FIRST_NAME, MIDDLE_NAME, LAST_NAME, TITLE, GENDER, DOB, FATHER_NAME, MOTHER_NAME,";
            string sql = "INSERT INTO mobapp.SK_NEW_CON_REQUEST_MOB(ORDER_NO, REGTYPE, FIRST_NAME, MIDDLE_NAME, LAST_NAME, TITLE, GENDER, DOB, FATHER_NAME, MOTHER_NAME,";
            sql += "FN_AS, MN_AS, LN_AS, DESIGNATION_AS, TYPE_ORG, DOI, HOUSE_NO, BUILDING_NAME, STREET, AREA, PIN, LANDMARK, MOBILE_NO, PHONE_NO, EMAIL,";
            sql += "HOUSE_NO_PA, BUILDING_NAME_PA, STREET_PA, AREA_PA, PIN_PA, LANDMARK_PA, MOBILE_NO_PA, PHONE_NO_PA, EMAIL_PA,";
            sql += "APPLIED_CATEGORY, NEWOREXISTING, SERVICE_REQ, BILLING_TYPE, AREA_TYPE, PREMISES_TYPE, PURPOSE, METER_CHOICE,";
            sql += "LOAD_TYPE, APPLIED_LOAD, APPLIED_VOLTAGE_LVL, APPLIED_PHASE, PAN_NO, AADHAR_NO, ID_NO,PIC_NAME, PIC_VIRTUAL_PATH, PIC_PHYSICAL_PATH, SIG_NAME, SIG_VIRTUAL_PATH, SIG_PHYSICAL_PATH,FINGER_NAME, FINGER_VIRTUAL_PATH, FINGER_PHYSICAL_PATH, COMPANY, DOA, CF_REMARK, ZZ_CONNTYPE) ";
            sql += " VALUES ('" + _sOrderNo + "','" + _sRegType + "','" + _sFname + "','" + _sMname + "','" + _sLname + "','" + _sTitle + "','" + _sGender + "',";
            if (_sDOB == "")
                sql += "'" + _sDOB + "',";
            else
                sql += "TO_DATE('" + _sDOB + "'),";
            sql += "'" + _sFatherName + "','" + _sMotherName + "','" + _sFN_AS + "','" + _sMN_AS + "','" + _sLN_AS + "',";
            sql += "'" + _sDesig + "','" + _sOrgType + "',";
            if (_sDOI == "")
                sql += "'" + _sDOI + "',";
            else
                sql += "TO_DATE('" + _sDOI + "'),";
            sql += "'" + _sHouseNo + "','" + _sBName + "','" + _sStreet + "','" + _sArea + "','" + _sPin + "','" + _sLandmark + "','" + _sMobileNo + "','" + _sPhoneNo + "','" + _sEmail + "',";
            sql += "'" + _sHouseNoPA + "','" + _sBNamePA + "','" + _sStreetPA + "','" + _sAreaPA + "','" + _sPinPA + "','" + _sLandmarkPA + "','" + _sMobileNoPA + "','" + _sPhoneNoPA + "','" + _sEmailPA + "',";
            sql += "'" + _sAppliedCategory + "','" + _sNewOrExist + "','" + _sService_Req + "','" + _sBillingType + "','" + _sAreaType + "','" + _sPremisesType + "','" + _sPurpose + "','" + _sMeter_Choice + "',";
            sql += "'" + _sLoadType + "','" + _sAppliedLoad + "','" + _sAppliedVolLvl + "','" + _sAppliedPhase + "','" + _sPANNo + "','" + _sAadharNo + "','" + _sID_No + "',";
            sql += " '" + _sPicName + "','Mobile','','" + _sSignName + "','','','" + _sFingerName + "','','', '" + _sCompany + "' ";

            if (_sDOA == "")
                sql += ", '" + _sDOA + "'";
            else
                sql += ", TO_DATE('" + _sDOA + "')";

            sql += " , '" + _sRemark + "', '" + _sZZ_CONNTYPE + "' )";

            DbFunction objdbfun = new DbFunction();

            try
            {
                orcl_error = objdbfun.dmlsinglequery_mobApp(sql).ToString();
            }
            catch (Exception ex)
            {
                orcl_error = ex.Message;
            }

            return orcl_error;
        }


        public static bool Seva_UpdateSapService(string _sOrderNO, string status, string REMARKS, string USER_ID)
        {
            string sql = " insert into sk_sap_service_log(order_no, status,  REMARKS, USER_ID) values ('" + _sOrderNO + "', '" + status + "', '" + REMARKS + "', '" + USER_ID + "')";

            DbFunction objdbfun = new DbFunction();
            return (objdbfun.dmlsinglequery_mobApp(sql));
        }


        public static bool Seva_Kendra_cancelOrderNO(string _sOrder_No, string _UserID, string _sFlag, string _sFlag1, string _sFLAG_BY1)
        {
            string sql = "update SAP_SEVAKENDRA SET CANCEL_FLAG='" + _sFlag + "', CANCEL_BY='" + _UserID + "', Flag='" + _sFlag1 + "', FLAG_BY='" + _sFLAG_BY1 + "' where AUFNR='" + _sOrder_No + "'";

            DbFunction objdbfun = new DbFunction();
            return (objdbfun.dmlsinglequery_mobApp(sql));
        }


        public static string Seva_Kendra_InsertConnctChange(string _sORDER_NO, string _sCA_NUMBER, string _sREQUEST_TYPE, string _sREGTYPE, string _sFIRST_NAME, string _sMIDDLE_NAME, string _sLAST_NAME, string _sTITLE, string _sGENDER, string _sDOB, string _sFATHER_NAME, string _sMOTHER_NAME,
                                        string _sFN_AS, string _sMN_AS, string _sLN_AS, string _sDESIGNATION_AS, string _sTYPE_ORG, string _sDOI, string _sHOUSE_NO, string _sBUILDING_NAME, string _sSTREET, string _sAREA, string _sPIN, string _sLANDMARK, string _sMOBILE_NO, string _sPHONE_NO, string _sEMAIL, string _sPAN_NO, string _sID_NO, string _sREASON_S3,
                                        string _sNAME_S3, string _sGENDER_S3, string _sDOB_S3, string _sFATHEERNAME_S3, string _sELOAD_S4, string _sRLOAD_S4, string _sMETERCHOICE_S4, string _sVLEVEL_S4, string _sPHASE_S4, string _sPURPOSE_S5, string _sDESCRIPTION_S5, string _sREASON_S6, string _sHOUSENO_S6, string _sBNAME_S6, string _sSTREET_S6,
                                        string _sAREA_S6, string _sPIN_S6, string _sLANDMARK_S6, string _sLBP_S7, string _sREASON_S8, string _sDOV_S8, string _sMODE_S8, string _sREASON_S9, string _sUPTODATE_S9, string _sAUTO_DEBIT_S10,
                                        string _sPicName, string _sPicVirtualPath, string _sPicPhyPath, string _sSignName, string _sSignVirtualPath, string _sSignPhyPath, string _sCompany, string _sDOA, string _sRemark, string strID_NAME, string strID_VIRTUAL_PATH, string strID_PHYSICAL_PATH)    //06042017
        {
            //string sql = " insert into mobapp.SK_CCP_REQUEST(ORDER_NO, CA_NUMBER, REQUEST_TYPE, REGTYPE, FIRST_NAME, MIDDLE_NAME, LAST_NAME, TITLE, GENDER, DOB, FATHER_NAME, ";
            string sql = " insert into mobapp.SK_CCP_REQUEST_MOB(ORDER_NO, CA_NUMBER, REQUEST_TYPE, REGTYPE, FIRST_NAME, MIDDLE_NAME, LAST_NAME, TITLE, GENDER, DOB, FATHER_NAME, ";
            sql += " MOTHER_NAME, FN_AS, MN_AS, LN_AS, DESIGNATION_AS, TYPE_ORG, DOI, HOUSE_NO, BUILDING_NAME, STREET, AREA, PIN, LANDMARK, MOBILE_NO, PHONE_NO, EMAIL, PAN_NO, ID_NO, REASON_S3, ";
            sql += " NAME_S3, GENDER_S3, DOB_S3, FATHEERNAME_S3, ELOAD_S4, RLOAD_S4, METERCHOICE_S4, VLEVEL_S4, PHASE_S4, PURPOSE_S5, DESCRIPTION_S5, REASON_S6, HOUSENO_S6, BNAME_S6, STREET_S6, ";
            sql += " AREA_S6, PIN_S6, LANDMARK_S6, LBP_S7, REASON_S8, DOV_S8, MODE_S8, REASON_S9, UPTODATE_S9, AUTO_DEBIT_S10,PIC_NAME, PIC_VIRTUAL_PATH, PIC_PHYSICAL_PATH, SIG_NAME, SIG_VIRTUAL_PATH, SIG_PHYSICAL_PATH, COMPANY, DOA, CF_REMARK, ID_NAME, ID_VIRTUAL_PATH, ID_PHYSICAL_PATH) ";
            sql += " values (";
            sql += " '" + _sORDER_NO + "','" + _sCA_NUMBER + "','" + _sREQUEST_TYPE + "','" + _sREGTYPE + "','" + _sFIRST_NAME + "','" + _sMIDDLE_NAME + "','" + _sLAST_NAME + "','" + _sTITLE + "','" + _sGENDER + "',";
            if (_sDOB == "")
                sql += "'" + _sDOB + "',";
            else
                sql += "TO_DATE('" + _sDOB + "'),";
            sql += "'" + _sFATHER_NAME + "','" + _sMOTHER_NAME + "', '" + _sFN_AS + "','" + _sMN_AS + "','" + _sLN_AS + "',";
            sql += " '" + _sDESIGNATION_AS + "','" + _sTYPE_ORG + "',";
            if (_sDOI == "")
                sql += "'" + _sDOI + "',";
            else
                sql += "TO_DATE('" + _sDOI + "'),";
            sql += "'" + _sHOUSE_NO + "','" + _sBUILDING_NAME + "','" + _sSTREET + "','" + _sAREA + "','" + _sPIN + "','" + _sLANDMARK + "','" + _sMOBILE_NO + "','" + _sPHONE_NO + "','" + _sEMAIL + "','" + _sPAN_NO + "','" + _sID_NO + "','" + _sREASON_S3 + "', ";
            sql += " '" + _sNAME_S3 + "','" + _sGENDER_S3 + "',";
            if (_sDOB_S3 == "")
                sql += "'" + _sDOB_S3 + "',";
            else
                sql += "TO_DATE('" + _sDOB_S3 + "'),";
            sql += "'" + _sFATHEERNAME_S3 + "','" + _sELOAD_S4 + "','" + _sRLOAD_S4 + "','" + _sMETERCHOICE_S4 + "','" + _sVLEVEL_S4 + "','" + _sPHASE_S4 + "','" + _sPURPOSE_S5 + "','" + _sDESCRIPTION_S5 + "','" + _sREASON_S6 + "','" + _sHOUSENO_S6 + "','" + _sBNAME_S6 + "','" + _sSTREET_S6 + "', ";
            sql += " '" + _sAREA_S6 + "','" + _sPIN_S6 + "','" + _sLANDMARK_S6 + "','" + _sLBP_S7 + "','" + _sREASON_S8 + "',";
            if (_sDOV_S8 == "")
                sql += "'" + _sDOV_S8 + "',";
            else
                sql += "TO_DATE('" + _sDOV_S8 + "'),";
            sql += "'" + _sMODE_S8 + "','" + _sREASON_S9 + "',";
            if (_sUPTODATE_S9 == "")
                sql += "'" + _sUPTODATE_S9 + "',";
            else
                sql += "TO_DATE('" + _sUPTODATE_S9 + "'),";
            sql += "'" + _sAUTO_DEBIT_S10 + "',";
            sql += " '" + _sPicName + "','" + _sPicVirtualPath + "','" + _sPicPhyPath + "','" + _sSignName + "','" + _sSignVirtualPath + "','" + _sSignPhyPath + "', '" + _sCompany + "' ";

            if (_sDOA == "")
                sql += ", '" + _sDOA + "'";
            else
                sql += ", TO_DATE('" + _sDOA + "')";

            sql += " , '" + _sRemark + "' , '" + strID_NAME + "', '" + strID_PHYSICAL_PATH + "', '" + strID_VIRTUAL_PATH + "')";

            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlsinglequery_mobApp(sql).ToString();
        }


        #endregion

        #region GIS

        public DataTable GetRCMSAP_DataCAWise(string _sCANumber, string strMetrNo)
        {
            string sql = " SELECT NVL('00'||CONS_REF,' ') as \"Ca_Number\",' ' as \"Bp_Number\",NVL(NAME,' ') as \"Bp_Name\",' ' as \"Bp_Type\",' ' as \"Search_Term1\",NVL(SAP_DEPARTMENT,' ') as \"Search_Term2\", SAP_ADD1 as \"House_Number\", ";
            sql = sql + " NVL(ADD1,' ') as \"House_Number_Sup\",' ' as \"Floor\",' ' as \"Premise_Type\",' ' as \"Street\",' ' as \"Street2\",NVL(ADD3,' ') as \"Street3\",' ' as \"Street4\",' ' as \"City\",' ' as \"Post_Code\",";
            sql = sql + " 'DEL' as \"Region\",'IN' as \"Country\",' ' as \"Desc_Con_Object\",NVL(SAP_DIVISION,' ') as \"Reg_Str_Group\",'0000000000' || METERNO as \"Device_Sr_Number\",";
            sql = sql + " NVL(MOBILE_NO,' ') as \"Telephone_No\",' ' as \"Mru\",' ' as \"Func_Descr\",'000000' as \"Outage_Fromtime\",'000000' as \"Outage_Totime\",' ' as \"Legacy_Acct\",";
            sql = sql + "' ' as \"Bill_Class\",' ' as \"Rate_Cat\",' ' as \"Activity\",' ' as \"Adr_Notes\",NVL(MOBILE_NO,' ') as \"Tel1_Number\",' ' as \"Vertrag\",' ' as \"E_Mail\",";
            sql = sql + "' ' as \"Move_Out_Date\",' ' as \"Con_Obj_No\",' ' as \"Clerk_Id\",' ' as \"Text\",' ' as \"Status\",' ' as \"Discreason\",' ' as \"TARIFTYP\", NVL(SANCT_LOAD,' ') as \"WERT1\",' ' as \"POLE_NO\"";
            sql = sql + " FROM SAP_SLCC_FORMY ";
            if (strMetrNo != "")
                sql = sql + " WHERE METERNO = '" + strMetrNo + "' ";
            else
                sql = sql + " WHERE CONS_REF = '" + _sCANumber + "' ";
            sql = sql + " UNION ";
            sql = sql + "SELECT NVL('00'||CONS_REF,' ') Ca_Number,' ' Bp_Number,NVL(NAME,' ') Bp_Name,' ' Bp_Type,' ' Search_Term1,NVL(SAP_DEPARTMENT,' ') Search_Term2, NVL(SAP_ADD1, ' ') House_Number,";
            sql = sql + " NVL(ADD1,' ') House_Number_Sup,' ' FLOOR,' ' Premise_Type,' ' Street,' ' Street2,NVL(ADD3,' ') Street3,' ' Street4, ";
            sql = sql + "' ' City,' ' Post_Code,'DEL' Region,'IN' Country,' ' Desc_Con_Object,NVL(SAP_DIVISION,' ') Reg_Str_Group,'0000000000' || METERNO Device_Sr_Number,";
            sql = sql + "' ' Telephone_No,' ' Mru,' ' Func_Descr,'000000' Outage_Fromtime,'000000' Outage_Totime,";
            sql = sql + "' ' Legacy_Acct,' ' Bill_Class,' ' Rate_Cat,' ' Activity,' ' Adr_Notes,' ' Tel1_Number,' ' Vertrag,' ' E_Mail,";
            sql = sql + "' ' Move_Out_Date,' ' Con_Obj_No,' ' Clerk_Id,' ' Text,' ' Status,' ' Discreason,' ' TARIFTYP, NVL(SANCT_LOAD,' ') WERT1,' ' as \"POLE_NO\"";
            sql = sql + " FROM SAP_FORMY  ";
            if (strMetrNo != "")
                sql = sql + " WHERE METERNO = '" + strMetrNo + "' ";
            else
                sql = sql + " WHERE CONS_REF = '" + _sCANumber + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_RCM(sql);
            dt.TableName = "ISUSTDTable";
            return dt;
        }

        #endregion

        #region Theft
        public static string newConnOTPRqstFrmInsert_theft(string strMobileNo, string strIMEI)
        {
            string _sSQL = "SELECT MOBILE_NO FROM TH_NW_CONN_VERIFY WHERE MOBILE_NO='" + strMobileNo + "'";
            DataTable dtReqstDT = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dtReqstDT = objdbfun.dmlgetquery_mobint(_sSQL);
            if (dtReqstDT.Rows.Count > 0)
            {
                return "DSS/APP/82|E";
            }
            else
            {
                string lblID = string.Empty;
                //Generate Request Id : SELECT SEQ_NW_CONN_VERIFY.NEXTVAL FROM DUAL
                string idSQL = "SELECT SEQ_NW_CONN_VERIFY.NEXTVAL FROM DUAL";
                DataTable dtReqstIdNo = new DataTable();
                //DbFunction objdbfun = new DbFunction();
                dtReqstIdNo = objdbfun.dmlgetquery_mobint(idSQL);
                if (dtReqstIdNo.Rows.Count > 0)
                {
                    lblID = "DSS/APP/" + dtReqstIdNo.Rows[0][0].ToString();
                }

                //Generate OTP : SELECT ROUND(dbms_random.value(1000000,9999999)) num FROM dual
                if (String.IsNullOrEmpty(lblID.Trim()))
                {
                    return "";
                }
                else
                {
                    String otpSQL = "SELECT ROUND(dbms_random.value(1000000,9999999)) num FROM dual";
                    DataTable dtotp = new DataTable();
                    objdbfun = new DbFunction();
                    dtotp = objdbfun.dmlgetquery_mobint(otpSQL);

                    otp = dtotp.Rows[0][0].ToString();

                    string insSQL = "INSERT INTO TH_NW_CONN_VERIFY (ID,OTP,MOBILE_NO, IMEI) ";
                    insSQL += "VALUES ('" + lblID.Trim() + "','" + otp.Trim() + "','" + strMobileNo.Trim() + "', '" + strIMEI + "')";

                    objdbfun = new DbFunction();
                    bool strInserted = objdbfun.dmlsinglequery_mobint(insSQL);
                    if (strInserted == true)
                    {
                        //Success : "An OTP has been sent on your entered Mobile No. for registration";                        
                        string _sMsg = "Your One Time Password for New Request Registration is " + otp + ". Do not share this OTP to anyone for security reasons, BSES shall not be responsible for any misuse.";
                        string insSQLRqst = " INSERT INTO DSS_NW_CONN_SMS_RQST (SMS_ID, COMPANY, MOBILE_NO, MESSAGE_TXT, IDENT_TYP, STATUS) VALUES ('" + lblID + "', 'BRPL', " + strMobileNo.Trim() + " , '" + _sMsg + "', 'PWTFT', 'N') ";

                        objdbfun = new DbFunction();
                        objdbfun.dmlsinglequery_dcrep(insSQLRqst);

                        return "" + lblID + "|" + otp;
                    }
                    else
                    {
                        return "";
                    }
                }

            }
        }

        public static string PowerTheft_GetPassword_Data(string strMobileNo)
        {
            string _sSQL = "SELECT OTP FROM TH_NW_CONN_VERIFY WHERE MOBILE_NO='" + strMobileNo + "'";
            DataTable dtReqstDT = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dtReqstDT = objdbfun.dmlgetquery_mobint(_sSQL);
            if (dtReqstDT.Rows.Count > 0)
            {
                return dtReqstDT.Rows[0][0].ToString();
            }
            else
            {
                return "N";
            }
        }

        public static bool SendSMS_PWTFT_HelpDeskOld(string _sMobile, string _sMess)
        {
            bool isTrue = true;
            try
            {
                //string strUrl = "http://sms6.routesms.com:8080/bulksms/bulksms?username=bsestrans1&password=bsestr12&type=0&dlr=1&destination=" + _sMobile + "&source=BSESRP&message=" + _sMess;
                string strUrl = "https://japi.instaalerts.zone/failsafe/HttpLink?aid=508443&pin=bses@56&mnumber=" + _sMobile + "&signature=BSESRP&message=" + _sMess;

                HttpWebResponse hwres = (HttpWebResponse)WebRequest.Create(strUrl.ToString()).GetResponse();
                while (hwres.StatusCode.ToString().Equals("OK") != true) { }
                if (hwres.StatusCode.ToString().Equals("OK"))
                {

                }
                hwres.Close();
            }
            catch (Exception ex)
            {
                isTrue = false;
            }

            return isTrue;
        }

        public static bool SendSMS_PWTFT_HelpDesk(string strMobileNo, string _sMess)
        {
            string lblID = string.Empty;

            string idSQL = "SELECT SEQ_NW_CONN_VERIFY.NEXTVAL FROM DUAL";
            DataTable dtReqstIdNo = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dtReqstIdNo = objdbfun.dmlgetquery_dcrep(idSQL);
            if (dtReqstIdNo.Rows.Count > 0)
            {
                lblID = "DSS/APP/" + dtReqstIdNo.Rows[0][0].ToString();
            }

            if (String.IsNullOrEmpty(lblID.Trim()))
            {
                return false;
            }
            else
            {
                string insSQLRqst = " INSERT INTO DSS_NW_CONN_SMS_RQST (SMS_ID, COMPANY, MOBILE_NO, MESSAGE_TXT, IDENT_TYP, STATUS) VALUES ('" + lblID + "', 'BRPL', " + strMobileNo.Trim() + " , '" + _sMess + "', 'PWTFT', 'N') ";

                objdbfun = new DbFunction();
                return objdbfun.dmlsinglequery_dcrep(insSQLRqst);
            }

        }

        public static bool newConnResendOTPVerifyFrmRqst_theft(string strLblID)
        {

            //Check : OTP for Lbl Id
            string sql = string.Empty;
            sql = " select MOBILE_NO, MESSAGE_TXT from TH_NW_CONN_SMS_RQST WHERE SMS_ID = '" + strLblID + "' ";

            DataTable dtReqstIdNo = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dtReqstIdNo = objdbfun.dmlgetquery_mobint(sql);
            if (dtReqstIdNo.Rows.Count > 0)
            {
                //string strUrl = "http://luna.a2wi.co.in:7501/failsafe/HttpLink?aid=508443&pin=bses@1&mnumber=" + dtReqstIdNo.Rows[0][0] + "&message=" + dtReqstIdNo.Rows[0][1];

                //WebRequest request = HttpWebRequest.Create(strUrl);
                //HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                //Stream s = (Stream)response.GetResponseStream();
                //StreamReader readStream = new StreamReader(s);
                string dataString = "";//readStream.ReadToEnd();
                //response.Close();
                //s.Close();
                //readStream.Close();
                return true;
            }
            else
                return false;
        }

        public static string newConnOTPVerifyFrmRqst_theft(string strOTP, string strLblID)
        {

            //Check : OTP for Lbl Id
            string sql = string.Empty;
            sql = " SELECT * FROM th_NW_CONN_VERIFY WHERE OTP ='" + strOTP + "' AND ID='" + strLblID + "' ";

            DataTable dtReqstIdNo = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dtReqstIdNo = objdbfun.dmlgetquery_mobint(sql);
            if (dtReqstIdNo.Rows.Count > 0)
            {
                sql = string.Empty;
                sql = "UPDATE th_NW_CONN_VERIFY SET USER_VERIFIED = 'Y', user_id='" + dtReqstIdNo.Rows[0]["MOBILE_NO"].ToString().Substring(5) + "', PASSWORD='12345678' WHERE ID = '" + strLblID + "'";
                objdbfun = new DbFunction();
                objdbfun.dmlsinglequery_mobint(sql);
                return "true|" + dtReqstIdNo.Rows[0]["MOBILE_NO"].ToString().Substring(5) + "|12345678";
            }
            else
                return "false";
        }

        public static DataTable clsLogin_theft(string _sLogin, string _sPassword, string _sIMEINo)
        {
            //string sql = "SELECT USER_ID, NAME || ' '|| LAST_NAME NAME, IMEI, MOBILE_NO, ROLE_ID, PASSWORD FROM TH_NW_CONN_VERIFY WHERE USER_ID='" + _sLogin + "' AND PASSWORD='" + _sPassword + "' AND USER_VERIFIED='Y'";
            string sql = "SELECT ID USER_ID, NAME || ' '|| LAST_NAME NAME, IMEI, MOBILE_NO, ROLE_ID, PASSWORD,OTH_DEPT LOGIN_TYPE,ROLE_ID FROM TH_NW_CONN_VERIFY WHERE MOBILE_NO='" + _sLogin + "' ";

            if ((_sPassword != "") && (_sPassword != "9999"))
                sql += " AND OTP='" + _sPassword + "' ";

            if (_sIMEINo != "")
                sql += " AND IMEI = '" + _sIMEINo + "'";


            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            return dt;
        }

        public static string insert_theft_details(string _sDivision, string _sMeter_No, string _sAddress, string _sLandmark, string _sLoad_Range, string _sRemarks, string _sLatitude, string _sLongitude, string _sUser_ID)
        {
            DbFunction objdbfun = new DbFunction();
            string sqlRefID = "SELECT SEQ_theft_detail_ref_id.NEXTVAL FROM DUAL";
            DataTable dt = objdbfun.dmlgetquery_mobint(sqlRefID);
            if (dt.Rows.Count > 0)
            {
                string _refID = DateTime.Now.ToString("yyyyMMdd") + dt.Rows[0][0].ToString();
                string sql = " insert into th_details (REF_ID, DIVISION, METER_NO, ADDRESS, LANDMARK, LOAD_RANGE, REMARKS, LATITUDE, LONGITUDE, USER_ID) ";
                sql += " values('" + _refID + "','" + _sDivision + "','" + _sMeter_No + "','" + _sAddress + "','" + _sLandmark + "','" + _sLoad_Range + "','" + _sRemarks + "','" + _sLatitude + "','" + _sLongitude + "','" + _sUser_ID + "')";

                objdbfun.dmlsinglequery_mobint(sql);
                return _refID;
            }
            else
                return "";
        }

        public static string Insert_PTheft_Details(string strObervType, string strCircle, string strDivision, string strDivCode, string strMeterNo, string strCA_No,
                                    string strName, string strSiteAddress, string strLandMark, string strAddress, string strLoadRange, string strRemark,
                                    string strLatitude, string strLongitude, string strUserID, string strIMEINo)
        {

            DbFunction objdbfun = new DbFunction();
            string sqlRefID = "SELECT SEQ_theft_detail_ref_id.NEXTVAL FROM DUAL";
            DataTable dt = objdbfun.dmlgetquery_mobint(sqlRefID);
            if (dt.Rows.Count > 0)
            {
                //string _RefSNOID = DateTime.Now.ToString("yyyyMMdd") + dt.Rows[0][0].ToString();
                string _RefSNOID = "PT" + dt.Rows[0][0].ToString();

                strName = strName.Replace("'", "''");
                strSiteAddress = strSiteAddress.Replace("'", "''");
                strLandMark = strLandMark.Replace("'", "''");
                strAddress = strAddress.Replace("'", "''");
                strRemark = strRemark.Replace("'", "''");

                try
                {
                    string sqlinsert = " INSERT INTO TH_DETAILS (SNO_ID, OBSERVATION_TYPE, CIRCLE, DIVISION,DIV_CODE, METER_NO, CA_NUMBER, NAME,  SITE_ADDRESS,   ";
                    sqlinsert = sqlinsert + "    LANDMARK,ADDRESS, LOAD_RANGE, REMARKS, LATITUDE, LONGITUDE, USER_ID,IMEI_NO) ";

                    sqlinsert = sqlinsert + " VALUES('" + _RefSNOID + "','" + strObervType.ToString().Trim() + "','" + strCircle.ToString().Trim() + "','" + strDivision.ToString().Trim() + "', ";
                    sqlinsert = sqlinsert + "  '" + strDivCode.ToString().Trim() + "','" + strMeterNo.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + "  '" + strCA_No.ToString().Trim() + "','" + strName.ToString().Trim() + "','" + strSiteAddress.ToString().Trim() + "',";
                    sqlinsert = sqlinsert + "  '" + strLandMark.ToString().Trim() + "','" + strAddress + "','" + strLoadRange.ToString().Trim() + "','" + strRemark.ToString() + "', ";
                    sqlinsert = sqlinsert + " '" + strLatitude.ToString().Trim() + "','" + strLongitude.ToString().Trim() + "','" + strUserID.ToString().Trim() + "','" + strIMEINo.ToString() + "')";

                    DbFunction objdbfunsqlinsert = new DbFunction();
                    objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert);
                    return _RefSNOID;
                }
                catch (Exception ex)
                {
                    NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                    return "0";
                }
            }
            else
                return "0";

        }

        public static bool ResetPassword_PTheft(string strMobile, string strPws, string strOldPws)
        {

            try
            {
                string sqlinsert = " UPDATE TH_NW_CONN_VERIFY SET OTP='" + strPws + "',OTH_DEPT ='PWS' WHERE MOBILE_NO='" + strMobile + "' AND  OTP='" + strOldPws + "' ";

                DbFunction objdbfunsqlinsert = new DbFunction();

                if (objdbfunsqlinsert.dmlsinglequery_mobintUpdate(sqlinsert) > 0)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }

        }

        public static bool Insert_PTheft_Image(string strSNO, string strPtheftImage)
        {
            try
            {
                byte[] _byImg = null;
                string _strPtheftImage = string.Empty;

                if (strPtheftImage.Trim() != "")
                {
                    try
                    {
                        _byImg = Convert.FromBase64String(strPtheftImage);
                        strPtheftImage = byteArrayToImage_PTheft(_byImg, strSNO + "_A");
                    }
                    catch (Exception ex)
                    {
                        NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in Power Theft image" + ex.ToString());
                    }
                }

                try
                {
                    string sqlinsert = "UPDATE TH_DETAILS SET DOC_NAME='" + strSNO + "_A', DOC_ADDRESS='" + strPtheftImage + "' WHERE SNO_ID='" + strSNO + "'";

                    DbFunction objdbfuninsert = new DbFunction();
                    return objdbfuninsert.dmlsinglequery_mobint(sqlinsert);
                }
                catch (Exception ex)
                {
                    NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                    return false;
                }
            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public static string byteArrayToImage_PTheft(byte[] byteArrayIn, string filename) //22012015
        {
            Utilities.Network.NetworkDrive nd = new Utilities.Network.NetworkDrive();
            string pth = string.Empty, sl = string.Empty;

            try
            {
                pth = @"\\10.125.64.236\UploadedImages";
                nd.MapNetworkDrive(@"\\10.125.64.236\UploadedImages", "Z:", "uploadimages", "Bses@123");
                sl = pth;

                string _sDir = sl + "\\POWER_THEFT\\" + DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString();

                DirectoryInfo _DirInfo = new DirectoryInfo(_sDir);
                if (_DirInfo.Exists == false)
                    _DirInfo.Create();

                string _sPath = _DirInfo.FullName + "\\" + filename + ".jpeg";
                string _sFileNameWithoutExt = _DirInfo.FullName + "\\" + filename;
                int _iFileIndex = 1;
                while (File.Exists(_sPath))
                {
                    _sPath = _sFileNameWithoutExt + "_" + _iFileIndex.ToString() + ".jpeg";
                    _iFileIndex++;
                }

                File.WriteAllBytes(_sPath, byteArrayIn);
                return _sPath;
            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return "";
            }


        }

        public static string InsertUpdate_PTheft_User(string _sIMEI, string _sMobileNo, string _sName, string _sDOB, string _sDepartment, string _sOtherDepart)
        {
            DbFunction objdbfun = new DbFunction();
            string _sPassword = "";

            string sqlRefID = "SELECT MOBILE_NO FROM TH_NW_CONN_VERIFY WHERE MOBILE_NO='" + _sMobileNo + "'";

            DataTable dt = objdbfun.dmlgetquery_mobint(sqlRefID);
            if (dt.Rows.Count > 0)
            {
                _sPassword = "I" + _sIMEI.Substring(0, 3) + "_M" + _sMobileNo.Substring(0, 4);
                string sql = " UPDATE TH_NW_CONN_VERIFY SET  ID='" + _sMobileNo + "', PASSWORD='" + _sPassword + "', NAME='" + _sName + "', USER_ID='" + _sMobileNo + "', IMEI='" + _sIMEI + "',DEPARTMENT='" + _sDepartment + "',OTH_DEPT='" + _sOtherDepart + "' ";
                sql += " WHERE MOBILE_NO='" + _sMobileNo + "' ";

                objdbfun.dmlsinglequery_mobint(sql);
                return _sPassword;

            }
            else
            {
                _sPassword = "I" + _sIMEI.Substring(0, 3) + "_M" + _sMobileNo.Substring(0, 4);
                string sql = " INSERT INTO TH_NW_CONN_VERIFY(ID, MOBILE_NO, PASSWORD, USER_VERIFIED, NAME, USER_ID, IMEI, ROLE_ID, DEPARTMENT, OTH_DEPT) ";
                sql += " values('" + _sMobileNo + "','" + _sMobileNo + "','" + _sPassword + "','Y','" + _sName + "','" + _sMobileNo + "','" + _sIMEI + "','USER','" + _sDepartment + "','" + _sOtherDepart + "')";

                objdbfun.dmlsinglequery_mobint(sql);
                return _sPassword;
            }

        }

        public static DataTable Login_PowerTheft(string _sLogin, string _sPassword, string _sIMEINo)
        {
            string sql = "SELECT USER_ID, NAME, IMEI, MOBILE_NO, ROLE_ID, PASSWORD,DEPARTMENT, OTH_DEPT FROM TH_NW_CONN_VERIFY WHERE USER_ID='" + _sLogin + "' AND PASSWORD='" + _sPassword + "' AND USER_VERIFIED='Y'";
            if (_sIMEINo != "")
                sql += " AND IMEI = '" + _sIMEINo + "'";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            return dt;
        }

        public DataTable GetPT_Division_Master(string _sCircle)
        {
            string sql = " SELECT '0' DIVISION, '-ALL-' DIVISION_DESC FROM DUAL UNION ";
            sql += " SELECT DISTINCT DIVISION,DIVISION_DESC FROM MOBINT.ENFORCEMENT_SUBDIVISION_MST ";

            if (_sCircle != "")
                sql += " WHERE CIRCLE ='" + _sCircle + "' ";

            sql += " ORDER BY DIVISION_DESC ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "ENFORCEMENT_SUBDIVISION_MST";
            return dt;
        }

        public DataTable GetPT_Circle_DivWise(string _sDivCode)
        {
            string sql = "  SELECT DISTINCT CIRCLE FROM ENFORCEMENT_SUBDIVISION_MST WHERE DIVISION='" + _sDivCode + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "ENFORCEMENT_SUBDIVISION_MST";
            return dt;
        }

        public DataTable GetMeter_CANo_Duplicate(string _sMeterNo, string _sCANO)
        {
            string sql = string.Empty;
            if (_sMeterNo != "")
                sql = "  SELECT METER_NO FROM TH_DETAILS WHERE METER_NO='" + _sMeterNo + "'";
            else
                sql = "  SELECT CA_NUMBER FROM TH_DETAILS WHERE CA_NUMBER='" + _sCANO + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "TH_DETAILS";
            return dt;
        }
        public DataTable MIS_REPORT(string Fromdate, string Todate, string UserID)
        {

            string sql = " select M.OBSERVATION_ID, M.LEAD_ID,M.LEAD_STATUS, M.NET_AMT, CASE WHEN R.REWARD_REDEMPTION_STATUS='Y' THEN 'REDEEMED' ELSE 'PENDING' END REWARDS_REDEMPTION_STATUS,TO_CHAR(ENTRY_DATE,'dd/mm/yyyy')ENTRY_DT ,REWARD_POINTS_EARNED FROM ENFORCEMENT_LEAD_MST M,TH_DETAILS T , ENFORCEMENT_LEAD_REDEMPTION R ";
            sql += " WHERE M.OBSERVATION_ID=T.SNO_ID   AND M.OBSERVATION_ID=R.OBSERVATION_ID ";

            if (UserID != "")
                sql += " AND T.USER_ID='" + UserID + "'";

            sql += " AND TRUNC(M.MACHINE_ENTRY_DT) BETWEEN TRUNC(TO_DATE('" + Fromdate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + Todate + "','dd/mm/yyyy'))";

            sql += " UNION ALL ";

            sql += "  SELECT SNO_ID,'' LEAD_ID,'LEAD GENERATED' LEAD_STATUS,'' NET_AMT,'' REWARDS_REDEMPTION_STATUS,TO_CHAR(ENTRY_DATE,'dd/mm/yyyy')ENTRY_DT ,'' REWARD_POINTS_EARNED FROM TH_DETAILS ";
            sql += "  WHERE  SNO_ID NOT IN (SELECT OBSERVATION_ID FROM  ENFORCEMENT_LEAD_MST) ";
            if (UserID != "")
                sql += " AND USER_ID='" + UserID + "'";

            sql += "  AND TRUNC(ENTRY_DATE)  BETWEEN TRUNC(TO_DATE('" + Fromdate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + Todate + "','dd/mm/yyyy'))";


            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "ENFORCEMENT_LEAD_MST";
            return dt;
        }
        public DataTable THEFT_MISREPORT(string Fromdate, string Todate, string strDiv, string strCircle)
        {
            string sql = string.Empty;

            if (strDiv.ToUpper() != "-ALL-" && strCircle.ToUpper() != "-ALL-")
            {
                strDiv = strDiv.Replace(",", "','");
                sql = "SELECT ";
                sql += " CIRCLE, OBSERVATION_ID, ";
                sql += " LEAD_ID,CASE_ID,'NO' NO_THEFT_FOUND,M.LEAD_STATUS FROM ENFORCEMENT_LEAD_MST M , TH_DETAILS T WHERE M.OBSERVATION_ID=T.SNO_ID AND TRUNC(MACHINE_ENTRY_DT) BETWEEN";
                sql += " TRUNC(TO_DATE('" + Fromdate + "', 'dd/mm/yyyy')) AND TRUNC(TO_DATE('" + Todate + "','dd/mm/yyyy')) and DIV_CODE in ('" + strDiv + "')";

                sql += "  UNION  ";
                sql += "   SELECT CIRCLE,SNO_ID,'' LEAD_ID,'' CASE_ID,'NO' NO_THEFT_FOUND,'REQ GENERATE' LEAD_STATUS FROM TH_DETAILS  ";
                sql += "  WHERE  SNO_ID NOT IN (SELECT OBSERVATION_ID FROM  ENFORCEMENT_LEAD_MST)  ";
                sql += " AND TRUNC(ENTRY_DATE)  BETWEEN TRUNC(TO_DATE('" + Fromdate + "', 'dd/mm/yyyy')) AND TRUNC(TO_DATE('" + Todate + "', 'dd/mm/yyyy'))  and DIV_CODE in ('" + strDiv + "') ";
            }
            else
            {
                sql = "SELECT ";
                sql += " CIRCLE, OBSERVATION_ID, ";
                sql += " LEAD_ID,CASE_ID,'NO' NO_THEFT_FOUND,M.LEAD_STATUS FROM ENFORCEMENT_LEAD_MST M, TH_DETAILS T WHERE M.OBSERVATION_ID=T.SNO_ID AND TRUNC(MACHINE_ENTRY_DT) BETWEEN";
                sql += " TRUNC(TO_DATE('" + Fromdate + "', 'dd/mm/yyyy')) AND TRUNC(TO_DATE('" + Todate + "','dd/mm/yyyy')) ";

                sql += "  UNION  ";
                sql += "   SELECT CIRCLE,SNO_ID,'' LEAD_ID,'' CASE_ID,'NO' NO_THEFT_FOUND,'REQ GENERATE' LEAD_STATUS FROM TH_DETAILS  ";
                sql += "  WHERE  SNO_ID NOT IN (SELECT OBSERVATION_ID FROM  ENFORCEMENT_LEAD_MST)  ";
                sql += " AND TRUNC(ENTRY_DATE)  BETWEEN TRUNC(TO_DATE('" + Fromdate + "', 'dd/mm/yyyy')) AND TRUNC(TO_DATE('" + Todate + "', 'dd/mm/yyyy')) ";
            }

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "ENFORCEMENT_LEAD_MST";
            return dt;
        }

        public DataTable THEFT_MISREPORT_Summary(string Fromdate, string Todate, string strDiv, string strCircle)
        {
            string sql = " SELECT CIRCLE, t.DIVISION, M.LEAD_STATUS ,COUNT(*) CNT FROM ENFORCEMENT_LEAD_MST M, TH_DETAILS T  ";
            sql += "   WHERE TRUNC(MACHINE_ENTRY_DT) BETWEEN TRUNC(TO_DATE('" + Fromdate + "', 'dd/mm/yyyy')) AND TRUNC(TO_DATE('" + Todate + "','dd/mm/yyyy')) ";
            sql += "   AND T.SNO_ID = M.OBSERVATION_ID ";

            if (strDiv.ToUpper() != "-ALL-" && strCircle.ToUpper() != "-ALL-")
            {
                sql += " and UPPER(t.DIVISION) in ('" + strDiv + "')";
            }

            sql += "     GROUP BY  CIRCLE,T.DIVISION,M.LEAD_STATUS  ORDER BY CIRCLE,T.DIVISION,M.LEAD_STATUS ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "ENFORCEMENT_LEAD_MST";
            return dt;
        }

        public DataTable THEFT_MISREPORT_Summary_Data(string Fromdate, string Todate, string strDiv, string strCircle)
        {
            //string sql = "  SELECT (CASE WHEN SUBSTR( t.DIV_CODE,0,1)='S' THEN 'SOUTH' ELSE 'WEST' END) Circle,  t.DIV_CODE DIVISION, COUNT(t.sno_id) Leads_Reported, ";
            //sql += "     (SUM(CASE WHEN UPPER(m.LEAD_STATUS)=UPPER('DROPPED') THEN 1 ELSE 0 END) +  ";
            //sql += "         SUM(CASE WHEN UPPER(m.LEAD_STATUS)=UPPER('BILLED') THEN 1 ELSE 0 END)) Case_Booked, ";
            //sql += "      SUM(CASE WHEN UPPER(m.LEAD_STATUS)=UPPER('DROPPED') THEN 1 ELSE 0 END) No_Theft_Found, ";
            //sql += "       SUM(CASE WHEN UPPER(m.LEAD_STATUS)=UPPER('BILLED') THEN 1 ELSE 0 END) Bill_Generated, ";
            //sql += "       SUM(CASE WHEN UPPER(m.LEAD_STATUS)=UPPER('Pending for analytical') THEN 1 ELSE 0 END) Pending_Lead ";
            //sql += "      FROM ENFORCEMENT_LEAD_MST M ,TH_DETAILS T    ";                        
            //sql += "    WHERE    TRUNC(t.ENTRY_DATE)  BETWEEN TRUNC(TO_DATE('" + Fromdate + "', 'dd/mm/yyyy')) AND TRUNC(TO_DATE('" + Todate + "','dd/mm/yyyy')) ";

            //if (strDiv.ToUpper() != "-ALL-" && strCircle.ToUpper() != "-ALL-")
            //{
            //    sql += " and UPPER(t.DIV_CODE) in ('" + strDiv + "')";
            //}

            //sql += "       AND t.DIV_CODE=M.DIVISION(+)   GROUP BY t.DIV_CODE ";

            string sql = "SELECT '0' SNO, (CASE WHEN SUBSTR(DIVISION,0,1)='S' THEN 'SOUTH' ELSE 'WEST' END) Circle, DIVISION, ";
            sql += "   (SELECT COUNT(1) FROM   TH_DETAILS T WHERE ";
            sql += "   TRUNC(ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + Fromdate + "', 'dd/mm/yyyy')) AND TRUNC(TO_DATE('" + Todate + "','dd/mm/yyyy')) ";
            sql += "   AND DIV_CODE=M.DIVISION)Leads_Reported, ";
            sql += "  (SUM(CASE WHEN UPPER(LEAD_STATUS)=UPPER('DROPPED') THEN 1 ELSE 0 END) +    SUM(CASE WHEN UPPER(LEAD_STATUS)=UPPER('BILLED') THEN 1 ELSE 0 END)) Case_Booked, ";
            sql += "   SUM(CASE WHEN UPPER(LEAD_STATUS)=UPPER('DROPPED') THEN 1 ELSE 0 END) No_Theft_Found, ";
            sql += "   SUM(CASE WHEN UPPER(LEAD_STATUS)=UPPER('BILLED') THEN 1 ELSE 0 END) Bill_Generated, ";
            sql += "  SUM(CASE WHEN UPPER(LEAD_STATUS)=UPPER('Pending for analytical') THEN 1 ELSE 0 END) Pending_Lead   FROM ENFORCEMENT_LEAD_MST M ";
            sql += "   WHERE TRUNC(MACHINE_ENTRY_DT) BETWEEN TRUNC(TO_DATE('" + Fromdate + "', 'dd/mm/yyyy')) AND TRUNC(TO_DATE('" + Todate + "','dd/mm/yyyy')) ";

            if (strDiv.ToUpper() != "-ALL-" && strCircle.ToUpper() != "-ALL-")
            {
                sql += " and UPPER(DIVISION) in ('" + strDiv + "')";
            }

            sql += "    GROUP BY  DIVISION ";


            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "ENFORCEMENT_LEAD_MST";
            return dt;
        }

        public DataTable Redempoint(string userid, string Type)
        {
            string sql = string.Empty;
            sql = " SELECT LEAD_ID,OBSERVATION_ID,TO_CHAR(MACHINE_ENTRY_DT,'dd-MM-yyyy') LEAD_DATE,T.OBSERVATION_TYPE, NET_AMT,REWARD_POINTS_EARNED";
            sql += " FROM ENFORCEMENT_LEAD_REDEMPTION M, TH_DETAILS T WHERE  T.SNO_ID = M.OBSERVATION_ID AND UPPER(T.USER_ID)= '" + userid.ToUpper() + "' AND REWARD_REDEMPTION_STATUS='" + Type + "'";


            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "ENFORCEMENT_LEAD_MST";
            return dt;
        }
        public static bool Earnedreward(string strleadid, string obserid)
        {
            try
            {
                string sql = "UPDATE ENFORCEMENT_LEAD_REDEMPTION SET REWARD_REDEMPTION_STATUS='Y',UPDATED_ENTRY_DT=SYSDATE WHERE UPPER(OBSERVATION_ID) = '" + obserid.ToUpper() + "' AND UPPER(LEAD_ID) = '" + strleadid.ToUpper() + "'";
                DbFunction objdbfun = new DbFunction();
                return objdbfun.dmlsinglequery_mobint(sql);
            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }
        public DataTable GetMeterCA_Data(string _sMeterNo, string _sCANo)
        {
            string sql = " Select CA_NO, METER_NO from RCMPA.GENUSMETERDETAIL where CA_NO='" + _sCANo + "' and METER_NO='" + _sMeterNo + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_RCM(sql);
            dt.TableName = "GENUSMETERDETAIL";
            return dt;
        }

        #endregion

        public static DataTable METERNODETAILS(string strMeter)
        {
            string sql = " SELECT CONS_REF";
            sql += " FROM rcmpa.sap_slcc_formy WHERE 1=1 ";
            if (strMeter != "")
                sql += " AND METERNO= '" + strMeter + "'";
            sql += " AND ROWNUM<2 UNION ";
            sql += " SELECT  CONS_REF ";
            sql += "  FROM rcmpa.sap_formy WHERE  1=1 ";
            if (strMeter != "")
                sql += " AND METERNO= '" + strMeter + "'";
            sql += " AND ROWNUM<2 ";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_RCM(sql);
            return dt;
        }

        #region BYPL New Saturnday

        public DataTable getSK_HolidayMstNew(string strDist)
        {
            string sql = " SELECT TO_CHAR(H_DATE,'DD/MM/YYYY') date_time FROM dcrep.DSS_HOLIDAY_MST WHERE company in ('BSES','" + strDist + "') and H_DATE between '" + DateTime.Now.AddDays(3).Date.ToString("dd-MMM-yyyy") + "' and  '" + DateTime.Now.AddDays(120).Date.ToString("dd-MMM-yyyy") + "' ORDER BY h_date ASC ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_dcrep(sql);
            return dt;
        }

        public bool validateHolidayDt(string strDate)
        {
            bool isTrue = false;
            string sql = " SELECT * FROM dcrep.DSS_HOLIDAY_MST WHERE to_char(H_DATE, 'YYYYMMDD') = '" + strDate + "' and COMPANY in ('BSES', 'BYPL') ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_dcrep(sql);
            if (dt.Rows.Count > 0)
            {
                isTrue = true;
            }

            return isTrue;
        }

        public static DataTable Get_CA_Details(string _sCA)
        {
            string sql = "select CANO from mobapp.SSO_SAML_BRPL WHERE CANO='" + _sCA + "' AND STATUS='Y'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobApp(sql);
            return dt;
        }
        #endregion

        #region "Babloo -11092019"
        public static bool Insert_Photo_Meter(string MTR_RD_ID, string CA_NUMBER, string CONSUMER_NAME, string CONSUMER_ADD,
                                         string KWH, string KW, string KVAH, string KVA, string Image1, string MTR_NUMBER,
                                         string MTR_RD_IMG_KVAH, string MTR_LAT, string MTR_LONG, string CONSUMER_CAT,
                                         string PUNCH_BY, string MTR_RD_IMG, string DIVISION)
        {
            try
            {
                string Sql = "INSERT INTO OLD_MTR_RDING_ON_APP (MTR_RD_ID,CA_NUMBER,CONSUMER_NAME,CONSUMER_ADD,KWH,KW,KVAH,KVA,MTR_RD_IMG_KWH,MTR_NUMBER,";
                Sql += "MTR_RD_IMG_KVAH,MTR_LAT,MTR_LONG,CONSUMER_CAT,PUNCH_BY,MTR_RD_IMG,DIVISION) VALUES ('" + MTR_RD_ID + "','" + CA_NUMBER + "','" + CONSUMER_NAME + "','" + CONSUMER_ADD + "',";
                Sql += "'" + KWH + "','" + KW + "','" + KVAH + "','" + KVA + "','" + Image1 + "','" + MTR_NUMBER + "','" + MTR_RD_IMG_KVAH + "','" + MTR_LAT + "','" + MTR_LONG + "',";
                Sql += "'" + CONSUMER_CAT + "','" + PUNCH_BY + "','" + MTR_RD_IMG + "',' " + DIVISION + "')";
                DbFunction objdbfuninsert = new DbFunction();
                return objdbfuninsert.dmlsinglequery_mobApp(Sql);
            }
            catch (Exception ex)
            {
                NewClassFile.WriteIntoFile_PhotoMeter(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public static DataTable PhotoMeter(string strCA)
        {
            string sql = string.Empty;

            sql = " SELECT CA_NUMBER FROM OLD_MTR_RDING_ON_APP WHERE CA_NUMBER='" + strCA + "' and to_char(ENTRY_DATE, 'Mon-YYYY') =  to_char(sysdate, 'Mon-YYYY')";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobApp(sql);
            return dt;
        }


        public static void WriteIntoFile_PhotoMeter(string _smsg)
        {
            using (StreamWriter sw = File.AppendText(HttpContext.Current.Server.MapPath(@"~\App_Data\ApplicationLog" + "_" + DateTime.Now.Date.ToString("dd-MM-yyyy") + ".txt")))
            {
                sw.WriteLine(_smsg);
                sw.Close();
            }
        }

        #endregion


        public DataTable OTP_GENERATE(string EMP_ID, string Mobile)
        {
            string sql = " SELECT MOBILENUMBER FROM MOBINT.DIV_SCHEME_VENDOR_USER_121223 WHERE EMP_ID='" + EMP_ID + "' AND MOBILENUMBER = '" + Mobile + "'";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "DIV_SCHEME_VENDOR_DTDATA ";
            return dt;
        }

        public DataTable Check_User_OTP(string userID, string Message)
        {
            string sql = " SELECT FILE_NAME, MESSAGE_TXT FROM MOBAPP.NONSAP_BULK_SMS    ";
            sql += " WHERE APPLICATION_NAME = 'LR_APP' AND FILE_NAME = '" + userID + "' AND MESSAGE_TXT = '" + Message + "' AND ROWNUM <=1 ORDER BY RESPONSE_DATE DESC  ";
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "CHECK_USER_OTP ";
            return dt;
        }

        public bool Insert_Scheme_Vendor_MobData1_10052024(string DivId, string Scheme, string Vendor, string TeamCount, string MetRplOnly, string MetRelOnly,
                         string BothActMet, string MetInsQul, string PoleDbRel, string ArmCblRel, string Flag_V_S, string _sIMEINo, string _sCircle,
                         string VS_Entry_DT, string strSubDiv, string strlatitude, string strlongitude, string empId)
        {
            string sql = "INSERT INTO DIV_SCHEME_VENDOR_DTDATA(SNO,DIVISION_ID, SCHEME_NAME, VENDOR_NAME, TEAM_COUNT, MET_RPL_ONLY, MET_REL_ONLY, BOTH_ACT_MET, MET_INS_QUL, POLE_DB_REL, ARM_CBL_MET, FLAG_V_S,IMEI_NO,CIRCLE,VS_ENTRY_DATE, SUB_DIVISION,latitude,longitude,EMP_ID)  ";
            sql = sql + " VALUES ";
            sql = sql + "  (SEQ_DTDATA.NEXTVAL,'" + DivId + "','" + Scheme + "','" + Vendor + "','" + TeamCount + "','" + MetRplOnly + "','" + MetRelOnly + "','" + BothActMet + "','" + MetInsQul + "','" + PoleDbRel + "','" + ArmCblRel + "','" + Flag_V_S + "','" + _sIMEINo + "','" + _sCircle + "',TO_DATE('" + VS_Entry_DT + "','dd/MM/yyyy'), '" + strSubDiv + "','" + strlatitude + "','" + strlongitude + "','" + empId + "') ";

            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlsinglequery_mobint(sql);
        }

        public bool Update_Scheme_Vendor_MobData_10052024(string Sno, string DivId, string TeamCount, string MetRplOnly, string MetRelOnly,
                                    string BothActMet, string MetInsQul, string PoleDbRel, string ArmCblRel, string _sIMEINo, string _sCircle, string VS_Entry_DT, string empId)
        {
            string sql = "UPDATE DIV_SCHEME_VENDOR_DTDATA SET DIVISION_ID='" + DivId + "',  TEAM_COUNT='" + TeamCount + "', MET_RPL_ONLY='" + MetRplOnly + "', MET_REL_ONLY='" + MetRelOnly + "', ";
            sql = sql + " BOTH_ACT_MET='" + BothActMet + "', MET_INS_QUL='" + MetInsQul + "', POLE_DB_REL='" + PoleDbRel + "', ARM_CBL_MET='" + ArmCblRel + "', CIRCLE='" + _sCircle + "',VS_ENTRY_DATE=TO_DATE('" + VS_Entry_DT + "','dd/MM/yyyy') ";
            sql = sql + " WHERE EMP_ID='" + empId + "' AND  SNO='" + Sno + "' ";


            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlsinglequery_mobint(sql);
        }

        public bool Insert_Scheme_ActivityType_MobData1_10052024(string MeterNo, string PoleNo, string ActTypeList1, string ActTypeList2, string _sIEMINo,
                                                               string NEW_METER_NO, string METER_BOX, string BUS_BAR, string CABLE_USED, string SEAL1, string SEAL2,
                                                               string SEAL3, string DIV_CODE, string SCHEME_NO, string DBOBS, string PIERCING, string FROM_POLE,
                                                                string TO_POLE, string FLAG_TYPE, string strlatitude, string strlongitude, string strBeforePhoto, string strAfterPhoto, string empId)
        {
            string sql = "INSERT INTO DIV_SCHEME_LR_ACTIVTY(SNO_ID, METER_NO, POLE_NO, ACTIVITY_LIST1,  ACTIVITY_LIST2, IMEI_NO,NEW_METER_NO, METER_BOX, BUS_BAR, CABLE_USED, SEAL1, SEAL2, SEAL3, DIV_CODE, SCHEME_NO, DBOBS, PIERCING, FROM_POLE, TO_POLE, FLAG_TYPE, SUB_DIVISION,latitude,longitude,STR_IMAGE_BEFORE,STR_IMAGE_AFTER,EMP_ID)  ";
            sql = sql + " VALUES ";
            sql = sql + "  (SEQ_ACTDATA.NEXTVAL,'" + MeterNo + "','" + PoleNo + "','" + ActTypeList1 + "','" + ActTypeList2 + "','" + _sIEMINo + "',";
            sql = sql + " '" + NEW_METER_NO + "','" + METER_BOX + "','" + BUS_BAR + "','','" + SEAL1 + "','" + SEAL2 + "','" + SEAL3 + "','" + DIV_CODE + "','" + SCHEME_NO + "',";
            sql = sql + " '" + DBOBS + "','" + PIERCING + "','" + FROM_POLE + "','" + TO_POLE + "','" + FLAG_TYPE + "', '" + CABLE_USED + "','" + strlatitude + "','" + strlongitude + "', '" + strBeforePhoto + "','" + strAfterPhoto + "','" + empId + "') ";

            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlsinglequery_mobint(sql);
        }


        public bool Insert_LR_Surveillane1_09052024(string _sObserType, string _sVistDate, string _sCircle, string _sDivision, string _sMeterNo, string _sCANo,
                                   string _sPoleNo, string _sActionTkFlg, string _sRemarks, string _sNCType, string _sTypeOfAbnormality,
                                   string _sSiteAddress, string _sAdjMeterNo1, string _sAdjMeterNo2, string _sNearPoleNo, string _sOther,
                                 string strImeiNo, string subdivision, string SubCluster, string strlatitude, string strlongitude, string empId)
        {
            try
            {
                string strSrNo = SelectNextVal();

                //New Added
                string _ncrlst = "";
                string[] _arrnctyp = _sNCType.Trim().Split('|');

                for (int i = 0; i < _arrnctyp.Length; i++)
                {
                    if (!string.IsNullOrEmpty(_arrnctyp[i].ToString()))
                    {

                        if (_arrnctyp[i].ToString() != "null")
                        {
                            _ncrlst += _arrnctyp[i].ToString();
                            _ncrlst += "|";
                        }

                    }
                }
                //End

                string sqlinsert = "INSERT INTO DIV_SCHEME_SURVEILLANCE(SNO_ID,OBSERVATION_TYPE, VISIT_DATE, CIRCLE, DIVISION, METER_NO, CA_NUMBER, POLE_NO, ACTION_TAKEN_FLG, REMARKS, NC_TYPE, TYPE_OF_ABNORMALITY, SITE_ADDRESS, ADJ_METER_NO1, ADJ_METER_NO2, NEAR_POLE_NO,OTHER_RKS, IMEI_NO, SUB_DIVISION,SUB_CLUSTER,latitude,longitude,EMP_ID)";
                sqlinsert = sqlinsert + " VALUES('" + strSrNo + "','" + _sObserType.ToString().Trim() + "','" + _sVistDate.ToString().Trim() + "','" + _sCircle.Trim().ToUpper() + "','" + _sDivision.Trim().ToUpper() + "','" + _sMeterNo.Trim() + "','" + _sCANo.Trim() + "','" + _sPoleNo.Trim() + "','" + _sActionTkFlg + "',";
                sqlinsert = sqlinsert + " '" + _sRemarks.Trim() + "','" + _ncrlst.Trim() + "','" + _sTypeOfAbnormality.Trim() + "','" + _sSiteAddress.Trim() + "','" + _sAdjMeterNo1.Trim() + "','" + _sAdjMeterNo2.Trim() + "','" + _sNearPoleNo.Trim() + "','" + _sOther.Trim() + "', '" + strImeiNo + "', '" + subdivision.Trim().ToUpper() + "','" + SubCluster.Trim().ToUpper() + "','" + strlatitude + "','" + strlongitude + "','" + empId + "')";
                DbFunction objdbfunsqlinsert = new DbFunction();

                bool isTrue = false;
                if (objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert))
                {
                    isTrue = true;

                    //Start

                    string sqlinsert_new = " INSERT INTO DIV_SCHEME_SURV_NC_TYP (OBSER_ID, NC_SLIGHT,NC_SL_DT, NC_BUSINESS, NC_BUSI_DT,";
                    sqlinsert_new = sqlinsert_new + "  NC_ENFORCEMNT, NC_ENF_DT, NC_MMG, NC_MMG_DT, NC_ONM, NC_ONM_DT, ABN_TYP , ABN_TYP_DT)  ";
                    sqlinsert_new = sqlinsert_new + " VALUES('" + strSrNo + "', ";
                    if (_sNCType.Contains("26") || _sNCType.Contains("27") || _sNCType.Contains("28"))
                    { //SLight Flag
                        sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                    }
                    else
                    {
                        sqlinsert_new = sqlinsert_new + " 'X', '' ,";
                    }

                    if (_sNCType.Contains("06"))
                    { //Business Flag
                        sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                    }
                    else
                    {
                        sqlinsert_new = sqlinsert_new + " 'X', '' ,";
                    }

                    if (_sNCType.Contains("17") || _sNCType.Contains("18") || _sNCType.Contains("19"))
                    { //Enforcement Flag
                        sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                    }
                    else
                    {
                        sqlinsert_new = sqlinsert_new + " 'X', '' ,";
                    }

                    if (_sNCType.Contains("03") || _sNCType.Contains("04"))
                    { //MMG Flag
                        sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                    }
                    else
                    {
                        sqlinsert_new = sqlinsert_new + " 'X', '' ,";
                    }

                    if (_sNCType.Contains("01") || _sNCType.Contains("02") || _sNCType.Contains("05") || _sNCType.Contains("07") || _sNCType.Contains("08") || _sNCType.Contains("09") || _sNCType.Contains("10") || _sNCType.Contains("11") || _sNCType.Contains("12") || _sNCType.Contains("13") || _sNCType.Contains("14") || _sNCType.Contains("15") || _sNCType.Contains("16") || _sNCType.Contains("20") || _sNCType.Contains("21") || _sNCType.Contains("22") || _sNCType.Contains("23") || _sNCType.Contains("24") || _sNCType.Contains("25") || _sNCType.Contains("29") || _sNCType.Contains("30"))
                    { //O & M Flag
                        sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                    }
                    else
                    {
                        sqlinsert_new = sqlinsert_new + " 'X', '' ,";
                    }

                    if (_sTypeOfAbnormality.Contains("PL/PPL") || _sTypeOfAbnormality.Contains("Consumer Refusal") || _sTypeOfAbnormality.Contains("Theft") || _sTypeOfAbnormality.Contains("Other"))
                    { //Abnormality Flag
                        sqlinsert_new = sqlinsert_new + " 'Y', '' )";
                    }
                    else
                    {
                        sqlinsert_new = sqlinsert_new + " 'X', '' )";
                    }

                    bool checkIt = objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert_new);
                    //End

                }
                return isTrue;
            }
            catch (Exception ex)
            {
                WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }

        public bool Insert_LR_Surv_Atr1_09052024(string ObserId, string ObserType, string Remarks, string NCTypeResolved, string NCTypeNotResolved, string TypOfAbnormResolv,
                                        string TypOfAbnormNtResolv, string strDepartment, string strImeiNo, string enf_Case_ID,
                                        string strlatitude, string strlongitude, string leadRepeated, string empId)
        {
            string StreetLight = string.Empty;
            string OM = string.Empty;
            string MMG = string.Empty;
            string Enforcement = string.Empty;
            string Business = string.Empty;
            string strUpdate = string.Empty;
            string StreetLight1 = string.Empty;
            string OM1 = string.Empty;
            string MMG1 = string.Empty;
            string Enforcement1 = string.Empty;
            string Business1 = string.Empty;
            try
            {
                string sqlinsert = string.Empty;

                if (strDepartment == "Street Light")
                {
                    sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, IMEI_NO,latitude,longitude,LEADREPEATED,OBSER_ID_NEW,EMP_ID)";
                    sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                    sqlinsert = sqlinsert + " '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "','" + strlatitude + "','" + strlongitude + "','" + leadRepeated + "','','" + empId + "') ";
                }
                else if (strDepartment == "O & M")
                {
                    sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, ONM_IMEI_NO,latitude,longitude,LEADREPEATED,OBSER_ID_NEW,EMP_ID)";
                    sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                    sqlinsert = sqlinsert + " '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "','" + strlatitude + "','" + strlongitude + "','" + leadRepeated + "','','" + empId + "') ";
                }
                else if (strDepartment == "MMG")
                {
                    sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, MMG_IMEI_NO,latitude,longitude,LEADREPEATED,OBSER_ID_NEW,EMP_ID)";
                    sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                    sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "','" + strlatitude + "','" + strlongitude + "','" + leadRepeated + "','','" + empId + "') ";
                }
                else if (strDepartment == "Enforcement")
                {
                    if (leadRepeated == "Lead Repeated")
                    {
                        sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, ENF_IMEI_NO,ENF_CASE_ID,latitude,longitude,LEADREPEATED,OBSER_ID_NEW,EMP_ID)";
                        sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                        sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "','" + enf_Case_ID + "','" + strlatitude + "','" + strlongitude + "','" + leadRepeated + "','" + ObserId.ToString() + "_1" + "','" + empId + "')";
                    }
                    else
                    {
                        sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, ENF_IMEI_NO,ENF_CASE_ID,latitude,longitude,LEADREPEATED,OBSER_ID_NEW,EMP_ID)";
                        sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                        sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "','" + enf_Case_ID + "','" + strlatitude + "','" + strlongitude + "','" + leadRepeated + "','','" + empId + "') ";
                    }
                }
                else if (strDepartment == "Business")
                {
                    sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, BUSI_IMEI_NO,latitude,longitude,LEADREPEATED,OBSER_ID_NEW,EMP_ID)";
                    sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                    sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate, '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '', '" + ObserType + "', '" + strImeiNo + "','" + strlatitude + "','" + strlongitude + "','" + leadRepeated + "','','" + empId + "') ";
                }
                else if (strDepartment == "QC") //Insert
                {
                    sqlinsert = string.Empty;
                    sqlinsert = "INSERT INTO DIV_SCHEME_QC_ATR( SR_ID, OBSER_ID, QC_PD_REL_RESOLVED, QC_PD_REL_N_RESOLVED, QC_PD_REL_RMKS, QC_PD_REL_DT, QC_CABLE_REL_RESOLVED, QC_CABLE_REL_N_RESOLVED, QC_CABLE_REL_RMKS, QC_CABLE_REL_DT, QC_MTR_REL_RESOLVED, QC_MTR_REL_N_RESOLVED, QC_MTR_REL_RMKS, QC_MTR_REL_DT, IMEI_NO,latitude,longitude,LEADREPEATED,OBSER_ID_NEW)";
                    sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_QC_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                    sqlinsert = sqlinsert + " '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate , '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate , '" + NCTypeResolved + "', '" + NCTypeNotResolved + "', '" + Remarks + "', sysdate , '" + strImeiNo + "','" + strlatitude + "','" + strlongitude + "','" + leadRepeated + "', '" + empId + "') ";
                }
                else
                {
                    sqlinsert = "INSERT INTO DIV_SCHEME_SURV_ATR( SR_ID, OBSER_ID, NC_SL_RESOLVED, NC_SL_N_RESOLVED, NC_SL_RMKS, NC_SL_DT, NC_ONM_RESOLVED, NC_ONM_N_RESOLVED, NC_ONM_RMKS, NC_ONM_DT, NC_MMG_RESOLVED, NC_MMG_N_RESOLVED, NC_MMG_RMKS, NC_MMG_DT, NC_ENF_RESOLVED, NC_ENF_N_RESOLVED, NC_ENF_RMKS, NC_ENF_DT, NC_BUSI_RESOLVED, NC_BUSI_N_RESOLVED, NC_BUSI_RMKS, NC_BUSI_DT, ABNORM_RESOLVED, ABNORM_NOT_RESOLVED, ABNORM_RMKS, ABNORM_DT, RMKS, OBSER_TYP, IMEI_NO,latitude,longitude,LEADREPEATED,OBSER_ID_NEW,EMP_ID)";
                    sqlinsert = sqlinsert + " VALUES(SEQ_DIV_SCHEME_SURV_ATR.NEXTVAL,'" + ObserId.ToString() + "', ";
                    sqlinsert = sqlinsert + " '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '" + TypOfAbnormResolv + "', '" + TypOfAbnormNtResolv + "', '" + Remarks + "', sysdate, '" + Remarks + "', '" + ObserType + "', '" + strImeiNo + "','" + strlatitude + "','" + strlongitude + "','" + leadRepeated + "','','" + empId + "') ";
                }
                DbFunction objdbfunsqlinsert = new DbFunction();
                bool isTrue = false;
                if (objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert))
                {
                    if (leadRepeated == "Lead Repeated")
                    {
                        sqlinsert = " INSERT INTO mobint.DIV_SCHEME_SURVEILLANCE (SNO_ID,OBSERVATION_TYPE,VISIT_DATE,CIRCLE,DIVISION,METER_NO,CA_NUMBER,POLE_NO,ACTION_TAKEN_FLG, TYPE_OF_ABNORMALITY,SUB_DIVISION,SAP_FLAG,MODE_OF_THEFT,EMP_ID) ";
                        sqlinsert = sqlinsert + " select SNO_ID ||'_1',OBSERVATION_TYPE,VISIT_DATE,CIRCLE,DIVISION,METER_NO,CA_NUMBER,POLE_NO,ACTION_TAKEN_FLG,'Other' TYPE_OF_ABNORMALITY, ";
                        sqlinsert = sqlinsert + " SUB_DIVISION,SAP_FLAG,MODE_OF_THEFT,EMP_ID from mobint.DIV_SCHEME_SURVEILLANCE where sno_id='" + ObserId.ToString() + "'  ";
                        if (objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert))
                        {
                            sqlinsert = " INSERT INTO mobint.DIV_SCHEME_SURV_NC_TYP(OBSER_ID,NC_SLIGHT,NC_BUSINESS,NC_ENFORCEMNT,NC_MMG,NC_ONM,NC_ONM_DT,ABN_TYP) ";
                            sqlinsert = sqlinsert + " VALUES('" + ObserId.Trim().ToString() + "_1" + "','X','X','X','X','Y',SYSDATE,'X') ";
                            objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert);
                        }
                    }

                    isTrue = true;
                    if (isTrue == true && strDepartment != "QC" && strDepartment != "Unmetered")
                    {
                        sqlinsert = "SELECT NC_SLIGHT,NC_BUSINESS,NC_ENFORCEMNT,NC_MMG,NC_ONM FROM MOBINT.DIV_SCHEME_SURV_NC_TYP WHERE OBSER_ID='" + ObserId.ToString() + "' ";
                        DataTable dt1 = new DataTable();
                        DbFunction objdbfun = new DbFunction();
                        dt1 = objdbfun.dmlgetquery_mobint(sqlinsert);
                        StreetLight = dt1.Rows[0]["NC_SLIGHT"].ToString();
                        OM = dt1.Rows[0]["NC_ONM"].ToString();
                        MMG = dt1.Rows[0]["NC_MMG"].ToString();
                        Enforcement = dt1.Rows[0]["NC_ENFORCEMNT"].ToString();
                        Business = dt1.Rows[0]["NC_BUSINESS"].ToString();
                        //}
                        strUpdate = " UPDATE DIV_SCHEME_SURV_NC_TYP SET ";
                        if (strDepartment == "Street Light")
                        {
                            strUpdate = strUpdate + " NC_SLIGHT = 'N', NC_SL_DT= SYSDATE ";
                            if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
                            {
                                strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                            }
                        }
                        else if (strDepartment == "O & M")
                        {
                            strUpdate = strUpdate + " NC_ONM='N' , NC_ONM_DT= SYSDATE ";
                            if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
                            {
                                strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                            }
                        }
                        else if (strDepartment == "MMG")
                        {
                            strUpdate = strUpdate + " NC_MMG='N' , NC_MMG_DT= SYSDATE ";
                            if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
                            {
                                strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                            }
                        }
                        else if (strDepartment == "Enforcement")
                        {
                            strUpdate = strUpdate + " NC_ENFORCEMNT='N' , NC_ENF_DT= SYSDATE";
                            if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
                            {
                                strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                            }
                        }
                        else if (strDepartment == "Business")
                        {
                            strUpdate = strUpdate + " NC_BUSINESS='N' , NC_BUSI_DT= SYSDATE";
                            if (TypOfAbnormResolv != "" || TypOfAbnormNtResolv != "")
                            {
                                strUpdate = strUpdate + " , ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                            }
                        }
                    }
                    else if (strDepartment == "QC")
                    {
                        strUpdate = string.Empty;
                        strUpdate = strUpdate + " UPDATE DIV_SCHEME_QC_TYP SET QC_PD_REL='N' , QC_PD_REL_DT= SYSDATE , QC_CABLE_REL='N', QC_CABLE_REL_DT=SYSDATE, QC_MTR_REL='N', QC_MTR_REL_DT=SYSDATE ";
                    }
                    else if (strDepartment == "Unmetered")
                    {
                        // strUpdate = " UPDATE DIV_SCHEME_SURV_NC_TYP SET ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                        sqlinsert = "SELECT NC_SLIGHT,NC_BUSINESS,NC_ENFORCEMNT,NC_MMG,NC_ONM FROM MOBINT.DIV_SCHEME_SURV_NC_TYP WHERE OBSER_ID='" + ObserId.ToString() + "' ";
                        DataTable dt2 = new DataTable();
                        DbFunction objdbfun = new DbFunction();
                        dt2 = objdbfun.dmlgetquery_mobint(sqlinsert);
                        StreetLight1 = dt2.Rows[0]["NC_SLIGHT"].ToString();
                        OM1 = dt2.Rows[0]["NC_ONM"].ToString();
                        MMG1 = dt2.Rows[0]["NC_MMG"].ToString();
                        Enforcement1 = dt2.Rows[0]["NC_ENFORCEMNT"].ToString();
                        Business1 = dt2.Rows[0]["NC_BUSINESS"].ToString();
                        strUpdate = " UPDATE DIV_SCHEME_SURV_NC_TYP SET ABN_TYP = 'N',ABN_TYP_DT = SYSDATE ";
                        if (StreetLight1 == "Y")
                        {
                            strUpdate = strUpdate + ",NC_SLIGHT = 'N'";
                        }
                        if (OM1 == "Y")
                        {
                            strUpdate = strUpdate + ",NC_ONM = 'N'";
                        }
                        if (MMG1 == "Y")
                        {
                            strUpdate = strUpdate + ",NC_MMG = 'N'";
                        }
                        if (Enforcement1 == "Y")
                        {
                            strUpdate = strUpdate + ",NC_ENFORCEMNT = 'N'";
                        }
                        if (Business1 == "Y")
                        {
                            strUpdate = strUpdate + ",NC_BUSINESS = 'N'";
                        }
                    }
                    else
                    {
                        if (StreetLight == "Y")
                        {
                            strUpdate = strUpdate + " NC_SLIGHT = 'N',";
                        }
                        if (OM == "Y")
                        {
                            strUpdate = strUpdate + " NC_ONM = 'N',";
                        }
                        if (MMG == "Y")
                        {
                            strUpdate = strUpdate + " NC_MMG = 'N',";
                        }
                        if (Enforcement == "Y")
                        {
                            strUpdate = strUpdate + " NC_ENFORCEMNT = 'N',";
                        }
                        if (Business == "Y")
                        {
                            strUpdate = strUpdate + " NC_BUSINESS = 'N',";
                        }
                    }
                    //strUpdate = strUpdate + " ABN_TYP = 'N' , ABN_TYP_DT = SYSDATE ";
                    strUpdate = strUpdate + " WHERE OBSER_ID='" + ObserId.ToString() + "' ";
                    bool checkIt = objdbfunsqlinsert.dmlsinglequery_mobint(strUpdate);
                }
                return isTrue;
            }
            catch (Exception ex)
            {
                WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }


        public bool Insert_Scheme_ActivityType_MobData1_20052024(string MeterNo, string PoleNo, string ActTypeList1, string ActTypeList2, string _sIEMINo,
                                                               string NEW_METER_NO, string METER_BOX, string BUS_BAR, string CABLE_USED, string SEAL1, string SEAL2,
                                                               string SEAL3, string DIV_CODE, string SCHEME_NO, string DBOBS, string PIERCING, string FROM_POLE,
                                                                string TO_POLE, string FLAG_TYPE, string strlatitude, string strlongitude, string strBeforePhoto, string strAfterPhoto, string empId, string busbarseal1, string busbarseal2, string strMcrPhoto)
        {
            byte[] _byImgBefore = null;
            byte[] _byImgAfter = null;
            byte[] _byImgMCR = null;
            string strDate = DateTime.Now.ToString("ddMMyyyy");

            if (strBeforePhoto.Trim() != "" || strBeforePhoto != string.Empty || strBeforePhoto != null)
            {
                try
                {
                    _byImgBefore = Convert.FromBase64String(strBeforePhoto);
                    strBeforePhoto = byteArrayToImage_LR(_byImgBefore, MeterNo + strDate + "LR");
                }
                catch (Exception ex)
                {
                    NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in LR image" + ex.ToString());
                }
            }

            if (strAfterPhoto.Trim() != "" || strAfterPhoto != string.Empty || strAfterPhoto != null)
            {
                try
                {
                    _byImgAfter = Convert.FromBase64String(strAfterPhoto);
                    strAfterPhoto = byteArrayToImage_LR(_byImgAfter, MeterNo + strDate + "LR");
                }
                catch (Exception ex)
                {
                    NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in LR image" + ex.ToString());
                }
            }

            if (strMcrPhoto.Trim() != "" || strMcrPhoto != string.Empty || strMcrPhoto != null)
            {
                try
                {
                    _byImgMCR = Convert.FromBase64String(strMcrPhoto);
                    strMcrPhoto = byteArrayToImage_LR(_byImgMCR, MeterNo + strDate + "LR");
                }
                catch (Exception ex)
                {
                    NewClassFile.WriteIntoFile_MCR(DateTime.Now.ToString() + "Error in LR image" + ex.ToString());
                }
            }

            string sql = "INSERT INTO DIV_SCHEME_LR_ACTIVTY(SNO_ID, METER_NO, POLE_NO, ACTIVITY_LIST1,  ACTIVITY_LIST2, IMEI_NO,NEW_METER_NO, METER_BOX, BUS_BAR, CABLE_USED, SEAL1, SEAL2, SEAL3, DIV_CODE, SCHEME_NO, DBOBS, PIERCING, FROM_POLE, TO_POLE, FLAG_TYPE, SUB_DIVISION,latitude,longitude,STR_IMAGE_BEFORE,STR_IMAGE_AFTER,EMP_ID,BUSBAR_SEAL1,BUSBAR_SEAL2,STR_IMAGE_MCR)  ";
            sql = sql + " VALUES ";
            sql = sql + "  (SEQ_ACTDATA.NEXTVAL,'" + MeterNo + "','" + PoleNo + "','" + ActTypeList1 + "','" + ActTypeList2 + "','" + _sIEMINo + "',";
            sql = sql + " '" + NEW_METER_NO + "','" + METER_BOX + "','" + BUS_BAR + "','','" + SEAL1 + "','" + SEAL2 + "','" + SEAL3 + "','" + DIV_CODE + "','" + SCHEME_NO + "',";
            sql = sql + " '" + DBOBS + "','" + PIERCING + "','" + FROM_POLE + "','" + TO_POLE + "','" + FLAG_TYPE + "', '" + CABLE_USED + "','" + strlatitude + "','" + strlongitude + "', '" + strBeforePhoto + "','" + strAfterPhoto + "','" + empId + "','" + busbarseal1 + "','" + busbarseal2 + "','" + strMcrPhoto + "') ";

            DbFunction objdbfun = new DbFunction();
            return objdbfun.dmlsinglequery_mobint(sql);
        }

        #region Commented_Divyesh_06082024
        //public DataTable Mobint_LRObservationList_27052024(string strSubDiv, string strDivName, string strRolRght, string SubCluster)
        //{
        //    string sql = " SELECT SNO_ID, A.OBSERVATION_TYPE, VISIT_DATE, NVL(A.METER_NO, '0') METER_NO, NVL(A.CA_NUMBER,'0') CA_NUMBER, NVL(A.POLE_NO,'0') POLE_NO, ";
        //    sql = sql + " A.ACTION_TAKEN_FLG, REMARKS, OTHER_RKS, TYPE_OF_ABNORMALITY, SITE_ADDRESS, ADJ_METER_NO1, ADJ_METER_NO2, ";
        //    sql = sql + " NC_TYPE, UPPER(NEAR_POLE_NO) NEAR_POLE_NO, TO_CHAR(A.ENTRY_DATE,'dd/mm/yyyy') ENTRY_DT, LH.LEAD_STATUS  FROM DIV_SCHEME_SURVEILLANCE A INNER JOIN DIV_SCHEME_SURV_NC_TYP B";
        //    sql = sql + "  ON A.SNO_ID = B.OBSER_ID LEFT JOIN MOBINT.ENFORCEMENT_LEAD_HISTORY LH ON A.SNO_ID = LH.OBSERVATION_ID";
        //    sql = sql + " WHERE UPPER(A.DIVISION)=UPPER('" + strDivName + "')";
        //    if (strSubDiv != "-SELECT-" && strSubDiv != "")
        //    {
        //        sql = sql + " AND UPPER(SUB_DIVISION)=UPPER('" + strSubDiv + "') ";
        //    }
        //    if (SubCluster != "-SELECT-" && SubCluster != "")
        //    {
        //        sql = sql + " AND UPPER(SUB_CLUSTER)=UPPER('" + SubCluster + "') ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = sql + " AND (B.NC_SLIGHT = 'Y' OR B.ABN_TYP = 'Y') ";
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%' ) ";
        //    }
        //    else if (strRolRght == "O & M")
        //    {
        //        sql = sql + " AND (B.NC_ONM = 'Y' OR B.ABN_TYP = 'Y') ";
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR ";
        //        sql = sql + " NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%' ";
        //        sql = sql + " OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  )  ";
        //    }
        //    else if (strRolRght == "MMG")
        //    {
        //        sql = sql + " AND (B.NC_MMG = 'Y' OR B.ABN_TYP = 'Y') ";
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%' ) ";
        //    }
        //    else if (strRolRght == "Enforcement")
        //    {
        //        sql = sql + " AND (B.NC_ENFORCEMNT = 'Y' OR B.ABN_TYP = 'Y') ";
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR  NC_TYPE LIKE '%30%'";
        //        sql = sql + " OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%'  )  ";
        //    }
        //    else if (strRolRght == "Business")
        //    {
        //        sql = sql + " AND (B.NC_BUSINESS = 'Y' OR B.ABN_TYP = 'Y') ";
        //        sql = sql + " AND (NC_TYPE LIKE '%06%' )  ";
        //    }
        //    else if (strRolRght == "QC")
        //    {

        //        sql = string.Empty;
        //        sql = " SELECT SEQ_NO SNO_ID, VISIT_DATE, NVL(CA_NO,'0') CA_NUMBER,NVL(METER_NO, '0') METER_NO, NVL(POLE_NO,'0') POLE_NO, ";
        //        sql = sql + "   SUB_AREA_TYP NC_TYPE, SUB_AREA_TYP_SLCTD, RMKS REMARKS, SCHEME, TO_CHAR(A.ENTRY_DATE,'dd/mm/yyyy') ENTRY_DT FROM DIV_SCHEME_QC_TRANS A, DIV_SCHEME_QC_TYP B   ";
        //        sql = sql + "   WHERE UPPER(DIVISION_NAME)=UPPER('" + strDivName + "')  ";

        //        if (strSubDiv != "-SELECT-" && strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION)=UPPER('" + strSubDiv + "') ";
        //        }

        //        sql = sql + " AND A.SEQ_NO = B.OBSER_ID  and QC_PD_REL ='X' ";

        //    }
        //    else
        //    {

        //    }

        //    sql = sql + "  ORDER BY A.ENTRY_DATE DESC ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        #endregion

        #region New_Function_Replica_05062024

        public DataTable MobApp_Scheme_ALL_05062024(string circle, string division, string subdivision, string scheme)
        {
            string sql = "";
            if (circle != "x")
                sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(CIRCLE)=upper('" + circle + "')  ";
            else if (division != "x")
            {
                if (division.ToUpper() == "JAFFARPUR")
                    sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(DIVISION)=upper('" + division + "') and UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')  ";
                else if (division.ToUpper() == "MITRAON")
                    sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(DIVISION) in ('JAFFARPUR' , 'MITRAON') and UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
                else if (division.ToUpper() == "NEW FRIENDS COLONY")
                    sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(DIVISION) in ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')  ";
                else if (division.ToUpper() == "SARITA VIHAR")
                    sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(DIVISION) in ('SARITA VIHAR RURAL', 'SARITA VIHAR')  ";
                else
                    sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(DIVISION)=upper('" + division + "')   ";
            }
            else if (subdivision != "x")
                sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(SUB_DIVISION)=upper('" + subdivision + "') AND ACTIVE_FLAG = 'Y'  ";
            else
                sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT CIRCLE SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524  ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "DIV_SCHEME_VENDOR_MST";
            return dt;
        }

        //public DataTable MobApp_Scheme_ALL_05062024(string circle, string division, string subdivision, string scheme)
        //{
        //    string sql = "";
        //    if (circle != "x")
        //        sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(CIRCLE)=upper('" + circle + "')  ";
        //    else if (division != "x")
        //    {
        //        if (division.ToUpper() == "JAFFARPUR")
        //            sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(DIVISION)=upper('" + division + "') and UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') ";
        //        else
        //            sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SUB_DIVISION SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(DIVISION)=upper('" + division + "')  ";
        //    }
        //    else if (subdivision != "x")
        //        sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE upper(SUB_DIVISION)=upper('" + subdivision + "') AND ACTIVE_FLAG = 'Y'  ";
        //    else
        //        sql = sql + "  SELECT '-ALL-' SCHEME_NAME FROM DUAL UNION  SELECT DISTINCT CIRCLE SCHEME_NAME FROM MOBINT.DIV_SCM_SDC_MST_110524   ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "DIV_SCHEME_VENDOR_MST";
        //    return dt;
        //}

        #endregion

        #region New_LR_APP_Function_06082024
        public DataTable Mobint_LRObservationList_27052024(string strSubDiv, string strDivName, string strRolRght, string SubCluster)
        {
            string sql = " SELECT DISTINCT SNO_ID, A.OBSERVATION_TYPE, VISIT_DATE, NVL(A.METER_NO, '0') METER_NO, NVL(A.CA_NUMBER,'0') CA_NUMBER, NVL(A.POLE_NO,'0') POLE_NO, ";
            sql = sql + " A.ACTION_TAKEN_FLG, REMARKS, OTHER_RKS, TYPE_OF_ABNORMALITY, SITE_ADDRESS, ADJ_METER_NO1, ADJ_METER_NO2, ";
            sql = sql + " NC_TYPE, UPPER(NEAR_POLE_NO) NEAR_POLE_NO, TO_CHAR(A.ENTRY_DATE,'dd/mm/yyyy') ENTRY_DT, LH.LEAD_STATUS  FROM DIV_SCHEME_SURVEILLANCE A INNER JOIN DIV_SCHEME_SURV_NC_TYP B";
            sql = sql + "  ON A.SNO_ID = B.OBSER_ID LEFT JOIN MOBINT.ENFORCEMENT_LEAD_HISTORY LH ON A.SNO_ID = LH.OBSERVATION_ID";
            sql = sql + " WHERE UPPER(A.DIVISION)=UPPER('" + strDivName + "')";
            if (strDivName.ToUpper() == "JAFFARPUR")
                sql = sql + " AND UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
            else if (strDivName.ToUpper() == "MITRAON")
                sql = sql + " AND (UPPER(A.DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
            else if (strDivName.ToUpper() == "SARITA VIHAR RURAL" || strDivName.ToUpper() == "SARITA VIHAR")
                sql = sql + " AND UPPER(A.DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
            else if (strDivName.ToUpper() == "SARITA VIHAR URBAN" || strDivName.ToUpper() == "NEW FRIENDS COLONY")
                sql = sql + " AND (UPPER(A.DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";

            if (strSubDiv != "-SELECT-" && strSubDiv != "" && strSubDiv.ToUpper() != "-ALL-" && strSubDiv.ToUpper() != "ALL")
            {
                sql = sql + " AND UPPER(SUB_DIVISION)=UPPER('" + strSubDiv + "') ";
            }
            if (SubCluster != "-SELECT-" && SubCluster != "")
            {
                sql = sql + " AND UPPER(SUB_CLUSTER)=UPPER('" + SubCluster + "') ";
            }
            if (strRolRght == "Street Light")
            {
                sql = sql + " AND (B.NC_SLIGHT = 'Y' OR B.ABN_TYP = 'Y') ";
                sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%' ) ";
            }
            else if (strRolRght == "O & M")
            {
                sql = sql + " AND (B.NC_ONM = 'Y' OR B.ABN_TYP = 'Y') ";
                sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR ";
                sql = sql + " NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%' ";
                sql = sql + " OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  )  ";
            }
            else if (strRolRght == "MMG")
            {
                sql = sql + " AND (B.NC_MMG = 'Y' OR B.ABN_TYP = 'Y') ";
                sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%' ) ";
            }
            else if (strRolRght == "Enforcement")
            {
                sql = sql + " AND (B.NC_ENFORCEMNT = 'Y' OR B.ABN_TYP = 'Y') ";
                sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR  NC_TYPE LIKE '%30%'";
                sql = sql + " OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%'  )  ";
            }
            else if (strRolRght == "Business")
            {
                sql = sql + " AND (B.NC_BUSINESS = 'Y' OR B.ABN_TYP = 'Y') ";
                sql = sql + " AND (NC_TYPE LIKE '%06%' )  ";
            }
            else if (strRolRght == "QC")
            {
                sql = string.Empty;
                sql = " SELECT DISTINCT SEQ_NO SNO_ID, VISIT_DATE, NVL(CA_NO,'0') CA_NUMBER,NVL(METER_NO, '0') METER_NO, NVL(POLE_NO,'0') POLE_NO, ";
                sql = sql + "   SUB_AREA_TYP NC_TYPE, SUB_AREA_TYP_SLCTD, RMKS REMARKS, SCHEME, TO_CHAR(A.ENTRY_DATE,'dd/mm/yyyy') ENTRY_DT FROM DIV_SCHEME_QC_TRANS A, DIV_SCHEME_QC_TYP B   ";
                sql = sql + "   WHERE UPPER(DIVISION_NAME)=UPPER('" + strDivName + "')  ";

                if (strSubDiv != "-SELECT-" && strSubDiv != "" && strSubDiv.ToUpper() != "-ALL-" && strSubDiv.ToUpper() != "ALL")
                {
                    sql = sql + " AND UPPER(SUB_DIVISION)=UPPER('" + strSubDiv + "') ";
                }

                sql = sql + " AND A.SEQ_NO = B.OBSER_ID  and QC_PD_REL ='X' ";
            }
            else
            {

            }

            sql = sql + "  ORDER BY ENTRY_DT DESC ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }

        public DataTable Mobint_LRObservationList_29082024(string strSubDiv, string strDivName, string strRolRght, string SubCluster, string strFromDate, string strToDate)
        {
            string sql = " SELECT DISTINCT SNO_ID, A.OBSERVATION_TYPE, VISIT_DATE, NVL(A.METER_NO, '0') METER_NO, NVL(A.CA_NUMBER,'0') CA_NUMBER, NVL(A.POLE_NO,'0') POLE_NO, ";
            sql = sql + " A.ACTION_TAKEN_FLG, REMARKS, OTHER_RKS, TYPE_OF_ABNORMALITY, SITE_ADDRESS, ADJ_METER_NO1, ADJ_METER_NO2, ";
            sql = sql + " NC_TYPE, UPPER(NEAR_POLE_NO) NEAR_POLE_NO, TO_CHAR(A.ENTRY_DATE,'dd/mm/yyyy') ENTRY_DT, LH.LEAD_STATUS  FROM DIV_SCHEME_SURVEILLANCE A INNER JOIN DIV_SCHEME_SURV_NC_TYP B";
            sql = sql + "  ON A.SNO_ID = B.OBSER_ID LEFT JOIN MOBINT.ENFORCEMENT_LEAD_HISTORY LH ON A.SNO_ID = LH.OBSERVATION_ID";
            if (strDivName.ToUpper() == "JAFFARPUR")
                sql = sql + " WHERE UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
            else if (strDivName.ToUpper() == "MITRAON")
                sql = sql + " WHERE (UPPER(A.DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
            else if (strDivName.ToUpper() == "SARITA VIHAR RURAL" || strDivName.ToUpper() == "SARITA VIHAR")
                sql = sql + " WHERE UPPER(A.DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
            else if (strDivName.ToUpper() == "SARITA VIHAR URBAN" || strDivName.ToUpper() == "NEW FRIENDS COLONY")
                sql = sql + " WHERE (UPPER(A.DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
            else
                sql = sql + " WHERE UPPER(A.DIVISION)=UPPER('" + strDivName + "')";

            if (strSubDiv != "-SELECT-" && strSubDiv != "" && strSubDiv.ToUpper() != "-ALL-" && strSubDiv.ToUpper() != "ALL")
            {
                sql = sql + " AND UPPER(SUB_DIVISION)=UPPER('" + strSubDiv + "') ";
            }
            if (SubCluster != "-SELECT-" && SubCluster != "")
            {
                sql = sql + " AND UPPER(SUB_CLUSTER)=UPPER('" + SubCluster + "') ";
            }
            if (strRolRght == "Street Light")
            {
                sql = sql + " AND (B.NC_SLIGHT = 'Y' OR B.ABN_TYP = 'Y') ";
                sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%' ) ";
            }
            else if (strRolRght == "O & M")
            {
                sql = sql + " AND (B.NC_ONM = 'Y' OR B.ABN_TYP = 'Y') ";
                sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR ";
                sql = sql + " NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%' ";
                sql = sql + " OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  )  ";
            }
            else if (strRolRght == "MMG")
            {
                sql = sql + " AND (B.NC_MMG = 'Y' OR B.ABN_TYP = 'Y') ";
                sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%' ) ";
            }
            else if (strRolRght == "Enforcement")
            {
                sql = sql + " AND (B.NC_ENFORCEMNT = 'Y' OR B.ABN_TYP = 'Y') ";
                sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR  NC_TYPE LIKE '%30%'";
                sql = sql + " OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%'  )  ";
            }
            else if (strRolRght == "Business")
            {
                sql = sql + " AND (B.NC_BUSINESS = 'Y' OR B.ABN_TYP = 'Y') ";
                sql = sql + " AND (NC_TYPE LIKE '%06%' )  ";
            }
            else if (strRolRght == "QC")
            {
                sql = string.Empty;
                sql = " SELECT DISTINCT SEQ_NO SNO_ID, VISIT_DATE, NVL(CA_NO,'0') CA_NUMBER,NVL(METER_NO, '0') METER_NO, NVL(POLE_NO,'0') POLE_NO, ";
                sql = sql + "   SUB_AREA_TYP NC_TYPE, SUB_AREA_TYP_SLCTD, RMKS REMARKS, SCHEME, TO_CHAR(A.ENTRY_DATE,'dd/mm/yyyy') ENTRY_DT FROM DIV_SCHEME_QC_TRANS A, DIV_SCHEME_QC_TYP B   ";
                if (strDivName.ToUpper() == "JAFFARPUR")
                    sql = sql + " WHERE UPPER(DIVISION_NAME) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
                else if (strDivName.ToUpper() == "MITRAON")
                    sql = sql + " WHERE (UPPER(DIVISION_NAME) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION_NAME) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
                else if (strDivName.ToUpper() == "SARITA VIHAR RURAL" || strDivName.ToUpper() == "SARITA VIHAR")
                    sql = sql + " WHERE UPPER(DIVISION_NAME) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
                else if (strDivName.ToUpper() == "SARITA VIHAR URBAN" || strDivName.ToUpper() == "NEW FRIENDS COLONY")
                    sql = sql + " WHERE (UPPER(DIVISION_NAME) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
                else
                    sql = sql + "   WHERE UPPER(DIVISION_NAME)=UPPER('" + strDivName + "')  ";

                if (strSubDiv != "-SELECT-" && strSubDiv != "" && strSubDiv.ToUpper() != "-ALL-" && strSubDiv.ToUpper() != "ALL")
                {
                    sql = sql + " AND UPPER(SUB_DIVISION)=UPPER('" + strSubDiv + "') ";
                }

                if (strFromDate != "" && strToDate != "")
                {
                    sql = sql + " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strFromDate + "', 'dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "', 'dd/mm/yyyy')) ";
                }

                sql = sql + " AND A.SEQ_NO = B.OBSER_ID  and QC_PD_REL ='X' ";
            }
            else
            {

            }

            sql = sql + "  ORDER BY ENTRY_DT DESC ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }




        public static DataTable LR_ActivityModuleSchemeMIS_DIV(string strDiv, string strScheme, string strDate, string strToDate)
        {
            string sql = " SELECT UPPER(DIVISION) AS DIVISION, CABLE_RELATED, DB_RELATED, METER_RELATED FROM(SELECT DIV_CODE, nvl(SUM(CASE WHEN FLAG_TYPE = 'cable' THEN 1 ELSE 0 END),0) CABLE_RELATED, ";
            sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'pole' THEN 1 ELSE 0 END),0) DB_RELATED, nvl(SUM(CASE WHEN FLAG_TYPE = 'meter' THEN 1 ELSE 0 END),0) METER_RELATED ";
            sql += " FROM MOBINT.DIV_SCHEME_LR_ACTIVTY A WHERE 1 = 1 ";
            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "', 'dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "', 'dd/mm/yyyy')) ";
            sql += " AND SCHEME_NO IS NOT NULL GROUP BY DIV_CODE)x, ";
            sql += " (SELECT UNIQUE DIVISION, DIVISION_ID FROM MOBINT.DIV_SCM_SDC_MST_110524 WHERE UPPER(DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ) y WHERE x.DIV_CODE = y.DIVISION_ID ";
            sql += " UNION ";
            sql += " SELECT 'MITRAON' AS DIVISION, CABLE_RELATED, DB_RELATED, METER_RELATED FROM(SELECT DIV_CODE, nvl(SUM(CASE WHEN FLAG_TYPE = 'cable' THEN 1 ELSE 0 END),0) CABLE_RELATED, ";
            sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'pole' THEN 1 ELSE 0 END),0) DB_RELATED, nvl(SUM(CASE WHEN FLAG_TYPE = 'meter' THEN 1 ELSE 0 END),0) METER_RELATED ";
            sql += " FROM MOBINT.DIV_SCHEME_LR_ACTIVTY A WHERE 1 = 1 ";
            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "', 'dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "', 'dd/mm/yyyy')) ";
            sql += " AND SCHEME_NO IS NOT NULL GROUP BY DIV_CODE)x, ";
            sql += " (SELECT UNIQUE DIVISION, DIVISION_ID FROM MOBINT.DIV_SCM_SDC_MST_110524 ";
            sql += " WHERE (UPPER(DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ) y ";
            sql += "WHERE x.DIV_CODE = y.DIVISION_ID ";
            sql += " UNION ";
            sql += " SELECT 'JAFFARPUR' AS DIVISION, CABLE_RELATED, DB_RELATED, METER_RELATED FROM(SELECT DIV_CODE, nvl(SUM(CASE WHEN FLAG_TYPE = 'cable' THEN 1 ELSE 0 END),0) CABLE_RELATED, ";
            sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'pole' THEN 1 ELSE 0 END),0) DB_RELATED, nvl(SUM(CASE WHEN FLAG_TYPE = 'meter' THEN 1 ELSE 0 END),0) METER_RELATED ";
            sql += " FROM MOBINT.DIV_SCHEME_LR_ACTIVTY A WHERE 1 = 1 ";
            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "', 'dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "', 'dd/mm/yyyy')) ";
            sql += " AND SCHEME_NO IS NOT NULL GROUP BY DIV_CODE)x, ";
            sql += " (SELECT UNIQUE DIVISION, DIVISION_ID FROM MOBINT.DIV_SCM_SDC_MST_110524 ";
            sql += " WHERE UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') ) y ";
            sql += "WHERE x.DIV_CODE = y.DIVISION_ID ";
            sql += " UNION ";
            sql += " SELECT 'SARITA VIHAR' AS DIVISION, CABLE_RELATED, DB_RELATED, METER_RELATED FROM(SELECT DIV_CODE, nvl(SUM(CASE WHEN FLAG_TYPE = 'cable' THEN 1 ELSE 0 END),0) CABLE_RELATED, ";
            sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'pole' THEN 1 ELSE 0 END),0) DB_RELATED, nvl(SUM(CASE WHEN FLAG_TYPE = 'meter' THEN 1 ELSE 0 END),0) METER_RELATED ";
            sql += " FROM MOBINT.DIV_SCHEME_LR_ACTIVTY A WHERE 1 = 1 ";
            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "', 'dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "', 'dd/mm/yyyy')) ";
            sql += " AND SCHEME_NO IS NOT NULL GROUP BY DIV_CODE)x, ";
            sql += " (SELECT UNIQUE DIVISION, DIVISION_ID FROM MOBINT.DIV_SCM_SDC_MST_110524 ";
            sql += " WHERE UPPER(DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') ) y ";
            sql += "WHERE x.DIV_CODE = y.DIVISION_ID ";
            sql += " UNION ";
            sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION, CABLE_RELATED, DB_RELATED, METER_RELATED FROM(SELECT DIV_CODE, nvl(SUM(CASE WHEN FLAG_TYPE = 'cable' THEN 1 ELSE 0 END),0) CABLE_RELATED, ";
            sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'pole' THEN 1 ELSE 0 END),0) DB_RELATED, nvl(SUM(CASE WHEN FLAG_TYPE = 'meter' THEN 1 ELSE 0 END),0) METER_RELATED ";
            sql += " FROM MOBINT.DIV_SCHEME_LR_ACTIVTY A WHERE 1 = 1 ";
            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "', 'dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "', 'dd/mm/yyyy')) ";
            sql += " AND SCHEME_NO IS NOT NULL GROUP BY DIV_CODE)x, ";
            sql += " (SELECT UNIQUE DIVISION, DIVISION_ID FROM MOBINT.DIV_SCM_SDC_MST_110524 ";
            sql += " WHERE UPPER(DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ) y ";
            sql += "WHERE x.DIV_CODE = y.DIVISION_ID ";
            sql += " order by DIVISION asc ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }
        public static DataTable LR_ActivityModuleSchemeMIS_SDIV(string strDiv, string strScheme, string strDate, string strToDate)
        {
            string sql = " SELECT DIVISION, CABLE_RELATED, DB_RELATED, METER_RELATED FROM (SELECT DIV_CODE,nvl(SUM(CASE WHEN FLAG_TYPE = 'cable' THEN 1 ELSE 0 END),0) CABLE_RELATED, ";
            sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'pole' THEN 1 ELSE 0 END),0) DB_RELATED, ";
            sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'meter' THEN 1 ELSE 0 END),0) METER_RELATED ";
            sql += " FROM DIV_SCHEME_LR_ACTIVTY A WHERE 1 = 1 ";
            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy'))";
            sql += " AND SCHEME_NO IS NOT NULL ";
            sql += " GROUP BY DIV_CODE)x,  (SELECT UNIQUE DIVISION, DIVISION_ID FROM DIV_SCM_SDC_MST_110524 ) y WHERE x.DIV_CODE = y.DIVISION_ID ";
            sql += " AND y.DIVISION_ID = '" + strDiv + "' ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }

        public static DataTable LR_ActivityModuleSchemeMIS_SUBDIV(string strDiv, string strScheme, string strDate, string strToDate)
        {
            string sql = " SELECT DISTINCT SUB_DIVISION DIVISION, CABLE_RELATED, DB_RELATED, METER_RELATED FROM (SELECT SUB_DIVISION, nvl(SUM(CASE WHEN FLAG_TYPE = 'cable' THEN 1 ELSE 0 END),0) CABLE_RELATED, ";
            sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'pole' THEN 1 ELSE 0 END),0) DB_RELATED, ";
            sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'meter' THEN 1 ELSE 0 END),0) METER_RELATED ";
            sql += " FROM DIV_SCHEME_LR_ACTIVTY A WHERE 1 = 1 ";
            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy'))";
            sql += " AND SUB_DIVISION IS NOT NULL ";
            sql += " GROUP BY SUB_DIVISION)X,  (SELECT UNIQUE SUB_DIVISION AS DIVISION,DIVISION_ID  FROM DIV_SCM_SDC_MST_110524) y WHERE x.SUB_DIVISION = y.DIVISION ";
            //sql += " AND y.DIVISION_ID = '" + strDiv + "' ";
            if (strDiv != "")
            {
                if (strDiv.ToUpper() == "2621")
                    sql = sql + " AND UPPER(y.DIVISION_ID) = UPPER('" + strDiv + "') AND UPPER(SUB_DIVISION) NOT IN ('MITRAON', 'MUNDELLA')";
                else
                    sql = sql + " AND UPPER(y.DIVISION_ID) = UPPER('" + strDiv + "')";
            }


            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }


        //public static DataTable LR_ActivityModuleSchemeMIS_SUBDIV(string strDiv, string strScheme, string strDate, string strToDate)
        //{
        //    string sql = " SELECT DISTINCT SUB_DIVISION DIVISION, CABLE_RELATED, DB_RELATED, METER_RELATED FROM (SELECT SUB_DIVISION, nvl(SUM(CASE WHEN FLAG_TYPE = 'cable' THEN 1 ELSE 0 END),0) CABLE_RELATED, ";
        //    sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'pole' THEN 1 ELSE 0 END),0) DB_RELATED, ";
        //    sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'meter' THEN 1 ELSE 0 END),0) METER_RELATED ";
        //    sql += " FROM DIV_SCHEME_LR_ACTIVTY A WHERE 1 = 1 ";
        //    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy'))";
        //    sql += " AND SUB_DIVISION IS NOT NULL ";
        //    sql += " GROUP BY SUB_DIVISION)X,  (SELECT UNIQUE SUB_DIVISION AS DIVISION,DIVISION_ID  FROM DIV_SCM_SDC_MST_110524) y WHERE x.SUB_DIVISION = y.DIVISION ";
        //    if (strDiv != "")
        //    {
        //        if (strDiv.ToUpper() == "2621")
        //            sql = sql + " AND UPPER(y.DIVISION_ID) = UPPER('" + strDiv + "') AND UPPER(SUB_DIVISION) NOT IN ('MITRAON', 'MUNDELLA')";
        //        else
        //            sql = sql + " AND UPPER(y.DIVISION_ID) = UPPER('" + strDiv + "')";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}
        public static DataTable LR_ActivityModuleSchemeMIS_SSUBDIV(string strDiv, string strScheme, string strDate, string strToDate)
        {
            string sql = " SELECT DISTINCT SUB_DIVISION DIVISION,nvl(SUM(CASE WHEN FLAG_TYPE = 'cable' THEN 1 ELSE 0 END),0) CABLE_RELATED, ";
            sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'pole' THEN 1 ELSE 0 END),0) DB_RELATED, ";
            sql += " nvl(SUM(CASE WHEN FLAG_TYPE = 'meter' THEN 1 ELSE 0 END),0) METER_RELATED ";
            sql += " FROM DIV_SCHEME_LR_ACTIVTY A WHERE 1 = 1 ";
            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy'))";
            sql += " AND SUB_DIVISION IS NOT NULL ";
            sql += " AND UPPER(SUB_DIVISION) = UPPER('" + strDiv + "') ";
            sql += " GROUP BY SUB_DIVISION ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }
        public DataTable Mobapp_LRDashborad(string EntryDate)
        {
            string sql = " SELECT DISTINCT RES2.CIRCLE,NVL(RES1.METER_RELATED,0) METER_RELATED,NVL(RES1.DB_RELATED,0) DB_RELATED,NVL(RES1.CABLE_RELATED,0) CABLE_RELATED FROM  ";
            sql = sql + " (SELECT CIRCLE,SUM(MET_RPL_ONLY + MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED,SUM(POLE_DB_REL) DB_RELATED, ";
            sql = sql + "  SUM(ARM_CBL_MET) CABLE_RELATED ";
            sql = sql + " FROM DIV_SCHEME_VENDOR_DTDATA  ";
            sql = sql + " WHERE TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
            sql = sql + " GROUP BY CIRCLE) RES1,(SELECT UNIQUE CIRCLE FROM DIV_SCM_SDC_MST_110524 ORDER BY CIRCLE) RES2  ";
            sql = sql + " WHERE UPPER(RES1.CIRCLE(+))= UPPER(RES2.CIRCLE) ORDER BY RES2.CIRCLE";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "DIV_SCHEME_VENDOR_DTDATA ";
            return dt;
        }
        public DataTable Mobapp_LRDashboradSubDivWise(string EntryDate)
        {
            string sql = " SELECT DISTINCT RES2.SUB_DIVISION DIVISION, NVL(RES1.METER_RELATED, 0) METER_RELATED, ";
            sql += " NVL(RES1.DB_RELATED, 0) DB_RELATED,NVL(RES1.CABLE_RELATED, 0) CABLE_RELATED ";
            sql += " FROM ";
            sql += " (SELECT SUB_DIVISION, SUM(MET_RPL_ONLY + MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED, ";
            sql += " SUM(POLE_DB_REL) DB_RELATED, SUM(ARM_CBL_MET) CABLE_RELATED FROM MOBINT.DIV_SCHEME_VENDOR_DTDATA ";
            sql += " WHERE TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
            sql += " GROUP BY SUB_DIVISION) RES1, ";
            sql += " (SELECT UNIQUE SUB_DIVISION FROM MOBINT.DIV_SCM_SDC_MST_110524 ";
            sql += " WHERE UPPER(DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' )) RES2 ";
            sql += " WHERE UPPER(RES1.SUB_DIVISION(+)) = UPPER(RES2.SUB_DIVISION) ";
            sql += " UNION ";
            sql += " SELECT DISTINCT RES2.SUB_DIVISION DIVISION, NVL(RES1.METER_RELATED, 0) METER_RELATED, ";
            sql += " NVL(RES1.DB_RELATED, 0) DB_RELATED,NVL(RES1.CABLE_RELATED, 0) CABLE_RELATED ";
            sql += " FROM ";
            sql += " (SELECT SUB_DIVISION, SUM(MET_RPL_ONLY + MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED, ";
            sql += " SUM(POLE_DB_REL) DB_RELATED, SUM(ARM_CBL_MET) CABLE_RELATED FROM MOBINT.DIV_SCHEME_VENDOR_DTDATA ";
            sql += " WHERE TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
            sql += " GROUP BY SUB_DIVISION) RES1, ";
            sql += " (SELECT UNIQUE SUB_DIVISION FROM MOBINT.DIV_SCM_SDC_MST_110524 ";
            sql += " WHERE (UPPER(DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
            sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON'))) RES2 ";
            sql += " WHERE UPPER(RES1.SUB_DIVISION(+)) = UPPER(RES2.SUB_DIVISION) ";
            sql += " UNION ";
            sql += " SELECT DISTINCT RES2.SUB_DIVISION DIVISION, NVL(RES1.METER_RELATED, 0) METER_RELATED, ";
            sql += " NVL(RES1.DB_RELATED, 0) DB_RELATED,NVL(RES1.CABLE_RELATED, 0) CABLE_RELATED ";
            sql += " FROM ";
            sql += " (SELECT SUB_DIVISION, SUM(MET_RPL_ONLY + MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED, ";
            sql += " SUM(POLE_DB_REL) DB_RELATED, SUM(ARM_CBL_MET) CABLE_RELATED FROM MOBINT.DIV_SCHEME_VENDOR_DTDATA ";
            sql += " WHERE TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
            sql += " GROUP BY SUB_DIVISION) RES1, ";
            sql += " (SELECT UNIQUE SUB_DIVISION FROM MOBINT.DIV_SCM_SDC_MST_110524 ";
            sql += " WHERE UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')) RES2 ";
            sql += " WHERE UPPER(RES1.SUB_DIVISION(+)) = UPPER(RES2.SUB_DIVISION) ";
            sql += " UNION ";
            sql += " SELECT DISTINCT RES2.SUB_DIVISION DIVISION, NVL(RES1.METER_RELATED, 0) METER_RELATED, ";
            sql += " NVL(RES1.DB_RELATED, 0) DB_RELATED,NVL(RES1.CABLE_RELATED, 0) CABLE_RELATED ";
            sql += " FROM ";
            sql += " (SELECT SUB_DIVISION, SUM(MET_RPL_ONLY + MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED, ";
            sql += " SUM(POLE_DB_REL) DB_RELATED, SUM(ARM_CBL_MET) CABLE_RELATED FROM MOBINT.DIV_SCHEME_VENDOR_DTDATA ";
            sql += " WHERE TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
            sql += " GROUP BY SUB_DIVISION) RES1, ";
            sql += " (SELECT UNIQUE SUB_DIVISION FROM MOBINT.DIV_SCM_SDC_MST_110524 ";
            sql += " WHERE UPPER(DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')) RES2 ";
            sql += " WHERE UPPER(RES1.SUB_DIVISION(+)) = UPPER(RES2.SUB_DIVISION) ";
            sql += " UNION ";
            sql += " SELECT DISTINCT RES2.SUB_DIVISION DIVISION, NVL(RES1.METER_RELATED, 0) METER_RELATED, ";
            sql += " NVL(RES1.DB_RELATED, 0) DB_RELATED,NVL(RES1.CABLE_RELATED, 0) CABLE_RELATED ";
            sql += " FROM ";
            sql += " (SELECT SUB_DIVISION, SUM(MET_RPL_ONLY + MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED, ";
            sql += " SUM(POLE_DB_REL) DB_RELATED, SUM(ARM_CBL_MET) CABLE_RELATED FROM MOBINT.DIV_SCHEME_VENDOR_DTDATA ";
            sql += " WHERE TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
            sql += " GROUP BY SUB_DIVISION) RES1, ";
            sql += " (SELECT UNIQUE SUB_DIVISION FROM MOBINT.DIV_SCM_SDC_MST_110524 ";
            sql += " WHERE UPPER(DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')) RES2 ";
            sql += " WHERE UPPER(RES1.SUB_DIVISION(+)) = UPPER(RES2.SUB_DIVISION) ";
            sql += " ORDER BY DIVISION ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "DIV_SCHEME_VENDOR_DTDATA ";
            return dt;
        }
        //public DataTable Mobapp_LRDashboradDivWise(string EntryDate)
        //{
        //    string sql = " SELECT DISTINCT RES2.DIVISION || ' (' || RES2.DIVISION_ID || ')' DIVISION,NVL(RES1.METER_RELATED, 0) METER_RELATED, ";
        //    sql += " NVL(RES1.DB_RELATED, 0) DB_RELATED,NVL(RES1.CABLE_RELATED, 0) CABLE_RELATED FROM ";
        //    sql += " (SELECT DIVISION_ID, SUM(MET_RPL_ONLY +MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED, ";
        //    sql += " SUM(POLE_DB_REL) DB_RELATED, SUM(ARM_CBL_MET) CABLE_RELATED FROM MOBINT.DIV_SCHEME_VENDOR_DTDATA ";
        //    sql += " WHERE TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
        //    sql += " GROUP BY DIVISION_ID) RES1, ";
        //    sql += " (SELECT UNIQUE DIVISION_ID, UPPER(DIVISION) DIVISION FROM MOBINT.DIV_SCM_SDC_MST_110524 ";
        //    sql += " WHERE UPPER(DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' )) RES2 ";
        //    sql += " WHERE UPPER(RES1.DIVISION_ID(+)) = UPPER(RES2.DIVISION_ID) ";
        //    sql += " UNION ";
        //    sql += " SELECT 'MITRAON' || ' (' || RES2.DIVISION_ID || ')' DIVISION,NVL(RES1.METER_RELATED, 0) METER_RELATED, ";
        //    sql += " NVL(RES1.DB_RELATED, 0) DB_RELATED,NVL(RES1.CABLE_RELATED, 0) CABLE_RELATED FROM ";
        //    sql += " (SELECT DIVISION_ID, SUM(MET_RPL_ONLY +MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED, ";
        //    sql += " SUM(POLE_DB_REL) DB_RELATED, SUM(ARM_CBL_MET) CABLE_RELATED FROM MOBINT.DIV_SCHEME_VENDOR_DTDATA ";
        //    sql += " WHERE TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
        //    sql += " GROUP BY DIVISION_ID) RES1, ";
        //    sql += " (SELECT UNIQUE DIVISION_ID, UPPER(DIVISION) DIVISION FROM MOBINT.DIV_SCM_SDC_MST_110524 ";
        //    sql += " WHERE (UPPER(DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
        //    sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON'))) RES2 ";
        //    sql += " WHERE UPPER(RES1.DIVISION_ID(+)) = UPPER(RES2.DIVISION_ID) ";
        //    sql += " UNION ";
        //    sql += " SELECT 'JAFFARPUR' || ' (' || RES2.DIVISION_ID || ')' DIVISION,NVL(RES1.METER_RELATED, 0) METER_RELATED, ";
        //    sql += " NVL(RES1.DB_RELATED, 0) DB_RELATED,NVL(RES1.CABLE_RELATED, 0) CABLE_RELATED FROM ";
        //    sql += " (SELECT DIVISION_ID, SUM(MET_RPL_ONLY +MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED, ";
        //    sql += " SUM(POLE_DB_REL) DB_RELATED, SUM(ARM_CBL_MET) CABLE_RELATED FROM MOBINT.DIV_SCHEME_VENDOR_DTDATA ";
        //    sql += " WHERE TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
        //    sql += " GROUP BY DIVISION_ID) RES1, ";
        //    sql += " (SELECT UNIQUE DIVISION_ID, UPPER(DIVISION) DIVISION FROM MOBINT.DIV_SCM_SDC_MST_110524 ";
        //    sql += " WHERE UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')) RES2 ";
        //    sql += " WHERE UPPER(RES1.DIVISION_ID(+)) = UPPER(RES2.DIVISION_ID) ";
        //    sql += " UNION ";
        //    sql += " SELECT 'SARITA VIHAR' || ' (' || RES2.DIVISION_ID || ')' DIVISION,NVL(RES1.METER_RELATED, 0) METER_RELATED, ";
        //    sql += " NVL(RES1.DB_RELATED, 0) DB_RELATED,NVL(RES1.CABLE_RELATED, 0) CABLE_RELATED FROM ";
        //    sql += " (SELECT DIVISION_ID, SUM(MET_RPL_ONLY +MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED, ";
        //    sql += " SUM(POLE_DB_REL) DB_RELATED, SUM(ARM_CBL_MET) CABLE_RELATED FROM MOBINT.DIV_SCHEME_VENDOR_DTDATA ";
        //    sql += " WHERE TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
        //    sql += " GROUP BY DIVISION_ID) RES1, ";
        //    sql += " (SELECT UNIQUE DIVISION_ID, UPPER(DIVISION) DIVISION FROM MOBINT.DIV_SCM_SDC_MST_110524 ";
        //    sql += " WHERE UPPER(DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')) RES2 ";
        //    sql += " WHERE UPPER(RES1.DIVISION_ID(+)) = UPPER(RES2.DIVISION_ID) ";
        //    sql += " UNION ";
        //    sql += " SELECT 'NEW FRIENDS COLONY' || ' (' || RES2.DIVISION_ID || ')' DIVISION,NVL(RES1.METER_RELATED, 0) METER_RELATED, ";
        //    sql += " NVL(RES1.DB_RELATED, 0) DB_RELATED,NVL(RES1.CABLE_RELATED, 0) CABLE_RELATED FROM ";
        //    sql += " (SELECT DIVISION_ID, SUM(MET_RPL_ONLY +MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED, ";
        //    sql += " SUM(POLE_DB_REL) DB_RELATED, SUM(ARM_CBL_MET) CABLE_RELATED FROM MOBINT.DIV_SCHEME_VENDOR_DTDATA ";
        //    sql += " WHERE TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
        //    sql += " GROUP BY DIVISION_ID) RES1, ";
        //    sql += " (SELECT UNIQUE DIVISION_ID, UPPER(DIVISION) DIVISION FROM MOBINT.DIV_SCM_SDC_MST_110524 ";
        //    sql += " WHERE UPPER(DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ) RES2 ";
        //    sql += " WHERE UPPER(RES1.DIVISION_ID(+)) = UPPER(RES2.DIVISION_ID) ";
        //    sql += " ORDER BY DIVISION ";


        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "DIV_SCHEME_VENDOR_DTDATA ";
        //    return dt;
        //}

        public DataTable Mobapp_LRDashboradDivWise(string EntryDate)
        {
            string sql = " SELECT DISTINCT RES2.DIVISION || ' (' || RES2.DIVISION_ID || ')' DIVISION,NVL(RES1.METER_RELATED, 0) METER_RELATED, ";
            sql += " NVL(RES1.DB_RELATED, 0) DB_RELATED,NVL(RES1.CABLE_RELATED, 0) CABLE_RELATED FROM ";
            sql += " (SELECT DIVISION_ID, SUM(MET_RPL_ONLY +MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED, ";
            sql += " SUM(POLE_DB_REL) DB_RELATED, SUM(ARM_CBL_MET) CABLE_RELATED FROM MOBINT.DIV_SCHEME_VENDOR_DTDATA ";
            sql += " WHERE TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
            sql += " GROUP BY DIVISION_ID) RES1, ";
            sql += " (SELECT UNIQUE DIVISION_ID, UPPER(DIVISION) DIVISION FROM MOBINT.DIV_SCM_SDC_MST_110524 ";
            sql += " WHERE UPPER(DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' )) RES2 ";
            sql += " WHERE UPPER(RES1.DIVISION_ID) = UPPER(RES2.DIVISION_ID) ";
            sql += " UNION ";
            sql += " SELECT 'MITRAON' || ' (' || '2623' || ')' DIVISION, NVL(RES1.METER_RELATED, 0) METER_RELATED, ";
            sql += " NVL(RES1.DB_RELATED, 0) DB_RELATED,NVL(RES1.CABLE_RELATED, 0) CABLE_RELATED FROM ";
            sql += " (SELECT DIVISION_ID, SUM(MET_RPL_ONLY +MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED, ";
            sql += " SUM(POLE_DB_REL) DB_RELATED, SUM(ARM_CBL_MET) CABLE_RELATED FROM MOBINT.DIV_SCHEME_VENDOR_DTDATA ";
            sql += " WHERE(UPPER(DIVISION_ID) IN('2623') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
            sql += " OR UPPER(DIVISION_ID) IN('2621') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
            sql += " AND TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
            sql += " GROUP BY DIVISION_ID) RES1, ";
            sql += " (SELECT UNIQUE DIVISION_ID, UPPER(DIVISION) DIVISION FROM MOBINT.DIV_SCM_SDC_MST_110524 ";
            sql += " WHERE (UPPER(DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
            sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON'))) RES2 ";
            sql += " WHERE UPPER(RES1.DIVISION_ID) = UPPER(RES2.DIVISION_ID) ";
            sql += " UNION ";
            sql += " SELECT 'JAFFARPUR' || ' (' || RES2.DIVISION_ID || ')' DIVISION,NVL(RES1.METER_RELATED, 0) METER_RELATED, ";
            sql += " NVL(RES1.DB_RELATED, 0) DB_RELATED,NVL(RES1.CABLE_RELATED, 0) CABLE_RELATED FROM ";
            sql += " (SELECT DIVISION_ID, SUM(MET_RPL_ONLY +MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED, ";
            sql += " SUM(POLE_DB_REL) DB_RELATED, SUM(ARM_CBL_MET) CABLE_RELATED FROM MOBINT.DIV_SCHEME_VENDOR_DTDATA WHERE UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') ";
            sql += " AND TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
            sql += " GROUP BY DIVISION_ID) RES1, ";
            sql += " (SELECT UNIQUE DIVISION_ID, UPPER(DIVISION) DIVISION FROM MOBINT.DIV_SCM_SDC_MST_110524 ";
            sql += " WHERE UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')) RES2 ";
            sql += " WHERE UPPER(RES1.DIVISION_ID) = UPPER(RES2.DIVISION_ID) ";
            sql += " UNION ";
            sql += " SELECT 'SARITA VIHAR' || ' (' || RES2.DIVISION_ID || ')' DIVISION,NVL(RES1.METER_RELATED, 0) METER_RELATED, ";
            sql += " NVL(RES1.DB_RELATED, 0) DB_RELATED,NVL(RES1.CABLE_RELATED, 0) CABLE_RELATED FROM ";
            sql += " (SELECT DIVISION_ID, SUM(MET_RPL_ONLY +MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED, ";
            sql += " SUM(POLE_DB_REL) DB_RELATED, SUM(ARM_CBL_MET) CABLE_RELATED FROM MOBINT.DIV_SCHEME_VENDOR_DTDATA ";
            sql += " WHERE TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
            sql += " GROUP BY DIVISION_ID) RES1, ";
            sql += " (SELECT UNIQUE DIVISION_ID, UPPER(DIVISION) DIVISION FROM MOBINT.DIV_SCM_SDC_MST_110524 ";
            sql += " WHERE UPPER(DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')) RES2 ";
            sql += " WHERE UPPER(RES1.DIVISION_ID) = UPPER(RES2.DIVISION_ID) ";
            sql += " UNION ";
            sql += " SELECT 'NEW FRIENDS COLONY' || ' (' || RES2.DIVISION_ID || ')' DIVISION,NVL(RES1.METER_RELATED, 0) METER_RELATED, ";
            sql += " NVL(RES1.DB_RELATED, 0) DB_RELATED,NVL(RES1.CABLE_RELATED, 0) CABLE_RELATED FROM ";
            sql += " (SELECT DIVISION_ID, SUM(MET_RPL_ONLY +MET_REL_ONLY + BOTH_ACT_MET + MET_INS_QUL) METER_RELATED, ";
            sql += " SUM(POLE_DB_REL) DB_RELATED, SUM(ARM_CBL_MET) CABLE_RELATED FROM MOBINT.DIV_SCHEME_VENDOR_DTDATA ";
            sql += " WHERE TRUNC(VS_ENTRY_DATE) = TRUNC(TO_DATE('" + EntryDate + "','dd/mm/yyyy')) ";
            sql += " GROUP BY DIVISION_ID) RES1, ";
            sql += " (SELECT UNIQUE DIVISION_ID, UPPER(DIVISION) DIVISION FROM MOBINT.DIV_SCM_SDC_MST_110524 ";
            sql += " WHERE UPPER(DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ) RES2 ";
            sql += " WHERE UPPER(RES1.DIVISION_ID) = UPPER(RES2.DIVISION_ID) ";
            sql += " ORDER BY DIVISION ";


            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "DIV_SCHEME_VENDOR_DTDATA ";
            return dt;
        }

        public static DataTable LR_ActivityModuleSchemeMIS_ALLC(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        {
            string sql = string.Empty;

            if (strRolRght == "O & M")
            {
                sql = " SELECT DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
                sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
                sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
                sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
                sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
                sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
                sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) HAVING COUNT(*) > 0 ";
                sql += " GROUP BY DIVISION ";
                sql += " UNION ";
                sql += " SELECT 'MITRAON' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
                sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
                sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
                sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
                sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
                sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
                sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
                sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) HAVING COUNT(*) > 0 ";
                sql += " UNION ";
                sql += " SELECT 'JAFFARPUR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
                sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
                sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
                sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
                sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
                sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
                sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') HAVING COUNT(*) > 0 ";
                sql += " UNION ";
                sql += " SELECT 'SARITA VIHAR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
                sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
                sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
                sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
                sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
                sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
                sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') HAVING COUNT(*) > 0 ";
                sql += " UNION ";
                sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
                sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
                sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
                sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
                sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
                sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
                sql += " AND UPPER(DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') HAVING COUNT(*) > 0  ORDER BY DIVISION";
            }
            if (strRolRght == "Business")
            {
                sql = " SELECT DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%06%') ";
                sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) HAVING COUNT(*) > 0 ";
                sql += " GROUP BY DIVISION ";
                sql += " UNION ";
                sql += " SELECT 'MITRAON' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%06%') ";
                sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
                sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) HAVING COUNT(*) > 0 ";
                sql += " UNION ";
                sql += " SELECT 'JAFFARPUR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%06%') ";
                sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') HAVING COUNT(*) > 0 ";
                sql += " UNION ";
                sql += " SELECT 'SARITA VIHAR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%06%') ";
                sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') HAVING COUNT(*) > 0 ";
                sql += " UNION ";
                sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%06%') ";
                sql += " AND UPPER(DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') HAVING COUNT(*) > 0 ORDER BY DIVISION ";
            }
            if (strRolRght == "Street Light")
            {
                sql = " SELECT DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
                sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
                sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
                sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) HAVING COUNT(*) > 0 ";
                sql += " GROUP BY DIVISION ";
                sql += " UNION ";
                sql += " SELECT 'MITRAON' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
                sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
                sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
                sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
                sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) HAVING COUNT(*) > 0 ";
                sql += " UNION ";
                sql += " SELECT 'JAFFARPUR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
                sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
                sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
                sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') HAVING COUNT(*) > 0 ";
                sql += " UNION ";
                sql += " SELECT 'SARITA VIHAR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
                sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
                sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
                sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') HAVING COUNT(*) > 0 ";
                sql += " UNION ";
                sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
                sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
                sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
                sql += " AND UPPER(DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') HAVING COUNT(*) > 0 ";
                sql += " ORDER BY DIVISION ";
            }
            if (strRolRght == "Enforcement")
            {
                sql = " SELECT DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ";
                sql += " OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
                sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) HAVING COUNT(*) > 0 ";
                sql += " GROUP BY DIVISION ";
                sql += " UNION ";
                sql += " SELECT 'MITRAON' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ";
                sql += " OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
                sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
                sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) HAVING COUNT(*) > 0 ";
                sql += " UNION ";
                sql += " SELECT 'JAFFARPUR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ";
                sql += " OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
                sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') HAVING COUNT(*) > 0 ";
                sql += " UNION ";
                sql += " SELECT 'SARITA VIHAR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ";
                sql += " OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
                sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') HAVING COUNT(*) > 0 ";
                sql += " UNION ";
                sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ";
                sql += " OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
                sql += " AND UPPER(DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') HAVING COUNT(*) > 0 ";
                sql += " ORDER BY DIVISION ";
            }
            if (strRolRght == "MMG")
            {
                sql = " SELECT DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
                sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
                sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
                sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) HAVING COUNT(*) > 0 ";
                sql += " GROUP BY DIVISION ";
                sql += " UNION ";
                sql += " SELECT 'MITRAON' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
                sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
                sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
                sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
                sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) HAVING COUNT(*) > 0 ";
                sql += " UNION ";
                sql += " SELECT 'JAFFARPUR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
                sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
                sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
                sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') HAVING COUNT(*) > 0 ";
                sql += " UNION ";
                sql += " SELECT 'SARITA VIHAR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
                sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
                sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
                sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') HAVING COUNT(*) > 0 ";
                sql += " UNION ";
                sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
                sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
                sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
                sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') HAVING COUNT(*) > 0 ";
                sql += " ORDER BY DIVISION ";
            }
            if (strRolRght == "ALL")
            {
                sql = " SELECT DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
                sql += " ";
                sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
                sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) HAVING COUNT(*) > 0 ";
                sql += " GROUP BY DIVISION ";
                sql += " UNION ";
                sql += " SELECT 'MITRAON' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
                sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
                sql += " ";
                sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
                sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) HAVING COUNT(*) > 0 ";
                sql += " UNION ";
                sql += " SELECT 'JAFFARPUR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
                sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
                sql += " ";
                sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') HAVING COUNT(*) > 0 ";
                sql += " UNION ";
                sql += " SELECT 'SARITA VIHAR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
                sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
                sql += " ";
                sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') HAVING COUNT(*) > 0 ";
                sql += " UNION ";
                sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
                sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
                sql += " ";
                sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') HAVING COUNT(*) > 0 ";
                sql += " ORDER BY DIVISION ";
            }
            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }

        //public static DataTable LR_ActivityModuleSchemeMIS_ALLC(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
        //        sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
        //        sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
        //        sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
        //        sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
        //        sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql += " GROUP BY DIVISION ";
        //        sql += " UNION ";
        //        sql += " SELECT 'MITRAON' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
        //        sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
        //        sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
        //        sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
        //        sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
        //        sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
        //        sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //        sql += " UNION ";
        //        sql += " SELECT 'JAFFARPUR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
        //        sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
        //        sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
        //        sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
        //        sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
        //        sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') ";
        //        sql += " UNION ";
        //        sql += " SELECT 'SARITA VIHAR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
        //        sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
        //        sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
        //        sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
        //        sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
        //        sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') ";
        //        sql += " UNION ";
        //        sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
        //        sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
        //        sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
        //        sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
        //        sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
        //        sql += " AND UPPER(DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')  ORDER BY DIVISION";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%06%') ";
        //        sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql += " GROUP BY DIVISION ";
        //        sql += " UNION ";
        //        sql += " SELECT 'MITRAON' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%06%') ";
        //        sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
        //        sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //        sql += " UNION ";
        //        sql += " SELECT 'JAFFARPUR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%06%') ";
        //        sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') ";
        //        sql += " UNION ";
        //        sql += " SELECT 'SARITA VIHAR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%06%') ";
        //        sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') ";
        //        sql += " UNION ";
        //        sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%06%') ";
        //        sql += " AND UPPER(DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
        //        sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
        //        sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql += " GROUP BY DIVISION ";
        //        sql += " UNION ";
        //        sql += " SELECT 'MITRAON' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
        //        sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
        //        sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
        //        sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //        sql += " UNION ";
        //        sql += " SELECT 'JAFFARPUR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
        //        sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
        //        sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') ";
        //        sql += " UNION ";
        //        sql += " SELECT 'SARITA VIHAR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
        //        sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
        //        sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') ";
        //        sql += " UNION ";
        //        sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
        //        sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
        //        sql += " AND UPPER(DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ";
        //        sql += " ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ";
        //        sql += " OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
        //        sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql += " GROUP BY DIVISION ";
        //        sql += " UNION ";
        //        sql += " SELECT 'MITRAON' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ";
        //        sql += " OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
        //        sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
        //        sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //        sql += " UNION ";
        //        sql += " SELECT 'JAFFARPUR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ";
        //        sql += " OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
        //        sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') ";
        //        sql += " UNION ";
        //        sql += " SELECT 'SARITA VIHAR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ";
        //        sql += " OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
        //        sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') ";
        //        sql += " UNION ";
        //        sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' ";
        //        sql += " OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
        //        sql += " AND UPPER(DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ";
        //        sql += " ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
        //        sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
        //        sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql += " GROUP BY DIVISION ";
        //        sql += " UNION ";
        //        sql += " SELECT 'MITRAON' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
        //        sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
        //        sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
        //        sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //        sql += " UNION ";
        //        sql += " SELECT 'JAFFARPUR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
        //        sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
        //        sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') ";
        //        sql += " UNION ";
        //        sql += " SELECT 'SARITA VIHAR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
        //        sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
        //        sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') ";
        //        sql += " UNION ";
        //        sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) ";
        //        sql += " BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
        //        sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ";
        //        sql += " ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = " SELECT DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
        //        sql += " ";
        //        sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
        //        sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql += " GROUP BY DIVISION ";
        //        sql += " UNION ";
        //        sql += " SELECT 'MITRAON' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
        //        sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
        //        sql += " ";
        //        sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
        //        sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //        sql += " UNION ";
        //        sql += " SELECT 'JAFFARPUR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
        //        sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
        //        sql += " ";
        //        sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') ";
        //        sql += " UNION ";
        //        sql += " SELECT 'SARITA VIHAR' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
        //        sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
        //        sql += " ";
        //        sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') ";
        //        sql += " UNION ";
        //        sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
        //        sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
        //        sql += " ";
        //        sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ";
        //        sql += " ORDER BY DIVISION ";
        //    }
        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}
        //public static DataTable LR_ActivityModuleSchemeMIS_SLCDC(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT '' X, DIVISION CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
        //        sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
        //        sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
        //        sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
        //        sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
        //        sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql += " GROUP BY DIVISION ";

        //        if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'MITRAON' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
        //            sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
        //            sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
        //            sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
        //            sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
        //            sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
        //            sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'JAFFARPUR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
        //            sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
        //            sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
        //            sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
        //            sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
        //            sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') ";
        //        }

        //        if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'SARITA VIHAR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
        //            sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
        //            sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
        //            sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
        //            sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
        //            sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') ";
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'NEW FRIENDS COLONY' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
        //            sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
        //            sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
        //            sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
        //            sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
        //            sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ";
        //        }
        //        sql += " ORDER BY CIRCLE ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT '' X, DIVISION CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND(NC_TYPE LIKE '%06%') ";
        //        sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql += " GROUP BY DIVISION ";


        //        if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'MITRAON' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
        //            sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND(NC_TYPE LIKE '%06%') ";
        //            sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
        //            sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'JAFFARPUR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
        //            sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND(NC_TYPE LIKE '%06%') ";
        //            sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') ";
        //        }


        //        if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'SARITA VIHAR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
        //            sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND(NC_TYPE LIKE '%06%') ";
        //            sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') ";
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'NEW FRIENDS COLONY' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
        //            sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND(NC_TYPE LIKE '%06%') ";
        //            sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ";
        //        }
        //        sql += " ORDER BY CIRCLE ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT '' X, DIVISION CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, ";
        //        sql += " MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
        //        sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql += " GROUP BY DIVISION ";


        //        if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'MITRAON' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, ";
        //            sql += " MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
        //            sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
        //            sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'JAFFARPUR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, ";
        //            sql += " MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
        //            sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') ";
        //        }


        //        if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'SARITA VIHAR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, ";
        //            sql += " MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
        //            sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') ";
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'NEW FRIENDS COLONY' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, ";
        //            sql += " MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
        //            sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ";
        //        }
        //        sql += " ORDER BY CIRCLE ";
        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT '' X, DIVISION CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
        //        sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql += " GROUP BY DIVISION ";

        //        if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'MITRAON' CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
        //            sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
        //            sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'JAFFARPUR' CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
        //            sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') ";
        //        }

        //        if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'SARITA VIHAR' CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
        //            sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') ";
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'NEW FRIENDS COLONY' CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
        //            sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ";
        //        }
        //        sql += " ORDER BY CIRCLE ";

        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT '' X, DIVISION CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //        sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
        //        sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql += " GROUP BY DIVISION ";


        //        if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'MITRAON' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
        //            sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
        //            sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
        //            sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'JAFFARPUR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
        //            sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
        //            sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') ";
        //        }


        //        if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'SARITA VIHAR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
        //            sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
        //            sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') ";
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'NEW FRIENDS COLONY' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
        //            sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
        //            sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
        //            sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ";
        //        }

        //        sql += " ORDER BY CIRCLE ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = " SELECT '' X, DIVISION CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
        //        sql += " ";
        //        sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
        //        sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //        if (strSubDiv != "" && strSubDiv.ToUpper() != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql += " GROUP BY DIVISION ";

        //        if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'MITRAON' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
        //            sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
        //            sql += " ";
        //            sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //            if (strSubDiv != "" && strSubDiv.ToUpper() != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
        //            sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'JAFFARPUR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
        //            sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
        //            sql += " ";
        //            sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //            if (strSubDiv != "" && strSubDiv.ToUpper() != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') ";
        //        }

        //        if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'SARITA VIHAR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
        //            sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
        //            sql += " ";
        //            sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //            if (strSubDiv != "" && strSubDiv.ToUpper() != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') ";
        //            sql += " UNION ";
        //            sql += " SELECT '' X, 'NEW FRIENDS COLONY' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
        //            sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
        //            sql += " ";
        //            sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
        //            if (strSubDiv != "" && strSubDiv.ToUpper() != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ";
        //        }
        //        sql += " ORDER BY CIRCLE ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        public static DataTable LR_ActivityModuleSchemeMIS_SLCDC(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        {
            string sql = string.Empty;

            if (strRolRght == "O & M")
            {
                sql = " SELECT '' X, DIVISION CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "")
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
                sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
                sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
                sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
                sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
                sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) HAVING COUNT(*) > 0 ";
                sql += " GROUP BY DIVISION ";

                if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql += " UNION ";
                    sql += " SELECT '' X, 'MITRAON' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
                    sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
                    sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
                    sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
                    sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
                    sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
                    sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) HAVING COUNT(*) > 0 ";
                    sql += " UNION ";
                    sql += " SELECT '' X, 'JAFFARPUR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
                    sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
                    sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
                    sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
                    sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
                    sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') HAVING COUNT(*) > 0 ";
                }

                if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql += " UNION ";
                    sql += " SELECT '' X, 'SARITA VIHAR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
                    sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
                    sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
                    sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
                    sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
                    sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') HAVING COUNT(*) > 0 ";
                    sql += " UNION ";
                    sql += " SELECT '' X, 'NEW FRIENDS COLONY' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    sql += " AND(NC_TYPE LIKE '%01%' OR NC_TYPE LIKE '%02%' OR NC_TYPE LIKE '%05%' OR NC_TYPE LIKE '%07%' OR NC_TYPE LIKE '%08%' ";
                    sql += " OR NC_TYPE LIKE '%09%' OR NC_TYPE LIKE '%10%' OR NC_TYPE LIKE '%11%' OR NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' ";
                    sql += " OR NC_TYPE LIKE '%14%' OR NC_TYPE LIKE '%15%' OR NC_TYPE LIKE '%16%' OR NC_TYPE LIKE '%20%' OR NC_TYPE LIKE '%21%' ";
                    sql += " OR NC_TYPE LIKE '%22%' OR NC_TYPE LIKE '%23%' OR NC_TYPE LIKE '%24%' OR NC_TYPE LIKE '%25%' OR NC_TYPE LIKE '%29%' ";
                    sql += " OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%') ";
                    sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') HAVING COUNT(*) > 0 ";
                }
                sql += " ORDER BY CIRCLE ";
            }
            if (strRolRght == "Business")
            {
                sql = " SELECT '' X, DIVISION CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
                sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                }
                sql += " AND(NC_TYPE LIKE '%06%') ";
                sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) HAVING COUNT(*) > 0 ";
                sql += " GROUP BY DIVISION ";


                if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql += " UNION ";
                    sql += " SELECT '' X, 'MITRAON' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
                    sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND(NC_TYPE LIKE '%06%') ";
                    sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
                    sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) HAVING COUNT(*) > 0 ";
                    sql += " UNION ";
                    sql += " SELECT '' X, 'JAFFARPUR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
                    sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND(NC_TYPE LIKE '%06%') ";
                    sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') HAVING COUNT(*) > 0 ";
                }


                if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql += " UNION ";
                    sql += " SELECT '' X, 'SARITA VIHAR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
                    sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND(NC_TYPE LIKE '%06%') ";
                    sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') HAVING COUNT(*) > 0";
                    sql += " UNION ";
                    sql += " SELECT '' X, 'NEW FRIENDS COLONY' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
                    sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND(NC_TYPE LIKE '%06%') ";
                    sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') HAVING COUNT(*) > 0 ";
                }
                sql += " ORDER BY CIRCLE ";
            }
            if (strRolRght == "Street Light")
            {
                sql = " SELECT '' X, DIVISION CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, ";
                sql += " MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                }
                sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
                sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) HAVING COUNT(*) > 0 ";
                sql += " GROUP BY DIVISION ";


                if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql += " UNION ";
                    sql += " SELECT '' X, 'MITRAON' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, ";
                    sql += " MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
                    sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
                    sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) HAVING COUNT(*) > 0 ";
                    sql += " UNION ";
                    sql += " SELECT '' X, 'JAFFARPUR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, ";
                    sql += " MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
                    sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') HAVING COUNT(*) > 0 ";
                }


                if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql += " UNION ";
                    sql += " SELECT '' X, 'SARITA VIHAR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, ";
                    sql += " MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
                    sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') HAVING COUNT(*) > 0 ";
                    sql += " UNION ";
                    sql += " SELECT '' X, 'NEW FRIENDS COLONY' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, ";
                    sql += " MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND(NC_TYPE LIKE '%27%' OR NC_TYPE LIKE '%28%' OR NC_TYPE LIKE '%26%') ";
                    sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') HAVING COUNT(*) > 0 ";
                }
                sql += " ORDER BY CIRCLE ";
            }
            if (strRolRght == "Enforcement")
            {
                sql = " SELECT '' X, DIVISION CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                }
                sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
                sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) HAVING COUNT(*) > 0 ";
                sql += " GROUP BY DIVISION ";

                if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql += " UNION ";
                    sql += " SELECT '' X, 'MITRAON' CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
                    sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
                    sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) HAVING COUNT(*) > 0";
                    sql += " UNION ";
                    sql += " SELECT '' X, 'JAFFARPUR' CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
                    sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') HAVING COUNT(*) > 0";
                }

                if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql += " UNION ";
                    sql += " SELECT '' X, 'SARITA VIHAR' CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
                    sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') HAVING COUNT(*) > 0";
                    sql += " UNION ";
                    sql += " SELECT '' X, 'NEW FRIENDS COLONY' CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN(NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND(NC_TYPE LIKE '%17%' OR NC_TYPE LIKE '%18%' OR NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%') ";
                    sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') HAVING COUNT(*) > 0 ";
                }
                sql += " ORDER BY CIRCLE ";

            }
            if (strRolRght == "MMG")
            {
                sql = " SELECT '' X, DIVISION CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
                sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                }
                sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
                sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) HAVING COUNT(*) > 0";
                sql += " GROUP BY DIVISION ";


                if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql += " UNION ";
                    sql += " SELECT '' X, 'MITRAON' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
                    sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
                    sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
                    sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) HAVING COUNT(*) > 0 ";
                    sql += " UNION ";
                    sql += " SELECT '' X, 'JAFFARPUR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
                    sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
                    sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') HAVING COUNT(*) > 0 ";
                }


                if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql += " UNION ";
                    sql += " SELECT '' X, 'SARITA VIHAR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
                    sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
                    sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') HAVING COUNT(*) > 0 ";
                    sql += " UNION ";
                    sql += " SELECT '' X, 'NEW FRIENDS COLONY' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , ";
                    sql += " nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B ";
                    sql += " WHERE A.SNO_ID = B.OBSER_ID AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND(NC_TYPE LIKE '%03%' OR NC_TYPE LIKE '%04%') ";
                    sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') HAVING COUNT(*) > 0 ";
                }

                sql += " ORDER BY CIRCLE ";
            }
            if (strRolRght == "ALL")
            {
                sql = " SELECT '' X, DIVISION CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
                sql += " ";
                sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
                sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                if (strSubDiv != "" && strSubDiv.ToUpper() != "ALL")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                }
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) HAVING COUNT(*) > 0 ";
                sql += " GROUP BY DIVISION ";

                if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql += " UNION ";
                    sql += " SELECT '' X, 'MITRAON' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
                    sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
                    sql += " ";
                    sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                    if (strSubDiv != "" && strSubDiv.ToUpper() != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    sql += " AND(UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') ";
                    sql += " OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) HAVING COUNT(*) > 0 ";
                    sql += " UNION ";
                    sql += " SELECT '' X, 'JAFFARPUR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
                    sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
                    sql += " ";
                    sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                    if (strSubDiv != "" && strSubDiv.ToUpper() != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    sql += " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') HAVING COUNT(*) > 0";
                }

                if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql += " UNION ";
                    sql += " SELECT '' X, 'SARITA VIHAR' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
                    sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
                    sql += " ";
                    sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                    if (strSubDiv != "" && strSubDiv.ToUpper() != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') HAVING COUNT(*) > 0 ";
                    sql += " UNION ";
                    sql += " SELECT '' X, 'NEW FRIENDS COLONY' AS CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN(NC_ONM = 'N' OR NC_SLIGHT = 'N' OR NC_BUSINESS = 'N' OR NC_ENFORCEMNT = 'N' ";
                    sql += "  OR NC_MMG = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN(NC_ONM = 'Y' OR NC_SLIGHT = 'Y' OR NC_BUSINESS = 'Y' ";
                    sql += " ";
                    sql += " OR NC_ENFORCEMNT = 'Y' OR NC_MMG = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql += " FROM MOBINT.DIV_SCHEME_SURVEILLANCE A, MOBINT.DIV_SCHEME_SURV_NC_TYP B WHERE A.SNO_ID = B.OBSER_ID ";
                    if (strSubDiv != "" && strSubDiv.ToUpper() != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    sql += " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') HAVING COUNT(*) > 0";
                }
                sql += " ORDER BY CIRCLE ";
            }

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }


        public static DataTable LR_ActivityModuleSchemeMIS_ALLD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        {
            string sql = string.Empty;

            if (strRolRght == "O & M")
            {
                sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "ALL")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
                sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) HAVING COUNT(*) > 0	 ";
                sql = sql + " GROUP BY DIVISION  ";

                if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION	 ";
                    sql += " SELECT 'MITRAON' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
                    sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) HAVING COUNT(*) > 0 ";
                    sql = sql + " UNION	 ";
                    sql += " SELECT 'JAFFARPUR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
                    sql = sql + "  AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')  HAVING COUNT(*) > 0 ";
                }

                if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION	 ";
                    sql += " SELECT 'SARITA VIHAR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
                    sql = sql + "  AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') HAVING COUNT(*) > 0 ";
                    sql = sql + " UNION	 ";
                    sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
                    sql = sql + "  AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') HAVING COUNT(*) > 0 ";
                }

                sql = sql + "  ORDER BY DIVISION ";
            }
            if (strRolRght == "Business")
            {
                sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "ALL")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' )  ";
                sql = sql + " AND (NC_TYPE LIKE '%06%') HAVING COUNT(*) > 0 GROUP BY DIVISION ";


                if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION ";
                    sql += " SELECT 'MITRAON' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON'))  ";
                    sql = sql + " AND (NC_TYPE LIKE '%06%') HAVING COUNT(*) > 0";
                    sql = sql + " UNION ";
                    sql += " SELECT 'JAFFARPUR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')  ";
                    sql = sql + " AND (NC_TYPE LIKE '%06%') HAVING COUNT(*) > 0 ";
                }

                if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION ";
                    sql += " SELECT 'SARITA VIHAR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')  ";
                    sql = sql + " AND (NC_TYPE LIKE '%06%') HAVING COUNT(*) > 0";
                    sql = sql + " UNION ";
                    sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')   ";
                    sql = sql + " AND (NC_TYPE LIKE '%06%') HAVING COUNT(*) > 0";
                }
                sql = sql + " ORDER BY DIVISION ";
            }
            if (strRolRght == "Street Light")
            {
                sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "ALL")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
                sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') HAVING COUNT(*) > 0 GROUP BY DIVISION  ";

                if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION ";
                    sql += " SELECT 'MITRAON' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
                    sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') HAVING COUNT(*) > 0";
                    sql = sql + " UNION ";
                    sql += " SELECT 'JAFFARPUR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + "  AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')  ";
                    sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') HAVING COUNT(*) > 0 ";
                }


                if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION ";
                    sql += " SELECT 'SARITA VIHAR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + "   AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') ";
                    sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') HAVING COUNT(*) > 0";
                    sql = sql + " UNION ";
                    sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + "    AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ";
                    sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') HAVING COUNT(*) > 0";
                }
                sql = sql + " ORDER BY DIVISION ";
            }
            if (strRolRght == "Enforcement")
            {
                sql = " SELECT DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "ALL")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
                sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%'  ) HAVING COUNT(*) > 0 GROUP BY DIVISION ";


                if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION ";
                    sql += " SELECT 'MITRAON' DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
                    sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%'  )  HAVING COUNT(*) > 0 ";
                    sql = sql + " UNION ";
                    sql += " SELECT 'JAFFARPUR' DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') ";
                    sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%'  ) HAVING COUNT(*) > 0  ";
                }

                if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION ";
                    sql += " SELECT 'SARITA VIHAR' DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') ";
                    sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%'  ) HAVING COUNT(*) > 0 ";
                    sql = sql + " UNION ";
                    sql += " SELECT 'NEW FRIENDS COLONY' DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ";
                    sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%'  ) HAVING COUNT(*) > 0  ";
                }
                sql = sql + " ORDER BY DIVISION  ";
            }
            if (strRolRght == "MMG")
            {
                sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "ALL")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
                sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') HAVING COUNT(*) > 0 GROUP BY DIVISION  ";

                if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION ";
                    sql += " SELECT 'MITRAON' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
                    sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%')  HAVING COUNT(*) > 0 ";
                    sql = sql + " UNION ";
                    sql += " SELECT 'JAFFARPUR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')  ";
                    sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') HAVING COUNT(*) > 0  ";
                }

                if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION ";
                    sql += " SELECT 'SARITA VIHAR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + "  AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')  ";
                    sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') HAVING COUNT(*) > 0  ";
                    sql = sql + " UNION ";
                    sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql = sql + "   AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')   ";
                    sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') HAVING COUNT(*) > 0 ";
                }
                sql = sql + " ORDER BY DIVISION ";
            }
            if (strRolRght == "ALL")
            {
                sql = "  SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
                sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
                if (strSubDiv != "ALL")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                }
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += "  AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) HAVING COUNT(*) > 0";
                sql += "  GROUP BY DIVISION ";

                if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql += "  UNION ";
                    sql += "  SELECT 'MITRAON' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
                    sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    sql += "  AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) HAVING COUNT(*) > 0";
                    sql += "  UNION ";
                    sql += "  SELECT 'JAFFARPUR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
                    sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    sql += "  AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') HAVING COUNT(*) > 0 ";
                }


                if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
                {
                    sql += "  UNION ";
                    sql += "  SELECT 'SARITA VIHAR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
                    sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    sql += "  AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') HAVING COUNT(*) > 0 ";
                    sql += "  UNION ";
                    sql += "  SELECT 'NEW FRIENDS COLONY' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
                    sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strSubDiv != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
                    }
                    sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                    sql += "  AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') HAVING COUNT(*) > 0 ";
                }
                sql += "  ORDER BY DIVISION  ";
            }

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }


        //public static DataTable LR_ActivityModuleSchemeMIS_ALLD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
        //        sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' )	 ";
        //        sql = sql + " GROUP BY DIVISION  ";

        //        if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION	 ";
        //            sql += " SELECT 'MITRAON' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
        //            sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //            sql = sql + " UNION	 ";
        //            sql += " SELECT 'JAFFARPUR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
        //            sql = sql + "  AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')  ";
        //        }

        //        if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION	 ";
        //            sql += " SELECT 'SARITA VIHAR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
        //            sql = sql + "  AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')  ";
        //            sql = sql + " UNION	 ";
        //            sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
        //            sql = sql + "  AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ";
        //        }

        //        sql = sql + "  ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY DIVISION ";


        //        if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION ";
        //            sql += " SELECT 'MITRAON' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //            sql = sql + " AND (NC_TYPE LIKE '%06%') ";
        //            sql = sql + " UNION ";
        //            sql += " SELECT 'JAFFARPUR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')  ";
        //            sql = sql + " AND (NC_TYPE LIKE '%06%') ";
        //        }

        //        if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION ";
        //            sql += " SELECT 'SARITA VIHAR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')  ";
        //            sql = sql + " AND (NC_TYPE LIKE '%06%') ";
        //            sql = sql + " UNION ";
        //            sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')  ";
        //            sql = sql + " AND (NC_TYPE LIKE '%06%') ";
        //        }
        //        sql = sql + " ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY DIVISION  ";

        //        if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION ";
        //            sql += " SELECT 'MITRAON' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //            sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') ";
        //            sql = sql + " UNION ";
        //            sql += " SELECT 'JAFFARPUR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + "  AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')  ";
        //            sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') ";
        //        }


        //        if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION ";
        //            sql += " SELECT 'SARITA VIHAR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + "   AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') ";
        //            sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') ";
        //            sql = sql + " UNION ";
        //            sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + "    AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ";
        //            sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') ";
        //        }
        //        sql = sql + " ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%'  ) GROUP BY DIVISION ";


        //        if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION ";
        //            sql += " SELECT 'MITRAON' DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //            sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%'  )  ";
        //            sql = sql + " UNION ";
        //            sql += " SELECT 'JAFFARPUR' DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') ";
        //            sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%'  )  ";
        //        }

        //        if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION ";
        //            sql += " SELECT 'SARITA VIHAR' DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') ";
        //            sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%'  )  ";
        //            sql = sql + " UNION ";
        //            sql += " SELECT 'NEW FRIENDS COLONY' DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ";
        //            sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%'  )  ";
        //        }
        //        sql = sql + " ORDER BY DIVISION  ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY DIVISION  ";

        //        if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION ";
        //            sql += " SELECT 'MITRAON' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //            sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%')  ";
        //            sql = sql + " UNION ";
        //            sql += " SELECT 'JAFFARPUR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')  ";
        //            sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%')  ";
        //        }

        //        if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION ";
        //            sql += " SELECT 'SARITA VIHAR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + "  AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')  ";
        //            sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%')  ";
        //            sql = sql + " UNION ";
        //            sql += " SELECT 'NEW FRIENDS COLONY' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  mobint.DIV_SCHEME_SURVEILLANCE A, mobint.DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql = sql + "   AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')   ";
        //            sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%')  ";
        //        }
        //        sql = sql + " ORDER BY DIVISION ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += "  AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql += "  GROUP BY DIVISION ";

        //        if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql += "  UNION ";
        //            sql += "  SELECT 'MITRAON' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //            sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            sql += "  AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //            sql += "  UNION ";
        //            sql += "  SELECT 'JAFFARPUR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //            sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            sql += "  AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')  ";
        //        }


        //        if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //        {
        //            sql += "  UNION ";
        //            sql += "  SELECT 'SARITA VIHAR' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //            sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            sql += "  AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')  ";
        //            sql += "  UNION ";
        //            sql += "  SELECT 'NEW FRIENDS COLONY' AS DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //            sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strSubDiv != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strSubDiv + "') ";
        //            }
        //            sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //            sql += "  AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')  ";
        //        }
        //        sql += "  ORDER BY DIVISION  ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}


        public static DataTable LR_ActivityModuleSchemeMIS_SLCD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        {
            string sql = string.Empty;

            if (strRolRght == "O & M")
            {
                sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "ALL")
                {
                    if (strSubDiv.ToUpper() == "JAFFARPUR")
                        sql = sql + " AND UPPER(DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
                    else if (strSubDiv.ToUpper() == "MITRAON")
                        sql = sql + " AND (UPPER(DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
                    else if (strSubDiv.ToUpper() == "SARITA VIHAR RURAL" || strSubDiv.ToUpper() == "SARITA VIHAR")
                        sql = sql + " AND UPPER(DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
                    else if (strSubDiv.ToUpper() == "SARITA VIHAR URBAN" || strSubDiv.ToUpper() == "NEW FRIENDS COLONY")
                        sql = sql + " AND (UPPER(DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
                    else
                        sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%' ) ";
                sql = sql + " HAVING COUNT(*) > 0 GROUP BY SUB_DIVISION order by SUB_DIVISION	 ";
            }
            if (strRolRght == "Business")
            {
                sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "ALL")
                {
                    if (strSubDiv.ToUpper() == "JAFFARPUR")
                        sql = sql + " AND UPPER(DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
                    else if (strSubDiv.ToUpper() == "MITRAON")
                        sql = sql + " AND (UPPER(DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
                    else if (strSubDiv.ToUpper() == "SARITA VIHAR RURAL" || strSubDiv.ToUpper() == "SARITA VIHAR")
                        sql = sql + " AND UPPER(DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
                    else if (strSubDiv.ToUpper() == "SARITA VIHAR URBAN" || strSubDiv.ToUpper() == "NEW FRIENDS COLONY")
                        sql = sql + " AND (UPPER(DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
                    else
                        sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND (NC_TYPE LIKE '%06%') HAVING COUNT(*) > 0 GROUP BY SUB_DIVISION order by SUB_DIVISION ";
            }
            if (strRolRght == "Street Light")
            {
                sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "ALL")
                {
                    if (strSubDiv.ToUpper() == "JAFFARPUR")
                        sql = sql + " AND UPPER(DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
                    else if (strSubDiv.ToUpper() == "MITRAON")
                        sql = sql + " AND (UPPER(DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
                    else if (strSubDiv.ToUpper() == "SARITA VIHAR RURAL" || strSubDiv.ToUpper() == "SARITA VIHAR")
                        sql = sql + " AND UPPER(DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
                    else if (strSubDiv.ToUpper() == "SARITA VIHAR URBAN" || strSubDiv.ToUpper() == "NEW FRIENDS COLONY")
                        sql = sql + " AND (UPPER(DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
                    else
                        sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') HAVING COUNT(*) > 0 GROUP BY SUB_DIVISION order by SUB_DIVISION ";

            }
            if (strRolRght == "Enforcement")
            {
                sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "ALL")
                {
                    if (strSubDiv.ToUpper() == "JAFFARPUR")
                        sql = sql + " AND UPPER(DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
                    else if (strSubDiv.ToUpper() == "MITRAON")
                        sql = sql + " AND (UPPER(DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
                    else if (strSubDiv.ToUpper() == "SARITA VIHAR RURAL" || strSubDiv.ToUpper() == "SARITA VIHAR")
                        sql = sql + " AND UPPER(DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
                    else if (strSubDiv.ToUpper() == "SARITA VIHAR URBAN" || strSubDiv.ToUpper() == "NEW FRIENDS COLONY")
                        sql = sql + " AND (UPPER(DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
                    else
                        sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) HAVING COUNT(*) > 0 GROUP BY SUB_DIVISION order by SUB_DIVISION ";
            }
            if (strRolRght == "MMG")
            {
                sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "ALL")
                {
                    if (strSubDiv.ToUpper() == "JAFFARPUR")
                        sql = sql + " AND UPPER(DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
                    else if (strSubDiv.ToUpper() == "MITRAON")
                        sql = sql + " AND (UPPER(DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
                    else if (strSubDiv.ToUpper() == "SARITA VIHAR RURAL" || strSubDiv.ToUpper() == "SARITA VIHAR")
                        sql = sql + " AND UPPER(DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
                    else if (strSubDiv.ToUpper() == "SARITA VIHAR URBAN" || strSubDiv.ToUpper() == "NEW FRIENDS COLONY")
                        sql = sql + " AND (UPPER(DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
                    else
                        sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') HAVING COUNT(*) > 0 GROUP BY SUB_DIVISION order by SUB_DIVISION ";
            }
            if (strRolRght == "ALL")
            {
                sql = @"  SELECT SUB_DIVISION AS DIVISION,
                            NVL(SUM(CASE
                              WHEN(
                                     (UPPER(NC_ONM) IN('N', 'Y') or ABN_TYP IN('N', 'Y'))
                                      AND UPPER(NC_MMG) IN('N', 'Y')
                                        OR
                                      (UPPER(NC_ONM) IN('N', 'Y') or ABN_TYP IN('N', 'Y'))
                                      AND UPPER(NC_ENFORCEMNT) IN('N', 'Y')
                                   )
                              THEN 2
                              WHEN UPPER(NC_ONM) IN('N', 'Y')
                                OR UPPER(NC_MMG) IN('N', 'Y')
                                OR UPPER(NC_SLIGHT) IN('N', 'Y')
                                OR UPPER(NC_BUSINESS) IN('N', 'Y')
                                OR UPPER(NC_ENFORCEMNT) IN('N', 'Y')
                                OR UPPER(ABN_TYP) IN('N', 'Y')
                              THEN 1
                              ELSE 0
                            END), 0) AS Total,
                            NVL(SUM(CASE
                              WHEN(
                                     (UPPER(NC_ONM) = 'N' or ABN_TYP = 'N')
                                      AND UPPER(NC_MMG) = 'N'
                                        OR 
                                      (UPPER(NC_ONM) = 'N' or ABN_TYP = 'N')
                                      AND UPPER(NC_ENFORCEMNT) = 'N'
                                   )
                              THEN 2
                              WHEN UPPER(NC_ONM) = 'N'
                                OR UPPER(NC_MMG) = 'N'
                                OR UPPER(NC_SLIGHT) = 'N'
                                OR UPPER(NC_BUSINESS) = 'N'
                                OR UPPER(NC_ENFORCEMNT) = 'N'
                                OR UPPER(ABN_TYP) = 'N'
                              THEN 1
                              ELSE 0
                            END), 0) AS NCs,
                            NVL(SUM(CASE
                              WHEN(
                                     (UPPER(NC_ONM) = 'Y' or ABN_TYP = 'Y')
                                      AND UPPER(NC_MMG) = 'Y'
                                        OR 
                                      (UPPER(NC_ONM) = 'Y' or ABN_TYP = 'Y')
                                      AND UPPER(NC_ENFORCEMNT) = 'Y'
                                   )
                              THEN 2
                              WHEN UPPER(NC_ONM) = 'Y'
                                OR UPPER(NC_MMG) = 'Y'
                                OR UPPER(NC_SLIGHT) = 'Y'
                                OR UPPER(NC_BUSINESS) = 'Y'
                                OR UPPER(NC_ENFORCEMNT) = 'Y'
                                OR UPPER(ABN_TYP) = 'Y'
                              THEN 1
                              ELSE 0
                            END), 0) AS Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A LEFT JOIN MOBINT.DIV_SCHEME_SURV_NC_TYP B ON A.SNO_ID = B.OBSER_ID   ";
                if (strSubDiv != "ALL")
                {
                    if (strSubDiv.ToUpper() == "JAFFARPUR")
                        sql = sql + " WHERE UPPER(DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
                    else if (strSubDiv.ToUpper() == "MITRAON")
                        sql = sql + " WHERE (UPPER(DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
                    else if (strSubDiv.ToUpper() == "SARITA VIHAR RURAL" || strSubDiv.ToUpper() == "SARITA VIHAR")
                        sql = sql + " WHERE UPPER(DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
                    else if (strSubDiv.ToUpper() == "SARITA VIHAR URBAN" || strSubDiv.ToUpper() == "NEW FRIENDS COLONY")
                        sql = sql + " WHERE (UPPER(DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
                    else
                        sql = sql + " WHERE UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
                }
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " HAVING COUNT(*) > 0  GROUP BY SUB_DIVISION order by SUB_DIVISION ";
            }

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }


        //public static DataTable LR_ActivityModuleSchemeMIS_SLCD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            if (strSubDiv.ToUpper() == "JAFFARPUR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
        //            else if (strSubDiv.ToUpper() == "MITRAON")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR RURAL" || strSubDiv.ToUpper() == "SARITA VIHAR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR URBAN" || strSubDiv.ToUpper() == "NEW FRIENDS COLONY")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
        //            else
        //                sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%' ) ";
        //        sql = sql + " GROUP BY SUB_DIVISION order by SUB_DIVISION	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            if (strSubDiv.ToUpper() == "JAFFARPUR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
        //            else if (strSubDiv.ToUpper() == "MITRAON")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR RURAL" || strSubDiv.ToUpper() == "SARITA VIHAR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR URBAN" || strSubDiv.ToUpper() == "NEW FRIENDS COLONY")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
        //            else
        //                sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            if (strSubDiv.ToUpper() == "JAFFARPUR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
        //            else if (strSubDiv.ToUpper() == "MITRAON")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR RURAL" || strSubDiv.ToUpper() == "SARITA VIHAR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR URBAN" || strSubDiv.ToUpper() == "NEW FRIENDS COLONY")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
        //            else
        //                sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            if (strSubDiv.ToUpper() == "JAFFARPUR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
        //            else if (strSubDiv.ToUpper() == "MITRAON")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR RURAL" || strSubDiv.ToUpper() == "SARITA VIHAR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR URBAN" || strSubDiv.ToUpper() == "NEW FRIENDS COLONY")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
        //            else
        //                sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            if (strSubDiv.ToUpper() == "JAFFARPUR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
        //            else if (strSubDiv.ToUpper() == "MITRAON")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR RURAL" || strSubDiv.ToUpper() == "SARITA VIHAR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR URBAN" || strSubDiv.ToUpper() == "NEW FRIENDS COLONY")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
        //            else
        //                sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = @"  SELECT SUB_DIVISION AS DIVISION,
        //                    NVL(SUM(CASE
        //                      WHEN(
        //                             (UPPER(NC_ONM) IN('N', 'Y') or ABN_TYP IN('N', 'Y'))
        //                              AND UPPER(NC_MMG) IN('N', 'Y')
        //                                OR
        //                              (UPPER(NC_ONM) IN('N', 'Y') or ABN_TYP IN('N', 'Y'))
        //                              AND UPPER(NC_ENFORCEMNT) IN('N', 'Y')
        //                           )
        //                      THEN 2
        //                      WHEN UPPER(NC_ONM) IN('N', 'Y')
        //                        OR UPPER(NC_MMG) IN('N', 'Y')
        //                        OR UPPER(NC_SLIGHT) IN('N', 'Y')
        //                        OR UPPER(NC_BUSINESS) IN('N', 'Y')
        //                        OR UPPER(NC_ENFORCEMNT) IN('N', 'Y')
        //                        OR UPPER(ABN_TYP) IN('N', 'Y')
        //                      THEN 1
        //                      ELSE 0
        //                    END), 0) AS Total,
        //                    NVL(SUM(CASE
        //                      WHEN(
        //                             (UPPER(NC_ONM) = 'N' or ABN_TYP = 'N')
        //                              AND UPPER(NC_MMG) = 'N'
        //                                OR 
        //                              (UPPER(NC_ONM) = 'N' or ABN_TYP = 'N')
        //                              AND UPPER(NC_ENFORCEMNT) = 'N'
        //                           )
        //                      THEN 2
        //                      WHEN UPPER(NC_ONM) = 'N'
        //                        OR UPPER(NC_MMG) = 'N'
        //                        OR UPPER(NC_SLIGHT) = 'N'
        //                        OR UPPER(NC_BUSINESS) = 'N'
        //                        OR UPPER(NC_ENFORCEMNT) = 'N'
        //                        OR UPPER(ABN_TYP) = 'N'
        //                      THEN 1
        //                      ELSE 0
        //                    END), 0) AS NCs,
        //                    NVL(SUM(CASE
        //                      WHEN(
        //                             (UPPER(NC_ONM) = 'Y' or ABN_TYP = 'Y')
        //                              AND UPPER(NC_MMG) = 'Y'
        //                                OR 
        //                              (UPPER(NC_ONM) = 'Y' or ABN_TYP = 'Y')
        //                              AND UPPER(NC_ENFORCEMNT) = 'Y'
        //                           )
        //                      THEN 2
        //                      WHEN UPPER(NC_ONM) = 'Y'
        //                        OR UPPER(NC_MMG) = 'Y'
        //                        OR UPPER(NC_SLIGHT) = 'Y'
        //                        OR UPPER(NC_BUSINESS) = 'Y'
        //                        OR UPPER(NC_ENFORCEMNT) = 'Y'
        //                        OR UPPER(ABN_TYP) = 'Y'
        //                      THEN 1
        //                      ELSE 0
        //                    END), 0) AS Pending FROM MOBINT.DIV_SCHEME_SURVEILLANCE A LEFT JOIN MOBINT.DIV_SCHEME_SURV_NC_TYP B ON A.SNO_ID = B.OBSER_ID   ";
        //        if (strSubDiv != "ALL")
        //        {
        //            if (strSubDiv.ToUpper() == "JAFFARPUR")
        //                sql = sql + " WHERE UPPER(DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
        //            else if (strSubDiv.ToUpper() == "MITRAON")
        //                sql = sql + " WHERE (UPPER(DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR RURAL" || strSubDiv.ToUpper() == "SARITA VIHAR")
        //                sql = sql + " WHERE UPPER(DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR URBAN" || strSubDiv.ToUpper() == "NEW FRIENDS COLONY")
        //                sql = sql + " WHERE (UPPER(DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
        //            else
        //                sql = sql + " WHERE UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += "  GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}


        //public static DataTable LR_ActivityModuleSchemeMIS_SLCD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            if (strSubDiv.ToUpper() == "JAFFARPUR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
        //            else if (strSubDiv.ToUpper() == "MITRAON")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR RURAL" || strSubDiv.ToUpper() == "SARITA VIHAR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR URBAN" || strSubDiv.ToUpper() == "NEW FRIENDS COLONY")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
        //            else
        //                sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%' ) ";
        //        sql = sql + " GROUP BY SUB_DIVISION order by SUB_DIVISION	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            if (strSubDiv.ToUpper() == "JAFFARPUR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
        //            else if (strSubDiv.ToUpper() == "MITRAON")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR RURAL" || strSubDiv.ToUpper() == "SARITA VIHAR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR URBAN" || strSubDiv.ToUpper() == "NEW FRIENDS COLONY")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
        //            else
        //                sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            if (strSubDiv.ToUpper() == "JAFFARPUR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
        //            else if (strSubDiv.ToUpper() == "MITRAON")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR RURAL" || strSubDiv.ToUpper() == "SARITA VIHAR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR URBAN" || strSubDiv.ToUpper() == "NEW FRIENDS COLONY")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
        //            else
        //                sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            if (strSubDiv.ToUpper() == "JAFFARPUR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
        //            else if (strSubDiv.ToUpper() == "MITRAON")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR RURAL" || strSubDiv.ToUpper() == "SARITA VIHAR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR URBAN" || strSubDiv.ToUpper() == "NEW FRIENDS COLONY")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
        //            else
        //                sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            if (strSubDiv.ToUpper() == "JAFFARPUR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
        //            else if (strSubDiv.ToUpper() == "MITRAON")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR RURAL" || strSubDiv.ToUpper() == "SARITA VIHAR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR URBAN" || strSubDiv.ToUpper() == "NEW FRIENDS COLONY")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
        //            else
        //                sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strSubDiv != "ALL")
        //        {
        //            if (strSubDiv.ToUpper() == "JAFFARPUR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('UJAWA', 'DHANSA', 'GHUMENHERA')";
        //            else if (strSubDiv.ToUpper() == "MITRAON")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('MITRAON') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(A.DIVISION) IN ('JAFFARPUR') AND UPPER(SUB_DIVISION) IN ('MUNDELLA', 'CRPF', 'MITRAON'))";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR RURAL" || strSubDiv.ToUpper() == "SARITA VIHAR")
        //                sql = sql + " AND UPPER(DIVISION) IN ('SARITA VIHAR RURAL', 'SARITA VIHAR')";
        //            else if (strSubDiv.ToUpper() == "SARITA VIHAR URBAN" || strSubDiv.ToUpper() == "NEW FRIENDS COLONY")
        //                sql = sql + " AND (UPPER(DIVISION) IN ('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY'))";
        //            else
        //                sql = sql + " AND UPPER(DIVISION) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += "  GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        public static DataTable LR_ActivityModuleSchemeMIS_SLCSD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        {
            string sql = string.Empty;

            if (strRolRght == "O & M")
            {
                sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "ALL")
                {
                    sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "')  ";
                }
                sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%' ) ";
                sql = sql + " HAVING COUNT(*) > 0 GROUP BY SUB_DIVISION order by SUB_DIVISION	 ";
            }
            if (strRolRght == "Business")
            {
                sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "ALL")
                {
                    sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "')  ";
                }
                sql = sql + " AND (NC_TYPE LIKE '%06%') HAVING COUNT(*) > 0 GROUP BY SUB_DIVISION order by SUB_DIVISION ";
            }
            if (strRolRght == "Street Light")
            {
                sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "ALL")
                {
                    sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "')  ";
                }
                sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') HAVING COUNT(*) > 0 GROUP BY SUB_DIVISION order by SUB_DIVISION ";

            }
            if (strRolRght == "Enforcement")
            {
                sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "ALL")
                {
                    sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "')  ";
                }
                sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%'  ) HAVING COUNT(*) > 0 GROUP BY SUB_DIVISION order by SUB_DIVISION ";
            }
            if (strRolRght == "MMG")
            {
                sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv != "ALL")
                {
                    sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "')  ";
                }
                sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') HAVING COUNT(*) > 0 GROUP BY SUB_DIVISION order by SUB_DIVISION ";
            }
            if (strRolRght == "ALL")
            {
                sql = "  SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
                sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
                if (strSubDiv != "ALL")
                {
                    sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "')  ";
                }
                sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                sql += " HAVING COUNT(*) > 0  GROUP BY SUB_DIVISION order by SUB_DIVISION ";
            }

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }



        //public static DataTable LR_ActivityModuleSchemeMIS_SLCSD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "')  ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%' ) ";
        //        sql = sql + " GROUP BY SUB_DIVISION order by SUB_DIVISION	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "')  ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "')  ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";

        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "')  ";
        //        }
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%'  ) GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "')  ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }
        //    if (strRolRght == "ALL")
        //    {
        //        sql = "  SELECT SUB_DIVISION DIVISION , nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM ='N' OR NC_SLIGHT='N' OR NC_BUSINESS='N' OR NC_ENFORCEMNT='N' OR NC_MMG='N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR NC_SLIGHT='Y' OR NC_BUSINESS='Y' OR NC_ENFORCEMNT='Y' OR NC_MMG='Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B ";
        //        sql += "  WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strSubDiv != "ALL")
        //        {
        //            sql = sql + " AND UPPER(SUB_DIVISION) =UPPER('" + strSubDiv + "')  ";
        //        }
        //        sql += " AND TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        sql += "  GROUP BY SUB_DIVISION order by SUB_DIVISION ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        public DataTable LR_SurvellanceCircleDivMIS_List(string strDivName, string strRolRght)
        {
            string sql = string.Empty;

            if (strRolRght == "O & M")
            {
                sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                if (strDivName != "ALL")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                }
                sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
                sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' )	 ";
                sql = sql + " HAVING COUNT(*) > 0 GROUP BY CIRCLE, DIVISION	 ";

                if (strDivName.ToUpper() == "WEST 4" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION	 ";
                    sql += " SELECT CIRCLE X, 'MITRAON' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
                    sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) HAVING COUNT(*) > 0	 ";
                    sql = sql + " UNION	 ";
                    sql += " SELECT CIRCLE X, 'JAFFARPUR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
                    sql = sql + " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') HAVING COUNT(*) > 0 	 ";
                }

                if (strDivName.ToUpper() == "SOUTH 1" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION	 ";
                    sql += " SELECT CIRCLE X, 'SARITA VIHAR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
                    sql = sql + " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') HAVING COUNT(*) > 0 	 ";
                    sql = sql + " UNION	 ";
                    sql += " SELECT CIRCLE X, 'NEW FRIENDS COLONY' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
                    sql = sql + "  AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') HAVING COUNT(*) > 0 	 ";
                }
                sql = sql + "  ORDER BY CIRCLE, DIVISION 	 ";
            }
            if (strRolRght == "Business")
            {
                sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                if (strDivName != "ALL")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
                sql = sql + " AND (NC_TYPE LIKE '%06%') HAVING COUNT(*) > 0 GROUP BY CIRCLE, DIVISION ";


                if (strDivName.ToUpper() == "WEST 4" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION ";
                    sql += " SELECT CIRCLE X, 'MITRAON' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
                    sql = sql + " AND (NC_TYPE LIKE '%06%') HAVING COUNT(*) > 0 ";
                    sql = sql + " UNION ";
                    sql += " SELECT CIRCLE X, 'JAFFARPUR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')  ";
                    sql = sql + " AND (NC_TYPE LIKE '%06%') HAVING COUNT(*) > 0 ";
                }

                if (strDivName.ToUpper() == "SOUTH 1" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION ";
                    sql += " SELECT CIRCLE X, 'SARITA VIHAR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + "  AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')  ";
                    sql = sql + " AND (NC_TYPE LIKE '%06%') HAVING COUNT(*) > 0 ";
                    sql = sql + " UNION ";
                    sql += " SELECT CIRCLE X, 'NEW FRIENDS COLONY' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + "  AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')  ";
                    sql = sql + " AND (NC_TYPE LIKE '%06%') HAVING COUNT(*) > 0 ";
                }
                sql = sql + " ORDER BY CIRCLE, DIVISION ";
            }
            if (strRolRght == "Street Light")
            {
                sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                if (strDivName != "ALL")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
                sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') HAVING COUNT(*) > 0 GROUP BY CIRCLE, DIVISION ";

                if (strDivName.ToUpper() == "WEST 4" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION ";
                    sql += " SELECT CIRCLE X, 'MITRAON' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
                    sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') HAVING COUNT(*) > 0 ";
                    sql = sql + " UNION ";
                    sql += " SELECT CIRCLE X, 'JAFFARPUR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')  ";
                    sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') HAVING COUNT(*) > 0 ";
                }

                if (strDivName.ToUpper() == "SOUTH 1" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION ";
                    sql += " SELECT CIRCLE X, 'SARITA VIHAR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + "  AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')  ";
                    sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') HAVING COUNT(*) > 0 ";
                    sql = sql + " UNION ";
                    sql += " SELECT CIRCLE X, 'NEW FRIENDS COLONY' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + "   AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ";
                    sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') HAVING COUNT(*) > 0 ";
                }
                sql = sql + " ORDER BY CIRCLE, DIVISION ";
            }
            if (strRolRght == "Enforcement")
            {
                sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
                if (strDivName != "ALL")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
                sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) HAVING COUNT(*) > 0 GROUP BY CIRCLE, DIVISION ";

                if (strDivName.ToUpper() == "WEST 4" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION ";
                    sql += " SELECT CIRCLE X, 'MITRAON' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
                    sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) HAVING COUNT(*) > 0  ";
                    sql = sql + " UNION ";
                    sql += " SELECT CIRCLE X, 'JAFFARPUR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')  ";
                    sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) HAVING COUNT(*) > 0  ";
                }

                if (strDivName.ToUpper() == "SOUTH 1" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION ";
                    sql += " SELECT CIRCLE X, 'SARITA VIHAR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + "  AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')  ";
                    sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) HAVING COUNT(*) > 0  ";
                    sql = sql + " UNION ";
                    sql += " SELECT CIRCLE X, 'NEW FRIENDS COLONY' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')  ";
                    sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) HAVING COUNT(*) > 0  ";
                }
                sql = sql + " ORDER BY CIRCLE, DIVISION ";
            }
            if (strRolRght == "MMG")
            {
                sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                if (strDivName != "ALL")
                {
                    sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' )	 ";
                sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') HAVING COUNT(*) > 0 GROUP BY CIRCLE, DIVISION	 ";

                if (strDivName.ToUpper() == "WEST 4" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION	 ";
                    sql += " SELECT CIRCLE X, 'MITRAON' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON'))	 ";
                    sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') HAVING COUNT(*) > 0	 ";
                    sql = sql + " UNION	 ";
                    sql += " SELECT CIRCLE X, 'JAFFARPUR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + "  AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') 	 ";
                    sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') HAVING COUNT(*) > 0	 ";
                }

                if (strDivName.ToUpper() == "SOUTH 1" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
                {
                    sql = sql + " UNION	 ";
                    sql += " SELECT CIRCLE X, 'SARITA VIHAR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + "   AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')	 ";
                    sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') HAVING COUNT(*) > 0 	 ";
                    sql = sql + " UNION	 ";
                    sql += " SELECT CIRCLE X, 'NEW FRIENDS COLONY' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
                    sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
                    if (strDivName != "ALL")
                    {
                        sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
                    }
                    sql = sql + "   AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')	 ";
                    sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') HAVING COUNT(*) > 0	 ";
                }
                sql = sql + " ORDER BY CIRCLE, DIVISION	 ";
            }

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }


        //public DataTable LR_SurvellanceCircleDivMIS_List(string strDivName, string strRolRght)
        //{
        //    string sql = string.Empty;

        //    if (strRolRght == "O & M")
        //    {
        //        sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
        //        sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' )	 ";
        //        sql = sql + " GROUP BY CIRCLE, DIVISION	 ";

        //        if (strDivName.ToUpper() == "WEST 4" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION	 ";
        //            sql += " SELECT CIRCLE X, 'MITRAON' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
        //            sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON'))	 ";
        //            sql = sql + " UNION	 ";
        //            sql += " SELECT CIRCLE X, 'JAFFARPUR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
        //            sql = sql + " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') 	 ";
        //        }

        //        if (strDivName.ToUpper() == "SOUTH 1" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION	 ";
        //            sql += " SELECT CIRCLE X, 'SARITA VIHAR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
        //            sql = sql + " AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR') 	 ";
        //            sql = sql + " UNION	 ";
        //            sql += " SELECT CIRCLE X, 'NEW FRIENDS COLONY' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN (NC_ONM = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs ,nvl(SUM(CASE WHEN (NC_ONM = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + " AND (NC_TYPE LIKE '%01%' OR  NC_TYPE LIKE '%02%' OR  NC_TYPE LIKE '%05%'  OR  NC_TYPE LIKE '%07%'  OR  NC_TYPE LIKE '%08%' OR  NC_TYPE LIKE '%09%' OR  NC_TYPE LIKE '%10%' OR  NC_TYPE LIKE '%11%' OR  NC_TYPE LIKE '%12%' OR NC_TYPE LIKE '%13%' OR  NC_TYPE LIKE '%14%' OR  NC_TYPE LIKE '%15%'  OR  NC_TYPE LIKE '%16%'  OR  NC_TYPE LIKE '%20%' OR  NC_TYPE LIKE '%21%' OR  NC_TYPE LIKE '%22%' OR  NC_TYPE LIKE '%23%' OR  NC_TYPE LIKE '%24%' OR  NC_TYPE LIKE '%25%' OR  NC_TYPE LIKE '%29%' OR  NC_TYPE LIKE '%30%' OR TYPE_OF_ABNORMALITY LIKE '%PL%' OR TYPE_OF_ABNORMALITY LIKE '%PPL%'  ) ";
        //            sql = sql + "  AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') 	 ";
        //        }
        //        sql = sql + "  ORDER BY CIRCLE, DIVISION 	 ";
        //    }
        //    if (strRolRght == "Business")
        //    {
        //        sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql = sql + " AND (NC_TYPE LIKE '%06%') GROUP BY CIRCLE, DIVISION ";


        //        if (strDivName.ToUpper() == "WEST 4" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION ";
        //            sql += " SELECT CIRCLE X, 'MITRAON' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //            sql = sql + " AND (NC_TYPE LIKE '%06%') ";
        //            sql = sql + " UNION ";
        //            sql += " SELECT CIRCLE X, 'JAFFARPUR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')  ";
        //            sql = sql + " AND (NC_TYPE LIKE '%06%') ";
        //        }

        //        if (strDivName.ToUpper() == "SOUTH 1" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION ";
        //            sql += " SELECT CIRCLE X, 'SARITA VIHAR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + "  AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')  ";
        //            sql = sql + " AND (NC_TYPE LIKE '%06%') ";
        //            sql = sql + " UNION ";
        //            sql += " SELECT CIRCLE X, 'NEW FRIENDS COLONY' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_BUSINESS = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_BUSINESS = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + "  AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')  ";
        //            sql = sql + " AND (NC_TYPE LIKE '%06%') ";
        //        }
        //        sql = sql + " ORDER BY CIRCLE, DIVISION ";
        //    }
        //    if (strRolRght == "Street Light")
        //    {
        //        sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') GROUP BY CIRCLE, DIVISION ";

        //        if (strDivName.ToUpper() == "WEST 4" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION ";
        //            sql += " SELECT CIRCLE X, 'MITRAON' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //            sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') ";
        //            sql = sql + " UNION ";
        //            sql += " SELECT CIRCLE X, 'JAFFARPUR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')  ";
        //            sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') ";
        //        }

        //        if (strDivName.ToUpper() == "SOUTH 1" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION ";
        //            sql += " SELECT CIRCLE X, 'SARITA VIHAR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + "  AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')  ";
        //            sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') ";
        //            sql = sql + " UNION ";
        //            sql += " SELECT CIRCLE X, 'NEW FRIENDS COLONY' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_SLIGHT = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_SLIGHT = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + "   AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY') ";
        //            sql = sql + " AND (NC_TYPE LIKE '%27%' OR  NC_TYPE LIKE '%28%' OR  NC_TYPE LIKE '%26%') ";
        //        }
        //        sql = sql + " ORDER BY CIRCLE, DIVISION ";
        //    }
        //    if (strRolRght == "Enforcement")
        //    {
        //        sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' ) ";
        //        sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%' ) GROUP BY CIRCLE, DIVISION ";

        //        if (strDivName.ToUpper() == "WEST 4" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION ";
        //            sql += " SELECT CIRCLE X, 'MITRAON' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON')) ";
        //            sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%' )  ";
        //            sql = sql + " UNION ";
        //            sql += " SELECT CIRCLE X, 'JAFFARPUR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + " AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')  ";
        //            sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%' )  ";
        //        }

        //        if (strDivName.ToUpper() == "SOUTH 1" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION ";
        //            sql += " SELECT CIRCLE X, 'SARITA VIHAR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + "  AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')  ";
        //            sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%' )  ";
        //            sql = sql + " UNION ";
        //            sql += " SELECT CIRCLE X, 'NEW FRIENDS COLONY' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total ,  nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'N' OR ABN_TYP = 'N') THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN (NC_ENFORCEMNT = 'Y' OR ABN_TYP = 'Y') THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + " AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')  ";
        //            sql = sql + " AND (NC_TYPE  LIKE '%17%' OR  NC_TYPE LIKE '%18%' OR  NC_TYPE LIKE '%19%' OR TYPE_OF_ABNORMALITY LIKE '%Theft%' OR TYPE_OF_ABNORMALITY LIKE '%Other%' )  ";
        //        }
        //        sql = sql + " ORDER BY CIRCLE, DIVISION ";
        //    }
        //    if (strRolRght == "MMG")
        //    {
        //        sql = " SELECT CIRCLE X, DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //        sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //        if (strDivName != "ALL")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //        }
        //        sql = sql + " AND UPPER(A.DIVISION) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' )	 ";
        //        sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') GROUP BY CIRCLE, DIVISION	 ";

        //        if (strDivName.ToUpper() == "WEST 4" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION	 ";
        //            sql += " SELECT CIRCLE X, 'MITRAON' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + " AND (UPPER(A.DIVISION) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON'))	 ";
        //            sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') 	 ";
        //            sql = sql + " UNION	 ";
        //            sql += " SELECT CIRCLE X, 'JAFFARPUR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + "  AND UPPER(A.DIVISION) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA') 	 ";
        //            sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') 	 ";
        //        }

        //        if (strDivName.ToUpper() == "SOUTH 1" || (strDivName.ToUpper() == "ALL" || strDivName.ToUpper() == "-ALL-"))
        //        {
        //            sql = sql + " UNION	 ";
        //            sql += " SELECT CIRCLE X, 'SARITA VIHAR' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + "   AND UPPER(A.DIVISION) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')	 ";
        //            sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') 	 ";
        //            sql = sql + " UNION	 ";
        //            sql += " SELECT CIRCLE X, 'NEW FRIENDS COLONY' AS DIVISION  CIRCLE, nvl(COUNT(*),0) Total , nvl(SUM(CASE WHEN NC_MMG = 'N' THEN 1 ELSE 0 END),0) NCs , nvl(SUM(CASE WHEN NC_MMG = 'Y' THEN 1 ELSE 0 END),0) Pending ";
        //            sql = sql + " FROM  DIV_SCHEME_SURVEILLANCE A, DIV_SCHEME_SURV_NC_TYP B WHERE  A.SNO_ID = B.OBSER_ID  ";
        //            if (strDivName != "ALL")
        //            {
        //                sql = sql + " AND UPPER(CIRCLE) =UPPER('" + strDivName + "') ";
        //            }
        //            sql = sql + "   AND UPPER(A.DIVISION) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')	 ";
        //            sql = sql + " AND (NC_TYPE LIKE '%03%' OR  NC_TYPE LIKE '%04%') 	 ";
        //        }
        //        sql = sql + " ORDER BY CIRCLE, DIVISION	 ";
        //    }

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        public static DataTable LR_QC_MIS_List_ALLD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        {
            string sql = " SELECT A.DIVISION_NAME SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
            sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
            sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
            sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
            sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
            if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
            {
                sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
            }
            sql = sql + " AND UPPER(A.DIVISION_NAME) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' )  ";
            sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0 GROUP BY A.DIVISION_NAME  ";


            if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
            {
                sql = sql + " UNION  ";
                sql += " SELECT 'MITRAON' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND (UPPER(A.DIVISION_NAME) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION_NAME) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON'))  ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0   ";
                sql = sql + " UNION  ";
                sql += " SELECT 'JAFFARPUR' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION_NAME) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')   ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  ";
            }


            if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
            {
                sql = sql + " UNION  ";
                sql += " SELECT 'SARITA VIHAR' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION_NAME) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')   ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  ";
                sql = sql + " UNION  ";
                sql += " SELECT 'NEW FRIENDS COLONY' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
                sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
                sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
                sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
                if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
                {
                    sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
                }
                sql = sql + " AND UPPER(A.DIVISION_NAME) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')    ";
                sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO HAVING SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'N' THEN 1 ELSE 0 END) > 0 OR SUM(CASE WHEN QC_PD_REL = 'X' THEN 1 ELSE 0 END) > 0  ";
            }
            sql = sql + " ORDER BY SCHEME  ";

            DataTable dt = new DataTable();
            DbFunction objdbfun = new DbFunction();
            dt = objdbfun.dmlgetquery_mobint(sql);
            dt.TableName = "LR_OBSERVATION";
            return dt;
        }


        //public static DataTable LR_QC_MIS_List_ALLD(string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv)
        //{
        //    string sql = " SELECT A.DIVISION_NAME SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
        //    sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
        //    sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
        //    sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
        //    sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //    if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
        //    {
        //        sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
        //    }
        //    sql = sql + " AND UPPER(A.DIVISION_NAME) NOT IN('SARITA VIHAR RURAL', 'SARITA VIHAR', 'SARITA VIHAR URBAN', 'NEW FRIENDS COLONY', 'JAFFARPUR', 'MITRAON' )  ";
        //    sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO GROUP BY A.DIVISION_NAME  ";


        //    if (strSubDiv.ToUpper() == "WEST 4" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //    {
        //        sql = sql + " UNION  ";
        //        sql += " SELECT 'MITRAON' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
        //        sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
        //        sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
        //        sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
        //        sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND (UPPER(A.DIVISION_NAME) IN('MITRAON') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON') OR UPPER(DIVISION_NAME) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('MUNDELLA', 'CRPF', 'MITRAON'))  ";
        //        sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO   ";
        //        sql = sql + " UNION  ";
        //        sql += " SELECT 'JAFFARPUR' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
        //        sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
        //        sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
        //        sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
        //        sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND UPPER(A.DIVISION_NAME) IN('JAFFARPUR') AND UPPER(SUB_DIVISION) IN('UJAWA', 'DHANSA', 'GHUMENHERA')   ";
        //        sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO   ";
        //    }


        //    if (strSubDiv.ToUpper() == "SOUTH 1" || (strSubDiv.ToUpper() == "ALL" || strSubDiv.ToUpper() == "-ALL-"))
        //    {
        //        sql = sql + " UNION  ";
        //        sql += " SELECT 'SARITA VIHAR' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
        //        sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
        //        sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
        //        sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
        //        sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND UPPER(A.DIVISION_NAME) IN('SARITA VIHAR RURAL', 'SARITA VIHAR')   ";
        //        sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO   ";
        //        sql = sql + " UNION  ";
        //        sql += " SELECT 'NEW FRIENDS COLONY' AS SCHEME,nvl(SUM(CASE WHEN SUB_AREA_TYP IS NOT NULL THEN 1 ELSE 0 END),0) AS Total, ";
        //        sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='N' THEN 1 ELSE 0 END),0) AS NC_Reported, ";
        //        sql = sql + "  nvl(SUM(CASE WHEN QC_PD_REL ='X' THEN 1 ELSE 0 END),0) AS NC_Cleared ";
        //        sql = sql + " FROM mobint.DIV_SCHEME_QC_TRANS A, mobint.DIV_SCHEME_QC_TYP B ";
        //        sql = sql + " WHERE TRUNC(A.ENTRY_DATE) BETWEEN TRUNC(TO_DATE('" + strDate + "','dd/mm/yyyy')) AND TRUNC(TO_DATE('" + strToDate + "','dd/mm/yyyy')) ";
        //        if (strSubDiv.ToUpper() != "ALL" && strSubDiv.ToUpper() != "")
        //        {
        //            sql = sql + " AND UPPER(CIRCLE_NAME) =UPPER('" + strSubDiv + "') ";
        //        }
        //        sql = sql + " AND UPPER(A.DIVISION_NAME) IN('SARITA VIHAR URBAN', 'NEW FRIENDS COLONY')    ";
        //        sql = sql + " AND A.SUB_AREA_TYP_SLCTD IS NOT NULL AND OBSER_ID=SEQ_NO   ";
        //    }
        //    sql = sql + " ORDER BY SCHEME  ";

        //    DataTable dt = new DataTable();
        //    DbFunction objdbfun = new DbFunction();
        //    dt = objdbfun.dmlgetquery_mobint(sql);
        //    dt.TableName = "LR_OBSERVATION";
        //    return dt;
        //}

        public bool Insert_LR_QCheck_08082024(string _sVistDate, string _sCircle, string _sDivision,
                                                    string _sMeterNo, string _sCANo,
                                                   string _sRemarks, string _sQCType,
                                                   string _sQCSlctd,
                                                    string Other, string strScheme, string strImei, string strPoleNo, string subdivision, string empId)
        {
            bool isTrue = false;

            try
            {
                string strSrNo = SelectNextValQC();

                //New Added
                string _qclst = ""; // _sQCSlctd
                string[] _arrnctyp = _sQCSlctd.Trim().Split('|');

                for (int i = 0; i < _arrnctyp.Length; i++)
                {
                    if (!string.IsNullOrEmpty(_arrnctyp[i].ToString()))
                    {

                        if (_arrnctyp[i].ToString() != "null")
                        {
                            _qclst += _arrnctyp[i].ToString();
                            _qclst += "|";
                        }

                    }
                }

                string _qctyplst = ""; //_sQCType
                string[] _arrQctyp = _sQCType.Trim().Split('|');

                for (int i = 0; i < _arrQctyp.Length; i++)
                {
                    if (!string.IsNullOrEmpty(_arrQctyp[i].ToString()))
                    {

                        if (_arrQctyp[i].ToString() != "null")
                        {
                            _qctyplst += _arrQctyp[i].ToString();
                            _qctyplst += "|";
                        }

                    }
                }
                //End
                //POLE_NO, IMEI_NO , IMEI_NO

                // NDS ndsCon = new NDS();
                // OracleConnection ocon_MobAppInt = new OracleConnection(ndsCon.con_mobinternal_new());
                DbFunction objdbfunsqlinsert = new DbFunction();
                string sqlinsert = string.Empty;

                try
                {
                    //if (ocon_MobAppInt.State == ConnectionState.Closed)
                    //{
                    //    ocon_MobAppInt.Open();
                    //}
                    //OracleCommand oleDbCommand = new OracleCommand(sqlinsert, ocon_MobAppInt);
                    //OracleParameter SEQ_NO = oleDbCommand.Parameters.Add("@SEQ_NO", OracleDbType.NVarchar2, 20);
                    //OracleParameter VISIT_DATE = oleDbCommand.Parameters.Add("@VISIT_DATE", OracleDbType.NVarchar2, 60);
                    //OracleParameter CIRCLE_NAME = oleDbCommand.Parameters.Add("@CIRCLE_NAME", OracleDbType.NVarchar2, 20);

                    //OracleParameter DIVISION_NAME = oleDbCommand.Parameters.Add("@DIVISION_NAME", OracleDbType.NVarchar2, 20);
                    //OracleParameter CA_NO = oleDbCommand.Parameters.Add("@CA_NO", OracleDbType.NVarchar2, 15);
                    //OracleParameter METER_NO = oleDbCommand.Parameters.Add("@METER_NO", OracleDbType.NVarchar2, 12);

                    //OracleParameter SUB_AREA_TYP = oleDbCommand.Parameters.Add("@SUB_AREA_TYP", OracleDbType.NVarchar2, 100);
                    //OracleParameter SUB_AREA_TYP_SLCTD = oleDbCommand.Parameters.Add("@SUB_AREA_TYP_SLCTD", OracleDbType.NVarchar2, 500);
                    //OracleParameter RMKS = oleDbCommand.Parameters.Add("@RMKS", OracleDbType.NVarchar2, 1000);

                    //OracleParameter SCHEME = oleDbCommand.Parameters.Add("@SCHEME", OracleDbType.NVarchar2, 50);

                    //OracleParameter POLENO = oleDbCommand.Parameters.Add("@POLE_NO", OracleDbType.NVarchar2, 11);
                    //OracleParameter IMEINO = oleDbCommand.Parameters.Add("@IMEI_NO", OracleDbType.NVarchar2, 20);

                    //OracleParameter SUB_DIVISION = oleDbCommand.Parameters.Add("@SUB_DIVISION", OracleDbType.NVarchar2, 100);


                    //SEQ_NO.Value = strSrNo;
                    //VISIT_DATE.Value = _sVistDate;
                    //CIRCLE_NAME.Value = _sCircle;

                    //DIVISION_NAME.Value = _sDivision;
                    //CA_NO.Value = _sCANo;
                    //METER_NO.Value = _sMeterNo;

                    //SUB_AREA_TYP.Value = _qctyplst;
                    //SUB_AREA_TYP_SLCTD.Value = _qclst;
                    //RMKS.Value = Other;

                    //SCHEME.Value = strScheme;

                    //POLENO.Value = strPoleNo;
                    //IMEINO.Value = strImei;

                    //SUB_DIVISION.Value = subdivision;

                    //int intOut = oleDbCommand.ExecuteNonQuery();
                    sqlinsert = "INSERT INTO DIV_SCHEME_QC_TRANS (SEQ_NO, VISIT_DATE, CIRCLE_NAME, DIVISION_NAME, CA_NO, METER_NO, SUB_AREA_TYP, SUB_AREA_TYP_SLCTD, RMKS, SCHEME, POLE_NO, IMEI_NO, SUB_DIVISION, empId)";
                    sqlinsert = sqlinsert + " VALUES( '" + strSrNo + "', '" + _sVistDate + "', '" + _sCircle + "', '" + _sDivision + "', '" + _sCANo + "', '" + _sMeterNo + "', '" + _qctyplst + "', '" + _qclst + "', '" + Other + "', '" + strScheme + "', '" + strPoleNo + "', '" + strImei + "', '" + subdivision + "', '" + empId + "') ";

                    if (objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert) == true)
                    {
                        isTrue = true;

                        string sqlinsert_new = " INSERT INTO DIV_SCHEME_QC_TYP (obser_id, qc_pd_rel, qc_pd_rel_dt, qc_cable_rel,";
                        sqlinsert_new = sqlinsert_new + "  qc_cable_rel_dt, qc_mtr_rel, qc_mtr_rel_dt)  ";
                        sqlinsert_new = sqlinsert_new + " VALUES('" + strSrNo + "', ";
                        if (_sQCType.Equals("Pole and DB related"))
                        {
                            sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                        }
                        else
                        {
                            sqlinsert_new = sqlinsert_new + " 'X', '' ,";
                        }

                        if (_sQCType.Contains("Cable related"))
                        {
                            sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                        }
                        else
                        {
                            sqlinsert_new = sqlinsert_new + " 'X', '' ,";
                        }

                        if (_sQCType.Contains("Meter & Bus Bar Related"))
                        {
                            sqlinsert_new = sqlinsert_new + " 'Y', '' ,";
                        }
                        else
                        {
                            sqlinsert_new = sqlinsert_new + " 'X', '' )";
                        }

                        //DbFunction objdbfunsqlinsert = new DbFunction();


                        isTrue = objdbfunsqlinsert.dmlsinglequery_mobint(sqlinsert_new);
                    }
                }
                catch (Exception ex)
                {
                    WriteIntoFile(DateTime.Now.ToString() + "New Connection Method : con_mobinternal_new " + ex.ToString() + sqlinsert);
                    return true;
                }
                finally
                {
                    //if (ocon_MobAppInt.State == ConnectionState.Open)
                    //{
                    //    ocon_MobAppInt.Close();
                    //}
                }

                return isTrue;
            }
            catch (Exception ex)
            {
                WriteIntoFile(DateTime.Now.ToString() + ex.ToString());
                return false;
            }
        }




        #endregion

    }
}
