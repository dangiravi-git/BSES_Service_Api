//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Recovery_Webservice.PDFDetails {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://10.125.88.80/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback Seva_Insert_Data_Other_ConnectionOperationCompleted;
        
        private UserCredentials userCredentialsValueField;
        
        private System.Threading.SendOrPostCallback Z_BAPI_DSS_ISU_CA_DISPLAY_GISOperationCompleted;
        
        private System.Threading.SendOrPostCallback GET_METERDETAILSOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMeterCA_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback PowerThef_DivMasterOperationCompleted;
        
        private System.Threading.SendOrPostCallback GET_METER_CA_DETAILSOperationCompleted;
        
        private System.Threading.SendOrPostCallback PowerThef_Insert_INPUTDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback LeadStatus_PowerTheftMISOperationCompleted;
        
        private System.Threading.SendOrPostCallback Mobile_PowerTheftMISOperationCompleted;
        
        private System.Threading.SendOrPostCallback Mobile_PowerTheftMIS_SummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ENF_Redem_RewardOperationCompleted;
        
        private System.Threading.SendOrPostCallback ENF_Reward_EarnedOperationCompleted;
        
        private System.Threading.SendOrPostCallback PowerTheft_RegisterUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback PowerTheft_LoginFEOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewConnOTPRqstFrm_theftOperationCompleted;
        
        private System.Threading.SendOrPostCallback PowerTheft_GetPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewConnResendOTPVerifyFrm_theftOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewConnOTPVerifyFrm_theftOperationCompleted;
        
        private System.Threading.SendOrPostCallback loginFE_theftOperationCompleted;
        
        private System.Threading.SendOrPostCallback complaintSubmit_theftOperationCompleted;
        
        private System.Threading.SendOrPostCallback PowerThef_ResetPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback SK_HolidayList_NEWOperationCompleted;
        
        private System.Threading.SendOrPostCallback PHOTOMETER_READINGOperationCompleted;
        
        private System.Threading.SendOrPostCallback Z_ZBAPI_FETCH_ENFCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback BAPI_MTRREADDOC_GETLISTOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZBAPI_CS_FETCH_LOADOperationCompleted;
        
        private System.Threading.SendOrPostCallback VSS_GetRequestType_DeptpartmentWiseOperationCompleted;
        
        private System.Threading.SendOrPostCallback VSS_GetAssginDetails_CircleDivCompDeptWiseOperationCompleted;
        
        private System.Threading.SendOrPostCallback VSS_Insert_Complaint_DataOperationCompleted;
        
        private System.Threading.SendOrPostCallback VSS_Update_Complaint_DataOperationCompleted;
        
        private System.Threading.SendOrPostCallback VSS_GetComplaintDetails_CompWiseOperationCompleted;
        
        private System.Threading.SendOrPostCallback VSS_GetRemarksDetails_ReqWiseOperationCompleted;
        
        private System.Threading.SendOrPostCallback SK_RegDistMsgTxtOperationCompleted;
        
        private System.Threading.SendOrPostCallback SK_HolidayListOperationCompleted;
        
        private System.Threading.SendOrPostCallback SK_TimeSlotListOperationCompleted;
        
        private System.Threading.SendOrPostCallback SK_RegDistStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback SK_RegOrderNoRatingOperationCompleted;
        
        private System.Threading.SendOrPostCallback LR_Scheme_DivisionWiseOperationCompleted;
        
        private System.Threading.SendOrPostCallback LR_Scheme_Vendor_UserOperationCompleted;
        
        private System.Threading.SendOrPostCallback LR_Vendor_DivisionWiseOperationCompleted;
        
        private System.Threading.SendOrPostCallback LR_Insert_Scheme_Vendor_MobDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback LR_Insert_ActivityType_MobDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback LR_Dashboard_DateWiseOperationCompleted;
        
        private System.Threading.SendOrPostCallback LR_Dashboard_DateDivisionWiseOperationCompleted;
        
        private System.Threading.SendOrPostCallback LR_Dashboard_DateSubDivisionWiseOperationCompleted;
        
        private System.Threading.SendOrPostCallback LR_Surv_QC_Insert_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOutageAlertRPLOperationCompleted;
        
        private System.Threading.SendOrPostCallback SplyCode_DefyLtrOperationCompleted;
        
        private System.Threading.SendOrPostCallback DOCLIST_NEW_UPDATE_STSOperationCompleted;
        
        private System.Threading.SendOrPostCallback Deficiency_DocList_UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SUPPLY_CODE_NEW_CONN_IMGOperationCompleted;
        
        private System.Threading.SendOrPostCallback SUPPLY_CODE_NEW_CONN_DATAOperationCompleted;
        
        private System.Threading.SendOrPostCallback LR_Surveillance_Insert_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback LR_Surv_ATR_InsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback LR_ObservationList_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_GetUserLoginDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_GetUserMCR_INPUT_DTOperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_GetUserMCR_INPUT_DTNEWOperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_Insert_INPUT_DataOperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_Insert_INPUT_DataEXTRA7OperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_Insert_INPUT_DataNEWOperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_ValidateSEALOperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_Create_Installer_DataOperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_GetInstaller_DataOperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_OrderAssignOperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_Password_UpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_GetSeal_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_GetMeter_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_OrderCancelOperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_Insert_INPUT_Data_RVOperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_Insert_INPUT_Data_Img_RVOperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_Insert_INPUT_Data_RV_NEWOperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_Insert_INPUT_Data_RV_NEW1OperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_GetCancelRmkDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_GetSubDiv_DivisionOperationCompleted;
        
        private System.Threading.SendOrPostCallback MCR_GetUserMCR_INPUT_COMP_DTOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecServices_CategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecServices_Amount_BucketOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecServices_Aging_BucketOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecServices_Account_ClassOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecServices_ATR_StatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecAllocDefltrsOperationCompleted;
        
        private System.Threading.SendOrPostCallback searchDefltrsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPaymentOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertATROperationCompleted;
        
        private System.Threading.SendOrPostCallback DetailofMISOperationCompleted;
        
        private System.Threading.SendOrPostCallback loginFEOperationCompleted;
        
        private System.Threading.SendOrPostCallback changePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecServices_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZBAPI_UPDATE_TNOOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZBAPI_CNTAPP_DETAILMOBOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZBAPI_CREATESO_POSTOperationCompleted;
        
        private System.Threading.SendOrPostCallback LR_Scheme_DivSchmMappingOperationCompleted;
        
        private System.Threading.SendOrPostCallback LR_Scheme_AllDivSchmMappingOperationCompleted;
        
        private System.Threading.SendOrPostCallback LR_NewActivityModuleSchemeMISOperationCompleted;
        
        private System.Threading.SendOrPostCallback LR_NewSurvellanceCircleDivMISOperationCompleted;
        
        private System.Threading.SendOrPostCallback LR_NEW_QC_MISOperationCompleted;
        
        private System.Threading.SendOrPostCallback Seva_get_Login_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Seva_change_PasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback Seva_get_Order_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Seva_get_Order_Wise_Complete_DetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Seva_Insert_Data_New_ConnOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_DOCLIST_signOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_CA_building_imgOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_IR_DATAOperationCompleted;
        
        private System.Threading.SendOrPostCallback UPDATE_IR_DATAOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_CF_DATAOperationCompleted;
        
        private System.Threading.SendOrPostCallback UPDATE_CF_DATAOperationCompleted;
        
        private System.Threading.SendOrPostCallback Insert_RECF_DATAOperationCompleted;
        
        private System.Threading.SendOrPostCallback GCMRegistrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GCMUserMsgLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback GCMUpdateMsgLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback GCMCheckRegistrationLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterSmartAppComplaintOperationCompleted;
        
        private System.Threading.SendOrPostCallback updatebreakdownOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetComplaintStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetComplaintDetailsCAOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetValidateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewRegistration_ARDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPasswordSMSOperationCompleted;
        
        private System.Threading.SendOrPostCallback EMP_UserDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_GetAssignedComplaintsToTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_UpdateComplaintResolutiontimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_GetComplaintStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseComplaintSigOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateIMEILocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_LINEMEN_LOGINOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_LINEMEN_LOGOUTOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_COMPLAINT_DETAILOperationCompleted;
        
        private System.Threading.SendOrPostCallback onm_mark_readOperationCompleted;
        
        private System.Threading.SendOrPostCallback update_onm_complaintOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_UpdatebreakdowndetailsHourOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetbreakdowndetailsIMEIOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_updatebreakdownreadstatsuOperationCompleted;
        
        private System.Threading.SendOrPostCallback getbreakdownstatusBDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_getbreakdownbackfeedlistOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_updatebreakdownbackfeedOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_CloseCableDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_BurnMeterUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_Get_Meter_OComp_ListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_Get_Meter_CComp_ListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_Dashboard_ReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_Dashboard_OnSelectOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_Dashboard_Report_OldOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_Dashboard_OnSelect_OldOperationCompleted;
        
        private System.Threading.SendOrPostCallback Test_ApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_NCC_RegistrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_Area_CodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_LOGIN_USEROperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_LINEMEN_USER_LISTOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_Get_Complaint_ListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_Allocate_ComplaintOperationCompleted;
        
        private System.Threading.SendOrPostCallback BD_Get_Complaint_ListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_Get_UserDevice_ListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_Get_Device_Name_ListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_Update_UserDevice_ListOperationCompleted;
        
        private System.Threading.SendOrPostCallback Street_Light_AreaListOperationCompleted;
        
        private System.Threading.SendOrPostCallback Street_Light_AreaList_AllOperationCompleted;
        
        private System.Threading.SendOrPostCallback Street_Light_RegistrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SL_Complaint_ListOperationCompleted;
        
        private System.Threading.SendOrPostCallback SL_Complaint_AllocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SL_Vendor_ListOperationCompleted;
        
        private System.Threading.SendOrPostCallback Emergency_RegistrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback IMSGLoginUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback IMSGCompanyMstOperationCompleted;
        
        private System.Threading.SendOrPostCallback IMSGCompGrpMstOperationCompleted;
        
        private System.Threading.SendOrPostCallback IMSGCompSubGrpMstOperationCompleted;
        
        private System.Threading.SendOrPostCallback IMsgGCMRegistrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback IMsgGCMRegIdsOperationCompleted;
        
        private System.Threading.SendOrPostCallback IMsgUpdateLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback IMSGMsgSendOperationCompleted;
        
        private System.Threading.SendOrPostCallback IMSGMsgTextTBSendOperationCompleted;
        
        private System.Threading.SendOrPostCallback IMsgLoadEmployeesOperationCompleted;
        
        private System.Threading.SendOrPostCallback IMSGMsgChatRoomOperationCompleted;
        
        private System.Threading.SendOrPostCallback TTS_LOGIN_MOBILEOperationCompleted;
        
        private System.Threading.SendOrPostCallback TMS_TaskAllocationAction_DataOperationCompleted;
        
        private System.Threading.SendOrPostCallback TTS_TASK_ACTIONOperationCompleted;
        
        private System.Threading.SendOrPostCallback BDSDTotalCountsOperationCompleted;
        
        private System.Threading.SendOrPostCallback BDSDHTLTTotalCountsOperationCompleted;
        
        private System.Threading.SendOrPostCallback BDSDHTLTDetailsOnTotalOperationCompleted;
        
        private System.Threading.SendOrPostCallback BDSDHTLTOnSlctAreaListOperationCompleted;
        
        private System.Threading.SendOrPostCallback BDSDHTLTOnAreaListConsCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback BDSDContactListOperationCompleted;
        
        private System.Threading.SendOrPostCallback BDSDSMSCountListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_getbreakdownbackfeedlist_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback VSS_GetCompliantCentre_DivisionWiseOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_Lat_LongOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get_Lat_Long_AndroidOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZBAPI_EDISTRICTOperationCompleted;
        
        private System.Threading.SendOrPostCallback Z_BAPI_DSS_ISU_CA_DISPLAYOperationCompleted;
        
        private System.Threading.SendOrPostCallback Z_BAPI_DSS_ISU_CA_DISPLAY_SAPOperationCompleted;
        
        private System.Threading.SendOrPostCallback Z_BAPI_DSS_ISU_CA_DISPLAY_RCMOperationCompleted;
        
        private System.Threading.SendOrPostCallback ONM_CloseMeterComplaintOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZBAPI_ONLINE_BILL_PDF_V2OperationCompleted;
        
        private System.Threading.SendOrPostCallback ZBAPI_ONLINE_BILL_PDFOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZBAPI_ONLINE_BILL_PDF_MSOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZBAPI_ONLINE_BILL_PDF_WAOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZBAPI_DEMAND_NOTE_ONLINEOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssignedComplaintsToTeamOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetClosingRemarksFromCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseComplaintOperationCompleted;
        
        private System.Threading.SendOrPostCallback Z_BAPI_ZDSS_WEB_LINKOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewConnOTPRqstFrmOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewConnOTPVerifyFrmOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewConnResendOTPVerifyFrmOperationCompleted;
        
        private System.Threading.SendOrPostCallback App_logOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPendingOrderOracleOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCompleteOrderOracleOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPendingOrderOracleKCCOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChkUsrForClosingComplntOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateOrderStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback getIVRSCallIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCFOracleOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZBAPI_CS_ORD_STATOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZBAPI_DISPLAY_BILL_WEBOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZBAPI_DISPLAY_BILL_WEB_VALIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTransformerSetupDetail_delhiOperationCompleted;
        
        private System.Threading.SendOrPostCallback FIVE_COMPLOperationCompleted;
        
        private System.Threading.SendOrPostCallback FEEDBACKOperationCompleted;
        
        private System.Threading.SendOrPostCallback FEEDBACK_MOBAPPOperationCompleted;
        
        private System.Threading.SendOrPostCallback Area_CodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetARDAppVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewRegistrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback NCC_RegistrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback DISPLAY_BILLOperationCompleted;
        
        private System.Threading.SendOrPostCallback BILL_HISTOperationCompleted;
        
        private System.Threading.SendOrPostCallback Z_BAPI_IVRSOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZBAPI_IVR_CREATESO_ISUOperationCompleted;
        
        private System.Threading.SendOrPostCallback CA_DISPLAYOperationCompleted;
        
        private System.Threading.SendOrPostCallback CA_ADDRESS_UPLOADOperationCompleted;
        
        private System.Threading.SendOrPostCallback ZBAPIDOCLISTOperationCompleted;
        
        private System.Threading.SendOrPostCallback NEW_CONNECTION_SITE_TASKSOperationCompleted;
        
        private System.Threading.SendOrPostCallback NEW_CONNECTION_SITE_TASKS2OperationCompleted;
        
        private System.Threading.SendOrPostCallback NEW_CONNECTION_SITE_TASKS3OperationCompleted;
        
        private System.Threading.SendOrPostCallback updatebreakdownreadstatsuOperationCompleted;
        
        private System.Threading.SendOrPostCallback getbreakdowndetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getbreakdownstatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback SCAN_FOR_AFFIDAVITOperationCompleted;
        
        private System.Threading.SendOrPostCallback NEW_CONNECTION_SITE_STATUSOperationCompleted;
        
        private System.Threading.SendOrPostCallback SCAN_FOR_ADDRESS_PROOFOperationCompleted;
        
        private System.Threading.SendOrPostCallback SCAN_FOR_ID_PROOFOperationCompleted;
        
        private System.Threading.SendOrPostCallback SCAN_FOR_OwnershipOperationCompleted;
        
        private System.Threading.SendOrPostCallback SCAN_FOR_ApplicationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SCAN_FOR_OTHEROperationCompleted;
        
        private System.Threading.SendOrPostCallback NEW_CONNECTION_SITE_TASKS1OperationCompleted;
        
        private System.Threading.SendOrPostCallback NEW_CONNECTION_SITE_SIGN_IMGOperationCompleted;
        
        private System.Threading.SendOrPostCallback NEW_CONNECTION_pole_TF_RC_PremisesOperationCompleted;
        
        private System.Threading.SendOrPostCallback NEW_CONNECTION_pole_TF_RC_Premises_KCCOperationCompleted;
        
        private System.Threading.SendOrPostCallback ISUSTD_USEROperationCompleted;
        
        private System.Threading.SendOrPostCallback DOCLISTOperationCompleted;
        
        private System.Threading.SendOrPostCallback DOCLIST_NEWOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::Recovery_Webservice.Properties.Settings.Default.Recovery_Webservice_PDFDetails_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public UserCredentials UserCredentialsValue {
            get {
                return this.userCredentialsValueField;
            }
            set {
                this.userCredentialsValueField = value;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event Seva_Insert_Data_Other_ConnectionCompletedEventHandler Seva_Insert_Data_Other_ConnectionCompleted;
        
        /// <remarks/>
        public event Z_BAPI_DSS_ISU_CA_DISPLAY_GISCompletedEventHandler Z_BAPI_DSS_ISU_CA_DISPLAY_GISCompleted;
        
        /// <remarks/>
        public event GET_METERDETAILSCompletedEventHandler GET_METERDETAILSCompleted;
        
        /// <remarks/>
        public event GetMeterCA_DetailsCompletedEventHandler GetMeterCA_DetailsCompleted;
        
        /// <remarks/>
        public event PowerThef_DivMasterCompletedEventHandler PowerThef_DivMasterCompleted;
        
        /// <remarks/>
        public event GET_METER_CA_DETAILSCompletedEventHandler GET_METER_CA_DETAILSCompleted;
        
        /// <remarks/>
        public event PowerThef_Insert_INPUTDataCompletedEventHandler PowerThef_Insert_INPUTDataCompleted;
        
        /// <remarks/>
        public event LeadStatus_PowerTheftMISCompletedEventHandler LeadStatus_PowerTheftMISCompleted;
        
        /// <remarks/>
        public event Mobile_PowerTheftMISCompletedEventHandler Mobile_PowerTheftMISCompleted;
        
        /// <remarks/>
        public event Mobile_PowerTheftMIS_SummaryCompletedEventHandler Mobile_PowerTheftMIS_SummaryCompleted;
        
        /// <remarks/>
        public event ENF_Redem_RewardCompletedEventHandler ENF_Redem_RewardCompleted;
        
        /// <remarks/>
        public event ENF_Reward_EarnedCompletedEventHandler ENF_Reward_EarnedCompleted;
        
        /// <remarks/>
        public event PowerTheft_RegisterUserCompletedEventHandler PowerTheft_RegisterUserCompleted;
        
        /// <remarks/>
        public event PowerTheft_LoginFECompletedEventHandler PowerTheft_LoginFECompleted;
        
        /// <remarks/>
        public event NewConnOTPRqstFrm_theftCompletedEventHandler NewConnOTPRqstFrm_theftCompleted;
        
        /// <remarks/>
        public event PowerTheft_GetPasswordCompletedEventHandler PowerTheft_GetPasswordCompleted;
        
        /// <remarks/>
        public event NewConnResendOTPVerifyFrm_theftCompletedEventHandler NewConnResendOTPVerifyFrm_theftCompleted;
        
        /// <remarks/>
        public event NewConnOTPVerifyFrm_theftCompletedEventHandler NewConnOTPVerifyFrm_theftCompleted;
        
        /// <remarks/>
        public event loginFE_theftCompletedEventHandler loginFE_theftCompleted;
        
        /// <remarks/>
        public event complaintSubmit_theftCompletedEventHandler complaintSubmit_theftCompleted;
        
        /// <remarks/>
        public event PowerThef_ResetPasswordCompletedEventHandler PowerThef_ResetPasswordCompleted;
        
        /// <remarks/>
        public event SK_HolidayList_NEWCompletedEventHandler SK_HolidayList_NEWCompleted;
        
        /// <remarks/>
        public event PHOTOMETER_READINGCompletedEventHandler PHOTOMETER_READINGCompleted;
        
        /// <remarks/>
        public event Z_ZBAPI_FETCH_ENFCACompletedEventHandler Z_ZBAPI_FETCH_ENFCACompleted;
        
        /// <remarks/>
        public event BAPI_MTRREADDOC_GETLISTCompletedEventHandler BAPI_MTRREADDOC_GETLISTCompleted;
        
        /// <remarks/>
        public event ZBAPI_CS_FETCH_LOADCompletedEventHandler ZBAPI_CS_FETCH_LOADCompleted;
        
        /// <remarks/>
        public event VSS_GetRequestType_DeptpartmentWiseCompletedEventHandler VSS_GetRequestType_DeptpartmentWiseCompleted;
        
        /// <remarks/>
        public event VSS_GetAssginDetails_CircleDivCompDeptWiseCompletedEventHandler VSS_GetAssginDetails_CircleDivCompDeptWiseCompleted;
        
        /// <remarks/>
        public event VSS_Insert_Complaint_DataCompletedEventHandler VSS_Insert_Complaint_DataCompleted;
        
        /// <remarks/>
        public event VSS_Update_Complaint_DataCompletedEventHandler VSS_Update_Complaint_DataCompleted;
        
        /// <remarks/>
        public event VSS_GetComplaintDetails_CompWiseCompletedEventHandler VSS_GetComplaintDetails_CompWiseCompleted;
        
        /// <remarks/>
        public event VSS_GetRemarksDetails_ReqWiseCompletedEventHandler VSS_GetRemarksDetails_ReqWiseCompleted;
        
        /// <remarks/>
        public event SK_RegDistMsgTxtCompletedEventHandler SK_RegDistMsgTxtCompleted;
        
        /// <remarks/>
        public event SK_HolidayListCompletedEventHandler SK_HolidayListCompleted;
        
        /// <remarks/>
        public event SK_TimeSlotListCompletedEventHandler SK_TimeSlotListCompleted;
        
        /// <remarks/>
        public event SK_RegDistStatusCompletedEventHandler SK_RegDistStatusCompleted;
        
        /// <remarks/>
        public event SK_RegOrderNoRatingCompletedEventHandler SK_RegOrderNoRatingCompleted;
        
        /// <remarks/>
        public event LR_Scheme_DivisionWiseCompletedEventHandler LR_Scheme_DivisionWiseCompleted;
        
        /// <remarks/>
        public event LR_Scheme_Vendor_UserCompletedEventHandler LR_Scheme_Vendor_UserCompleted;
        
        /// <remarks/>
        public event LR_Vendor_DivisionWiseCompletedEventHandler LR_Vendor_DivisionWiseCompleted;
        
        /// <remarks/>
        public event LR_Insert_Scheme_Vendor_MobDataCompletedEventHandler LR_Insert_Scheme_Vendor_MobDataCompleted;
        
        /// <remarks/>
        public event LR_Insert_ActivityType_MobDataCompletedEventHandler LR_Insert_ActivityType_MobDataCompleted;
        
        /// <remarks/>
        public event LR_Dashboard_DateWiseCompletedEventHandler LR_Dashboard_DateWiseCompleted;
        
        /// <remarks/>
        public event LR_Dashboard_DateDivisionWiseCompletedEventHandler LR_Dashboard_DateDivisionWiseCompleted;
        
        /// <remarks/>
        public event LR_Dashboard_DateSubDivisionWiseCompletedEventHandler LR_Dashboard_DateSubDivisionWiseCompleted;
        
        /// <remarks/>
        public event LR_Surv_QC_Insert_NewCompletedEventHandler LR_Surv_QC_Insert_NewCompleted;
        
        /// <remarks/>
        public event GetOutageAlertRPLCompletedEventHandler GetOutageAlertRPLCompleted;
        
        /// <remarks/>
        public event SplyCode_DefyLtrCompletedEventHandler SplyCode_DefyLtrCompleted;
        
        /// <remarks/>
        public event DOCLIST_NEW_UPDATE_STSCompletedEventHandler DOCLIST_NEW_UPDATE_STSCompleted;
        
        /// <remarks/>
        public event Deficiency_DocList_UpdateCompletedEventHandler Deficiency_DocList_UpdateCompleted;
        
        /// <remarks/>
        public event SUPPLY_CODE_NEW_CONN_IMGCompletedEventHandler SUPPLY_CODE_NEW_CONN_IMGCompleted;
        
        /// <remarks/>
        public event SUPPLY_CODE_NEW_CONN_DATACompletedEventHandler SUPPLY_CODE_NEW_CONN_DATACompleted;
        
        /// <remarks/>
        public event LR_Surveillance_Insert_NewCompletedEventHandler LR_Surveillance_Insert_NewCompleted;
        
        /// <remarks/>
        public event LR_Surv_ATR_InsertCompletedEventHandler LR_Surv_ATR_InsertCompleted;
        
        /// <remarks/>
        public event LR_ObservationList_NewCompletedEventHandler LR_ObservationList_NewCompleted;
        
        /// <remarks/>
        public event MCR_GetUserLoginDetailsCompletedEventHandler MCR_GetUserLoginDetailsCompleted;
        
        /// <remarks/>
        public event MCR_GetUserMCR_INPUT_DTCompletedEventHandler MCR_GetUserMCR_INPUT_DTCompleted;
        
        /// <remarks/>
        public event MCR_GetUserMCR_INPUT_DTNEWCompletedEventHandler MCR_GetUserMCR_INPUT_DTNEWCompleted;
        
        /// <remarks/>
        public event MCR_Insert_INPUT_DataCompletedEventHandler MCR_Insert_INPUT_DataCompleted;
        
        /// <remarks/>
        public event MCR_Insert_INPUT_DataEXTRA7CompletedEventHandler MCR_Insert_INPUT_DataEXTRA7Completed;
        
        /// <remarks/>
        public event MCR_Insert_INPUT_DataNEWCompletedEventHandler MCR_Insert_INPUT_DataNEWCompleted;
        
        /// <remarks/>
        public event MCR_ValidateSEALCompletedEventHandler MCR_ValidateSEALCompleted;
        
        /// <remarks/>
        public event MCR_Create_Installer_DataCompletedEventHandler MCR_Create_Installer_DataCompleted;
        
        /// <remarks/>
        public event MCR_GetInstaller_DataCompletedEventHandler MCR_GetInstaller_DataCompleted;
        
        /// <remarks/>
        public event MCR_OrderAssignCompletedEventHandler MCR_OrderAssignCompleted;
        
        /// <remarks/>
        public event MCR_Password_UpdateCompletedEventHandler MCR_Password_UpdateCompleted;
        
        /// <remarks/>
        public event MCR_GetSeal_DetailsCompletedEventHandler MCR_GetSeal_DetailsCompleted;
        
        /// <remarks/>
        public event MCR_GetMeter_DetailsCompletedEventHandler MCR_GetMeter_DetailsCompleted;
        
        /// <remarks/>
        public event MCR_OrderCancelCompletedEventHandler MCR_OrderCancelCompleted;
        
        /// <remarks/>
        public event MCR_Insert_INPUT_Data_RVCompletedEventHandler MCR_Insert_INPUT_Data_RVCompleted;
        
        /// <remarks/>
        public event MCR_Insert_INPUT_Data_Img_RVCompletedEventHandler MCR_Insert_INPUT_Data_Img_RVCompleted;
        
        /// <remarks/>
        public event MCR_Insert_INPUT_Data_RV_NEWCompletedEventHandler MCR_Insert_INPUT_Data_RV_NEWCompleted;
        
        /// <remarks/>
        public event MCR_Insert_INPUT_Data_RV_NEW1CompletedEventHandler MCR_Insert_INPUT_Data_RV_NEW1Completed;
        
        /// <remarks/>
        public event MCR_GetCancelRmkDetailsCompletedEventHandler MCR_GetCancelRmkDetailsCompleted;
        
        /// <remarks/>
        public event MCR_GetSubDiv_DivisionCompletedEventHandler MCR_GetSubDiv_DivisionCompleted;
        
        /// <remarks/>
        public event MCR_GetUserMCR_INPUT_COMP_DTCompletedEventHandler MCR_GetUserMCR_INPUT_COMP_DTCompleted;
        
        /// <remarks/>
        public event RecServices_CategoryCompletedEventHandler RecServices_CategoryCompleted;
        
        /// <remarks/>
        public event RecServices_Amount_BucketCompletedEventHandler RecServices_Amount_BucketCompleted;
        
        /// <remarks/>
        public event RecServices_Aging_BucketCompletedEventHandler RecServices_Aging_BucketCompleted;
        
        /// <remarks/>
        public event RecServices_Account_ClassCompletedEventHandler RecServices_Account_ClassCompleted;
        
        /// <remarks/>
        public event RecServices_ATR_StatusCompletedEventHandler RecServices_ATR_StatusCompleted;
        
        /// <remarks/>
        public event RecAllocDefltrsCompletedEventHandler RecAllocDefltrsCompleted;
        
        /// <remarks/>
        public event searchDefltrsCompletedEventHandler searchDefltrsCompleted;
        
        /// <remarks/>
        public event getPaymentCompletedEventHandler getPaymentCompleted;
        
        /// <remarks/>
        public event insertATRCompletedEventHandler insertATRCompleted;
        
        /// <remarks/>
        public event DetailofMISCompletedEventHandler DetailofMISCompleted;
        
        /// <remarks/>
        public event loginFECompletedEventHandler loginFECompleted;
        
        /// <remarks/>
        public event changePasswordCompletedEventHandler changePasswordCompleted;
        
        /// <remarks/>
        public event insertLogCompletedEventHandler insertLogCompleted;
        
        /// <remarks/>
        public event RecServices_NewCompletedEventHandler RecServices_NewCompleted;
        
        /// <remarks/>
        public event ZBAPI_UPDATE_TNOCompletedEventHandler ZBAPI_UPDATE_TNOCompleted;
        
        /// <remarks/>
        public event ZBAPI_CNTAPP_DETAILMOBCompletedEventHandler ZBAPI_CNTAPP_DETAILMOBCompleted;
        
        /// <remarks/>
        public event ZBAPI_CREATESO_POSTCompletedEventHandler ZBAPI_CREATESO_POSTCompleted;
        
        /// <remarks/>
        public event LR_Scheme_DivSchmMappingCompletedEventHandler LR_Scheme_DivSchmMappingCompleted;
        
        /// <remarks/>
        public event LR_Scheme_AllDivSchmMappingCompletedEventHandler LR_Scheme_AllDivSchmMappingCompleted;
        
        /// <remarks/>
        public event LR_NewActivityModuleSchemeMISCompletedEventHandler LR_NewActivityModuleSchemeMISCompleted;
        
        /// <remarks/>
        public event LR_NewSurvellanceCircleDivMISCompletedEventHandler LR_NewSurvellanceCircleDivMISCompleted;
        
        /// <remarks/>
        public event LR_NEW_QC_MISCompletedEventHandler LR_NEW_QC_MISCompleted;
        
        /// <remarks/>
        public event Seva_get_Login_DetailsCompletedEventHandler Seva_get_Login_DetailsCompleted;
        
        /// <remarks/>
        public event Seva_change_PasswordCompletedEventHandler Seva_change_PasswordCompleted;
        
        /// <remarks/>
        public event Seva_get_Order_DetailsCompletedEventHandler Seva_get_Order_DetailsCompleted;
        
        /// <remarks/>
        public event Seva_get_Order_Wise_Complete_DetailsCompletedEventHandler Seva_get_Order_Wise_Complete_DetailsCompleted;
        
        /// <remarks/>
        public event Seva_Insert_Data_New_ConnCompletedEventHandler Seva_Insert_Data_New_ConnCompleted;
        
        /// <remarks/>
        public event Insert_DOCLIST_signCompletedEventHandler Insert_DOCLIST_signCompleted;
        
        /// <remarks/>
        public event Insert_CA_building_imgCompletedEventHandler Insert_CA_building_imgCompleted;
        
        /// <remarks/>
        public event Insert_IR_DATACompletedEventHandler Insert_IR_DATACompleted;
        
        /// <remarks/>
        public event UPDATE_IR_DATACompletedEventHandler UPDATE_IR_DATACompleted;
        
        /// <remarks/>
        public event Insert_CF_DATACompletedEventHandler Insert_CF_DATACompleted;
        
        /// <remarks/>
        public event UPDATE_CF_DATACompletedEventHandler UPDATE_CF_DATACompleted;
        
        /// <remarks/>
        public event Insert_RECF_DATACompletedEventHandler Insert_RECF_DATACompleted;
        
        /// <remarks/>
        public event GCMRegistrationCompletedEventHandler GCMRegistrationCompleted;
        
        /// <remarks/>
        public event GCMUserMsgLogCompletedEventHandler GCMUserMsgLogCompleted;
        
        /// <remarks/>
        public event GCMUpdateMsgLogCompletedEventHandler GCMUpdateMsgLogCompleted;
        
        /// <remarks/>
        public event GCMCheckRegistrationLogCompletedEventHandler GCMCheckRegistrationLogCompleted;
        
        /// <remarks/>
        public event RegisterSmartAppComplaintCompletedEventHandler RegisterSmartAppComplaintCompleted;
        
        /// <remarks/>
        public event updatebreakdownCompletedEventHandler updatebreakdownCompleted;
        
        /// <remarks/>
        public event GetComplaintStatusCompletedEventHandler GetComplaintStatusCompleted;
        
        /// <remarks/>
        public event GetComplaintDetailsCACompletedEventHandler GetComplaintDetailsCACompleted;
        
        /// <remarks/>
        public event GetValidateUserCompletedEventHandler GetValidateUserCompleted;
        
        /// <remarks/>
        public event NewRegistration_ARDCompletedEventHandler NewRegistration_ARDCompleted;
        
        /// <remarks/>
        public event GetPasswordSMSCompletedEventHandler GetPasswordSMSCompleted;
        
        /// <remarks/>
        public event EMP_UserDetailsCompletedEventHandler EMP_UserDetailsCompleted;
        
        /// <remarks/>
        public event ONM_GetAssignedComplaintsToTeamCompletedEventHandler ONM_GetAssignedComplaintsToTeamCompleted;
        
        /// <remarks/>
        public event ONM_UpdateComplaintResolutiontimeCompletedEventHandler ONM_UpdateComplaintResolutiontimeCompleted;
        
        /// <remarks/>
        public event ONM_GetComplaintStatusCompletedEventHandler ONM_GetComplaintStatusCompleted;
        
        /// <remarks/>
        public event CloseComplaintSigCompletedEventHandler CloseComplaintSigCompleted;
        
        /// <remarks/>
        public event UpdateIMEILocationCompletedEventHandler UpdateIMEILocationCompleted;
        
        /// <remarks/>
        public event ONM_LINEMEN_LOGINCompletedEventHandler ONM_LINEMEN_LOGINCompleted;
        
        /// <remarks/>
        public event ONM_LINEMEN_LOGOUTCompletedEventHandler ONM_LINEMEN_LOGOUTCompleted;
        
        /// <remarks/>
        public event ONM_COMPLAINT_DETAILCompletedEventHandler ONM_COMPLAINT_DETAILCompleted;
        
        /// <remarks/>
        public event onm_mark_readCompletedEventHandler onm_mark_readCompleted;
        
        /// <remarks/>
        public event update_onm_complaintCompletedEventHandler update_onm_complaintCompleted;
        
        /// <remarks/>
        public event ONM_UpdatebreakdowndetailsHourCompletedEventHandler ONM_UpdatebreakdowndetailsHourCompleted;
        
        /// <remarks/>
        public event GetbreakdowndetailsIMEICompletedEventHandler GetbreakdowndetailsIMEICompleted;
        
        /// <remarks/>
        public event ONM_updatebreakdownreadstatsuCompletedEventHandler ONM_updatebreakdownreadstatsuCompleted;
        
        /// <remarks/>
        public event getbreakdownstatusBDCompletedEventHandler getbreakdownstatusBDCompleted;
        
        /// <remarks/>
        public event ONM_getbreakdownbackfeedlistCompletedEventHandler ONM_getbreakdownbackfeedlistCompleted;
        
        /// <remarks/>
        public event ONM_updatebreakdownbackfeedCompletedEventHandler ONM_updatebreakdownbackfeedCompleted;
        
        /// <remarks/>
        public event ONM_CloseCableDetailsCompletedEventHandler ONM_CloseCableDetailsCompleted;
        
        /// <remarks/>
        public event ONM_BurnMeterUpdateCompletedEventHandler ONM_BurnMeterUpdateCompleted;
        
        /// <remarks/>
        public event ONM_Get_Meter_OComp_ListCompletedEventHandler ONM_Get_Meter_OComp_ListCompleted;
        
        /// <remarks/>
        public event ONM_Get_Meter_CComp_ListCompletedEventHandler ONM_Get_Meter_CComp_ListCompleted;
        
        /// <remarks/>
        public event ONM_Dashboard_ReportCompletedEventHandler ONM_Dashboard_ReportCompleted;
        
        /// <remarks/>
        public event ONM_Dashboard_OnSelectCompletedEventHandler ONM_Dashboard_OnSelectCompleted;
        
        /// <remarks/>
        public event ONM_Dashboard_Report_OldCompletedEventHandler ONM_Dashboard_Report_OldCompleted;
        
        /// <remarks/>
        public event ONM_Dashboard_OnSelect_OldCompletedEventHandler ONM_Dashboard_OnSelect_OldCompleted;
        
        /// <remarks/>
        public event Test_ApplicationCompletedEventHandler Test_ApplicationCompleted;
        
        /// <remarks/>
        public event ONM_NCC_RegistrationCompletedEventHandler ONM_NCC_RegistrationCompleted;
        
        /// <remarks/>
        public event ONM_Area_CodeCompletedEventHandler ONM_Area_CodeCompleted;
        
        /// <remarks/>
        public event ONM_LOGIN_USERCompletedEventHandler ONM_LOGIN_USERCompleted;
        
        /// <remarks/>
        public event ONM_LINEMEN_USER_LISTCompletedEventHandler ONM_LINEMEN_USER_LISTCompleted;
        
        /// <remarks/>
        public event ONM_Get_Complaint_ListCompletedEventHandler ONM_Get_Complaint_ListCompleted;
        
        /// <remarks/>
        public event ONM_Allocate_ComplaintCompletedEventHandler ONM_Allocate_ComplaintCompleted;
        
        /// <remarks/>
        public event BD_Get_Complaint_ListCompletedEventHandler BD_Get_Complaint_ListCompleted;
        
        /// <remarks/>
        public event ONM_Get_UserDevice_ListCompletedEventHandler ONM_Get_UserDevice_ListCompleted;
        
        /// <remarks/>
        public event ONM_Get_Device_Name_ListCompletedEventHandler ONM_Get_Device_Name_ListCompleted;
        
        /// <remarks/>
        public event ONM_Update_UserDevice_ListCompletedEventHandler ONM_Update_UserDevice_ListCompleted;
        
        /// <remarks/>
        public event Street_Light_AreaListCompletedEventHandler Street_Light_AreaListCompleted;
        
        /// <remarks/>
        public event Street_Light_AreaList_AllCompletedEventHandler Street_Light_AreaList_AllCompleted;
        
        /// <remarks/>
        public event Street_Light_RegistrationCompletedEventHandler Street_Light_RegistrationCompleted;
        
        /// <remarks/>
        public event SL_Complaint_ListCompletedEventHandler SL_Complaint_ListCompleted;
        
        /// <remarks/>
        public event SL_Complaint_AllocationCompletedEventHandler SL_Complaint_AllocationCompleted;
        
        /// <remarks/>
        public event SL_Vendor_ListCompletedEventHandler SL_Vendor_ListCompleted;
        
        /// <remarks/>
        public event Emergency_RegistrationCompletedEventHandler Emergency_RegistrationCompleted;
        
        /// <remarks/>
        public event IMSGLoginUserCompletedEventHandler IMSGLoginUserCompleted;
        
        /// <remarks/>
        public event IMSGCompanyMstCompletedEventHandler IMSGCompanyMstCompleted;
        
        /// <remarks/>
        public event IMSGCompGrpMstCompletedEventHandler IMSGCompGrpMstCompleted;
        
        /// <remarks/>
        public event IMSGCompSubGrpMstCompletedEventHandler IMSGCompSubGrpMstCompleted;
        
        /// <remarks/>
        public event IMsgGCMRegistrationCompletedEventHandler IMsgGCMRegistrationCompleted;
        
        /// <remarks/>
        public event IMsgGCMRegIdsCompletedEventHandler IMsgGCMRegIdsCompleted;
        
        /// <remarks/>
        public event IMsgUpdateLogCompletedEventHandler IMsgUpdateLogCompleted;
        
        /// <remarks/>
        public event IMSGMsgSendCompletedEventHandler IMSGMsgSendCompleted;
        
        /// <remarks/>
        public event IMSGMsgTextTBSendCompletedEventHandler IMSGMsgTextTBSendCompleted;
        
        /// <remarks/>
        public event IMsgLoadEmployeesCompletedEventHandler IMsgLoadEmployeesCompleted;
        
        /// <remarks/>
        public event IMSGMsgChatRoomCompletedEventHandler IMSGMsgChatRoomCompleted;
        
        /// <remarks/>
        public event TTS_LOGIN_MOBILECompletedEventHandler TTS_LOGIN_MOBILECompleted;
        
        /// <remarks/>
        public event TMS_TaskAllocationAction_DataCompletedEventHandler TMS_TaskAllocationAction_DataCompleted;
        
        /// <remarks/>
        public event TTS_TASK_ACTIONCompletedEventHandler TTS_TASK_ACTIONCompleted;
        
        /// <remarks/>
        public event BDSDTotalCountsCompletedEventHandler BDSDTotalCountsCompleted;
        
        /// <remarks/>
        public event BDSDHTLTTotalCountsCompletedEventHandler BDSDHTLTTotalCountsCompleted;
        
        /// <remarks/>
        public event BDSDHTLTDetailsOnTotalCompletedEventHandler BDSDHTLTDetailsOnTotalCompleted;
        
        /// <remarks/>
        public event BDSDHTLTOnSlctAreaListCompletedEventHandler BDSDHTLTOnSlctAreaListCompleted;
        
        /// <remarks/>
        public event BDSDHTLTOnAreaListConsCountCompletedEventHandler BDSDHTLTOnAreaListConsCountCompleted;
        
        /// <remarks/>
        public event BDSDContactListCompletedEventHandler BDSDContactListCompleted;
        
        /// <remarks/>
        public event BDSDSMSCountListCompletedEventHandler BDSDSMSCountListCompleted;
        
        /// <remarks/>
        public event ONM_getbreakdownbackfeedlist_NewCompletedEventHandler ONM_getbreakdownbackfeedlist_NewCompleted;
        
        /// <remarks/>
        public event VSS_GetCompliantCentre_DivisionWiseCompletedEventHandler VSS_GetCompliantCentre_DivisionWiseCompleted;
        
        /// <remarks/>
        public event Get_Lat_LongCompletedEventHandler Get_Lat_LongCompleted;
        
        /// <remarks/>
        public event Get_Lat_Long_AndroidCompletedEventHandler Get_Lat_Long_AndroidCompleted;
        
        /// <remarks/>
        public event ZBAPI_EDISTRICTCompletedEventHandler ZBAPI_EDISTRICTCompleted;
        
        /// <remarks/>
        public event Z_BAPI_DSS_ISU_CA_DISPLAYCompletedEventHandler Z_BAPI_DSS_ISU_CA_DISPLAYCompleted;
        
        /// <remarks/>
        public event Z_BAPI_DSS_ISU_CA_DISPLAY_SAPCompletedEventHandler Z_BAPI_DSS_ISU_CA_DISPLAY_SAPCompleted;
        
        /// <remarks/>
        public event Z_BAPI_DSS_ISU_CA_DISPLAY_RCMCompletedEventHandler Z_BAPI_DSS_ISU_CA_DISPLAY_RCMCompleted;
        
        /// <remarks/>
        public event ONM_CloseMeterComplaintCompletedEventHandler ONM_CloseMeterComplaintCompleted;
        
        /// <remarks/>
        public event ZBAPI_ONLINE_BILL_PDF_V2CompletedEventHandler ZBAPI_ONLINE_BILL_PDF_V2Completed;
        
        /// <remarks/>
        public event ZBAPI_ONLINE_BILL_PDFCompletedEventHandler ZBAPI_ONLINE_BILL_PDFCompleted;
        
        /// <remarks/>
        public event ZBAPI_ONLINE_BILL_PDF_MSCompletedEventHandler ZBAPI_ONLINE_BILL_PDF_MSCompleted;
        
        /// <remarks/>
        public event ZBAPI_ONLINE_BILL_PDF_WACompletedEventHandler ZBAPI_ONLINE_BILL_PDF_WACompleted;
        
        /// <remarks/>
        public event ZBAPI_DEMAND_NOTE_ONLINECompletedEventHandler ZBAPI_DEMAND_NOTE_ONLINECompleted;
        
        /// <remarks/>
        public event GetAssignedComplaintsToTeamCompletedEventHandler GetAssignedComplaintsToTeamCompleted;
        
        /// <remarks/>
        public event GetClosingRemarksFromCategoryCompletedEventHandler GetClosingRemarksFromCategoryCompleted;
        
        /// <remarks/>
        public event CloseComplaintCompletedEventHandler CloseComplaintCompleted;
        
        /// <remarks/>
        public event Z_BAPI_ZDSS_WEB_LINKCompletedEventHandler Z_BAPI_ZDSS_WEB_LINKCompleted;
        
        /// <remarks/>
        public event NewConnOTPRqstFrmCompletedEventHandler NewConnOTPRqstFrmCompleted;
        
        /// <remarks/>
        public event NewConnOTPVerifyFrmCompletedEventHandler NewConnOTPVerifyFrmCompleted;
        
        /// <remarks/>
        public event NewConnResendOTPVerifyFrmCompletedEventHandler NewConnResendOTPVerifyFrmCompleted;
        
        /// <remarks/>
        public event App_logCompletedEventHandler App_logCompleted;
        
        /// <remarks/>
        public event getPendingOrderOracleCompletedEventHandler getPendingOrderOracleCompleted;
        
        /// <remarks/>
        public event getCompleteOrderOracleCompletedEventHandler getCompleteOrderOracleCompleted;
        
        /// <remarks/>
        public event getPendingOrderOracleKCCCompletedEventHandler getPendingOrderOracleKCCCompleted;
        
        /// <remarks/>
        public event ChkUsrForClosingComplntCompletedEventHandler ChkUsrForClosingComplntCompleted;
        
        /// <remarks/>
        public event updateOrderStatusCompletedEventHandler updateOrderStatusCompleted;
        
        /// <remarks/>
        public event getIVRSCallIDCompletedEventHandler getIVRSCallIDCompleted;
        
        /// <remarks/>
        public event getCFOracleCompletedEventHandler getCFOracleCompleted;
        
        /// <remarks/>
        public event ZBAPI_CS_ORD_STATCompletedEventHandler ZBAPI_CS_ORD_STATCompleted;
        
        /// <remarks/>
        public event ZBAPI_DISPLAY_BILL_WEBCompletedEventHandler ZBAPI_DISPLAY_BILL_WEBCompleted;
        
        /// <remarks/>
        public event ZBAPI_DISPLAY_BILL_WEB_VALIDCompletedEventHandler ZBAPI_DISPLAY_BILL_WEB_VALIDCompleted;
        
        /// <remarks/>
        public event GetTransformerSetupDetail_delhiCompletedEventHandler GetTransformerSetupDetail_delhiCompleted;
        
        /// <remarks/>
        public event FIVE_COMPLCompletedEventHandler FIVE_COMPLCompleted;
        
        /// <remarks/>
        public event FEEDBACKCompletedEventHandler FEEDBACKCompleted;
        
        /// <remarks/>
        public event FEEDBACK_MOBAPPCompletedEventHandler FEEDBACK_MOBAPPCompleted;
        
        /// <remarks/>
        public event Area_CodeCompletedEventHandler Area_CodeCompleted;
        
        /// <remarks/>
        public event GetARDAppVersionCompletedEventHandler GetARDAppVersionCompleted;
        
        /// <remarks/>
        public event NewRegistrationCompletedEventHandler NewRegistrationCompleted;
        
        /// <remarks/>
        public event NCC_RegistrationCompletedEventHandler NCC_RegistrationCompleted;
        
        /// <remarks/>
        public event DISPLAY_BILLCompletedEventHandler DISPLAY_BILLCompleted;
        
        /// <remarks/>
        public event BILL_HISTCompletedEventHandler BILL_HISTCompleted;
        
        /// <remarks/>
        public event Z_BAPI_IVRSCompletedEventHandler Z_BAPI_IVRSCompleted;
        
        /// <remarks/>
        public event ZBAPI_IVR_CREATESO_ISUCompletedEventHandler ZBAPI_IVR_CREATESO_ISUCompleted;
        
        /// <remarks/>
        public event CA_DISPLAYCompletedEventHandler CA_DISPLAYCompleted;
        
        /// <remarks/>
        public event CA_ADDRESS_UPLOADCompletedEventHandler CA_ADDRESS_UPLOADCompleted;
        
        /// <remarks/>
        public event ZBAPIDOCLISTCompletedEventHandler ZBAPIDOCLISTCompleted;
        
        /// <remarks/>
        public event NEW_CONNECTION_SITE_TASKSCompletedEventHandler NEW_CONNECTION_SITE_TASKSCompleted;
        
        /// <remarks/>
        public event NEW_CONNECTION_SITE_TASKS2CompletedEventHandler NEW_CONNECTION_SITE_TASKS2Completed;
        
        /// <remarks/>
        public event NEW_CONNECTION_SITE_TASKS3CompletedEventHandler NEW_CONNECTION_SITE_TASKS3Completed;
        
        /// <remarks/>
        public event updatebreakdownreadstatsuCompletedEventHandler updatebreakdownreadstatsuCompleted;
        
        /// <remarks/>
        public event getbreakdowndetailsCompletedEventHandler getbreakdowndetailsCompleted;
        
        /// <remarks/>
        public event getbreakdownstatusCompletedEventHandler getbreakdownstatusCompleted;
        
        /// <remarks/>
        public event SCAN_FOR_AFFIDAVITCompletedEventHandler SCAN_FOR_AFFIDAVITCompleted;
        
        /// <remarks/>
        public event NEW_CONNECTION_SITE_STATUSCompletedEventHandler NEW_CONNECTION_SITE_STATUSCompleted;
        
        /// <remarks/>
        public event SCAN_FOR_ADDRESS_PROOFCompletedEventHandler SCAN_FOR_ADDRESS_PROOFCompleted;
        
        /// <remarks/>
        public event SCAN_FOR_ID_PROOFCompletedEventHandler SCAN_FOR_ID_PROOFCompleted;
        
        /// <remarks/>
        public event SCAN_FOR_OwnershipCompletedEventHandler SCAN_FOR_OwnershipCompleted;
        
        /// <remarks/>
        public event SCAN_FOR_ApplicationCompletedEventHandler SCAN_FOR_ApplicationCompleted;
        
        /// <remarks/>
        public event SCAN_FOR_OTHERCompletedEventHandler SCAN_FOR_OTHERCompleted;
        
        /// <remarks/>
        public event NEW_CONNECTION_SITE_TASKS1CompletedEventHandler NEW_CONNECTION_SITE_TASKS1Completed;
        
        /// <remarks/>
        public event NEW_CONNECTION_SITE_SIGN_IMGCompletedEventHandler NEW_CONNECTION_SITE_SIGN_IMGCompleted;
        
        /// <remarks/>
        public event NEW_CONNECTION_pole_TF_RC_PremisesCompletedEventHandler NEW_CONNECTION_pole_TF_RC_PremisesCompleted;
        
        /// <remarks/>
        public event NEW_CONNECTION_pole_TF_RC_Premises_KCCCompletedEventHandler NEW_CONNECTION_pole_TF_RC_Premises_KCCCompleted;
        
        /// <remarks/>
        public event ISUSTD_USERCompletedEventHandler ISUSTD_USERCompleted;
        
        /// <remarks/>
        public event DOCLISTCompletedEventHandler DOCLISTCompleted;
        
        /// <remarks/>
        public event DOCLIST_NEWCompletedEventHandler DOCLIST_NEWCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Seva_Insert_Data_Other_Connection", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Seva_Insert_Data_Other_Connection(
                    string strKYC, 
                    string strORDER_NO, 
                    string strCA_NUMBER, 
                    string strReqType, 
                    string strFIRST_NAME, 
                    string strMIDDLE_NAME, 
                    string strLAST_NAME, 
                    string strTITLE, 
                    string strGENDER, 
                    string strDOB, 
                    string strFATHER_NAME, 
                    string strsMOTHER_NAME, 
                    string strFN_AS, 
                    string strMN_AS, 
                    string strLN_AS, 
                    string strDESIGNATION_AS, 
                    string strTYPE_ORG, 
                    string strDOI, 
                    string strHOUSE_NO, 
                    string strBUILDING_NAME, 
                    string strSTREET, 
                    string strAREA, 
                    string strPIN, 
                    string strLANDMARK, 
                    string strMOBILE_NO, 
                    string strPHONE_NO, 
                    string strEMAIL, 
                    string strPAN_NO, 
                    string strID_NO, 
                    string strREASON_S3, 
                    string strNAME_S3, 
                    string strGENDER_S3, 
                    string strDOB_S3, 
                    string strFATHEERNAME_S3, 
                    string strELOAD_S4, 
                    string strRLOAD_S4, 
                    string strMETERCHOICE_S4, 
                    string strVLEVEL_S4, 
                    string strPHASE_S4, 
                    string strPURPOSE_S5, 
                    string strDESC_S5, 
                    string strREASON_S6, 
                    string strHOUSENO_S6, 
                    string strBNAME_S6, 
                    string strSTREET_S6, 
                    string strAREA_S6, 
                    string strPIN_S6, 
                    string strLANDMARK_S6, 
                    string strLBP_S7, 
                    string strREASON_S8, 
                    string strDOV_S8, 
                    string strMODE_S8, 
                    string strREASON_S9, 
                    string strUPTODATE_S9, 
                    string strAUTO_DEBIT_S10, 
                    string strImgName, 
                    string strSignName, 
                    string strCompany, 
                    string strDOA, 
                    string strRemark, 
                    string strUser_ID, 
                    string strIDName) {
            object[] results = this.Invoke("Seva_Insert_Data_Other_Connection", new object[] {
                        strKYC,
                        strORDER_NO,
                        strCA_NUMBER,
                        strReqType,
                        strFIRST_NAME,
                        strMIDDLE_NAME,
                        strLAST_NAME,
                        strTITLE,
                        strGENDER,
                        strDOB,
                        strFATHER_NAME,
                        strsMOTHER_NAME,
                        strFN_AS,
                        strMN_AS,
                        strLN_AS,
                        strDESIGNATION_AS,
                        strTYPE_ORG,
                        strDOI,
                        strHOUSE_NO,
                        strBUILDING_NAME,
                        strSTREET,
                        strAREA,
                        strPIN,
                        strLANDMARK,
                        strMOBILE_NO,
                        strPHONE_NO,
                        strEMAIL,
                        strPAN_NO,
                        strID_NO,
                        strREASON_S3,
                        strNAME_S3,
                        strGENDER_S3,
                        strDOB_S3,
                        strFATHEERNAME_S3,
                        strELOAD_S4,
                        strRLOAD_S4,
                        strMETERCHOICE_S4,
                        strVLEVEL_S4,
                        strPHASE_S4,
                        strPURPOSE_S5,
                        strDESC_S5,
                        strREASON_S6,
                        strHOUSENO_S6,
                        strBNAME_S6,
                        strSTREET_S6,
                        strAREA_S6,
                        strPIN_S6,
                        strLANDMARK_S6,
                        strLBP_S7,
                        strREASON_S8,
                        strDOV_S8,
                        strMODE_S8,
                        strREASON_S9,
                        strUPTODATE_S9,
                        strAUTO_DEBIT_S10,
                        strImgName,
                        strSignName,
                        strCompany,
                        strDOA,
                        strRemark,
                        strUser_ID,
                        strIDName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Seva_Insert_Data_Other_ConnectionAsync(
                    string strKYC, 
                    string strORDER_NO, 
                    string strCA_NUMBER, 
                    string strReqType, 
                    string strFIRST_NAME, 
                    string strMIDDLE_NAME, 
                    string strLAST_NAME, 
                    string strTITLE, 
                    string strGENDER, 
                    string strDOB, 
                    string strFATHER_NAME, 
                    string strsMOTHER_NAME, 
                    string strFN_AS, 
                    string strMN_AS, 
                    string strLN_AS, 
                    string strDESIGNATION_AS, 
                    string strTYPE_ORG, 
                    string strDOI, 
                    string strHOUSE_NO, 
                    string strBUILDING_NAME, 
                    string strSTREET, 
                    string strAREA, 
                    string strPIN, 
                    string strLANDMARK, 
                    string strMOBILE_NO, 
                    string strPHONE_NO, 
                    string strEMAIL, 
                    string strPAN_NO, 
                    string strID_NO, 
                    string strREASON_S3, 
                    string strNAME_S3, 
                    string strGENDER_S3, 
                    string strDOB_S3, 
                    string strFATHEERNAME_S3, 
                    string strELOAD_S4, 
                    string strRLOAD_S4, 
                    string strMETERCHOICE_S4, 
                    string strVLEVEL_S4, 
                    string strPHASE_S4, 
                    string strPURPOSE_S5, 
                    string strDESC_S5, 
                    string strREASON_S6, 
                    string strHOUSENO_S6, 
                    string strBNAME_S6, 
                    string strSTREET_S6, 
                    string strAREA_S6, 
                    string strPIN_S6, 
                    string strLANDMARK_S6, 
                    string strLBP_S7, 
                    string strREASON_S8, 
                    string strDOV_S8, 
                    string strMODE_S8, 
                    string strREASON_S9, 
                    string strUPTODATE_S9, 
                    string strAUTO_DEBIT_S10, 
                    string strImgName, 
                    string strSignName, 
                    string strCompany, 
                    string strDOA, 
                    string strRemark, 
                    string strUser_ID, 
                    string strIDName) {
            this.Seva_Insert_Data_Other_ConnectionAsync(strKYC, strORDER_NO, strCA_NUMBER, strReqType, strFIRST_NAME, strMIDDLE_NAME, strLAST_NAME, strTITLE, strGENDER, strDOB, strFATHER_NAME, strsMOTHER_NAME, strFN_AS, strMN_AS, strLN_AS, strDESIGNATION_AS, strTYPE_ORG, strDOI, strHOUSE_NO, strBUILDING_NAME, strSTREET, strAREA, strPIN, strLANDMARK, strMOBILE_NO, strPHONE_NO, strEMAIL, strPAN_NO, strID_NO, strREASON_S3, strNAME_S3, strGENDER_S3, strDOB_S3, strFATHEERNAME_S3, strELOAD_S4, strRLOAD_S4, strMETERCHOICE_S4, strVLEVEL_S4, strPHASE_S4, strPURPOSE_S5, strDESC_S5, strREASON_S6, strHOUSENO_S6, strBNAME_S6, strSTREET_S6, strAREA_S6, strPIN_S6, strLANDMARK_S6, strLBP_S7, strREASON_S8, strDOV_S8, strMODE_S8, strREASON_S9, strUPTODATE_S9, strAUTO_DEBIT_S10, strImgName, strSignName, strCompany, strDOA, strRemark, strUser_ID, strIDName, null);
        }
        
        /// <remarks/>
        public void Seva_Insert_Data_Other_ConnectionAsync(
                    string strKYC, 
                    string strORDER_NO, 
                    string strCA_NUMBER, 
                    string strReqType, 
                    string strFIRST_NAME, 
                    string strMIDDLE_NAME, 
                    string strLAST_NAME, 
                    string strTITLE, 
                    string strGENDER, 
                    string strDOB, 
                    string strFATHER_NAME, 
                    string strsMOTHER_NAME, 
                    string strFN_AS, 
                    string strMN_AS, 
                    string strLN_AS, 
                    string strDESIGNATION_AS, 
                    string strTYPE_ORG, 
                    string strDOI, 
                    string strHOUSE_NO, 
                    string strBUILDING_NAME, 
                    string strSTREET, 
                    string strAREA, 
                    string strPIN, 
                    string strLANDMARK, 
                    string strMOBILE_NO, 
                    string strPHONE_NO, 
                    string strEMAIL, 
                    string strPAN_NO, 
                    string strID_NO, 
                    string strREASON_S3, 
                    string strNAME_S3, 
                    string strGENDER_S3, 
                    string strDOB_S3, 
                    string strFATHEERNAME_S3, 
                    string strELOAD_S4, 
                    string strRLOAD_S4, 
                    string strMETERCHOICE_S4, 
                    string strVLEVEL_S4, 
                    string strPHASE_S4, 
                    string strPURPOSE_S5, 
                    string strDESC_S5, 
                    string strREASON_S6, 
                    string strHOUSENO_S6, 
                    string strBNAME_S6, 
                    string strSTREET_S6, 
                    string strAREA_S6, 
                    string strPIN_S6, 
                    string strLANDMARK_S6, 
                    string strLBP_S7, 
                    string strREASON_S8, 
                    string strDOV_S8, 
                    string strMODE_S8, 
                    string strREASON_S9, 
                    string strUPTODATE_S9, 
                    string strAUTO_DEBIT_S10, 
                    string strImgName, 
                    string strSignName, 
                    string strCompany, 
                    string strDOA, 
                    string strRemark, 
                    string strUser_ID, 
                    string strIDName, 
                    object userState) {
            if ((this.Seva_Insert_Data_Other_ConnectionOperationCompleted == null)) {
                this.Seva_Insert_Data_Other_ConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSeva_Insert_Data_Other_ConnectionOperationCompleted);
            }
            this.InvokeAsync("Seva_Insert_Data_Other_Connection", new object[] {
                        strKYC,
                        strORDER_NO,
                        strCA_NUMBER,
                        strReqType,
                        strFIRST_NAME,
                        strMIDDLE_NAME,
                        strLAST_NAME,
                        strTITLE,
                        strGENDER,
                        strDOB,
                        strFATHER_NAME,
                        strsMOTHER_NAME,
                        strFN_AS,
                        strMN_AS,
                        strLN_AS,
                        strDESIGNATION_AS,
                        strTYPE_ORG,
                        strDOI,
                        strHOUSE_NO,
                        strBUILDING_NAME,
                        strSTREET,
                        strAREA,
                        strPIN,
                        strLANDMARK,
                        strMOBILE_NO,
                        strPHONE_NO,
                        strEMAIL,
                        strPAN_NO,
                        strID_NO,
                        strREASON_S3,
                        strNAME_S3,
                        strGENDER_S3,
                        strDOB_S3,
                        strFATHEERNAME_S3,
                        strELOAD_S4,
                        strRLOAD_S4,
                        strMETERCHOICE_S4,
                        strVLEVEL_S4,
                        strPHASE_S4,
                        strPURPOSE_S5,
                        strDESC_S5,
                        strREASON_S6,
                        strHOUSENO_S6,
                        strBNAME_S6,
                        strSTREET_S6,
                        strAREA_S6,
                        strPIN_S6,
                        strLANDMARK_S6,
                        strLBP_S7,
                        strREASON_S8,
                        strDOV_S8,
                        strMODE_S8,
                        strREASON_S9,
                        strUPTODATE_S9,
                        strAUTO_DEBIT_S10,
                        strImgName,
                        strSignName,
                        strCompany,
                        strDOA,
                        strRemark,
                        strUser_ID,
                        strIDName}, this.Seva_Insert_Data_Other_ConnectionOperationCompleted, userState);
        }
        
        private void OnSeva_Insert_Data_Other_ConnectionOperationCompleted(object arg) {
            if ((this.Seva_Insert_Data_Other_ConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Seva_Insert_Data_Other_ConnectionCompleted(this, new Seva_Insert_Data_Other_ConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Z_BAPI_DSS_ISU_CA_DISPLAY_GIS", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Z_BAPI_DSS_ISU_CA_DISPLAY_GIS(string strCANumber, string strMetrNo) {
            object[] results = this.Invoke("Z_BAPI_DSS_ISU_CA_DISPLAY_GIS", new object[] {
                        strCANumber,
                        strMetrNo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Z_BAPI_DSS_ISU_CA_DISPLAY_GISAsync(string strCANumber, string strMetrNo) {
            this.Z_BAPI_DSS_ISU_CA_DISPLAY_GISAsync(strCANumber, strMetrNo, null);
        }
        
        /// <remarks/>
        public void Z_BAPI_DSS_ISU_CA_DISPLAY_GISAsync(string strCANumber, string strMetrNo, object userState) {
            if ((this.Z_BAPI_DSS_ISU_CA_DISPLAY_GISOperationCompleted == null)) {
                this.Z_BAPI_DSS_ISU_CA_DISPLAY_GISOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZ_BAPI_DSS_ISU_CA_DISPLAY_GISOperationCompleted);
            }
            this.InvokeAsync("Z_BAPI_DSS_ISU_CA_DISPLAY_GIS", new object[] {
                        strCANumber,
                        strMetrNo}, this.Z_BAPI_DSS_ISU_CA_DISPLAY_GISOperationCompleted, userState);
        }
        
        private void OnZ_BAPI_DSS_ISU_CA_DISPLAY_GISOperationCompleted(object arg) {
            if ((this.Z_BAPI_DSS_ISU_CA_DISPLAY_GISCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Z_BAPI_DSS_ISU_CA_DISPLAY_GISCompleted(this, new Z_BAPI_DSS_ISU_CA_DISPLAY_GISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/GET_METERDETAILS", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GET_METERDETAILS(string METERNO) {
            object[] results = this.Invoke("GET_METERDETAILS", new object[] {
                        METERNO});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GET_METERDETAILSAsync(string METERNO) {
            this.GET_METERDETAILSAsync(METERNO, null);
        }
        
        /// <remarks/>
        public void GET_METERDETAILSAsync(string METERNO, object userState) {
            if ((this.GET_METERDETAILSOperationCompleted == null)) {
                this.GET_METERDETAILSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGET_METERDETAILSOperationCompleted);
            }
            this.InvokeAsync("GET_METERDETAILS", new object[] {
                        METERNO}, this.GET_METERDETAILSOperationCompleted, userState);
        }
        
        private void OnGET_METERDETAILSOperationCompleted(object arg) {
            if ((this.GET_METERDETAILSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GET_METERDETAILSCompleted(this, new GET_METERDETAILSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/GetMeterCA_Details", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetMeterCA_Details(string strKeyParam, string strMeterNo, string strCANo) {
            object[] results = this.Invoke("GetMeterCA_Details", new object[] {
                        strKeyParam,
                        strMeterNo,
                        strCANo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetMeterCA_DetailsAsync(string strKeyParam, string strMeterNo, string strCANo) {
            this.GetMeterCA_DetailsAsync(strKeyParam, strMeterNo, strCANo, null);
        }
        
        /// <remarks/>
        public void GetMeterCA_DetailsAsync(string strKeyParam, string strMeterNo, string strCANo, object userState) {
            if ((this.GetMeterCA_DetailsOperationCompleted == null)) {
                this.GetMeterCA_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMeterCA_DetailsOperationCompleted);
            }
            this.InvokeAsync("GetMeterCA_Details", new object[] {
                        strKeyParam,
                        strMeterNo,
                        strCANo}, this.GetMeterCA_DetailsOperationCompleted, userState);
        }
        
        private void OnGetMeterCA_DetailsOperationCompleted(object arg) {
            if ((this.GetMeterCA_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMeterCA_DetailsCompleted(this, new GetMeterCA_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/PowerThef_DivMaster", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable PowerThef_DivMaster(string strKeyParam, string strCircle) {
            object[] results = this.Invoke("PowerThef_DivMaster", new object[] {
                        strKeyParam,
                        strCircle});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void PowerThef_DivMasterAsync(string strKeyParam, string strCircle) {
            this.PowerThef_DivMasterAsync(strKeyParam, strCircle, null);
        }
        
        /// <remarks/>
        public void PowerThef_DivMasterAsync(string strKeyParam, string strCircle, object userState) {
            if ((this.PowerThef_DivMasterOperationCompleted == null)) {
                this.PowerThef_DivMasterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPowerThef_DivMasterOperationCompleted);
            }
            this.InvokeAsync("PowerThef_DivMaster", new object[] {
                        strKeyParam,
                        strCircle}, this.PowerThef_DivMasterOperationCompleted, userState);
        }
        
        private void OnPowerThef_DivMasterOperationCompleted(object arg) {
            if ((this.PowerThef_DivMasterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PowerThef_DivMasterCompleted(this, new PowerThef_DivMasterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/GET_METER_CA_DETAILS", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GET_METER_CA_DETAILS(string METERNO, string CA_Number) {
            object[] results = this.Invoke("GET_METER_CA_DETAILS", new object[] {
                        METERNO,
                        CA_Number});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GET_METER_CA_DETAILSAsync(string METERNO, string CA_Number) {
            this.GET_METER_CA_DETAILSAsync(METERNO, CA_Number, null);
        }
        
        /// <remarks/>
        public void GET_METER_CA_DETAILSAsync(string METERNO, string CA_Number, object userState) {
            if ((this.GET_METER_CA_DETAILSOperationCompleted == null)) {
                this.GET_METER_CA_DETAILSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGET_METER_CA_DETAILSOperationCompleted);
            }
            this.InvokeAsync("GET_METER_CA_DETAILS", new object[] {
                        METERNO,
                        CA_Number}, this.GET_METER_CA_DETAILSOperationCompleted, userState);
        }
        
        private void OnGET_METER_CA_DETAILSOperationCompleted(object arg) {
            if ((this.GET_METER_CA_DETAILSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GET_METER_CA_DETAILSCompleted(this, new GET_METER_CA_DETAILSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/PowerThef_Insert_INPUTData", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PowerThef_Insert_INPUTData(
                    string _sOBSERVATION_TYPE, 
                    string _sDIVISION, 
                    string _sDIV_CODE, 
                    string _sMETER_NO, 
                    string _sCA_NUMBER, 
                    string _sNAME, 
                    string _sADDRESS, 
                    string _sSITE_ADDRESS, 
                    string _sLANDMARK, 
                    string _sLOAD_RANGE, 
                    string _sREMARKS, 
                    string _sOTHER_RKS, 
                    string _sIMEI_NO, 
                    string _sUserID, 
                    string _sDOC_ATTACHED, 
                    string _sLATITUDE, 
                    string _sLONGITUDE) {
            object[] results = this.Invoke("PowerThef_Insert_INPUTData", new object[] {
                        _sOBSERVATION_TYPE,
                        _sDIVISION,
                        _sDIV_CODE,
                        _sMETER_NO,
                        _sCA_NUMBER,
                        _sNAME,
                        _sADDRESS,
                        _sSITE_ADDRESS,
                        _sLANDMARK,
                        _sLOAD_RANGE,
                        _sREMARKS,
                        _sOTHER_RKS,
                        _sIMEI_NO,
                        _sUserID,
                        _sDOC_ATTACHED,
                        _sLATITUDE,
                        _sLONGITUDE});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PowerThef_Insert_INPUTDataAsync(
                    string _sOBSERVATION_TYPE, 
                    string _sDIVISION, 
                    string _sDIV_CODE, 
                    string _sMETER_NO, 
                    string _sCA_NUMBER, 
                    string _sNAME, 
                    string _sADDRESS, 
                    string _sSITE_ADDRESS, 
                    string _sLANDMARK, 
                    string _sLOAD_RANGE, 
                    string _sREMARKS, 
                    string _sOTHER_RKS, 
                    string _sIMEI_NO, 
                    string _sUserID, 
                    string _sDOC_ATTACHED, 
                    string _sLATITUDE, 
                    string _sLONGITUDE) {
            this.PowerThef_Insert_INPUTDataAsync(_sOBSERVATION_TYPE, _sDIVISION, _sDIV_CODE, _sMETER_NO, _sCA_NUMBER, _sNAME, _sADDRESS, _sSITE_ADDRESS, _sLANDMARK, _sLOAD_RANGE, _sREMARKS, _sOTHER_RKS, _sIMEI_NO, _sUserID, _sDOC_ATTACHED, _sLATITUDE, _sLONGITUDE, null);
        }
        
        /// <remarks/>
        public void PowerThef_Insert_INPUTDataAsync(
                    string _sOBSERVATION_TYPE, 
                    string _sDIVISION, 
                    string _sDIV_CODE, 
                    string _sMETER_NO, 
                    string _sCA_NUMBER, 
                    string _sNAME, 
                    string _sADDRESS, 
                    string _sSITE_ADDRESS, 
                    string _sLANDMARK, 
                    string _sLOAD_RANGE, 
                    string _sREMARKS, 
                    string _sOTHER_RKS, 
                    string _sIMEI_NO, 
                    string _sUserID, 
                    string _sDOC_ATTACHED, 
                    string _sLATITUDE, 
                    string _sLONGITUDE, 
                    object userState) {
            if ((this.PowerThef_Insert_INPUTDataOperationCompleted == null)) {
                this.PowerThef_Insert_INPUTDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPowerThef_Insert_INPUTDataOperationCompleted);
            }
            this.InvokeAsync("PowerThef_Insert_INPUTData", new object[] {
                        _sOBSERVATION_TYPE,
                        _sDIVISION,
                        _sDIV_CODE,
                        _sMETER_NO,
                        _sCA_NUMBER,
                        _sNAME,
                        _sADDRESS,
                        _sSITE_ADDRESS,
                        _sLANDMARK,
                        _sLOAD_RANGE,
                        _sREMARKS,
                        _sOTHER_RKS,
                        _sIMEI_NO,
                        _sUserID,
                        _sDOC_ATTACHED,
                        _sLATITUDE,
                        _sLONGITUDE}, this.PowerThef_Insert_INPUTDataOperationCompleted, userState);
        }
        
        private void OnPowerThef_Insert_INPUTDataOperationCompleted(object arg) {
            if ((this.PowerThef_Insert_INPUTDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PowerThef_Insert_INPUTDataCompleted(this, new PowerThef_Insert_INPUTDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/LeadStatus_PowerTheftMIS", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LeadStatus_PowerTheftMIS(string strFrom, string strTodate, string strUserID) {
            object[] results = this.Invoke("LeadStatus_PowerTheftMIS", new object[] {
                        strFrom,
                        strTodate,
                        strUserID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LeadStatus_PowerTheftMISAsync(string strFrom, string strTodate, string strUserID) {
            this.LeadStatus_PowerTheftMISAsync(strFrom, strTodate, strUserID, null);
        }
        
        /// <remarks/>
        public void LeadStatus_PowerTheftMISAsync(string strFrom, string strTodate, string strUserID, object userState) {
            if ((this.LeadStatus_PowerTheftMISOperationCompleted == null)) {
                this.LeadStatus_PowerTheftMISOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLeadStatus_PowerTheftMISOperationCompleted);
            }
            this.InvokeAsync("LeadStatus_PowerTheftMIS", new object[] {
                        strFrom,
                        strTodate,
                        strUserID}, this.LeadStatus_PowerTheftMISOperationCompleted, userState);
        }
        
        private void OnLeadStatus_PowerTheftMISOperationCompleted(object arg) {
            if ((this.LeadStatus_PowerTheftMISCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LeadStatus_PowerTheftMISCompleted(this, new LeadStatus_PowerTheftMISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Mobile_PowerTheftMIS", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable Mobile_PowerTheftMIS(string Fromdate, string Todate, string Division, string Circle) {
            object[] results = this.Invoke("Mobile_PowerTheftMIS", new object[] {
                        Fromdate,
                        Todate,
                        Division,
                        Circle});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void Mobile_PowerTheftMISAsync(string Fromdate, string Todate, string Division, string Circle) {
            this.Mobile_PowerTheftMISAsync(Fromdate, Todate, Division, Circle, null);
        }
        
        /// <remarks/>
        public void Mobile_PowerTheftMISAsync(string Fromdate, string Todate, string Division, string Circle, object userState) {
            if ((this.Mobile_PowerTheftMISOperationCompleted == null)) {
                this.Mobile_PowerTheftMISOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMobile_PowerTheftMISOperationCompleted);
            }
            this.InvokeAsync("Mobile_PowerTheftMIS", new object[] {
                        Fromdate,
                        Todate,
                        Division,
                        Circle}, this.Mobile_PowerTheftMISOperationCompleted, userState);
        }
        
        private void OnMobile_PowerTheftMISOperationCompleted(object arg) {
            if ((this.Mobile_PowerTheftMISCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Mobile_PowerTheftMISCompleted(this, new Mobile_PowerTheftMISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Mobile_PowerTheftMIS_Summary", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable Mobile_PowerTheftMIS_Summary(string Fromdate, string Todate, string Division, string Circle) {
            object[] results = this.Invoke("Mobile_PowerTheftMIS_Summary", new object[] {
                        Fromdate,
                        Todate,
                        Division,
                        Circle});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void Mobile_PowerTheftMIS_SummaryAsync(string Fromdate, string Todate, string Division, string Circle) {
            this.Mobile_PowerTheftMIS_SummaryAsync(Fromdate, Todate, Division, Circle, null);
        }
        
        /// <remarks/>
        public void Mobile_PowerTheftMIS_SummaryAsync(string Fromdate, string Todate, string Division, string Circle, object userState) {
            if ((this.Mobile_PowerTheftMIS_SummaryOperationCompleted == null)) {
                this.Mobile_PowerTheftMIS_SummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMobile_PowerTheftMIS_SummaryOperationCompleted);
            }
            this.InvokeAsync("Mobile_PowerTheftMIS_Summary", new object[] {
                        Fromdate,
                        Todate,
                        Division,
                        Circle}, this.Mobile_PowerTheftMIS_SummaryOperationCompleted, userState);
        }
        
        private void OnMobile_PowerTheftMIS_SummaryOperationCompleted(object arg) {
            if ((this.Mobile_PowerTheftMIS_SummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Mobile_PowerTheftMIS_SummaryCompleted(this, new Mobile_PowerTheftMIS_SummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ENF_Redem_Reward", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ENF_Redem_Reward(string Userid, string RedemType) {
            object[] results = this.Invoke("ENF_Redem_Reward", new object[] {
                        Userid,
                        RedemType});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ENF_Redem_RewardAsync(string Userid, string RedemType) {
            this.ENF_Redem_RewardAsync(Userid, RedemType, null);
        }
        
        /// <remarks/>
        public void ENF_Redem_RewardAsync(string Userid, string RedemType, object userState) {
            if ((this.ENF_Redem_RewardOperationCompleted == null)) {
                this.ENF_Redem_RewardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnENF_Redem_RewardOperationCompleted);
            }
            this.InvokeAsync("ENF_Redem_Reward", new object[] {
                        Userid,
                        RedemType}, this.ENF_Redem_RewardOperationCompleted, userState);
        }
        
        private void OnENF_Redem_RewardOperationCompleted(object arg) {
            if ((this.ENF_Redem_RewardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ENF_Redem_RewardCompleted(this, new ENF_Redem_RewardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ENF_Reward_Earned", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ENF_Reward_Earned(string LEADID, string OBSID) {
            object[] results = this.Invoke("ENF_Reward_Earned", new object[] {
                        LEADID,
                        OBSID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ENF_Reward_EarnedAsync(string LEADID, string OBSID) {
            this.ENF_Reward_EarnedAsync(LEADID, OBSID, null);
        }
        
        /// <remarks/>
        public void ENF_Reward_EarnedAsync(string LEADID, string OBSID, object userState) {
            if ((this.ENF_Reward_EarnedOperationCompleted == null)) {
                this.ENF_Reward_EarnedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnENF_Reward_EarnedOperationCompleted);
            }
            this.InvokeAsync("ENF_Reward_Earned", new object[] {
                        LEADID,
                        OBSID}, this.ENF_Reward_EarnedOperationCompleted, userState);
        }
        
        private void OnENF_Reward_EarnedOperationCompleted(object arg) {
            if ((this.ENF_Reward_EarnedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ENF_Reward_EarnedCompleted(this, new ENF_Reward_EarnedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/PowerTheft_RegisterUser", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PowerTheft_RegisterUser(string strIMEI, string strMobileNo, string strName, string strDOB, string strDepartment, string strOtherDepart) {
            object[] results = this.Invoke("PowerTheft_RegisterUser", new object[] {
                        strIMEI,
                        strMobileNo,
                        strName,
                        strDOB,
                        strDepartment,
                        strOtherDepart});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PowerTheft_RegisterUserAsync(string strIMEI, string strMobileNo, string strName, string strDOB, string strDepartment, string strOtherDepart) {
            this.PowerTheft_RegisterUserAsync(strIMEI, strMobileNo, strName, strDOB, strDepartment, strOtherDepart, null);
        }
        
        /// <remarks/>
        public void PowerTheft_RegisterUserAsync(string strIMEI, string strMobileNo, string strName, string strDOB, string strDepartment, string strOtherDepart, object userState) {
            if ((this.PowerTheft_RegisterUserOperationCompleted == null)) {
                this.PowerTheft_RegisterUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPowerTheft_RegisterUserOperationCompleted);
            }
            this.InvokeAsync("PowerTheft_RegisterUser", new object[] {
                        strIMEI,
                        strMobileNo,
                        strName,
                        strDOB,
                        strDepartment,
                        strOtherDepart}, this.PowerTheft_RegisterUserOperationCompleted, userState);
        }
        
        private void OnPowerTheft_RegisterUserOperationCompleted(object arg) {
            if ((this.PowerTheft_RegisterUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PowerTheft_RegisterUserCompleted(this, new PowerTheft_RegisterUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/PowerTheft_LoginFE", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable PowerTheft_LoginFE(string _sLogin, string _sPassword, string _sIMEINo) {
            object[] results = this.Invoke("PowerTheft_LoginFE", new object[] {
                        _sLogin,
                        _sPassword,
                        _sIMEINo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void PowerTheft_LoginFEAsync(string _sLogin, string _sPassword, string _sIMEINo) {
            this.PowerTheft_LoginFEAsync(_sLogin, _sPassword, _sIMEINo, null);
        }
        
        /// <remarks/>
        public void PowerTheft_LoginFEAsync(string _sLogin, string _sPassword, string _sIMEINo, object userState) {
            if ((this.PowerTheft_LoginFEOperationCompleted == null)) {
                this.PowerTheft_LoginFEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPowerTheft_LoginFEOperationCompleted);
            }
            this.InvokeAsync("PowerTheft_LoginFE", new object[] {
                        _sLogin,
                        _sPassword,
                        _sIMEINo}, this.PowerTheft_LoginFEOperationCompleted, userState);
        }
        
        private void OnPowerTheft_LoginFEOperationCompleted(object arg) {
            if ((this.PowerTheft_LoginFECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PowerTheft_LoginFECompleted(this, new PowerTheft_LoginFECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/NewConnOTPRqstFrm_theft", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string NewConnOTPRqstFrm_theft(string strIMEI, string strMobileNo) {
            object[] results = this.Invoke("NewConnOTPRqstFrm_theft", new object[] {
                        strIMEI,
                        strMobileNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NewConnOTPRqstFrm_theftAsync(string strIMEI, string strMobileNo) {
            this.NewConnOTPRqstFrm_theftAsync(strIMEI, strMobileNo, null);
        }
        
        /// <remarks/>
        public void NewConnOTPRqstFrm_theftAsync(string strIMEI, string strMobileNo, object userState) {
            if ((this.NewConnOTPRqstFrm_theftOperationCompleted == null)) {
                this.NewConnOTPRqstFrm_theftOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewConnOTPRqstFrm_theftOperationCompleted);
            }
            this.InvokeAsync("NewConnOTPRqstFrm_theft", new object[] {
                        strIMEI,
                        strMobileNo}, this.NewConnOTPRqstFrm_theftOperationCompleted, userState);
        }
        
        private void OnNewConnOTPRqstFrm_theftOperationCompleted(object arg) {
            if ((this.NewConnOTPRqstFrm_theftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewConnOTPRqstFrm_theftCompleted(this, new NewConnOTPRqstFrm_theftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/PowerTheft_GetPassword", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PowerTheft_GetPassword(string strMobileNo) {
            object[] results = this.Invoke("PowerTheft_GetPassword", new object[] {
                        strMobileNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PowerTheft_GetPasswordAsync(string strMobileNo) {
            this.PowerTheft_GetPasswordAsync(strMobileNo, null);
        }
        
        /// <remarks/>
        public void PowerTheft_GetPasswordAsync(string strMobileNo, object userState) {
            if ((this.PowerTheft_GetPasswordOperationCompleted == null)) {
                this.PowerTheft_GetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPowerTheft_GetPasswordOperationCompleted);
            }
            this.InvokeAsync("PowerTheft_GetPassword", new object[] {
                        strMobileNo}, this.PowerTheft_GetPasswordOperationCompleted, userState);
        }
        
        private void OnPowerTheft_GetPasswordOperationCompleted(object arg) {
            if ((this.PowerTheft_GetPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PowerTheft_GetPasswordCompleted(this, new PowerTheft_GetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/NewConnResendOTPVerifyFrm_theft", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NewConnResendOTPVerifyFrm_theft(string strLblId) {
            object[] results = this.Invoke("NewConnResendOTPVerifyFrm_theft", new object[] {
                        strLblId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NewConnResendOTPVerifyFrm_theftAsync(string strLblId) {
            this.NewConnResendOTPVerifyFrm_theftAsync(strLblId, null);
        }
        
        /// <remarks/>
        public void NewConnResendOTPVerifyFrm_theftAsync(string strLblId, object userState) {
            if ((this.NewConnResendOTPVerifyFrm_theftOperationCompleted == null)) {
                this.NewConnResendOTPVerifyFrm_theftOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewConnResendOTPVerifyFrm_theftOperationCompleted);
            }
            this.InvokeAsync("NewConnResendOTPVerifyFrm_theft", new object[] {
                        strLblId}, this.NewConnResendOTPVerifyFrm_theftOperationCompleted, userState);
        }
        
        private void OnNewConnResendOTPVerifyFrm_theftOperationCompleted(object arg) {
            if ((this.NewConnResendOTPVerifyFrm_theftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewConnResendOTPVerifyFrm_theftCompleted(this, new NewConnResendOTPVerifyFrm_theftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/NewConnOTPVerifyFrm_theft", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string NewConnOTPVerifyFrm_theft(string strOTP, string strLblId) {
            object[] results = this.Invoke("NewConnOTPVerifyFrm_theft", new object[] {
                        strOTP,
                        strLblId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NewConnOTPVerifyFrm_theftAsync(string strOTP, string strLblId) {
            this.NewConnOTPVerifyFrm_theftAsync(strOTP, strLblId, null);
        }
        
        /// <remarks/>
        public void NewConnOTPVerifyFrm_theftAsync(string strOTP, string strLblId, object userState) {
            if ((this.NewConnOTPVerifyFrm_theftOperationCompleted == null)) {
                this.NewConnOTPVerifyFrm_theftOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewConnOTPVerifyFrm_theftOperationCompleted);
            }
            this.InvokeAsync("NewConnOTPVerifyFrm_theft", new object[] {
                        strOTP,
                        strLblId}, this.NewConnOTPVerifyFrm_theftOperationCompleted, userState);
        }
        
        private void OnNewConnOTPVerifyFrm_theftOperationCompleted(object arg) {
            if ((this.NewConnOTPVerifyFrm_theftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewConnOTPVerifyFrm_theftCompleted(this, new NewConnOTPVerifyFrm_theftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/loginFE_theft", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable loginFE_theft(string _sLogin, string _sPassword, string _sIMEINo) {
            object[] results = this.Invoke("loginFE_theft", new object[] {
                        _sLogin,
                        _sPassword,
                        _sIMEINo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void loginFE_theftAsync(string _sLogin, string _sPassword, string _sIMEINo) {
            this.loginFE_theftAsync(_sLogin, _sPassword, _sIMEINo, null);
        }
        
        /// <remarks/>
        public void loginFE_theftAsync(string _sLogin, string _sPassword, string _sIMEINo, object userState) {
            if ((this.loginFE_theftOperationCompleted == null)) {
                this.loginFE_theftOperationCompleted = new System.Threading.SendOrPostCallback(this.OnloginFE_theftOperationCompleted);
            }
            this.InvokeAsync("loginFE_theft", new object[] {
                        _sLogin,
                        _sPassword,
                        _sIMEINo}, this.loginFE_theftOperationCompleted, userState);
        }
        
        private void OnloginFE_theftOperationCompleted(object arg) {
            if ((this.loginFE_theftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.loginFE_theftCompleted(this, new loginFE_theftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/complaintSubmit_theft", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string complaintSubmit_theft(string _sDivision, string _sMeter_No, string _sAddress, string _sLandmark, string _sLoad_Range, string _sRemarks, string _sLatitude, string _sLongitude, string _sUser_ID) {
            object[] results = this.Invoke("complaintSubmit_theft", new object[] {
                        _sDivision,
                        _sMeter_No,
                        _sAddress,
                        _sLandmark,
                        _sLoad_Range,
                        _sRemarks,
                        _sLatitude,
                        _sLongitude,
                        _sUser_ID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void complaintSubmit_theftAsync(string _sDivision, string _sMeter_No, string _sAddress, string _sLandmark, string _sLoad_Range, string _sRemarks, string _sLatitude, string _sLongitude, string _sUser_ID) {
            this.complaintSubmit_theftAsync(_sDivision, _sMeter_No, _sAddress, _sLandmark, _sLoad_Range, _sRemarks, _sLatitude, _sLongitude, _sUser_ID, null);
        }
        
        /// <remarks/>
        public void complaintSubmit_theftAsync(string _sDivision, string _sMeter_No, string _sAddress, string _sLandmark, string _sLoad_Range, string _sRemarks, string _sLatitude, string _sLongitude, string _sUser_ID, object userState) {
            if ((this.complaintSubmit_theftOperationCompleted == null)) {
                this.complaintSubmit_theftOperationCompleted = new System.Threading.SendOrPostCallback(this.OncomplaintSubmit_theftOperationCompleted);
            }
            this.InvokeAsync("complaintSubmit_theft", new object[] {
                        _sDivision,
                        _sMeter_No,
                        _sAddress,
                        _sLandmark,
                        _sLoad_Range,
                        _sRemarks,
                        _sLatitude,
                        _sLongitude,
                        _sUser_ID}, this.complaintSubmit_theftOperationCompleted, userState);
        }
        
        private void OncomplaintSubmit_theftOperationCompleted(object arg) {
            if ((this.complaintSubmit_theftCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.complaintSubmit_theftCompleted(this, new complaintSubmit_theftCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/PowerThef_ResetPassword", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool PowerThef_ResetPassword(string _sPassword, string _sMobileNo, string _strOldPws) {
            object[] results = this.Invoke("PowerThef_ResetPassword", new object[] {
                        _sPassword,
                        _sMobileNo,
                        _strOldPws});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void PowerThef_ResetPasswordAsync(string _sPassword, string _sMobileNo, string _strOldPws) {
            this.PowerThef_ResetPasswordAsync(_sPassword, _sMobileNo, _strOldPws, null);
        }
        
        /// <remarks/>
        public void PowerThef_ResetPasswordAsync(string _sPassword, string _sMobileNo, string _strOldPws, object userState) {
            if ((this.PowerThef_ResetPasswordOperationCompleted == null)) {
                this.PowerThef_ResetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPowerThef_ResetPasswordOperationCompleted);
            }
            this.InvokeAsync("PowerThef_ResetPassword", new object[] {
                        _sPassword,
                        _sMobileNo,
                        _strOldPws}, this.PowerThef_ResetPasswordOperationCompleted, userState);
        }
        
        private void OnPowerThef_ResetPasswordOperationCompleted(object arg) {
            if ((this.PowerThef_ResetPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PowerThef_ResetPasswordCompleted(this, new PowerThef_ResetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/SK_HolidayList_NEW", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable SK_HolidayList_NEW(string strKeyParam, string strDist) {
            object[] results = this.Invoke("SK_HolidayList_NEW", new object[] {
                        strKeyParam,
                        strDist});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void SK_HolidayList_NEWAsync(string strKeyParam, string strDist) {
            this.SK_HolidayList_NEWAsync(strKeyParam, strDist, null);
        }
        
        /// <remarks/>
        public void SK_HolidayList_NEWAsync(string strKeyParam, string strDist, object userState) {
            if ((this.SK_HolidayList_NEWOperationCompleted == null)) {
                this.SK_HolidayList_NEWOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSK_HolidayList_NEWOperationCompleted);
            }
            this.InvokeAsync("SK_HolidayList_NEW", new object[] {
                        strKeyParam,
                        strDist}, this.SK_HolidayList_NEWOperationCompleted, userState);
        }
        
        private void OnSK_HolidayList_NEWOperationCompleted(object arg) {
            if ((this.SK_HolidayList_NEWCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SK_HolidayList_NEWCompleted(this, new SK_HolidayList_NEWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/PHOTOMETER_READING", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PHOTOMETER_READING(
                    string MTR_RD_ID, 
                    string CA_NUMBER, 
                    string CONSUMER_NAME, 
                    string CONSUMER_ADD, 
                    string KWH, 
                    string KW, 
                    string KVAH, 
                    string KVA, 
                    string MTR_RD_IMG_KWH, 
                    string MTR_NUMBER, 
                    string MTR_RD_IMG_KVAH, 
                    string MTR_LAT, 
                    string MTR_LONG, 
                    string CONSUMER_CAT, 
                    string PUNCH_BY, 
                    string MTR_RD_IMG, 
                    string CA_DIVISION) {
            object[] results = this.Invoke("PHOTOMETER_READING", new object[] {
                        MTR_RD_ID,
                        CA_NUMBER,
                        CONSUMER_NAME,
                        CONSUMER_ADD,
                        KWH,
                        KW,
                        KVAH,
                        KVA,
                        MTR_RD_IMG_KWH,
                        MTR_NUMBER,
                        MTR_RD_IMG_KVAH,
                        MTR_LAT,
                        MTR_LONG,
                        CONSUMER_CAT,
                        PUNCH_BY,
                        MTR_RD_IMG,
                        CA_DIVISION});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PHOTOMETER_READINGAsync(
                    string MTR_RD_ID, 
                    string CA_NUMBER, 
                    string CONSUMER_NAME, 
                    string CONSUMER_ADD, 
                    string KWH, 
                    string KW, 
                    string KVAH, 
                    string KVA, 
                    string MTR_RD_IMG_KWH, 
                    string MTR_NUMBER, 
                    string MTR_RD_IMG_KVAH, 
                    string MTR_LAT, 
                    string MTR_LONG, 
                    string CONSUMER_CAT, 
                    string PUNCH_BY, 
                    string MTR_RD_IMG, 
                    string CA_DIVISION) {
            this.PHOTOMETER_READINGAsync(MTR_RD_ID, CA_NUMBER, CONSUMER_NAME, CONSUMER_ADD, KWH, KW, KVAH, KVA, MTR_RD_IMG_KWH, MTR_NUMBER, MTR_RD_IMG_KVAH, MTR_LAT, MTR_LONG, CONSUMER_CAT, PUNCH_BY, MTR_RD_IMG, CA_DIVISION, null);
        }
        
        /// <remarks/>
        public void PHOTOMETER_READINGAsync(
                    string MTR_RD_ID, 
                    string CA_NUMBER, 
                    string CONSUMER_NAME, 
                    string CONSUMER_ADD, 
                    string KWH, 
                    string KW, 
                    string KVAH, 
                    string KVA, 
                    string MTR_RD_IMG_KWH, 
                    string MTR_NUMBER, 
                    string MTR_RD_IMG_KVAH, 
                    string MTR_LAT, 
                    string MTR_LONG, 
                    string CONSUMER_CAT, 
                    string PUNCH_BY, 
                    string MTR_RD_IMG, 
                    string CA_DIVISION, 
                    object userState) {
            if ((this.PHOTOMETER_READINGOperationCompleted == null)) {
                this.PHOTOMETER_READINGOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPHOTOMETER_READINGOperationCompleted);
            }
            this.InvokeAsync("PHOTOMETER_READING", new object[] {
                        MTR_RD_ID,
                        CA_NUMBER,
                        CONSUMER_NAME,
                        CONSUMER_ADD,
                        KWH,
                        KW,
                        KVAH,
                        KVA,
                        MTR_RD_IMG_KWH,
                        MTR_NUMBER,
                        MTR_RD_IMG_KVAH,
                        MTR_LAT,
                        MTR_LONG,
                        CONSUMER_CAT,
                        PUNCH_BY,
                        MTR_RD_IMG,
                        CA_DIVISION}, this.PHOTOMETER_READINGOperationCompleted, userState);
        }
        
        private void OnPHOTOMETER_READINGOperationCompleted(object arg) {
            if ((this.PHOTOMETER_READINGCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PHOTOMETER_READINGCompleted(this, new PHOTOMETER_READINGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Z_ZBAPI_FETCH_ENFCA", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable Z_ZBAPI_FETCH_ENFCA(string strBPNumber) {
            object[] results = this.Invoke("Z_ZBAPI_FETCH_ENFCA", new object[] {
                        strBPNumber});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void Z_ZBAPI_FETCH_ENFCAAsync(string strBPNumber) {
            this.Z_ZBAPI_FETCH_ENFCAAsync(strBPNumber, null);
        }
        
        /// <remarks/>
        public void Z_ZBAPI_FETCH_ENFCAAsync(string strBPNumber, object userState) {
            if ((this.Z_ZBAPI_FETCH_ENFCAOperationCompleted == null)) {
                this.Z_ZBAPI_FETCH_ENFCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZ_ZBAPI_FETCH_ENFCAOperationCompleted);
            }
            this.InvokeAsync("Z_ZBAPI_FETCH_ENFCA", new object[] {
                        strBPNumber}, this.Z_ZBAPI_FETCH_ENFCAOperationCompleted, userState);
        }
        
        private void OnZ_ZBAPI_FETCH_ENFCAOperationCompleted(object arg) {
            if ((this.Z_ZBAPI_FETCH_ENFCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Z_ZBAPI_FETCH_ENFCACompleted(this, new Z_ZBAPI_FETCH_ENFCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/BAPI_MTRREADDOC_GETLIST", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable BAPI_MTRREADDOC_GETLIST(string METERNO) {
            object[] results = this.Invoke("BAPI_MTRREADDOC_GETLIST", new object[] {
                        METERNO});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void BAPI_MTRREADDOC_GETLISTAsync(string METERNO) {
            this.BAPI_MTRREADDOC_GETLISTAsync(METERNO, null);
        }
        
        /// <remarks/>
        public void BAPI_MTRREADDOC_GETLISTAsync(string METERNO, object userState) {
            if ((this.BAPI_MTRREADDOC_GETLISTOperationCompleted == null)) {
                this.BAPI_MTRREADDOC_GETLISTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBAPI_MTRREADDOC_GETLISTOperationCompleted);
            }
            this.InvokeAsync("BAPI_MTRREADDOC_GETLIST", new object[] {
                        METERNO}, this.BAPI_MTRREADDOC_GETLISTOperationCompleted, userState);
        }
        
        private void OnBAPI_MTRREADDOC_GETLISTOperationCompleted(object arg) {
            if ((this.BAPI_MTRREADDOC_GETLISTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BAPI_MTRREADDOC_GETLISTCompleted(this, new BAPI_MTRREADDOC_GETLISTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ZBAPI_CS_FETCH_LOAD", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ZBAPI_CS_FETCH_LOAD(string strINORDERNO, string strINBUSINESSPART, string strINCONTRACTACCNT, string strINMETERNUM) {
            object[] results = this.Invoke("ZBAPI_CS_FETCH_LOAD", new object[] {
                        strINORDERNO,
                        strINBUSINESSPART,
                        strINCONTRACTACCNT,
                        strINMETERNUM});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ZBAPI_CS_FETCH_LOADAsync(string strINORDERNO, string strINBUSINESSPART, string strINCONTRACTACCNT, string strINMETERNUM) {
            this.ZBAPI_CS_FETCH_LOADAsync(strINORDERNO, strINBUSINESSPART, strINCONTRACTACCNT, strINMETERNUM, null);
        }
        
        /// <remarks/>
        public void ZBAPI_CS_FETCH_LOADAsync(string strINORDERNO, string strINBUSINESSPART, string strINCONTRACTACCNT, string strINMETERNUM, object userState) {
            if ((this.ZBAPI_CS_FETCH_LOADOperationCompleted == null)) {
                this.ZBAPI_CS_FETCH_LOADOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZBAPI_CS_FETCH_LOADOperationCompleted);
            }
            this.InvokeAsync("ZBAPI_CS_FETCH_LOAD", new object[] {
                        strINORDERNO,
                        strINBUSINESSPART,
                        strINCONTRACTACCNT,
                        strINMETERNUM}, this.ZBAPI_CS_FETCH_LOADOperationCompleted, userState);
        }
        
        private void OnZBAPI_CS_FETCH_LOADOperationCompleted(object arg) {
            if ((this.ZBAPI_CS_FETCH_LOADCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZBAPI_CS_FETCH_LOADCompleted(this, new ZBAPI_CS_FETCH_LOADCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/VSS_GetRequestType_DeptpartmentWise", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable VSS_GetRequestType_DeptpartmentWise(string strKeyParam, string DeptparmentID) {
            object[] results = this.Invoke("VSS_GetRequestType_DeptpartmentWise", new object[] {
                        strKeyParam,
                        DeptparmentID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void VSS_GetRequestType_DeptpartmentWiseAsync(string strKeyParam, string DeptparmentID) {
            this.VSS_GetRequestType_DeptpartmentWiseAsync(strKeyParam, DeptparmentID, null);
        }
        
        /// <remarks/>
        public void VSS_GetRequestType_DeptpartmentWiseAsync(string strKeyParam, string DeptparmentID, object userState) {
            if ((this.VSS_GetRequestType_DeptpartmentWiseOperationCompleted == null)) {
                this.VSS_GetRequestType_DeptpartmentWiseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVSS_GetRequestType_DeptpartmentWiseOperationCompleted);
            }
            this.InvokeAsync("VSS_GetRequestType_DeptpartmentWise", new object[] {
                        strKeyParam,
                        DeptparmentID}, this.VSS_GetRequestType_DeptpartmentWiseOperationCompleted, userState);
        }
        
        private void OnVSS_GetRequestType_DeptpartmentWiseOperationCompleted(object arg) {
            if ((this.VSS_GetRequestType_DeptpartmentWiseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VSS_GetRequestType_DeptpartmentWiseCompleted(this, new VSS_GetRequestType_DeptpartmentWiseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/VSS_GetAssginDetails_CircleDivCompDeptWise", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable VSS_GetAssginDetails_CircleDivCompDeptWise(string strKeyParam, string CircleID, string DivID, string CompID, string DeptID) {
            object[] results = this.Invoke("VSS_GetAssginDetails_CircleDivCompDeptWise", new object[] {
                        strKeyParam,
                        CircleID,
                        DivID,
                        CompID,
                        DeptID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void VSS_GetAssginDetails_CircleDivCompDeptWiseAsync(string strKeyParam, string CircleID, string DivID, string CompID, string DeptID) {
            this.VSS_GetAssginDetails_CircleDivCompDeptWiseAsync(strKeyParam, CircleID, DivID, CompID, DeptID, null);
        }
        
        /// <remarks/>
        public void VSS_GetAssginDetails_CircleDivCompDeptWiseAsync(string strKeyParam, string CircleID, string DivID, string CompID, string DeptID, object userState) {
            if ((this.VSS_GetAssginDetails_CircleDivCompDeptWiseOperationCompleted == null)) {
                this.VSS_GetAssginDetails_CircleDivCompDeptWiseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVSS_GetAssginDetails_CircleDivCompDeptWiseOperationCompleted);
            }
            this.InvokeAsync("VSS_GetAssginDetails_CircleDivCompDeptWise", new object[] {
                        strKeyParam,
                        CircleID,
                        DivID,
                        CompID,
                        DeptID}, this.VSS_GetAssginDetails_CircleDivCompDeptWiseOperationCompleted, userState);
        }
        
        private void OnVSS_GetAssginDetails_CircleDivCompDeptWiseOperationCompleted(object arg) {
            if ((this.VSS_GetAssginDetails_CircleDivCompDeptWiseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VSS_GetAssginDetails_CircleDivCompDeptWiseCompleted(this, new VSS_GetAssginDetails_CircleDivCompDeptWiseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/VSS_Insert_Complaint_Data", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string VSS_Insert_Complaint_Data(
                    string strKeyParam, 
                    string strCompName, 
                    string strEmailID, 
                    string strMobileNo, 
                    string strPhoneNo, 
                    string strPeriorty, 
                    string strRmk, 
                    string strFileName, 
                    string strDivID, 
                    string strCompCentreID, 
                    string strCircle, 
                    string strReqType, 
                    string strAssignTo, 
                    string strDept, 
                    string strRequestFor, 
                    string strAttachment) {
            object[] results = this.Invoke("VSS_Insert_Complaint_Data", new object[] {
                        strKeyParam,
                        strCompName,
                        strEmailID,
                        strMobileNo,
                        strPhoneNo,
                        strPeriorty,
                        strRmk,
                        strFileName,
                        strDivID,
                        strCompCentreID,
                        strCircle,
                        strReqType,
                        strAssignTo,
                        strDept,
                        strRequestFor,
                        strAttachment});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VSS_Insert_Complaint_DataAsync(
                    string strKeyParam, 
                    string strCompName, 
                    string strEmailID, 
                    string strMobileNo, 
                    string strPhoneNo, 
                    string strPeriorty, 
                    string strRmk, 
                    string strFileName, 
                    string strDivID, 
                    string strCompCentreID, 
                    string strCircle, 
                    string strReqType, 
                    string strAssignTo, 
                    string strDept, 
                    string strRequestFor, 
                    string strAttachment) {
            this.VSS_Insert_Complaint_DataAsync(strKeyParam, strCompName, strEmailID, strMobileNo, strPhoneNo, strPeriorty, strRmk, strFileName, strDivID, strCompCentreID, strCircle, strReqType, strAssignTo, strDept, strRequestFor, strAttachment, null);
        }
        
        /// <remarks/>
        public void VSS_Insert_Complaint_DataAsync(
                    string strKeyParam, 
                    string strCompName, 
                    string strEmailID, 
                    string strMobileNo, 
                    string strPhoneNo, 
                    string strPeriorty, 
                    string strRmk, 
                    string strFileName, 
                    string strDivID, 
                    string strCompCentreID, 
                    string strCircle, 
                    string strReqType, 
                    string strAssignTo, 
                    string strDept, 
                    string strRequestFor, 
                    string strAttachment, 
                    object userState) {
            if ((this.VSS_Insert_Complaint_DataOperationCompleted == null)) {
                this.VSS_Insert_Complaint_DataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVSS_Insert_Complaint_DataOperationCompleted);
            }
            this.InvokeAsync("VSS_Insert_Complaint_Data", new object[] {
                        strKeyParam,
                        strCompName,
                        strEmailID,
                        strMobileNo,
                        strPhoneNo,
                        strPeriorty,
                        strRmk,
                        strFileName,
                        strDivID,
                        strCompCentreID,
                        strCircle,
                        strReqType,
                        strAssignTo,
                        strDept,
                        strRequestFor,
                        strAttachment}, this.VSS_Insert_Complaint_DataOperationCompleted, userState);
        }
        
        private void OnVSS_Insert_Complaint_DataOperationCompleted(object arg) {
            if ((this.VSS_Insert_Complaint_DataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VSS_Insert_Complaint_DataCompleted(this, new VSS_Insert_Complaint_DataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/VSS_Update_Complaint_Data", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool VSS_Update_Complaint_Data(string strKeyParam, string strcompno, string strCompStatusID, string strRemarks, string strUserID, string strUserName) {
            object[] results = this.Invoke("VSS_Update_Complaint_Data", new object[] {
                        strKeyParam,
                        strcompno,
                        strCompStatusID,
                        strRemarks,
                        strUserID,
                        strUserName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void VSS_Update_Complaint_DataAsync(string strKeyParam, string strcompno, string strCompStatusID, string strRemarks, string strUserID, string strUserName) {
            this.VSS_Update_Complaint_DataAsync(strKeyParam, strcompno, strCompStatusID, strRemarks, strUserID, strUserName, null);
        }
        
        /// <remarks/>
        public void VSS_Update_Complaint_DataAsync(string strKeyParam, string strcompno, string strCompStatusID, string strRemarks, string strUserID, string strUserName, object userState) {
            if ((this.VSS_Update_Complaint_DataOperationCompleted == null)) {
                this.VSS_Update_Complaint_DataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVSS_Update_Complaint_DataOperationCompleted);
            }
            this.InvokeAsync("VSS_Update_Complaint_Data", new object[] {
                        strKeyParam,
                        strcompno,
                        strCompStatusID,
                        strRemarks,
                        strUserID,
                        strUserName}, this.VSS_Update_Complaint_DataOperationCompleted, userState);
        }
        
        private void OnVSS_Update_Complaint_DataOperationCompleted(object arg) {
            if ((this.VSS_Update_Complaint_DataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VSS_Update_Complaint_DataCompleted(this, new VSS_Update_Complaint_DataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/VSS_GetComplaintDetails_CompWise", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable VSS_GetComplaintDetails_CompWise(string strKeyParam, string CompID) {
            object[] results = this.Invoke("VSS_GetComplaintDetails_CompWise", new object[] {
                        strKeyParam,
                        CompID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void VSS_GetComplaintDetails_CompWiseAsync(string strKeyParam, string CompID) {
            this.VSS_GetComplaintDetails_CompWiseAsync(strKeyParam, CompID, null);
        }
        
        /// <remarks/>
        public void VSS_GetComplaintDetails_CompWiseAsync(string strKeyParam, string CompID, object userState) {
            if ((this.VSS_GetComplaintDetails_CompWiseOperationCompleted == null)) {
                this.VSS_GetComplaintDetails_CompWiseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVSS_GetComplaintDetails_CompWiseOperationCompleted);
            }
            this.InvokeAsync("VSS_GetComplaintDetails_CompWise", new object[] {
                        strKeyParam,
                        CompID}, this.VSS_GetComplaintDetails_CompWiseOperationCompleted, userState);
        }
        
        private void OnVSS_GetComplaintDetails_CompWiseOperationCompleted(object arg) {
            if ((this.VSS_GetComplaintDetails_CompWiseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VSS_GetComplaintDetails_CompWiseCompleted(this, new VSS_GetComplaintDetails_CompWiseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/VSS_GetRemarksDetails_ReqWise", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable VSS_GetRemarksDetails_ReqWise(string strKeyParam, string ReqNo) {
            object[] results = this.Invoke("VSS_GetRemarksDetails_ReqWise", new object[] {
                        strKeyParam,
                        ReqNo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void VSS_GetRemarksDetails_ReqWiseAsync(string strKeyParam, string ReqNo) {
            this.VSS_GetRemarksDetails_ReqWiseAsync(strKeyParam, ReqNo, null);
        }
        
        /// <remarks/>
        public void VSS_GetRemarksDetails_ReqWiseAsync(string strKeyParam, string ReqNo, object userState) {
            if ((this.VSS_GetRemarksDetails_ReqWiseOperationCompleted == null)) {
                this.VSS_GetRemarksDetails_ReqWiseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVSS_GetRemarksDetails_ReqWiseOperationCompleted);
            }
            this.InvokeAsync("VSS_GetRemarksDetails_ReqWise", new object[] {
                        strKeyParam,
                        ReqNo}, this.VSS_GetRemarksDetails_ReqWiseOperationCompleted, userState);
        }
        
        private void OnVSS_GetRemarksDetails_ReqWiseOperationCompleted(object arg) {
            if ((this.VSS_GetRemarksDetails_ReqWiseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VSS_GetRemarksDetails_ReqWiseCompleted(this, new VSS_GetRemarksDetails_ReqWiseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/SK_RegDistMsgTxt", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SK_RegDistMsgTxt(string strKeyParam, string strDist) {
            object[] results = this.Invoke("SK_RegDistMsgTxt", new object[] {
                        strKeyParam,
                        strDist});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SK_RegDistMsgTxtAsync(string strKeyParam, string strDist) {
            this.SK_RegDistMsgTxtAsync(strKeyParam, strDist, null);
        }
        
        /// <remarks/>
        public void SK_RegDistMsgTxtAsync(string strKeyParam, string strDist, object userState) {
            if ((this.SK_RegDistMsgTxtOperationCompleted == null)) {
                this.SK_RegDistMsgTxtOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSK_RegDistMsgTxtOperationCompleted);
            }
            this.InvokeAsync("SK_RegDistMsgTxt", new object[] {
                        strKeyParam,
                        strDist}, this.SK_RegDistMsgTxtOperationCompleted, userState);
        }
        
        private void OnSK_RegDistMsgTxtOperationCompleted(object arg) {
            if ((this.SK_RegDistMsgTxtCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SK_RegDistMsgTxtCompleted(this, new SK_RegDistMsgTxtCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/SK_HolidayList", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable SK_HolidayList(string strKeyParam, string strDist) {
            object[] results = this.Invoke("SK_HolidayList", new object[] {
                        strKeyParam,
                        strDist});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void SK_HolidayListAsync(string strKeyParam, string strDist) {
            this.SK_HolidayListAsync(strKeyParam, strDist, null);
        }
        
        /// <remarks/>
        public void SK_HolidayListAsync(string strKeyParam, string strDist, object userState) {
            if ((this.SK_HolidayListOperationCompleted == null)) {
                this.SK_HolidayListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSK_HolidayListOperationCompleted);
            }
            this.InvokeAsync("SK_HolidayList", new object[] {
                        strKeyParam,
                        strDist}, this.SK_HolidayListOperationCompleted, userState);
        }
        
        private void OnSK_HolidayListOperationCompleted(object arg) {
            if ((this.SK_HolidayListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SK_HolidayListCompleted(this, new SK_HolidayListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/SK_TimeSlotList", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable SK_TimeSlotList(string strKeyParam, string strDist) {
            object[] results = this.Invoke("SK_TimeSlotList", new object[] {
                        strKeyParam,
                        strDist});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void SK_TimeSlotListAsync(string strKeyParam, string strDist) {
            this.SK_TimeSlotListAsync(strKeyParam, strDist, null);
        }
        
        /// <remarks/>
        public void SK_TimeSlotListAsync(string strKeyParam, string strDist, object userState) {
            if ((this.SK_TimeSlotListOperationCompleted == null)) {
                this.SK_TimeSlotListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSK_TimeSlotListOperationCompleted);
            }
            this.InvokeAsync("SK_TimeSlotList", new object[] {
                        strKeyParam,
                        strDist}, this.SK_TimeSlotListOperationCompleted, userState);
        }
        
        private void OnSK_TimeSlotListOperationCompleted(object arg) {
            if ((this.SK_TimeSlotListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SK_TimeSlotListCompleted(this, new SK_TimeSlotListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/SK_RegDistStatus", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SK_RegDistStatus(string strKeyParam, string strDist) {
            object[] results = this.Invoke("SK_RegDistStatus", new object[] {
                        strKeyParam,
                        strDist});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SK_RegDistStatusAsync(string strKeyParam, string strDist) {
            this.SK_RegDistStatusAsync(strKeyParam, strDist, null);
        }
        
        /// <remarks/>
        public void SK_RegDistStatusAsync(string strKeyParam, string strDist, object userState) {
            if ((this.SK_RegDistStatusOperationCompleted == null)) {
                this.SK_RegDistStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSK_RegDistStatusOperationCompleted);
            }
            this.InvokeAsync("SK_RegDistStatus", new object[] {
                        strKeyParam,
                        strDist}, this.SK_RegDistStatusOperationCompleted, userState);
        }
        
        private void OnSK_RegDistStatusOperationCompleted(object arg) {
            if ((this.SK_RegDistStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SK_RegDistStatusCompleted(this, new SK_RegDistStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/SK_RegOrderNoRating", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SK_RegOrderNoRating(string strKeyParam, string strOrderNo, string strRating) {
            object[] results = this.Invoke("SK_RegOrderNoRating", new object[] {
                        strKeyParam,
                        strOrderNo,
                        strRating});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SK_RegOrderNoRatingAsync(string strKeyParam, string strOrderNo, string strRating) {
            this.SK_RegOrderNoRatingAsync(strKeyParam, strOrderNo, strRating, null);
        }
        
        /// <remarks/>
        public void SK_RegOrderNoRatingAsync(string strKeyParam, string strOrderNo, string strRating, object userState) {
            if ((this.SK_RegOrderNoRatingOperationCompleted == null)) {
                this.SK_RegOrderNoRatingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSK_RegOrderNoRatingOperationCompleted);
            }
            this.InvokeAsync("SK_RegOrderNoRating", new object[] {
                        strKeyParam,
                        strOrderNo,
                        strRating}, this.SK_RegOrderNoRatingOperationCompleted, userState);
        }
        
        private void OnSK_RegOrderNoRatingOperationCompleted(object arg) {
            if ((this.SK_RegOrderNoRatingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SK_RegOrderNoRatingCompleted(this, new SK_RegOrderNoRatingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/LR_Scheme_DivisionWise", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LR_Scheme_DivisionWise(string strKeyParam, string DivisionID) {
            object[] results = this.Invoke("LR_Scheme_DivisionWise", new object[] {
                        strKeyParam,
                        DivisionID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LR_Scheme_DivisionWiseAsync(string strKeyParam, string DivisionID) {
            this.LR_Scheme_DivisionWiseAsync(strKeyParam, DivisionID, null);
        }
        
        /// <remarks/>
        public void LR_Scheme_DivisionWiseAsync(string strKeyParam, string DivisionID, object userState) {
            if ((this.LR_Scheme_DivisionWiseOperationCompleted == null)) {
                this.LR_Scheme_DivisionWiseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLR_Scheme_DivisionWiseOperationCompleted);
            }
            this.InvokeAsync("LR_Scheme_DivisionWise", new object[] {
                        strKeyParam,
                        DivisionID}, this.LR_Scheme_DivisionWiseOperationCompleted, userState);
        }
        
        private void OnLR_Scheme_DivisionWiseOperationCompleted(object arg) {
            if ((this.LR_Scheme_DivisionWiseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LR_Scheme_DivisionWiseCompleted(this, new LR_Scheme_DivisionWiseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/LR_Scheme_Vendor_User", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LR_Scheme_Vendor_User(string strKeyParam, string strImeiNo) {
            object[] results = this.Invoke("LR_Scheme_Vendor_User", new object[] {
                        strKeyParam,
                        strImeiNo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LR_Scheme_Vendor_UserAsync(string strKeyParam, string strImeiNo) {
            this.LR_Scheme_Vendor_UserAsync(strKeyParam, strImeiNo, null);
        }
        
        /// <remarks/>
        public void LR_Scheme_Vendor_UserAsync(string strKeyParam, string strImeiNo, object userState) {
            if ((this.LR_Scheme_Vendor_UserOperationCompleted == null)) {
                this.LR_Scheme_Vendor_UserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLR_Scheme_Vendor_UserOperationCompleted);
            }
            this.InvokeAsync("LR_Scheme_Vendor_User", new object[] {
                        strKeyParam,
                        strImeiNo}, this.LR_Scheme_Vendor_UserOperationCompleted, userState);
        }
        
        private void OnLR_Scheme_Vendor_UserOperationCompleted(object arg) {
            if ((this.LR_Scheme_Vendor_UserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LR_Scheme_Vendor_UserCompleted(this, new LR_Scheme_Vendor_UserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/LR_Vendor_DivisionWise", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LR_Vendor_DivisionWise(string strKeyParam, string DivisionID) {
            object[] results = this.Invoke("LR_Vendor_DivisionWise", new object[] {
                        strKeyParam,
                        DivisionID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LR_Vendor_DivisionWiseAsync(string strKeyParam, string DivisionID) {
            this.LR_Vendor_DivisionWiseAsync(strKeyParam, DivisionID, null);
        }
        
        /// <remarks/>
        public void LR_Vendor_DivisionWiseAsync(string strKeyParam, string DivisionID, object userState) {
            if ((this.LR_Vendor_DivisionWiseOperationCompleted == null)) {
                this.LR_Vendor_DivisionWiseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLR_Vendor_DivisionWiseOperationCompleted);
            }
            this.InvokeAsync("LR_Vendor_DivisionWise", new object[] {
                        strKeyParam,
                        DivisionID}, this.LR_Vendor_DivisionWiseOperationCompleted, userState);
        }
        
        private void OnLR_Vendor_DivisionWiseOperationCompleted(object arg) {
            if ((this.LR_Vendor_DivisionWiseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LR_Vendor_DivisionWiseCompleted(this, new LR_Vendor_DivisionWiseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/LR_Insert_Scheme_Vendor_MobData", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LR_Insert_Scheme_Vendor_MobData(
                    string strKeyParam, 
                    string DivId, 
                    string Scheme, 
                    string Vendor, 
                    string TeamCount, 
                    string MetRplOnly, 
                    string MetRelOnly, 
                    string BothActMet, 
                    string MetInsQul, 
                    string PoleDbRel, 
                    string ArmCblRel, 
                    string IMEI_No, 
                    string Flag_V_S, 
                    string SelectDate, 
                    string strSubDiv, 
                    string strArmCastTp) {
            object[] results = this.Invoke("LR_Insert_Scheme_Vendor_MobData", new object[] {
                        strKeyParam,
                        DivId,
                        Scheme,
                        Vendor,
                        TeamCount,
                        MetRplOnly,
                        MetRelOnly,
                        BothActMet,
                        MetInsQul,
                        PoleDbRel,
                        ArmCblRel,
                        IMEI_No,
                        Flag_V_S,
                        SelectDate,
                        strSubDiv,
                        strArmCastTp});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LR_Insert_Scheme_Vendor_MobDataAsync(
                    string strKeyParam, 
                    string DivId, 
                    string Scheme, 
                    string Vendor, 
                    string TeamCount, 
                    string MetRplOnly, 
                    string MetRelOnly, 
                    string BothActMet, 
                    string MetInsQul, 
                    string PoleDbRel, 
                    string ArmCblRel, 
                    string IMEI_No, 
                    string Flag_V_S, 
                    string SelectDate, 
                    string strSubDiv, 
                    string strArmCastTp) {
            this.LR_Insert_Scheme_Vendor_MobDataAsync(strKeyParam, DivId, Scheme, Vendor, TeamCount, MetRplOnly, MetRelOnly, BothActMet, MetInsQul, PoleDbRel, ArmCblRel, IMEI_No, Flag_V_S, SelectDate, strSubDiv, strArmCastTp, null);
        }
        
        /// <remarks/>
        public void LR_Insert_Scheme_Vendor_MobDataAsync(
                    string strKeyParam, 
                    string DivId, 
                    string Scheme, 
                    string Vendor, 
                    string TeamCount, 
                    string MetRplOnly, 
                    string MetRelOnly, 
                    string BothActMet, 
                    string MetInsQul, 
                    string PoleDbRel, 
                    string ArmCblRel, 
                    string IMEI_No, 
                    string Flag_V_S, 
                    string SelectDate, 
                    string strSubDiv, 
                    string strArmCastTp, 
                    object userState) {
            if ((this.LR_Insert_Scheme_Vendor_MobDataOperationCompleted == null)) {
                this.LR_Insert_Scheme_Vendor_MobDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLR_Insert_Scheme_Vendor_MobDataOperationCompleted);
            }
            this.InvokeAsync("LR_Insert_Scheme_Vendor_MobData", new object[] {
                        strKeyParam,
                        DivId,
                        Scheme,
                        Vendor,
                        TeamCount,
                        MetRplOnly,
                        MetRelOnly,
                        BothActMet,
                        MetInsQul,
                        PoleDbRel,
                        ArmCblRel,
                        IMEI_No,
                        Flag_V_S,
                        SelectDate,
                        strSubDiv,
                        strArmCastTp}, this.LR_Insert_Scheme_Vendor_MobDataOperationCompleted, userState);
        }
        
        private void OnLR_Insert_Scheme_Vendor_MobDataOperationCompleted(object arg) {
            if ((this.LR_Insert_Scheme_Vendor_MobDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LR_Insert_Scheme_Vendor_MobDataCompleted(this, new LR_Insert_Scheme_Vendor_MobDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/LR_Insert_ActivityType_MobData", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LR_Insert_ActivityType_MobData(
                    string strKeyParam, 
                    string MeterNo, 
                    string PoleNo, 
                    string ActivityList1, 
                    string ActivityList2, 
                    string IMEI_No, 
                    string newMeter, 
                    string meterbox, 
                    string busbarspin, 
                    string cableuse, 
                    string seal1, 
                    string seal2, 
                    string seal3, 
                    string div_code, 
                    string schemeno, 
                    string dbobs, 
                    string piercing, 
                    string frompole, 
                    string topole, 
                    string flagType) {
            object[] results = this.Invoke("LR_Insert_ActivityType_MobData", new object[] {
                        strKeyParam,
                        MeterNo,
                        PoleNo,
                        ActivityList1,
                        ActivityList2,
                        IMEI_No,
                        newMeter,
                        meterbox,
                        busbarspin,
                        cableuse,
                        seal1,
                        seal2,
                        seal3,
                        div_code,
                        schemeno,
                        dbobs,
                        piercing,
                        frompole,
                        topole,
                        flagType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LR_Insert_ActivityType_MobDataAsync(
                    string strKeyParam, 
                    string MeterNo, 
                    string PoleNo, 
                    string ActivityList1, 
                    string ActivityList2, 
                    string IMEI_No, 
                    string newMeter, 
                    string meterbox, 
                    string busbarspin, 
                    string cableuse, 
                    string seal1, 
                    string seal2, 
                    string seal3, 
                    string div_code, 
                    string schemeno, 
                    string dbobs, 
                    string piercing, 
                    string frompole, 
                    string topole, 
                    string flagType) {
            this.LR_Insert_ActivityType_MobDataAsync(strKeyParam, MeterNo, PoleNo, ActivityList1, ActivityList2, IMEI_No, newMeter, meterbox, busbarspin, cableuse, seal1, seal2, seal3, div_code, schemeno, dbobs, piercing, frompole, topole, flagType, null);
        }
        
        /// <remarks/>
        public void LR_Insert_ActivityType_MobDataAsync(
                    string strKeyParam, 
                    string MeterNo, 
                    string PoleNo, 
                    string ActivityList1, 
                    string ActivityList2, 
                    string IMEI_No, 
                    string newMeter, 
                    string meterbox, 
                    string busbarspin, 
                    string cableuse, 
                    string seal1, 
                    string seal2, 
                    string seal3, 
                    string div_code, 
                    string schemeno, 
                    string dbobs, 
                    string piercing, 
                    string frompole, 
                    string topole, 
                    string flagType, 
                    object userState) {
            if ((this.LR_Insert_ActivityType_MobDataOperationCompleted == null)) {
                this.LR_Insert_ActivityType_MobDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLR_Insert_ActivityType_MobDataOperationCompleted);
            }
            this.InvokeAsync("LR_Insert_ActivityType_MobData", new object[] {
                        strKeyParam,
                        MeterNo,
                        PoleNo,
                        ActivityList1,
                        ActivityList2,
                        IMEI_No,
                        newMeter,
                        meterbox,
                        busbarspin,
                        cableuse,
                        seal1,
                        seal2,
                        seal3,
                        div_code,
                        schemeno,
                        dbobs,
                        piercing,
                        frompole,
                        topole,
                        flagType}, this.LR_Insert_ActivityType_MobDataOperationCompleted, userState);
        }
        
        private void OnLR_Insert_ActivityType_MobDataOperationCompleted(object arg) {
            if ((this.LR_Insert_ActivityType_MobDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LR_Insert_ActivityType_MobDataCompleted(this, new LR_Insert_ActivityType_MobDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/LR_Dashboard_DateWise", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LR_Dashboard_DateWise(string strKeyParam, string EntryDate) {
            object[] results = this.Invoke("LR_Dashboard_DateWise", new object[] {
                        strKeyParam,
                        EntryDate});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LR_Dashboard_DateWiseAsync(string strKeyParam, string EntryDate) {
            this.LR_Dashboard_DateWiseAsync(strKeyParam, EntryDate, null);
        }
        
        /// <remarks/>
        public void LR_Dashboard_DateWiseAsync(string strKeyParam, string EntryDate, object userState) {
            if ((this.LR_Dashboard_DateWiseOperationCompleted == null)) {
                this.LR_Dashboard_DateWiseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLR_Dashboard_DateWiseOperationCompleted);
            }
            this.InvokeAsync("LR_Dashboard_DateWise", new object[] {
                        strKeyParam,
                        EntryDate}, this.LR_Dashboard_DateWiseOperationCompleted, userState);
        }
        
        private void OnLR_Dashboard_DateWiseOperationCompleted(object arg) {
            if ((this.LR_Dashboard_DateWiseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LR_Dashboard_DateWiseCompleted(this, new LR_Dashboard_DateWiseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/LR_Dashboard_DateDivisionWise", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LR_Dashboard_DateDivisionWise(string strKeyParam, string EntryDate) {
            object[] results = this.Invoke("LR_Dashboard_DateDivisionWise", new object[] {
                        strKeyParam,
                        EntryDate});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LR_Dashboard_DateDivisionWiseAsync(string strKeyParam, string EntryDate) {
            this.LR_Dashboard_DateDivisionWiseAsync(strKeyParam, EntryDate, null);
        }
        
        /// <remarks/>
        public void LR_Dashboard_DateDivisionWiseAsync(string strKeyParam, string EntryDate, object userState) {
            if ((this.LR_Dashboard_DateDivisionWiseOperationCompleted == null)) {
                this.LR_Dashboard_DateDivisionWiseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLR_Dashboard_DateDivisionWiseOperationCompleted);
            }
            this.InvokeAsync("LR_Dashboard_DateDivisionWise", new object[] {
                        strKeyParam,
                        EntryDate}, this.LR_Dashboard_DateDivisionWiseOperationCompleted, userState);
        }
        
        private void OnLR_Dashboard_DateDivisionWiseOperationCompleted(object arg) {
            if ((this.LR_Dashboard_DateDivisionWiseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LR_Dashboard_DateDivisionWiseCompleted(this, new LR_Dashboard_DateDivisionWiseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/LR_Dashboard_DateSubDivisionWise", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LR_Dashboard_DateSubDivisionWise(string strKeyParam, string EntryDate) {
            object[] results = this.Invoke("LR_Dashboard_DateSubDivisionWise", new object[] {
                        strKeyParam,
                        EntryDate});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LR_Dashboard_DateSubDivisionWiseAsync(string strKeyParam, string EntryDate) {
            this.LR_Dashboard_DateSubDivisionWiseAsync(strKeyParam, EntryDate, null);
        }
        
        /// <remarks/>
        public void LR_Dashboard_DateSubDivisionWiseAsync(string strKeyParam, string EntryDate, object userState) {
            if ((this.LR_Dashboard_DateSubDivisionWiseOperationCompleted == null)) {
                this.LR_Dashboard_DateSubDivisionWiseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLR_Dashboard_DateSubDivisionWiseOperationCompleted);
            }
            this.InvokeAsync("LR_Dashboard_DateSubDivisionWise", new object[] {
                        strKeyParam,
                        EntryDate}, this.LR_Dashboard_DateSubDivisionWiseOperationCompleted, userState);
        }
        
        private void OnLR_Dashboard_DateSubDivisionWiseOperationCompleted(object arg) {
            if ((this.LR_Dashboard_DateSubDivisionWiseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LR_Dashboard_DateSubDivisionWiseCompleted(this, new LR_Dashboard_DateSubDivisionWiseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/LR_Surv_QC_Insert_New", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LR_Surv_QC_Insert_New(string strKeyParam, string VistDate, string Circle, string Division, string MeterNo, string CANo, string Remarks, string QCType, string QCSlctd, string Other, string activity1, string activity2, string strSubDiv) {
            object[] results = this.Invoke("LR_Surv_QC_Insert_New", new object[] {
                        strKeyParam,
                        VistDate,
                        Circle,
                        Division,
                        MeterNo,
                        CANo,
                        Remarks,
                        QCType,
                        QCSlctd,
                        Other,
                        activity1,
                        activity2,
                        strSubDiv});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LR_Surv_QC_Insert_NewAsync(string strKeyParam, string VistDate, string Circle, string Division, string MeterNo, string CANo, string Remarks, string QCType, string QCSlctd, string Other, string activity1, string activity2, string strSubDiv) {
            this.LR_Surv_QC_Insert_NewAsync(strKeyParam, VistDate, Circle, Division, MeterNo, CANo, Remarks, QCType, QCSlctd, Other, activity1, activity2, strSubDiv, null);
        }
        
        /// <remarks/>
        public void LR_Surv_QC_Insert_NewAsync(string strKeyParam, string VistDate, string Circle, string Division, string MeterNo, string CANo, string Remarks, string QCType, string QCSlctd, string Other, string activity1, string activity2, string strSubDiv, object userState) {
            if ((this.LR_Surv_QC_Insert_NewOperationCompleted == null)) {
                this.LR_Surv_QC_Insert_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLR_Surv_QC_Insert_NewOperationCompleted);
            }
            this.InvokeAsync("LR_Surv_QC_Insert_New", new object[] {
                        strKeyParam,
                        VistDate,
                        Circle,
                        Division,
                        MeterNo,
                        CANo,
                        Remarks,
                        QCType,
                        QCSlctd,
                        Other,
                        activity1,
                        activity2,
                        strSubDiv}, this.LR_Surv_QC_Insert_NewOperationCompleted, userState);
        }
        
        private void OnLR_Surv_QC_Insert_NewOperationCompleted(object arg) {
            if ((this.LR_Surv_QC_Insert_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LR_Surv_QC_Insert_NewCompleted(this, new LR_Surv_QC_Insert_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/GetOutageAlertRPL", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetOutageAlertRPL(string strCANumber) {
            object[] results = this.Invoke("GetOutageAlertRPL", new object[] {
                        strCANumber});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetOutageAlertRPLAsync(string strCANumber) {
            this.GetOutageAlertRPLAsync(strCANumber, null);
        }
        
        /// <remarks/>
        public void GetOutageAlertRPLAsync(string strCANumber, object userState) {
            if ((this.GetOutageAlertRPLOperationCompleted == null)) {
                this.GetOutageAlertRPLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOutageAlertRPLOperationCompleted);
            }
            this.InvokeAsync("GetOutageAlertRPL", new object[] {
                        strCANumber}, this.GetOutageAlertRPLOperationCompleted, userState);
        }
        
        private void OnGetOutageAlertRPLOperationCompleted(object arg) {
            if ((this.GetOutageAlertRPLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOutageAlertRPLCompleted(this, new GetOutageAlertRPLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/SplyCode_DefyLtr", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SplyCode_DefyLtr(string strKeyParam, string stCheckBoxNo) {
            object[] results = this.Invoke("SplyCode_DefyLtr", new object[] {
                        strKeyParam,
                        stCheckBoxNo});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SplyCode_DefyLtrAsync(string strKeyParam, string stCheckBoxNo) {
            this.SplyCode_DefyLtrAsync(strKeyParam, stCheckBoxNo, null);
        }
        
        /// <remarks/>
        public void SplyCode_DefyLtrAsync(string strKeyParam, string stCheckBoxNo, object userState) {
            if ((this.SplyCode_DefyLtrOperationCompleted == null)) {
                this.SplyCode_DefyLtrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSplyCode_DefyLtrOperationCompleted);
            }
            this.InvokeAsync("SplyCode_DefyLtr", new object[] {
                        strKeyParam,
                        stCheckBoxNo}, this.SplyCode_DefyLtrOperationCompleted, userState);
        }
        
        private void OnSplyCode_DefyLtrOperationCompleted(object arg) {
            if ((this.SplyCode_DefyLtrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SplyCode_DefyLtrCompleted(this, new SplyCode_DefyLtrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/DOCLIST_NEW_UPDATE_STS", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DOCLIST_NEW_UPDATE_STS(
                    string strOrderNo, 
                    string str_001, 
                    string str_002, 
                    string str_003, 
                    string str_004, 
                    string str_005, 
                    string str_006, 
                    string str_007, 
                    string str_008, 
                    string str_009, 
                    string str_010, 
                    string str_011, 
                    string str_012, 
                    string str_013, 
                    string str_014, 
                    string str_015, 
                    string str_016, 
                    string str_017, 
                    string str_018, 
                    string str_019, 
                    string str_020, 
                    string str_021, 
                    string str_022) {
            object[] results = this.Invoke("DOCLIST_NEW_UPDATE_STS", new object[] {
                        strOrderNo,
                        str_001,
                        str_002,
                        str_003,
                        str_004,
                        str_005,
                        str_006,
                        str_007,
                        str_008,
                        str_009,
                        str_010,
                        str_011,
                        str_012,
                        str_013,
                        str_014,
                        str_015,
                        str_016,
                        str_017,
                        str_018,
                        str_019,
                        str_020,
                        str_021,
                        str_022});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DOCLIST_NEW_UPDATE_STSAsync(
                    string strOrderNo, 
                    string str_001, 
                    string str_002, 
                    string str_003, 
                    string str_004, 
                    string str_005, 
                    string str_006, 
                    string str_007, 
                    string str_008, 
                    string str_009, 
                    string str_010, 
                    string str_011, 
                    string str_012, 
                    string str_013, 
                    string str_014, 
                    string str_015, 
                    string str_016, 
                    string str_017, 
                    string str_018, 
                    string str_019, 
                    string str_020, 
                    string str_021, 
                    string str_022) {
            this.DOCLIST_NEW_UPDATE_STSAsync(strOrderNo, str_001, str_002, str_003, str_004, str_005, str_006, str_007, str_008, str_009, str_010, str_011, str_012, str_013, str_014, str_015, str_016, str_017, str_018, str_019, str_020, str_021, str_022, null);
        }
        
        /// <remarks/>
        public void DOCLIST_NEW_UPDATE_STSAsync(
                    string strOrderNo, 
                    string str_001, 
                    string str_002, 
                    string str_003, 
                    string str_004, 
                    string str_005, 
                    string str_006, 
                    string str_007, 
                    string str_008, 
                    string str_009, 
                    string str_010, 
                    string str_011, 
                    string str_012, 
                    string str_013, 
                    string str_014, 
                    string str_015, 
                    string str_016, 
                    string str_017, 
                    string str_018, 
                    string str_019, 
                    string str_020, 
                    string str_021, 
                    string str_022, 
                    object userState) {
            if ((this.DOCLIST_NEW_UPDATE_STSOperationCompleted == null)) {
                this.DOCLIST_NEW_UPDATE_STSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDOCLIST_NEW_UPDATE_STSOperationCompleted);
            }
            this.InvokeAsync("DOCLIST_NEW_UPDATE_STS", new object[] {
                        strOrderNo,
                        str_001,
                        str_002,
                        str_003,
                        str_004,
                        str_005,
                        str_006,
                        str_007,
                        str_008,
                        str_009,
                        str_010,
                        str_011,
                        str_012,
                        str_013,
                        str_014,
                        str_015,
                        str_016,
                        str_017,
                        str_018,
                        str_019,
                        str_020,
                        str_021,
                        str_022}, this.DOCLIST_NEW_UPDATE_STSOperationCompleted, userState);
        }
        
        private void OnDOCLIST_NEW_UPDATE_STSOperationCompleted(object arg) {
            if ((this.DOCLIST_NEW_UPDATE_STSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DOCLIST_NEW_UPDATE_STSCompleted(this, new DOCLIST_NEW_UPDATE_STSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Deficiency_DocList_Update", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Deficiency_DocList_Update(
                    string strOrderNo, 
                    string D1, 
                    string D2, 
                    string D3, 
                    string D4, 
                    string D5, 
                    string D6, 
                    string D7, 
                    string D8, 
                    string D9, 
                    string D10, 
                    string D11, 
                    string D12, 
                    string D13, 
                    string D14, 
                    string D15, 
                    string D16, 
                    string D17, 
                    string D18, 
                    string D19, 
                    string D20, 
                    string D21, 
                    string D22, 
                    string D23, 
                    string D24) {
            object[] results = this.Invoke("Deficiency_DocList_Update", new object[] {
                        strOrderNo,
                        D1,
                        D2,
                        D3,
                        D4,
                        D5,
                        D6,
                        D7,
                        D8,
                        D9,
                        D10,
                        D11,
                        D12,
                        D13,
                        D14,
                        D15,
                        D16,
                        D17,
                        D18,
                        D19,
                        D20,
                        D21,
                        D22,
                        D23,
                        D24});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Deficiency_DocList_UpdateAsync(
                    string strOrderNo, 
                    string D1, 
                    string D2, 
                    string D3, 
                    string D4, 
                    string D5, 
                    string D6, 
                    string D7, 
                    string D8, 
                    string D9, 
                    string D10, 
                    string D11, 
                    string D12, 
                    string D13, 
                    string D14, 
                    string D15, 
                    string D16, 
                    string D17, 
                    string D18, 
                    string D19, 
                    string D20, 
                    string D21, 
                    string D22, 
                    string D23, 
                    string D24) {
            this.Deficiency_DocList_UpdateAsync(strOrderNo, D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22, D23, D24, null);
        }
        
        /// <remarks/>
        public void Deficiency_DocList_UpdateAsync(
                    string strOrderNo, 
                    string D1, 
                    string D2, 
                    string D3, 
                    string D4, 
                    string D5, 
                    string D6, 
                    string D7, 
                    string D8, 
                    string D9, 
                    string D10, 
                    string D11, 
                    string D12, 
                    string D13, 
                    string D14, 
                    string D15, 
                    string D16, 
                    string D17, 
                    string D18, 
                    string D19, 
                    string D20, 
                    string D21, 
                    string D22, 
                    string D23, 
                    string D24, 
                    object userState) {
            if ((this.Deficiency_DocList_UpdateOperationCompleted == null)) {
                this.Deficiency_DocList_UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeficiency_DocList_UpdateOperationCompleted);
            }
            this.InvokeAsync("Deficiency_DocList_Update", new object[] {
                        strOrderNo,
                        D1,
                        D2,
                        D3,
                        D4,
                        D5,
                        D6,
                        D7,
                        D8,
                        D9,
                        D10,
                        D11,
                        D12,
                        D13,
                        D14,
                        D15,
                        D16,
                        D17,
                        D18,
                        D19,
                        D20,
                        D21,
                        D22,
                        D23,
                        D24}, this.Deficiency_DocList_UpdateOperationCompleted, userState);
        }
        
        private void OnDeficiency_DocList_UpdateOperationCompleted(object arg) {
            if ((this.Deficiency_DocList_UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Deficiency_DocList_UpdateCompleted(this, new Deficiency_DocList_UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/SUPPLY_CODE_NEW_CONN_IMG", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SUPPLY_CODE_NEW_CONN_IMG(string strOrderNo, string strOtherImg1, string strOtherImg2, string strOtherImg3, string strOtherImg4) {
            object[] results = this.Invoke("SUPPLY_CODE_NEW_CONN_IMG", new object[] {
                        strOrderNo,
                        strOtherImg1,
                        strOtherImg2,
                        strOtherImg3,
                        strOtherImg4});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SUPPLY_CODE_NEW_CONN_IMGAsync(string strOrderNo, string strOtherImg1, string strOtherImg2, string strOtherImg3, string strOtherImg4) {
            this.SUPPLY_CODE_NEW_CONN_IMGAsync(strOrderNo, strOtherImg1, strOtherImg2, strOtherImg3, strOtherImg4, null);
        }
        
        /// <remarks/>
        public void SUPPLY_CODE_NEW_CONN_IMGAsync(string strOrderNo, string strOtherImg1, string strOtherImg2, string strOtherImg3, string strOtherImg4, object userState) {
            if ((this.SUPPLY_CODE_NEW_CONN_IMGOperationCompleted == null)) {
                this.SUPPLY_CODE_NEW_CONN_IMGOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSUPPLY_CODE_NEW_CONN_IMGOperationCompleted);
            }
            this.InvokeAsync("SUPPLY_CODE_NEW_CONN_IMG", new object[] {
                        strOrderNo,
                        strOtherImg1,
                        strOtherImg2,
                        strOtherImg3,
                        strOtherImg4}, this.SUPPLY_CODE_NEW_CONN_IMGOperationCompleted, userState);
        }
        
        private void OnSUPPLY_CODE_NEW_CONN_IMGOperationCompleted(object arg) {
            if ((this.SUPPLY_CODE_NEW_CONN_IMGCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SUPPLY_CODE_NEW_CONN_IMGCompleted(this, new SUPPLY_CODE_NEW_CONN_IMGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/SUPPLY_CODE_NEW_CONN_DATA", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SUPPLY_CODE_NEW_CONN_DATA(string strOrderNo, string strAppliedPortion, string strDwellingUnit, string strResonForNewMtr, string strDPCCClrncRqd, string strSStnSpaceAvail, string strTotalLoadPlot, string strTotalNoConn, string strDTMeter, string strDTCode) {
            object[] results = this.Invoke("SUPPLY_CODE_NEW_CONN_DATA", new object[] {
                        strOrderNo,
                        strAppliedPortion,
                        strDwellingUnit,
                        strResonForNewMtr,
                        strDPCCClrncRqd,
                        strSStnSpaceAvail,
                        strTotalLoadPlot,
                        strTotalNoConn,
                        strDTMeter,
                        strDTCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SUPPLY_CODE_NEW_CONN_DATAAsync(string strOrderNo, string strAppliedPortion, string strDwellingUnit, string strResonForNewMtr, string strDPCCClrncRqd, string strSStnSpaceAvail, string strTotalLoadPlot, string strTotalNoConn, string strDTMeter, string strDTCode) {
            this.SUPPLY_CODE_NEW_CONN_DATAAsync(strOrderNo, strAppliedPortion, strDwellingUnit, strResonForNewMtr, strDPCCClrncRqd, strSStnSpaceAvail, strTotalLoadPlot, strTotalNoConn, strDTMeter, strDTCode, null);
        }
        
        /// <remarks/>
        public void SUPPLY_CODE_NEW_CONN_DATAAsync(string strOrderNo, string strAppliedPortion, string strDwellingUnit, string strResonForNewMtr, string strDPCCClrncRqd, string strSStnSpaceAvail, string strTotalLoadPlot, string strTotalNoConn, string strDTMeter, string strDTCode, object userState) {
            if ((this.SUPPLY_CODE_NEW_CONN_DATAOperationCompleted == null)) {
                this.SUPPLY_CODE_NEW_CONN_DATAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSUPPLY_CODE_NEW_CONN_DATAOperationCompleted);
            }
            this.InvokeAsync("SUPPLY_CODE_NEW_CONN_DATA", new object[] {
                        strOrderNo,
                        strAppliedPortion,
                        strDwellingUnit,
                        strResonForNewMtr,
                        strDPCCClrncRqd,
                        strSStnSpaceAvail,
                        strTotalLoadPlot,
                        strTotalNoConn,
                        strDTMeter,
                        strDTCode}, this.SUPPLY_CODE_NEW_CONN_DATAOperationCompleted, userState);
        }
        
        private void OnSUPPLY_CODE_NEW_CONN_DATAOperationCompleted(object arg) {
            if ((this.SUPPLY_CODE_NEW_CONN_DATACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SUPPLY_CODE_NEW_CONN_DATACompleted(this, new SUPPLY_CODE_NEW_CONN_DATACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/LR_Surveillance_Insert_New", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string LR_Surveillance_Insert_New(
                    string strKeyParam, 
                    string ObserType, 
                    string VistDate, 
                    string Circle, 
                    string Division, 
                    string MeterNo, 
                    string CANo, 
                    string PoleNo, 
                    string ActionTkFlg, 
                    string Remarks, 
                    string NCType, 
                    string TypeOfAbnormality, 
                    string SiteAddress, 
                    string AdjMeterNo1, 
                    string AdjMeterNo2, 
                    string NearPoleNo, 
                    string Other, 
                    string activity1, 
                    string activity2, 
                    string strSubDiv) {
            object[] results = this.Invoke("LR_Surveillance_Insert_New", new object[] {
                        strKeyParam,
                        ObserType,
                        VistDate,
                        Circle,
                        Division,
                        MeterNo,
                        CANo,
                        PoleNo,
                        ActionTkFlg,
                        Remarks,
                        NCType,
                        TypeOfAbnormality,
                        SiteAddress,
                        AdjMeterNo1,
                        AdjMeterNo2,
                        NearPoleNo,
                        Other,
                        activity1,
                        activity2,
                        strSubDiv});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LR_Surveillance_Insert_NewAsync(
                    string strKeyParam, 
                    string ObserType, 
                    string VistDate, 
                    string Circle, 
                    string Division, 
                    string MeterNo, 
                    string CANo, 
                    string PoleNo, 
                    string ActionTkFlg, 
                    string Remarks, 
                    string NCType, 
                    string TypeOfAbnormality, 
                    string SiteAddress, 
                    string AdjMeterNo1, 
                    string AdjMeterNo2, 
                    string NearPoleNo, 
                    string Other, 
                    string activity1, 
                    string activity2, 
                    string strSubDiv) {
            this.LR_Surveillance_Insert_NewAsync(strKeyParam, ObserType, VistDate, Circle, Division, MeterNo, CANo, PoleNo, ActionTkFlg, Remarks, NCType, TypeOfAbnormality, SiteAddress, AdjMeterNo1, AdjMeterNo2, NearPoleNo, Other, activity1, activity2, strSubDiv, null);
        }
        
        /// <remarks/>
        public void LR_Surveillance_Insert_NewAsync(
                    string strKeyParam, 
                    string ObserType, 
                    string VistDate, 
                    string Circle, 
                    string Division, 
                    string MeterNo, 
                    string CANo, 
                    string PoleNo, 
                    string ActionTkFlg, 
                    string Remarks, 
                    string NCType, 
                    string TypeOfAbnormality, 
                    string SiteAddress, 
                    string AdjMeterNo1, 
                    string AdjMeterNo2, 
                    string NearPoleNo, 
                    string Other, 
                    string activity1, 
                    string activity2, 
                    string strSubDiv, 
                    object userState) {
            if ((this.LR_Surveillance_Insert_NewOperationCompleted == null)) {
                this.LR_Surveillance_Insert_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLR_Surveillance_Insert_NewOperationCompleted);
            }
            this.InvokeAsync("LR_Surveillance_Insert_New", new object[] {
                        strKeyParam,
                        ObserType,
                        VistDate,
                        Circle,
                        Division,
                        MeterNo,
                        CANo,
                        PoleNo,
                        ActionTkFlg,
                        Remarks,
                        NCType,
                        TypeOfAbnormality,
                        SiteAddress,
                        AdjMeterNo1,
                        AdjMeterNo2,
                        NearPoleNo,
                        Other,
                        activity1,
                        activity2,
                        strSubDiv}, this.LR_Surveillance_Insert_NewOperationCompleted, userState);
        }
        
        private void OnLR_Surveillance_Insert_NewOperationCompleted(object arg) {
            if ((this.LR_Surveillance_Insert_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LR_Surveillance_Insert_NewCompleted(this, new LR_Surveillance_Insert_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/LR_Surv_ATR_Insert", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool LR_Surv_ATR_Insert(string strKeyParam, string ObserId, string ObserType, string Remarks, string NCTypeResolved, string NCTypeNotResolved, string TypOfAbnormResolv, string TypOfAbnormNtResolv, string activity1, string activity2) {
            object[] results = this.Invoke("LR_Surv_ATR_Insert", new object[] {
                        strKeyParam,
                        ObserId,
                        ObserType,
                        Remarks,
                        NCTypeResolved,
                        NCTypeNotResolved,
                        TypOfAbnormResolv,
                        TypOfAbnormNtResolv,
                        activity1,
                        activity2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void LR_Surv_ATR_InsertAsync(string strKeyParam, string ObserId, string ObserType, string Remarks, string NCTypeResolved, string NCTypeNotResolved, string TypOfAbnormResolv, string TypOfAbnormNtResolv, string activity1, string activity2) {
            this.LR_Surv_ATR_InsertAsync(strKeyParam, ObserId, ObserType, Remarks, NCTypeResolved, NCTypeNotResolved, TypOfAbnormResolv, TypOfAbnormNtResolv, activity1, activity2, null);
        }
        
        /// <remarks/>
        public void LR_Surv_ATR_InsertAsync(string strKeyParam, string ObserId, string ObserType, string Remarks, string NCTypeResolved, string NCTypeNotResolved, string TypOfAbnormResolv, string TypOfAbnormNtResolv, string activity1, string activity2, object userState) {
            if ((this.LR_Surv_ATR_InsertOperationCompleted == null)) {
                this.LR_Surv_ATR_InsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLR_Surv_ATR_InsertOperationCompleted);
            }
            this.InvokeAsync("LR_Surv_ATR_Insert", new object[] {
                        strKeyParam,
                        ObserId,
                        ObserType,
                        Remarks,
                        NCTypeResolved,
                        NCTypeNotResolved,
                        TypOfAbnormResolv,
                        TypOfAbnormNtResolv,
                        activity1,
                        activity2}, this.LR_Surv_ATR_InsertOperationCompleted, userState);
        }
        
        private void OnLR_Surv_ATR_InsertOperationCompleted(object arg) {
            if ((this.LR_Surv_ATR_InsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LR_Surv_ATR_InsertCompleted(this, new LR_Surv_ATR_InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/LR_ObservationList_New", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LR_ObservationList_New(string strKeyParam, string strDivName, string strRolRght, string strSubDiv) {
            object[] results = this.Invoke("LR_ObservationList_New", new object[] {
                        strKeyParam,
                        strDivName,
                        strRolRght,
                        strSubDiv});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LR_ObservationList_NewAsync(string strKeyParam, string strDivName, string strRolRght, string strSubDiv) {
            this.LR_ObservationList_NewAsync(strKeyParam, strDivName, strRolRght, strSubDiv, null);
        }
        
        /// <remarks/>
        public void LR_ObservationList_NewAsync(string strKeyParam, string strDivName, string strRolRght, string strSubDiv, object userState) {
            if ((this.LR_ObservationList_NewOperationCompleted == null)) {
                this.LR_ObservationList_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLR_ObservationList_NewOperationCompleted);
            }
            this.InvokeAsync("LR_ObservationList_New", new object[] {
                        strKeyParam,
                        strDivName,
                        strRolRght,
                        strSubDiv}, this.LR_ObservationList_NewOperationCompleted, userState);
        }
        
        private void OnLR_ObservationList_NewOperationCompleted(object arg) {
            if ((this.LR_ObservationList_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LR_ObservationList_NewCompleted(this, new LR_ObservationList_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_GetUserLoginDetails", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable MCR_GetUserLoginDetails(string strUser, string strPassword) {
            object[] results = this.Invoke("MCR_GetUserLoginDetails", new object[] {
                        strUser,
                        strPassword});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_GetUserLoginDetailsAsync(string strUser, string strPassword) {
            this.MCR_GetUserLoginDetailsAsync(strUser, strPassword, null);
        }
        
        /// <remarks/>
        public void MCR_GetUserLoginDetailsAsync(string strUser, string strPassword, object userState) {
            if ((this.MCR_GetUserLoginDetailsOperationCompleted == null)) {
                this.MCR_GetUserLoginDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_GetUserLoginDetailsOperationCompleted);
            }
            this.InvokeAsync("MCR_GetUserLoginDetails", new object[] {
                        strUser,
                        strPassword}, this.MCR_GetUserLoginDetailsOperationCompleted, userState);
        }
        
        private void OnMCR_GetUserLoginDetailsOperationCompleted(object arg) {
            if ((this.MCR_GetUserLoginDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_GetUserLoginDetailsCompleted(this, new MCR_GetUserLoginDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_GetUserMCR_INPUT_DT", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable MCR_GetUserMCR_INPUT_DT(string strUserType, string strUser, string stringLatitude, string stringLongitude) {
            object[] results = this.Invoke("MCR_GetUserMCR_INPUT_DT", new object[] {
                        strUserType,
                        strUser,
                        stringLatitude,
                        stringLongitude});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_GetUserMCR_INPUT_DTAsync(string strUserType, string strUser, string stringLatitude, string stringLongitude) {
            this.MCR_GetUserMCR_INPUT_DTAsync(strUserType, strUser, stringLatitude, stringLongitude, null);
        }
        
        /// <remarks/>
        public void MCR_GetUserMCR_INPUT_DTAsync(string strUserType, string strUser, string stringLatitude, string stringLongitude, object userState) {
            if ((this.MCR_GetUserMCR_INPUT_DTOperationCompleted == null)) {
                this.MCR_GetUserMCR_INPUT_DTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_GetUserMCR_INPUT_DTOperationCompleted);
            }
            this.InvokeAsync("MCR_GetUserMCR_INPUT_DT", new object[] {
                        strUserType,
                        strUser,
                        stringLatitude,
                        stringLongitude}, this.MCR_GetUserMCR_INPUT_DTOperationCompleted, userState);
        }
        
        private void OnMCR_GetUserMCR_INPUT_DTOperationCompleted(object arg) {
            if ((this.MCR_GetUserMCR_INPUT_DTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_GetUserMCR_INPUT_DTCompleted(this, new MCR_GetUserMCR_INPUT_DTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_GetUserMCR_INPUT_DTNEW", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable MCR_GetUserMCR_INPUT_DTNEW(string strUserType, string strUser, string stringLatitude, string stringLongitude) {
            object[] results = this.Invoke("MCR_GetUserMCR_INPUT_DTNEW", new object[] {
                        strUserType,
                        strUser,
                        stringLatitude,
                        stringLongitude});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_GetUserMCR_INPUT_DTNEWAsync(string strUserType, string strUser, string stringLatitude, string stringLongitude) {
            this.MCR_GetUserMCR_INPUT_DTNEWAsync(strUserType, strUser, stringLatitude, stringLongitude, null);
        }
        
        /// <remarks/>
        public void MCR_GetUserMCR_INPUT_DTNEWAsync(string strUserType, string strUser, string stringLatitude, string stringLongitude, object userState) {
            if ((this.MCR_GetUserMCR_INPUT_DTNEWOperationCompleted == null)) {
                this.MCR_GetUserMCR_INPUT_DTNEWOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_GetUserMCR_INPUT_DTNEWOperationCompleted);
            }
            this.InvokeAsync("MCR_GetUserMCR_INPUT_DTNEW", new object[] {
                        strUserType,
                        strUser,
                        stringLatitude,
                        stringLongitude}, this.MCR_GetUserMCR_INPUT_DTNEWOperationCompleted, userState);
        }
        
        private void OnMCR_GetUserMCR_INPUT_DTNEWOperationCompleted(object arg) {
            if ((this.MCR_GetUserMCR_INPUT_DTNEWCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_GetUserMCR_INPUT_DTNEWCompleted(this, new MCR_GetUserMCR_INPUT_DTNEWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_Insert_INPUT_Data", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MCR_Insert_INPUT_Data(
                    string ORDERNO, 
                    string DEVICENO, 
                    string OTHERSTICKER, 
                    string OTHER4, 
                    string INSTALLEDBUSBAR, 
                    string BUSBARSIZE, 
                    string BUSBARNUMBER, 
                    string DRUMSIZE, 
                    string OTHER5, 
                    string CABLESIZE2, 
                    string CABLEINSTALLTYPE, 
                    string RUNNINGLENGTHFROM, 
                    string RUNNINGLENGTHTO, 
                    string CABLELENGTH, 
                    string TERMINALSEAL1, 
                    string TERMINALSEAL2, 
                    string METERBOXSEAL1, 
                    string METERBOXSEAL2, 
                    string BUSBARSEAL1, 
                    string BUSBARSEAL2, 
                    string INSTALLEDLOCATION, 
                    string POLENUMBER, 
                    string OTHER6, 
                    string OTHER7, 
                    string OTHER8, 
                    string OTHER9, 
                    string OTHER10, 
                    string OTHER11, 
                    string TAKEPHOTOGRAPH, 
                    string METERDOWNLOAD, 
                    string DBLOCKED, 
                    string EARTHING, 
                    string HEIGHTOFMETER, 
                    string ANYJOINTS, 
                    string OVERHEADCABLE, 
                    string OVERHEADCABLEPOLE, 
                    string FLOWMADE, 
                    string ADDITIONALACCESSORIES, 
                    string IMAGE1, 
                    string IMAGE2, 
                    string IMAGE3, 
                    string IMEAGE_MCR, 
                    string IMAGE_METERTESTREPORT, 
                    string IMAGE_LABTESTINGREPORT, 
                    string IMAGE_SIGNATURE, 
                    string OUTPUTBUSLENGTH, 
                    string OUTPUTCABLELENGTH, 
                    string EARTHINGPOLE, 
                    string IMAGE4, 
                    string PUNCHED, 
                    string TAB_ID, 
                    string TAB_NAME, 
                    string GIS_LAT, 
                    string GIS_LONG, 
                    string GIS_STATUS, 
                    string IMEI_NO) {
            object[] results = this.Invoke("MCR_Insert_INPUT_Data", new object[] {
                        ORDERNO,
                        DEVICENO,
                        OTHERSTICKER,
                        OTHER4,
                        INSTALLEDBUSBAR,
                        BUSBARSIZE,
                        BUSBARNUMBER,
                        DRUMSIZE,
                        OTHER5,
                        CABLESIZE2,
                        CABLEINSTALLTYPE,
                        RUNNINGLENGTHFROM,
                        RUNNINGLENGTHTO,
                        CABLELENGTH,
                        TERMINALSEAL1,
                        TERMINALSEAL2,
                        METERBOXSEAL1,
                        METERBOXSEAL2,
                        BUSBARSEAL1,
                        BUSBARSEAL2,
                        INSTALLEDLOCATION,
                        POLENUMBER,
                        OTHER6,
                        OTHER7,
                        OTHER8,
                        OTHER9,
                        OTHER10,
                        OTHER11,
                        TAKEPHOTOGRAPH,
                        METERDOWNLOAD,
                        DBLOCKED,
                        EARTHING,
                        HEIGHTOFMETER,
                        ANYJOINTS,
                        OVERHEADCABLE,
                        OVERHEADCABLEPOLE,
                        FLOWMADE,
                        ADDITIONALACCESSORIES,
                        IMAGE1,
                        IMAGE2,
                        IMAGE3,
                        IMEAGE_MCR,
                        IMAGE_METERTESTREPORT,
                        IMAGE_LABTESTINGREPORT,
                        IMAGE_SIGNATURE,
                        OUTPUTBUSLENGTH,
                        OUTPUTCABLELENGTH,
                        EARTHINGPOLE,
                        IMAGE4,
                        PUNCHED,
                        TAB_ID,
                        TAB_NAME,
                        GIS_LAT,
                        GIS_LONG,
                        GIS_STATUS,
                        IMEI_NO});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_Insert_INPUT_DataAsync(
                    string ORDERNO, 
                    string DEVICENO, 
                    string OTHERSTICKER, 
                    string OTHER4, 
                    string INSTALLEDBUSBAR, 
                    string BUSBARSIZE, 
                    string BUSBARNUMBER, 
                    string DRUMSIZE, 
                    string OTHER5, 
                    string CABLESIZE2, 
                    string CABLEINSTALLTYPE, 
                    string RUNNINGLENGTHFROM, 
                    string RUNNINGLENGTHTO, 
                    string CABLELENGTH, 
                    string TERMINALSEAL1, 
                    string TERMINALSEAL2, 
                    string METERBOXSEAL1, 
                    string METERBOXSEAL2, 
                    string BUSBARSEAL1, 
                    string BUSBARSEAL2, 
                    string INSTALLEDLOCATION, 
                    string POLENUMBER, 
                    string OTHER6, 
                    string OTHER7, 
                    string OTHER8, 
                    string OTHER9, 
                    string OTHER10, 
                    string OTHER11, 
                    string TAKEPHOTOGRAPH, 
                    string METERDOWNLOAD, 
                    string DBLOCKED, 
                    string EARTHING, 
                    string HEIGHTOFMETER, 
                    string ANYJOINTS, 
                    string OVERHEADCABLE, 
                    string OVERHEADCABLEPOLE, 
                    string FLOWMADE, 
                    string ADDITIONALACCESSORIES, 
                    string IMAGE1, 
                    string IMAGE2, 
                    string IMAGE3, 
                    string IMEAGE_MCR, 
                    string IMAGE_METERTESTREPORT, 
                    string IMAGE_LABTESTINGREPORT, 
                    string IMAGE_SIGNATURE, 
                    string OUTPUTBUSLENGTH, 
                    string OUTPUTCABLELENGTH, 
                    string EARTHINGPOLE, 
                    string IMAGE4, 
                    string PUNCHED, 
                    string TAB_ID, 
                    string TAB_NAME, 
                    string GIS_LAT, 
                    string GIS_LONG, 
                    string GIS_STATUS, 
                    string IMEI_NO) {
            this.MCR_Insert_INPUT_DataAsync(ORDERNO, DEVICENO, OTHERSTICKER, OTHER4, INSTALLEDBUSBAR, BUSBARSIZE, BUSBARNUMBER, DRUMSIZE, OTHER5, CABLESIZE2, CABLEINSTALLTYPE, RUNNINGLENGTHFROM, RUNNINGLENGTHTO, CABLELENGTH, TERMINALSEAL1, TERMINALSEAL2, METERBOXSEAL1, METERBOXSEAL2, BUSBARSEAL1, BUSBARSEAL2, INSTALLEDLOCATION, POLENUMBER, OTHER6, OTHER7, OTHER8, OTHER9, OTHER10, OTHER11, TAKEPHOTOGRAPH, METERDOWNLOAD, DBLOCKED, EARTHING, HEIGHTOFMETER, ANYJOINTS, OVERHEADCABLE, OVERHEADCABLEPOLE, FLOWMADE, ADDITIONALACCESSORIES, IMAGE1, IMAGE2, IMAGE3, IMEAGE_MCR, IMAGE_METERTESTREPORT, IMAGE_LABTESTINGREPORT, IMAGE_SIGNATURE, OUTPUTBUSLENGTH, OUTPUTCABLELENGTH, EARTHINGPOLE, IMAGE4, PUNCHED, TAB_ID, TAB_NAME, GIS_LAT, GIS_LONG, GIS_STATUS, IMEI_NO, null);
        }
        
        /// <remarks/>
        public void MCR_Insert_INPUT_DataAsync(
                    string ORDERNO, 
                    string DEVICENO, 
                    string OTHERSTICKER, 
                    string OTHER4, 
                    string INSTALLEDBUSBAR, 
                    string BUSBARSIZE, 
                    string BUSBARNUMBER, 
                    string DRUMSIZE, 
                    string OTHER5, 
                    string CABLESIZE2, 
                    string CABLEINSTALLTYPE, 
                    string RUNNINGLENGTHFROM, 
                    string RUNNINGLENGTHTO, 
                    string CABLELENGTH, 
                    string TERMINALSEAL1, 
                    string TERMINALSEAL2, 
                    string METERBOXSEAL1, 
                    string METERBOXSEAL2, 
                    string BUSBARSEAL1, 
                    string BUSBARSEAL2, 
                    string INSTALLEDLOCATION, 
                    string POLENUMBER, 
                    string OTHER6, 
                    string OTHER7, 
                    string OTHER8, 
                    string OTHER9, 
                    string OTHER10, 
                    string OTHER11, 
                    string TAKEPHOTOGRAPH, 
                    string METERDOWNLOAD, 
                    string DBLOCKED, 
                    string EARTHING, 
                    string HEIGHTOFMETER, 
                    string ANYJOINTS, 
                    string OVERHEADCABLE, 
                    string OVERHEADCABLEPOLE, 
                    string FLOWMADE, 
                    string ADDITIONALACCESSORIES, 
                    string IMAGE1, 
                    string IMAGE2, 
                    string IMAGE3, 
                    string IMEAGE_MCR, 
                    string IMAGE_METERTESTREPORT, 
                    string IMAGE_LABTESTINGREPORT, 
                    string IMAGE_SIGNATURE, 
                    string OUTPUTBUSLENGTH, 
                    string OUTPUTCABLELENGTH, 
                    string EARTHINGPOLE, 
                    string IMAGE4, 
                    string PUNCHED, 
                    string TAB_ID, 
                    string TAB_NAME, 
                    string GIS_LAT, 
                    string GIS_LONG, 
                    string GIS_STATUS, 
                    string IMEI_NO, 
                    object userState) {
            if ((this.MCR_Insert_INPUT_DataOperationCompleted == null)) {
                this.MCR_Insert_INPUT_DataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_Insert_INPUT_DataOperationCompleted);
            }
            this.InvokeAsync("MCR_Insert_INPUT_Data", new object[] {
                        ORDERNO,
                        DEVICENO,
                        OTHERSTICKER,
                        OTHER4,
                        INSTALLEDBUSBAR,
                        BUSBARSIZE,
                        BUSBARNUMBER,
                        DRUMSIZE,
                        OTHER5,
                        CABLESIZE2,
                        CABLEINSTALLTYPE,
                        RUNNINGLENGTHFROM,
                        RUNNINGLENGTHTO,
                        CABLELENGTH,
                        TERMINALSEAL1,
                        TERMINALSEAL2,
                        METERBOXSEAL1,
                        METERBOXSEAL2,
                        BUSBARSEAL1,
                        BUSBARSEAL2,
                        INSTALLEDLOCATION,
                        POLENUMBER,
                        OTHER6,
                        OTHER7,
                        OTHER8,
                        OTHER9,
                        OTHER10,
                        OTHER11,
                        TAKEPHOTOGRAPH,
                        METERDOWNLOAD,
                        DBLOCKED,
                        EARTHING,
                        HEIGHTOFMETER,
                        ANYJOINTS,
                        OVERHEADCABLE,
                        OVERHEADCABLEPOLE,
                        FLOWMADE,
                        ADDITIONALACCESSORIES,
                        IMAGE1,
                        IMAGE2,
                        IMAGE3,
                        IMEAGE_MCR,
                        IMAGE_METERTESTREPORT,
                        IMAGE_LABTESTINGREPORT,
                        IMAGE_SIGNATURE,
                        OUTPUTBUSLENGTH,
                        OUTPUTCABLELENGTH,
                        EARTHINGPOLE,
                        IMAGE4,
                        PUNCHED,
                        TAB_ID,
                        TAB_NAME,
                        GIS_LAT,
                        GIS_LONG,
                        GIS_STATUS,
                        IMEI_NO}, this.MCR_Insert_INPUT_DataOperationCompleted, userState);
        }
        
        private void OnMCR_Insert_INPUT_DataOperationCompleted(object arg) {
            if ((this.MCR_Insert_INPUT_DataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_Insert_INPUT_DataCompleted(this, new MCR_Insert_INPUT_DataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_Insert_INPUT_DataEXTRA7", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MCR_Insert_INPUT_DataEXTRA7(
                    string ORDERNO, 
                    string DEVICENO, 
                    string STICKERNO, 
                    string OTHERSTICKER, 
                    string OTHER4, 
                    string INSTALLEDBUSBAR, 
                    string BUSBARSIZE, 
                    string BUSBARNUMBER, 
                    string DRUMSIZE, 
                    string OTHER5, 
                    string CABLESIZE2, 
                    string CABLEINSTALLTYPE, 
                    string RUNNINGLENGTHFROM, 
                    string RUNNINGLENGTHTO, 
                    string CABLELENGTH, 
                    string TERMINALSEAL1, 
                    string TERMINALSEAL2, 
                    string METERBOXSEAL1, 
                    string METERBOXSEAL2, 
                    string BUSBARSEAL1, 
                    string BUSBARSEAL2, 
                    string INSTALLEDLOCATION, 
                    string POLENUMBER, 
                    string OTHER6, 
                    string OTHER7, 
                    string OTHER8, 
                    string OTHER9, 
                    string OTHER10, 
                    string OTHER11, 
                    string TAKEPHOTOGRAPH, 
                    string METERDOWNLOAD, 
                    string DBLOCKED, 
                    string EARTHING, 
                    string HEIGHTOFMETER, 
                    string ANYJOINTS, 
                    string OVERHEADCABLE, 
                    string OVERHEADCABLEPOLE, 
                    string FLOWMADE, 
                    string ADDITIONALACCESSORIES, 
                    string IMAGE1, 
                    string IMAGE2, 
                    string IMAGE3, 
                    string IMEAGE_MCR, 
                    string IMAGE_METERTESTREPORT, 
                    string IMAGE_LABTESTINGREPORT, 
                    string IMAGE_SIGNATURE, 
                    string OUTPUTBUSLENGTH, 
                    string OUTPUTCABLELENGTH, 
                    string EARTHINGPOLE, 
                    string IMAGE4, 
                    string PUNCHED, 
                    string TAB_ID, 
                    string TAB_NAME, 
                    string GIS_LAT, 
                    string GIS_LONG, 
                    string GIS_STATUS, 
                    string IMEI_NO, 
                    string SUBMIT_DATETIME, 
                    string DRUMNUMBERBB, 
                    string VALINSTALLTYPEBB, 
                    string RUNNINGLENGTHFROMBB, 
                    string RUNNINGLENGTHTOBB, 
                    string ELCBSUBMITVAL, 
                    string METERSCANNEDVAL, 
                    string EXTRA1, 
                    string EXTRA2, 
                    string EXTRA3, 
                    string EXTRA4, 
                    string EXTRA5, 
                    string EXTRA6, 
                    string EXTRA7) {
            object[] results = this.Invoke("MCR_Insert_INPUT_DataEXTRA7", new object[] {
                        ORDERNO,
                        DEVICENO,
                        STICKERNO,
                        OTHERSTICKER,
                        OTHER4,
                        INSTALLEDBUSBAR,
                        BUSBARSIZE,
                        BUSBARNUMBER,
                        DRUMSIZE,
                        OTHER5,
                        CABLESIZE2,
                        CABLEINSTALLTYPE,
                        RUNNINGLENGTHFROM,
                        RUNNINGLENGTHTO,
                        CABLELENGTH,
                        TERMINALSEAL1,
                        TERMINALSEAL2,
                        METERBOXSEAL1,
                        METERBOXSEAL2,
                        BUSBARSEAL1,
                        BUSBARSEAL2,
                        INSTALLEDLOCATION,
                        POLENUMBER,
                        OTHER6,
                        OTHER7,
                        OTHER8,
                        OTHER9,
                        OTHER10,
                        OTHER11,
                        TAKEPHOTOGRAPH,
                        METERDOWNLOAD,
                        DBLOCKED,
                        EARTHING,
                        HEIGHTOFMETER,
                        ANYJOINTS,
                        OVERHEADCABLE,
                        OVERHEADCABLEPOLE,
                        FLOWMADE,
                        ADDITIONALACCESSORIES,
                        IMAGE1,
                        IMAGE2,
                        IMAGE3,
                        IMEAGE_MCR,
                        IMAGE_METERTESTREPORT,
                        IMAGE_LABTESTINGREPORT,
                        IMAGE_SIGNATURE,
                        OUTPUTBUSLENGTH,
                        OUTPUTCABLELENGTH,
                        EARTHINGPOLE,
                        IMAGE4,
                        PUNCHED,
                        TAB_ID,
                        TAB_NAME,
                        GIS_LAT,
                        GIS_LONG,
                        GIS_STATUS,
                        IMEI_NO,
                        SUBMIT_DATETIME,
                        DRUMNUMBERBB,
                        VALINSTALLTYPEBB,
                        RUNNINGLENGTHFROMBB,
                        RUNNINGLENGTHTOBB,
                        ELCBSUBMITVAL,
                        METERSCANNEDVAL,
                        EXTRA1,
                        EXTRA2,
                        EXTRA3,
                        EXTRA4,
                        EXTRA5,
                        EXTRA6,
                        EXTRA7});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_Insert_INPUT_DataEXTRA7Async(
                    string ORDERNO, 
                    string DEVICENO, 
                    string STICKERNO, 
                    string OTHERSTICKER, 
                    string OTHER4, 
                    string INSTALLEDBUSBAR, 
                    string BUSBARSIZE, 
                    string BUSBARNUMBER, 
                    string DRUMSIZE, 
                    string OTHER5, 
                    string CABLESIZE2, 
                    string CABLEINSTALLTYPE, 
                    string RUNNINGLENGTHFROM, 
                    string RUNNINGLENGTHTO, 
                    string CABLELENGTH, 
                    string TERMINALSEAL1, 
                    string TERMINALSEAL2, 
                    string METERBOXSEAL1, 
                    string METERBOXSEAL2, 
                    string BUSBARSEAL1, 
                    string BUSBARSEAL2, 
                    string INSTALLEDLOCATION, 
                    string POLENUMBER, 
                    string OTHER6, 
                    string OTHER7, 
                    string OTHER8, 
                    string OTHER9, 
                    string OTHER10, 
                    string OTHER11, 
                    string TAKEPHOTOGRAPH, 
                    string METERDOWNLOAD, 
                    string DBLOCKED, 
                    string EARTHING, 
                    string HEIGHTOFMETER, 
                    string ANYJOINTS, 
                    string OVERHEADCABLE, 
                    string OVERHEADCABLEPOLE, 
                    string FLOWMADE, 
                    string ADDITIONALACCESSORIES, 
                    string IMAGE1, 
                    string IMAGE2, 
                    string IMAGE3, 
                    string IMEAGE_MCR, 
                    string IMAGE_METERTESTREPORT, 
                    string IMAGE_LABTESTINGREPORT, 
                    string IMAGE_SIGNATURE, 
                    string OUTPUTBUSLENGTH, 
                    string OUTPUTCABLELENGTH, 
                    string EARTHINGPOLE, 
                    string IMAGE4, 
                    string PUNCHED, 
                    string TAB_ID, 
                    string TAB_NAME, 
                    string GIS_LAT, 
                    string GIS_LONG, 
                    string GIS_STATUS, 
                    string IMEI_NO, 
                    string SUBMIT_DATETIME, 
                    string DRUMNUMBERBB, 
                    string VALINSTALLTYPEBB, 
                    string RUNNINGLENGTHFROMBB, 
                    string RUNNINGLENGTHTOBB, 
                    string ELCBSUBMITVAL, 
                    string METERSCANNEDVAL, 
                    string EXTRA1, 
                    string EXTRA2, 
                    string EXTRA3, 
                    string EXTRA4, 
                    string EXTRA5, 
                    string EXTRA6, 
                    string EXTRA7) {
            this.MCR_Insert_INPUT_DataEXTRA7Async(ORDERNO, DEVICENO, STICKERNO, OTHERSTICKER, OTHER4, INSTALLEDBUSBAR, BUSBARSIZE, BUSBARNUMBER, DRUMSIZE, OTHER5, CABLESIZE2, CABLEINSTALLTYPE, RUNNINGLENGTHFROM, RUNNINGLENGTHTO, CABLELENGTH, TERMINALSEAL1, TERMINALSEAL2, METERBOXSEAL1, METERBOXSEAL2, BUSBARSEAL1, BUSBARSEAL2, INSTALLEDLOCATION, POLENUMBER, OTHER6, OTHER7, OTHER8, OTHER9, OTHER10, OTHER11, TAKEPHOTOGRAPH, METERDOWNLOAD, DBLOCKED, EARTHING, HEIGHTOFMETER, ANYJOINTS, OVERHEADCABLE, OVERHEADCABLEPOLE, FLOWMADE, ADDITIONALACCESSORIES, IMAGE1, IMAGE2, IMAGE3, IMEAGE_MCR, IMAGE_METERTESTREPORT, IMAGE_LABTESTINGREPORT, IMAGE_SIGNATURE, OUTPUTBUSLENGTH, OUTPUTCABLELENGTH, EARTHINGPOLE, IMAGE4, PUNCHED, TAB_ID, TAB_NAME, GIS_LAT, GIS_LONG, GIS_STATUS, IMEI_NO, SUBMIT_DATETIME, DRUMNUMBERBB, VALINSTALLTYPEBB, RUNNINGLENGTHFROMBB, RUNNINGLENGTHTOBB, ELCBSUBMITVAL, METERSCANNEDVAL, EXTRA1, EXTRA2, EXTRA3, EXTRA4, EXTRA5, EXTRA6, EXTRA7, null);
        }
        
        /// <remarks/>
        public void MCR_Insert_INPUT_DataEXTRA7Async(
                    string ORDERNO, 
                    string DEVICENO, 
                    string STICKERNO, 
                    string OTHERSTICKER, 
                    string OTHER4, 
                    string INSTALLEDBUSBAR, 
                    string BUSBARSIZE, 
                    string BUSBARNUMBER, 
                    string DRUMSIZE, 
                    string OTHER5, 
                    string CABLESIZE2, 
                    string CABLEINSTALLTYPE, 
                    string RUNNINGLENGTHFROM, 
                    string RUNNINGLENGTHTO, 
                    string CABLELENGTH, 
                    string TERMINALSEAL1, 
                    string TERMINALSEAL2, 
                    string METERBOXSEAL1, 
                    string METERBOXSEAL2, 
                    string BUSBARSEAL1, 
                    string BUSBARSEAL2, 
                    string INSTALLEDLOCATION, 
                    string POLENUMBER, 
                    string OTHER6, 
                    string OTHER7, 
                    string OTHER8, 
                    string OTHER9, 
                    string OTHER10, 
                    string OTHER11, 
                    string TAKEPHOTOGRAPH, 
                    string METERDOWNLOAD, 
                    string DBLOCKED, 
                    string EARTHING, 
                    string HEIGHTOFMETER, 
                    string ANYJOINTS, 
                    string OVERHEADCABLE, 
                    string OVERHEADCABLEPOLE, 
                    string FLOWMADE, 
                    string ADDITIONALACCESSORIES, 
                    string IMAGE1, 
                    string IMAGE2, 
                    string IMAGE3, 
                    string IMEAGE_MCR, 
                    string IMAGE_METERTESTREPORT, 
                    string IMAGE_LABTESTINGREPORT, 
                    string IMAGE_SIGNATURE, 
                    string OUTPUTBUSLENGTH, 
                    string OUTPUTCABLELENGTH, 
                    string EARTHINGPOLE, 
                    string IMAGE4, 
                    string PUNCHED, 
                    string TAB_ID, 
                    string TAB_NAME, 
                    string GIS_LAT, 
                    string GIS_LONG, 
                    string GIS_STATUS, 
                    string IMEI_NO, 
                    string SUBMIT_DATETIME, 
                    string DRUMNUMBERBB, 
                    string VALINSTALLTYPEBB, 
                    string RUNNINGLENGTHFROMBB, 
                    string RUNNINGLENGTHTOBB, 
                    string ELCBSUBMITVAL, 
                    string METERSCANNEDVAL, 
                    string EXTRA1, 
                    string EXTRA2, 
                    string EXTRA3, 
                    string EXTRA4, 
                    string EXTRA5, 
                    string EXTRA6, 
                    string EXTRA7, 
                    object userState) {
            if ((this.MCR_Insert_INPUT_DataEXTRA7OperationCompleted == null)) {
                this.MCR_Insert_INPUT_DataEXTRA7OperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_Insert_INPUT_DataEXTRA7OperationCompleted);
            }
            this.InvokeAsync("MCR_Insert_INPUT_DataEXTRA7", new object[] {
                        ORDERNO,
                        DEVICENO,
                        STICKERNO,
                        OTHERSTICKER,
                        OTHER4,
                        INSTALLEDBUSBAR,
                        BUSBARSIZE,
                        BUSBARNUMBER,
                        DRUMSIZE,
                        OTHER5,
                        CABLESIZE2,
                        CABLEINSTALLTYPE,
                        RUNNINGLENGTHFROM,
                        RUNNINGLENGTHTO,
                        CABLELENGTH,
                        TERMINALSEAL1,
                        TERMINALSEAL2,
                        METERBOXSEAL1,
                        METERBOXSEAL2,
                        BUSBARSEAL1,
                        BUSBARSEAL2,
                        INSTALLEDLOCATION,
                        POLENUMBER,
                        OTHER6,
                        OTHER7,
                        OTHER8,
                        OTHER9,
                        OTHER10,
                        OTHER11,
                        TAKEPHOTOGRAPH,
                        METERDOWNLOAD,
                        DBLOCKED,
                        EARTHING,
                        HEIGHTOFMETER,
                        ANYJOINTS,
                        OVERHEADCABLE,
                        OVERHEADCABLEPOLE,
                        FLOWMADE,
                        ADDITIONALACCESSORIES,
                        IMAGE1,
                        IMAGE2,
                        IMAGE3,
                        IMEAGE_MCR,
                        IMAGE_METERTESTREPORT,
                        IMAGE_LABTESTINGREPORT,
                        IMAGE_SIGNATURE,
                        OUTPUTBUSLENGTH,
                        OUTPUTCABLELENGTH,
                        EARTHINGPOLE,
                        IMAGE4,
                        PUNCHED,
                        TAB_ID,
                        TAB_NAME,
                        GIS_LAT,
                        GIS_LONG,
                        GIS_STATUS,
                        IMEI_NO,
                        SUBMIT_DATETIME,
                        DRUMNUMBERBB,
                        VALINSTALLTYPEBB,
                        RUNNINGLENGTHFROMBB,
                        RUNNINGLENGTHTOBB,
                        ELCBSUBMITVAL,
                        METERSCANNEDVAL,
                        EXTRA1,
                        EXTRA2,
                        EXTRA3,
                        EXTRA4,
                        EXTRA5,
                        EXTRA6,
                        EXTRA7}, this.MCR_Insert_INPUT_DataEXTRA7OperationCompleted, userState);
        }
        
        private void OnMCR_Insert_INPUT_DataEXTRA7OperationCompleted(object arg) {
            if ((this.MCR_Insert_INPUT_DataEXTRA7Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_Insert_INPUT_DataEXTRA7Completed(this, new MCR_Insert_INPUT_DataEXTRA7CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_Insert_INPUT_DataNEW", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MCR_Insert_INPUT_DataNEW(
                    string ORDERNO, 
                    string DEVICENO, 
                    string OTHERSTICKER, 
                    string OTHER4, 
                    string INSTALLEDBUSBAR, 
                    string BUSBARSIZE, 
                    string BUSBARNUMBER, 
                    string DRUMSIZE, 
                    string OTHER5, 
                    string CABLESIZE2, 
                    string CABLEINSTALLTYPE, 
                    string RUNNINGLENGTHFROM, 
                    string RUNNINGLENGTHTO, 
                    string CABLELENGTH, 
                    string TERMINALSEAL1, 
                    string TERMINALSEAL2, 
                    string METERBOXSEAL1, 
                    string METERBOXSEAL2, 
                    string BUSBARSEAL1, 
                    string BUSBARSEAL2, 
                    string INSTALLEDLOCATION, 
                    string POLENUMBER, 
                    string OTHER6, 
                    string OTHER7, 
                    string OTHER8, 
                    string OTHER9, 
                    string OTHER10, 
                    string OTHER11, 
                    string TAKEPHOTOGRAPH, 
                    string METERDOWNLOAD, 
                    string DBLOCKED, 
                    string EARTHING, 
                    string HEIGHTOFMETER, 
                    string ANYJOINTS, 
                    string OVERHEADCABLE, 
                    string OVERHEADCABLEPOLE, 
                    string FLOWMADE, 
                    string ADDITIONALACCESSORIES, 
                    string IMAGE1, 
                    string IMAGE2, 
                    string IMAGE3, 
                    string IMEAGE_MCR, 
                    string IMAGE_METERTESTREPORT, 
                    string IMAGE_LABTESTINGREPORT, 
                    string IMAGE_SIGNATURE, 
                    string OUTPUTBUSLENGTH, 
                    string OUTPUTCABLELENGTH, 
                    string EARTHINGPOLE, 
                    string IMAGE4, 
                    string PUNCHED, 
                    string TAB_ID, 
                    string TAB_NAME, 
                    string GIS_LAT, 
                    string GIS_LONG, 
                    string GIS_STATUS, 
                    string IMEI_NO, 
                    string SUBMIT_DATETIME, 
                    string DRUMNUMBERBB, 
                    string VALINSTALLTYPEBB, 
                    string RUNNINGLENGTHFROMBB, 
                    string RUNNINGLENGTHTOBB, 
                    string ELCBSUBMITVAL, 
                    string METERSCANNEDVAL, 
                    string EXTRA1, 
                    string EXTRA2, 
                    string EXTRA3, 
                    string EXTRA4, 
                    string EXTRA5, 
                    string EXTRA6, 
                    string EXTRA7, 
                    string ORDER_TYPE, 
                    string PM_ACTIVITY, 
                    string OLD_M_READING, 
                    string MRKWH_OLD, 
                    string MRKW_OLD, 
                    string MRKVAH_OLD, 
                    string MRKVA_OLD, 
                    string IMAGE1_OLD, 
                    string IMAGE2_OLD, 
                    string IMAGE_SIGNATURE_OLD, 
                    string INSTALLEDCABLE_OLD, 
                    string CABLESIZE_OLD, 
                    string DRUMSIZE_OLD, 
                    string CABLEINSTALLTYPE_OLD, 
                    string RUNNINGLENGTHFROM_OLD, 
                    string RUNNINGLENGTHTO_OLD, 
                    string CABLELENGTH_OLD, 
                    string OUTPUTBUSLENGTH_OLD, 
                    string TERMINALSEAL1_OLD, 
                    string TERMINALSEAL2_OLD, 
                    string METERBOXSEAL1_OLD, 
                    string METERBOXSEAL2_OLD, 
                    string BUSBARSEAL1_OLD, 
                    string BUSBARSEAL2_OLD, 
                    string BOX_OLD, 
                    string GLANDS_OLD, 
                    string TCOVER_OLD, 
                    string BRASSSCREW_OLD, 
                    string BUSBAR_OLD, 
                    string THIMBLE_OLD, 
                    string SADDLE_OLD, 
                    string GUNNYBAG_OLD, 
                    string GUNNYBAGSEAL_OLD, 
                    string LABTESTING_DATE_OLD, 
                    string METERRELOCATE_OLD) {
            object[] results = this.Invoke("MCR_Insert_INPUT_DataNEW", new object[] {
                        ORDERNO,
                        DEVICENO,
                        OTHERSTICKER,
                        OTHER4,
                        INSTALLEDBUSBAR,
                        BUSBARSIZE,
                        BUSBARNUMBER,
                        DRUMSIZE,
                        OTHER5,
                        CABLESIZE2,
                        CABLEINSTALLTYPE,
                        RUNNINGLENGTHFROM,
                        RUNNINGLENGTHTO,
                        CABLELENGTH,
                        TERMINALSEAL1,
                        TERMINALSEAL2,
                        METERBOXSEAL1,
                        METERBOXSEAL2,
                        BUSBARSEAL1,
                        BUSBARSEAL2,
                        INSTALLEDLOCATION,
                        POLENUMBER,
                        OTHER6,
                        OTHER7,
                        OTHER8,
                        OTHER9,
                        OTHER10,
                        OTHER11,
                        TAKEPHOTOGRAPH,
                        METERDOWNLOAD,
                        DBLOCKED,
                        EARTHING,
                        HEIGHTOFMETER,
                        ANYJOINTS,
                        OVERHEADCABLE,
                        OVERHEADCABLEPOLE,
                        FLOWMADE,
                        ADDITIONALACCESSORIES,
                        IMAGE1,
                        IMAGE2,
                        IMAGE3,
                        IMEAGE_MCR,
                        IMAGE_METERTESTREPORT,
                        IMAGE_LABTESTINGREPORT,
                        IMAGE_SIGNATURE,
                        OUTPUTBUSLENGTH,
                        OUTPUTCABLELENGTH,
                        EARTHINGPOLE,
                        IMAGE4,
                        PUNCHED,
                        TAB_ID,
                        TAB_NAME,
                        GIS_LAT,
                        GIS_LONG,
                        GIS_STATUS,
                        IMEI_NO,
                        SUBMIT_DATETIME,
                        DRUMNUMBERBB,
                        VALINSTALLTYPEBB,
                        RUNNINGLENGTHFROMBB,
                        RUNNINGLENGTHTOBB,
                        ELCBSUBMITVAL,
                        METERSCANNEDVAL,
                        EXTRA1,
                        EXTRA2,
                        EXTRA3,
                        EXTRA4,
                        EXTRA5,
                        EXTRA6,
                        EXTRA7,
                        ORDER_TYPE,
                        PM_ACTIVITY,
                        OLD_M_READING,
                        MRKWH_OLD,
                        MRKW_OLD,
                        MRKVAH_OLD,
                        MRKVA_OLD,
                        IMAGE1_OLD,
                        IMAGE2_OLD,
                        IMAGE_SIGNATURE_OLD,
                        INSTALLEDCABLE_OLD,
                        CABLESIZE_OLD,
                        DRUMSIZE_OLD,
                        CABLEINSTALLTYPE_OLD,
                        RUNNINGLENGTHFROM_OLD,
                        RUNNINGLENGTHTO_OLD,
                        CABLELENGTH_OLD,
                        OUTPUTBUSLENGTH_OLD,
                        TERMINALSEAL1_OLD,
                        TERMINALSEAL2_OLD,
                        METERBOXSEAL1_OLD,
                        METERBOXSEAL2_OLD,
                        BUSBARSEAL1_OLD,
                        BUSBARSEAL2_OLD,
                        BOX_OLD,
                        GLANDS_OLD,
                        TCOVER_OLD,
                        BRASSSCREW_OLD,
                        BUSBAR_OLD,
                        THIMBLE_OLD,
                        SADDLE_OLD,
                        GUNNYBAG_OLD,
                        GUNNYBAGSEAL_OLD,
                        LABTESTING_DATE_OLD,
                        METERRELOCATE_OLD});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_Insert_INPUT_DataNEWAsync(
                    string ORDERNO, 
                    string DEVICENO, 
                    string OTHERSTICKER, 
                    string OTHER4, 
                    string INSTALLEDBUSBAR, 
                    string BUSBARSIZE, 
                    string BUSBARNUMBER, 
                    string DRUMSIZE, 
                    string OTHER5, 
                    string CABLESIZE2, 
                    string CABLEINSTALLTYPE, 
                    string RUNNINGLENGTHFROM, 
                    string RUNNINGLENGTHTO, 
                    string CABLELENGTH, 
                    string TERMINALSEAL1, 
                    string TERMINALSEAL2, 
                    string METERBOXSEAL1, 
                    string METERBOXSEAL2, 
                    string BUSBARSEAL1, 
                    string BUSBARSEAL2, 
                    string INSTALLEDLOCATION, 
                    string POLENUMBER, 
                    string OTHER6, 
                    string OTHER7, 
                    string OTHER8, 
                    string OTHER9, 
                    string OTHER10, 
                    string OTHER11, 
                    string TAKEPHOTOGRAPH, 
                    string METERDOWNLOAD, 
                    string DBLOCKED, 
                    string EARTHING, 
                    string HEIGHTOFMETER, 
                    string ANYJOINTS, 
                    string OVERHEADCABLE, 
                    string OVERHEADCABLEPOLE, 
                    string FLOWMADE, 
                    string ADDITIONALACCESSORIES, 
                    string IMAGE1, 
                    string IMAGE2, 
                    string IMAGE3, 
                    string IMEAGE_MCR, 
                    string IMAGE_METERTESTREPORT, 
                    string IMAGE_LABTESTINGREPORT, 
                    string IMAGE_SIGNATURE, 
                    string OUTPUTBUSLENGTH, 
                    string OUTPUTCABLELENGTH, 
                    string EARTHINGPOLE, 
                    string IMAGE4, 
                    string PUNCHED, 
                    string TAB_ID, 
                    string TAB_NAME, 
                    string GIS_LAT, 
                    string GIS_LONG, 
                    string GIS_STATUS, 
                    string IMEI_NO, 
                    string SUBMIT_DATETIME, 
                    string DRUMNUMBERBB, 
                    string VALINSTALLTYPEBB, 
                    string RUNNINGLENGTHFROMBB, 
                    string RUNNINGLENGTHTOBB, 
                    string ELCBSUBMITVAL, 
                    string METERSCANNEDVAL, 
                    string EXTRA1, 
                    string EXTRA2, 
                    string EXTRA3, 
                    string EXTRA4, 
                    string EXTRA5, 
                    string EXTRA6, 
                    string EXTRA7, 
                    string ORDER_TYPE, 
                    string PM_ACTIVITY, 
                    string OLD_M_READING, 
                    string MRKWH_OLD, 
                    string MRKW_OLD, 
                    string MRKVAH_OLD, 
                    string MRKVA_OLD, 
                    string IMAGE1_OLD, 
                    string IMAGE2_OLD, 
                    string IMAGE_SIGNATURE_OLD, 
                    string INSTALLEDCABLE_OLD, 
                    string CABLESIZE_OLD, 
                    string DRUMSIZE_OLD, 
                    string CABLEINSTALLTYPE_OLD, 
                    string RUNNINGLENGTHFROM_OLD, 
                    string RUNNINGLENGTHTO_OLD, 
                    string CABLELENGTH_OLD, 
                    string OUTPUTBUSLENGTH_OLD, 
                    string TERMINALSEAL1_OLD, 
                    string TERMINALSEAL2_OLD, 
                    string METERBOXSEAL1_OLD, 
                    string METERBOXSEAL2_OLD, 
                    string BUSBARSEAL1_OLD, 
                    string BUSBARSEAL2_OLD, 
                    string BOX_OLD, 
                    string GLANDS_OLD, 
                    string TCOVER_OLD, 
                    string BRASSSCREW_OLD, 
                    string BUSBAR_OLD, 
                    string THIMBLE_OLD, 
                    string SADDLE_OLD, 
                    string GUNNYBAG_OLD, 
                    string GUNNYBAGSEAL_OLD, 
                    string LABTESTING_DATE_OLD, 
                    string METERRELOCATE_OLD) {
            this.MCR_Insert_INPUT_DataNEWAsync(ORDERNO, DEVICENO, OTHERSTICKER, OTHER4, INSTALLEDBUSBAR, BUSBARSIZE, BUSBARNUMBER, DRUMSIZE, OTHER5, CABLESIZE2, CABLEINSTALLTYPE, RUNNINGLENGTHFROM, RUNNINGLENGTHTO, CABLELENGTH, TERMINALSEAL1, TERMINALSEAL2, METERBOXSEAL1, METERBOXSEAL2, BUSBARSEAL1, BUSBARSEAL2, INSTALLEDLOCATION, POLENUMBER, OTHER6, OTHER7, OTHER8, OTHER9, OTHER10, OTHER11, TAKEPHOTOGRAPH, METERDOWNLOAD, DBLOCKED, EARTHING, HEIGHTOFMETER, ANYJOINTS, OVERHEADCABLE, OVERHEADCABLEPOLE, FLOWMADE, ADDITIONALACCESSORIES, IMAGE1, IMAGE2, IMAGE3, IMEAGE_MCR, IMAGE_METERTESTREPORT, IMAGE_LABTESTINGREPORT, IMAGE_SIGNATURE, OUTPUTBUSLENGTH, OUTPUTCABLELENGTH, EARTHINGPOLE, IMAGE4, PUNCHED, TAB_ID, TAB_NAME, GIS_LAT, GIS_LONG, GIS_STATUS, IMEI_NO, SUBMIT_DATETIME, DRUMNUMBERBB, VALINSTALLTYPEBB, RUNNINGLENGTHFROMBB, RUNNINGLENGTHTOBB, ELCBSUBMITVAL, METERSCANNEDVAL, EXTRA1, EXTRA2, EXTRA3, EXTRA4, EXTRA5, EXTRA6, EXTRA7, ORDER_TYPE, PM_ACTIVITY, OLD_M_READING, MRKWH_OLD, MRKW_OLD, MRKVAH_OLD, MRKVA_OLD, IMAGE1_OLD, IMAGE2_OLD, IMAGE_SIGNATURE_OLD, INSTALLEDCABLE_OLD, CABLESIZE_OLD, DRUMSIZE_OLD, CABLEINSTALLTYPE_OLD, RUNNINGLENGTHFROM_OLD, RUNNINGLENGTHTO_OLD, CABLELENGTH_OLD, OUTPUTBUSLENGTH_OLD, TERMINALSEAL1_OLD, TERMINALSEAL2_OLD, METERBOXSEAL1_OLD, METERBOXSEAL2_OLD, BUSBARSEAL1_OLD, BUSBARSEAL2_OLD, BOX_OLD, GLANDS_OLD, TCOVER_OLD, BRASSSCREW_OLD, BUSBAR_OLD, THIMBLE_OLD, SADDLE_OLD, GUNNYBAG_OLD, GUNNYBAGSEAL_OLD, LABTESTING_DATE_OLD, METERRELOCATE_OLD, null);
        }
        
        /// <remarks/>
        public void MCR_Insert_INPUT_DataNEWAsync(
                    string ORDERNO, 
                    string DEVICENO, 
                    string OTHERSTICKER, 
                    string OTHER4, 
                    string INSTALLEDBUSBAR, 
                    string BUSBARSIZE, 
                    string BUSBARNUMBER, 
                    string DRUMSIZE, 
                    string OTHER5, 
                    string CABLESIZE2, 
                    string CABLEINSTALLTYPE, 
                    string RUNNINGLENGTHFROM, 
                    string RUNNINGLENGTHTO, 
                    string CABLELENGTH, 
                    string TERMINALSEAL1, 
                    string TERMINALSEAL2, 
                    string METERBOXSEAL1, 
                    string METERBOXSEAL2, 
                    string BUSBARSEAL1, 
                    string BUSBARSEAL2, 
                    string INSTALLEDLOCATION, 
                    string POLENUMBER, 
                    string OTHER6, 
                    string OTHER7, 
                    string OTHER8, 
                    string OTHER9, 
                    string OTHER10, 
                    string OTHER11, 
                    string TAKEPHOTOGRAPH, 
                    string METERDOWNLOAD, 
                    string DBLOCKED, 
                    string EARTHING, 
                    string HEIGHTOFMETER, 
                    string ANYJOINTS, 
                    string OVERHEADCABLE, 
                    string OVERHEADCABLEPOLE, 
                    string FLOWMADE, 
                    string ADDITIONALACCESSORIES, 
                    string IMAGE1, 
                    string IMAGE2, 
                    string IMAGE3, 
                    string IMEAGE_MCR, 
                    string IMAGE_METERTESTREPORT, 
                    string IMAGE_LABTESTINGREPORT, 
                    string IMAGE_SIGNATURE, 
                    string OUTPUTBUSLENGTH, 
                    string OUTPUTCABLELENGTH, 
                    string EARTHINGPOLE, 
                    string IMAGE4, 
                    string PUNCHED, 
                    string TAB_ID, 
                    string TAB_NAME, 
                    string GIS_LAT, 
                    string GIS_LONG, 
                    string GIS_STATUS, 
                    string IMEI_NO, 
                    string SUBMIT_DATETIME, 
                    string DRUMNUMBERBB, 
                    string VALINSTALLTYPEBB, 
                    string RUNNINGLENGTHFROMBB, 
                    string RUNNINGLENGTHTOBB, 
                    string ELCBSUBMITVAL, 
                    string METERSCANNEDVAL, 
                    string EXTRA1, 
                    string EXTRA2, 
                    string EXTRA3, 
                    string EXTRA4, 
                    string EXTRA5, 
                    string EXTRA6, 
                    string EXTRA7, 
                    string ORDER_TYPE, 
                    string PM_ACTIVITY, 
                    string OLD_M_READING, 
                    string MRKWH_OLD, 
                    string MRKW_OLD, 
                    string MRKVAH_OLD, 
                    string MRKVA_OLD, 
                    string IMAGE1_OLD, 
                    string IMAGE2_OLD, 
                    string IMAGE_SIGNATURE_OLD, 
                    string INSTALLEDCABLE_OLD, 
                    string CABLESIZE_OLD, 
                    string DRUMSIZE_OLD, 
                    string CABLEINSTALLTYPE_OLD, 
                    string RUNNINGLENGTHFROM_OLD, 
                    string RUNNINGLENGTHTO_OLD, 
                    string CABLELENGTH_OLD, 
                    string OUTPUTBUSLENGTH_OLD, 
                    string TERMINALSEAL1_OLD, 
                    string TERMINALSEAL2_OLD, 
                    string METERBOXSEAL1_OLD, 
                    string METERBOXSEAL2_OLD, 
                    string BUSBARSEAL1_OLD, 
                    string BUSBARSEAL2_OLD, 
                    string BOX_OLD, 
                    string GLANDS_OLD, 
                    string TCOVER_OLD, 
                    string BRASSSCREW_OLD, 
                    string BUSBAR_OLD, 
                    string THIMBLE_OLD, 
                    string SADDLE_OLD, 
                    string GUNNYBAG_OLD, 
                    string GUNNYBAGSEAL_OLD, 
                    string LABTESTING_DATE_OLD, 
                    string METERRELOCATE_OLD, 
                    object userState) {
            if ((this.MCR_Insert_INPUT_DataNEWOperationCompleted == null)) {
                this.MCR_Insert_INPUT_DataNEWOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_Insert_INPUT_DataNEWOperationCompleted);
            }
            this.InvokeAsync("MCR_Insert_INPUT_DataNEW", new object[] {
                        ORDERNO,
                        DEVICENO,
                        OTHERSTICKER,
                        OTHER4,
                        INSTALLEDBUSBAR,
                        BUSBARSIZE,
                        BUSBARNUMBER,
                        DRUMSIZE,
                        OTHER5,
                        CABLESIZE2,
                        CABLEINSTALLTYPE,
                        RUNNINGLENGTHFROM,
                        RUNNINGLENGTHTO,
                        CABLELENGTH,
                        TERMINALSEAL1,
                        TERMINALSEAL2,
                        METERBOXSEAL1,
                        METERBOXSEAL2,
                        BUSBARSEAL1,
                        BUSBARSEAL2,
                        INSTALLEDLOCATION,
                        POLENUMBER,
                        OTHER6,
                        OTHER7,
                        OTHER8,
                        OTHER9,
                        OTHER10,
                        OTHER11,
                        TAKEPHOTOGRAPH,
                        METERDOWNLOAD,
                        DBLOCKED,
                        EARTHING,
                        HEIGHTOFMETER,
                        ANYJOINTS,
                        OVERHEADCABLE,
                        OVERHEADCABLEPOLE,
                        FLOWMADE,
                        ADDITIONALACCESSORIES,
                        IMAGE1,
                        IMAGE2,
                        IMAGE3,
                        IMEAGE_MCR,
                        IMAGE_METERTESTREPORT,
                        IMAGE_LABTESTINGREPORT,
                        IMAGE_SIGNATURE,
                        OUTPUTBUSLENGTH,
                        OUTPUTCABLELENGTH,
                        EARTHINGPOLE,
                        IMAGE4,
                        PUNCHED,
                        TAB_ID,
                        TAB_NAME,
                        GIS_LAT,
                        GIS_LONG,
                        GIS_STATUS,
                        IMEI_NO,
                        SUBMIT_DATETIME,
                        DRUMNUMBERBB,
                        VALINSTALLTYPEBB,
                        RUNNINGLENGTHFROMBB,
                        RUNNINGLENGTHTOBB,
                        ELCBSUBMITVAL,
                        METERSCANNEDVAL,
                        EXTRA1,
                        EXTRA2,
                        EXTRA3,
                        EXTRA4,
                        EXTRA5,
                        EXTRA6,
                        EXTRA7,
                        ORDER_TYPE,
                        PM_ACTIVITY,
                        OLD_M_READING,
                        MRKWH_OLD,
                        MRKW_OLD,
                        MRKVAH_OLD,
                        MRKVA_OLD,
                        IMAGE1_OLD,
                        IMAGE2_OLD,
                        IMAGE_SIGNATURE_OLD,
                        INSTALLEDCABLE_OLD,
                        CABLESIZE_OLD,
                        DRUMSIZE_OLD,
                        CABLEINSTALLTYPE_OLD,
                        RUNNINGLENGTHFROM_OLD,
                        RUNNINGLENGTHTO_OLD,
                        CABLELENGTH_OLD,
                        OUTPUTBUSLENGTH_OLD,
                        TERMINALSEAL1_OLD,
                        TERMINALSEAL2_OLD,
                        METERBOXSEAL1_OLD,
                        METERBOXSEAL2_OLD,
                        BUSBARSEAL1_OLD,
                        BUSBARSEAL2_OLD,
                        BOX_OLD,
                        GLANDS_OLD,
                        TCOVER_OLD,
                        BRASSSCREW_OLD,
                        BUSBAR_OLD,
                        THIMBLE_OLD,
                        SADDLE_OLD,
                        GUNNYBAG_OLD,
                        GUNNYBAGSEAL_OLD,
                        LABTESTING_DATE_OLD,
                        METERRELOCATE_OLD}, this.MCR_Insert_INPUT_DataNEWOperationCompleted, userState);
        }
        
        private void OnMCR_Insert_INPUT_DataNEWOperationCompleted(object arg) {
            if ((this.MCR_Insert_INPUT_DataNEWCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_Insert_INPUT_DataNEWCompleted(this, new MCR_Insert_INPUT_DataNEWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_ValidateSEAL", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MCR_ValidateSEAL(string SealNo) {
            object[] results = this.Invoke("MCR_ValidateSEAL", new object[] {
                        SealNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_ValidateSEALAsync(string SealNo) {
            this.MCR_ValidateSEALAsync(SealNo, null);
        }
        
        /// <remarks/>
        public void MCR_ValidateSEALAsync(string SealNo, object userState) {
            if ((this.MCR_ValidateSEALOperationCompleted == null)) {
                this.MCR_ValidateSEALOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_ValidateSEALOperationCompleted);
            }
            this.InvokeAsync("MCR_ValidateSEAL", new object[] {
                        SealNo}, this.MCR_ValidateSEALOperationCompleted, userState);
        }
        
        private void OnMCR_ValidateSEALOperationCompleted(object arg) {
            if ((this.MCR_ValidateSEALCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_ValidateSEALCompleted(this, new MCR_ValidateSEALCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_Create_Installer_Data", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MCR_Create_Installer_Data(string INSTALLER_NAME, string INSTALLER_ID, string IMEI, string DIVISION, string VENDOR_ID) {
            object[] results = this.Invoke("MCR_Create_Installer_Data", new object[] {
                        INSTALLER_NAME,
                        INSTALLER_ID,
                        IMEI,
                        DIVISION,
                        VENDOR_ID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_Create_Installer_DataAsync(string INSTALLER_NAME, string INSTALLER_ID, string IMEI, string DIVISION, string VENDOR_ID) {
            this.MCR_Create_Installer_DataAsync(INSTALLER_NAME, INSTALLER_ID, IMEI, DIVISION, VENDOR_ID, null);
        }
        
        /// <remarks/>
        public void MCR_Create_Installer_DataAsync(string INSTALLER_NAME, string INSTALLER_ID, string IMEI, string DIVISION, string VENDOR_ID, object userState) {
            if ((this.MCR_Create_Installer_DataOperationCompleted == null)) {
                this.MCR_Create_Installer_DataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_Create_Installer_DataOperationCompleted);
            }
            this.InvokeAsync("MCR_Create_Installer_Data", new object[] {
                        INSTALLER_NAME,
                        INSTALLER_ID,
                        IMEI,
                        DIVISION,
                        VENDOR_ID}, this.MCR_Create_Installer_DataOperationCompleted, userState);
        }
        
        private void OnMCR_Create_Installer_DataOperationCompleted(object arg) {
            if ((this.MCR_Create_Installer_DataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_Create_Installer_DataCompleted(this, new MCR_Create_Installer_DataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_GetInstaller_Data", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable MCR_GetInstaller_Data(string VENDOR_ID) {
            object[] results = this.Invoke("MCR_GetInstaller_Data", new object[] {
                        VENDOR_ID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_GetInstaller_DataAsync(string VENDOR_ID) {
            this.MCR_GetInstaller_DataAsync(VENDOR_ID, null);
        }
        
        /// <remarks/>
        public void MCR_GetInstaller_DataAsync(string VENDOR_ID, object userState) {
            if ((this.MCR_GetInstaller_DataOperationCompleted == null)) {
                this.MCR_GetInstaller_DataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_GetInstaller_DataOperationCompleted);
            }
            this.InvokeAsync("MCR_GetInstaller_Data", new object[] {
                        VENDOR_ID}, this.MCR_GetInstaller_DataOperationCompleted, userState);
        }
        
        private void OnMCR_GetInstaller_DataOperationCompleted(object arg) {
            if ((this.MCR_GetInstaller_DataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_GetInstaller_DataCompleted(this, new MCR_GetInstaller_DataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_OrderAssign", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MCR_OrderAssign(string ORDERNO, string METERNO, string VENDOR_ID, string INSTALLER_ID) {
            object[] results = this.Invoke("MCR_OrderAssign", new object[] {
                        ORDERNO,
                        METERNO,
                        VENDOR_ID,
                        INSTALLER_ID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_OrderAssignAsync(string ORDERNO, string METERNO, string VENDOR_ID, string INSTALLER_ID) {
            this.MCR_OrderAssignAsync(ORDERNO, METERNO, VENDOR_ID, INSTALLER_ID, null);
        }
        
        /// <remarks/>
        public void MCR_OrderAssignAsync(string ORDERNO, string METERNO, string VENDOR_ID, string INSTALLER_ID, object userState) {
            if ((this.MCR_OrderAssignOperationCompleted == null)) {
                this.MCR_OrderAssignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_OrderAssignOperationCompleted);
            }
            this.InvokeAsync("MCR_OrderAssign", new object[] {
                        ORDERNO,
                        METERNO,
                        VENDOR_ID,
                        INSTALLER_ID}, this.MCR_OrderAssignOperationCompleted, userState);
        }
        
        private void OnMCR_OrderAssignOperationCompleted(object arg) {
            if ((this.MCR_OrderAssignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_OrderAssignCompleted(this, new MCR_OrderAssignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_Password_Update", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MCR_Password_Update(string strEmpId, string strOldPass, string strNewPass) {
            object[] results = this.Invoke("MCR_Password_Update", new object[] {
                        strEmpId,
                        strOldPass,
                        strNewPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_Password_UpdateAsync(string strEmpId, string strOldPass, string strNewPass) {
            this.MCR_Password_UpdateAsync(strEmpId, strOldPass, strNewPass, null);
        }
        
        /// <remarks/>
        public void MCR_Password_UpdateAsync(string strEmpId, string strOldPass, string strNewPass, object userState) {
            if ((this.MCR_Password_UpdateOperationCompleted == null)) {
                this.MCR_Password_UpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_Password_UpdateOperationCompleted);
            }
            this.InvokeAsync("MCR_Password_Update", new object[] {
                        strEmpId,
                        strOldPass,
                        strNewPass}, this.MCR_Password_UpdateOperationCompleted, userState);
        }
        
        private void OnMCR_Password_UpdateOperationCompleted(object arg) {
            if ((this.MCR_Password_UpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_Password_UpdateCompleted(this, new MCR_Password_UpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_GetSeal_Details", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable MCR_GetSeal_Details(string Installer_ID) {
            object[] results = this.Invoke("MCR_GetSeal_Details", new object[] {
                        Installer_ID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_GetSeal_DetailsAsync(string Installer_ID) {
            this.MCR_GetSeal_DetailsAsync(Installer_ID, null);
        }
        
        /// <remarks/>
        public void MCR_GetSeal_DetailsAsync(string Installer_ID, object userState) {
            if ((this.MCR_GetSeal_DetailsOperationCompleted == null)) {
                this.MCR_GetSeal_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_GetSeal_DetailsOperationCompleted);
            }
            this.InvokeAsync("MCR_GetSeal_Details", new object[] {
                        Installer_ID}, this.MCR_GetSeal_DetailsOperationCompleted, userState);
        }
        
        private void OnMCR_GetSeal_DetailsOperationCompleted(object arg) {
            if ((this.MCR_GetSeal_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_GetSeal_DetailsCompleted(this, new MCR_GetSeal_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_GetMeter_Details", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable MCR_GetMeter_Details(string Installer_ID) {
            object[] results = this.Invoke("MCR_GetMeter_Details", new object[] {
                        Installer_ID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_GetMeter_DetailsAsync(string Installer_ID) {
            this.MCR_GetMeter_DetailsAsync(Installer_ID, null);
        }
        
        /// <remarks/>
        public void MCR_GetMeter_DetailsAsync(string Installer_ID, object userState) {
            if ((this.MCR_GetMeter_DetailsOperationCompleted == null)) {
                this.MCR_GetMeter_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_GetMeter_DetailsOperationCompleted);
            }
            this.InvokeAsync("MCR_GetMeter_Details", new object[] {
                        Installer_ID}, this.MCR_GetMeter_DetailsOperationCompleted, userState);
        }
        
        private void OnMCR_GetMeter_DetailsOperationCompleted(object arg) {
            if ((this.MCR_GetMeter_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_GetMeter_DetailsCompleted(this, new MCR_GetMeter_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_OrderCancel", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string MCR_OrderCancel(string Installer_ID, string Order_ID, string Reason, string Image, string Remarks, string strCustName, string strCustNo, string strCustDate) {
            object[] results = this.Invoke("MCR_OrderCancel", new object[] {
                        Installer_ID,
                        Order_ID,
                        Reason,
                        Image,
                        Remarks,
                        strCustName,
                        strCustNo,
                        strCustDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_OrderCancelAsync(string Installer_ID, string Order_ID, string Reason, string Image, string Remarks, string strCustName, string strCustNo, string strCustDate) {
            this.MCR_OrderCancelAsync(Installer_ID, Order_ID, Reason, Image, Remarks, strCustName, strCustNo, strCustDate, null);
        }
        
        /// <remarks/>
        public void MCR_OrderCancelAsync(string Installer_ID, string Order_ID, string Reason, string Image, string Remarks, string strCustName, string strCustNo, string strCustDate, object userState) {
            if ((this.MCR_OrderCancelOperationCompleted == null)) {
                this.MCR_OrderCancelOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_OrderCancelOperationCompleted);
            }
            this.InvokeAsync("MCR_OrderCancel", new object[] {
                        Installer_ID,
                        Order_ID,
                        Reason,
                        Image,
                        Remarks,
                        strCustName,
                        strCustNo,
                        strCustDate}, this.MCR_OrderCancelOperationCompleted, userState);
        }
        
        private void OnMCR_OrderCancelOperationCompleted(object arg) {
            if ((this.MCR_OrderCancelCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_OrderCancelCompleted(this, new MCR_OrderCancelCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_Insert_INPUT_Data_RV", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MCR_Insert_INPUT_Data_RV(
                    string ORDER_NO, 
                    string ORDER_TYPE, 
                    string PM_ACTIVITY, 
                    string DEVICE_NO, 
                    string ACTVTY_RSN, 
                    string TF_STCKR_STUS, 
                    string TF_STCKR_NO, 
                    string ELCB_INSLD_ON_SITE, 
                    string BUS_BAR_INSTALLD, 
                    string BUS_BAR_SIZE, 
                    string BUS_BAR_NO, 
                    string BUS_BAR_CBL_SIZE, 
                    string BUS_BAR_DRM_NO, 
                    string BUS_BAR_CBL_INSTL_TYP, 
                    string BUS_BR_RUN_LENTH_FRM, 
                    string BUS_BR_RUN_LENTH_TO, 
                    string BUS_BR_CBL_LNGTH, 
                    string BUS_BAR_B_OR_C, 
                    string HV_U_INSTALL_NW_CBL, 
                    string CBL_SIZE, 
                    string CABLEINSTALLTYPE, 
                    string CBL_RUN_LENTH_FRM, 
                    string CBL_RUN_LENTH_TO, 
                    string CABLELENGTH, 
                    string CBL_DRM_NUMBR, 
                    string OUTPUTCABLELENGTH, 
                    string TERMINALSEAL1, 
                    string TERMINALSEAL2, 
                    string METERBOXSEAL1, 
                    string METERBOXSEAL2, 
                    string BUSBARSEAL1, 
                    string BUSBARSEAL2, 
                    string MTR_MRKWH, 
                    string MTR_MRKW, 
                    string MTR_MRKVAH, 
                    string MTR_MRKVA, 
                    string QC_PHOTO_TKN, 
                    string QC_METERDOWNLOAD, 
                    string QC_DBLOCKED, 
                    string QC_EARTHING_CONS, 
                    string QC_EARTHING_POLE, 
                    string QC_HEIGHTOFMETER, 
                    string QC_ANYJOINTS, 
                    string QC_FIXTR_INSL_CONS, 
                    string QC_FIXTR_INSL_POLE, 
                    string QC_FLOWMADE, 
                    string QC_ADDNL_ACC_USD, 
                    string QC_RMKS, 
                    string ORDER_STATUS, 
                    string CANCEL_RMKS, 
                    string ACTIVITY_DATE, 
                    string INSTALLEDLOCATION, 
                    string METERSCANNEDVAL, 
                    string MTR_LOC_SHIFT, 
                    string RMVD_CBL_SIZE, 
                    string RMVD_CBL_RUN_LENTH_FRM, 
                    string RMVD_CBL_RUN_LENTH_TO, 
                    string RMVD_CBL_LENTH, 
                    string RMVD_TRMNL_SEAL1, 
                    string RMVD_TRMNL_SEAL2, 
                    string RMVD_MTR_BOX_SEAL1, 
                    string RMVD_MTR_BOX_SEAL2, 
                    string RMVD_BUS_BAR_SEAL1, 
                    string RMVD_BUS_BAR_SEAL2, 
                    string RMVD_MTR_BOX, 
                    string RMVD_MTR_GLND, 
                    string RMVD_MTR_T_COVR, 
                    string RMVD_MTR_BRS_SCRW, 
                    string RMVD_MTR_BUS_BAR, 
                    string RMVD_MTR_THMBL_LUG, 
                    string RMVD_MTR_SADL, 
                    string RMVD_MTR_BASE_PLT, 
                    string OLD_MTR_MRKWH, 
                    string OLD_MTR_MRKW, 
                    string OLD_MTR_MRKVAH, 
                    string OLD_MTR_MRKVA, 
                    string OLD_MTR_STATUS, 
                    string OLD_MTR_IF_AVBL, 
                    string OLD_MTR_IF_NOT_AVBL, 
                    string GUNNY_BAG_NO, 
                    string GUNNY_BAG_SEAL_NO, 
                    string LAB_TSTNG_DT, 
                    string LAB_TSTNG_NTC, 
                    string MTR_LOC_RELOCT, 
                    string TAB_ID, 
                    string TAB_NAME, 
                    string GIS_LAT, 
                    string GIS_LONG, 
                    string GIS_STATUS, 
                    string IMEI_NO, 
                    string SUBMIT_DATETIME, 
                    string POLENUMBER, 
                    string PUNCH_MODE) {
            object[] results = this.Invoke("MCR_Insert_INPUT_Data_RV", new object[] {
                        ORDER_NO,
                        ORDER_TYPE,
                        PM_ACTIVITY,
                        DEVICE_NO,
                        ACTVTY_RSN,
                        TF_STCKR_STUS,
                        TF_STCKR_NO,
                        ELCB_INSLD_ON_SITE,
                        BUS_BAR_INSTALLD,
                        BUS_BAR_SIZE,
                        BUS_BAR_NO,
                        BUS_BAR_CBL_SIZE,
                        BUS_BAR_DRM_NO,
                        BUS_BAR_CBL_INSTL_TYP,
                        BUS_BR_RUN_LENTH_FRM,
                        BUS_BR_RUN_LENTH_TO,
                        BUS_BR_CBL_LNGTH,
                        BUS_BAR_B_OR_C,
                        HV_U_INSTALL_NW_CBL,
                        CBL_SIZE,
                        CABLEINSTALLTYPE,
                        CBL_RUN_LENTH_FRM,
                        CBL_RUN_LENTH_TO,
                        CABLELENGTH,
                        CBL_DRM_NUMBR,
                        OUTPUTCABLELENGTH,
                        TERMINALSEAL1,
                        TERMINALSEAL2,
                        METERBOXSEAL1,
                        METERBOXSEAL2,
                        BUSBARSEAL1,
                        BUSBARSEAL2,
                        MTR_MRKWH,
                        MTR_MRKW,
                        MTR_MRKVAH,
                        MTR_MRKVA,
                        QC_PHOTO_TKN,
                        QC_METERDOWNLOAD,
                        QC_DBLOCKED,
                        QC_EARTHING_CONS,
                        QC_EARTHING_POLE,
                        QC_HEIGHTOFMETER,
                        QC_ANYJOINTS,
                        QC_FIXTR_INSL_CONS,
                        QC_FIXTR_INSL_POLE,
                        QC_FLOWMADE,
                        QC_ADDNL_ACC_USD,
                        QC_RMKS,
                        ORDER_STATUS,
                        CANCEL_RMKS,
                        ACTIVITY_DATE,
                        INSTALLEDLOCATION,
                        METERSCANNEDVAL,
                        MTR_LOC_SHIFT,
                        RMVD_CBL_SIZE,
                        RMVD_CBL_RUN_LENTH_FRM,
                        RMVD_CBL_RUN_LENTH_TO,
                        RMVD_CBL_LENTH,
                        RMVD_TRMNL_SEAL1,
                        RMVD_TRMNL_SEAL2,
                        RMVD_MTR_BOX_SEAL1,
                        RMVD_MTR_BOX_SEAL2,
                        RMVD_BUS_BAR_SEAL1,
                        RMVD_BUS_BAR_SEAL2,
                        RMVD_MTR_BOX,
                        RMVD_MTR_GLND,
                        RMVD_MTR_T_COVR,
                        RMVD_MTR_BRS_SCRW,
                        RMVD_MTR_BUS_BAR,
                        RMVD_MTR_THMBL_LUG,
                        RMVD_MTR_SADL,
                        RMVD_MTR_BASE_PLT,
                        OLD_MTR_MRKWH,
                        OLD_MTR_MRKW,
                        OLD_MTR_MRKVAH,
                        OLD_MTR_MRKVA,
                        OLD_MTR_STATUS,
                        OLD_MTR_IF_AVBL,
                        OLD_MTR_IF_NOT_AVBL,
                        GUNNY_BAG_NO,
                        GUNNY_BAG_SEAL_NO,
                        LAB_TSTNG_DT,
                        LAB_TSTNG_NTC,
                        MTR_LOC_RELOCT,
                        TAB_ID,
                        TAB_NAME,
                        GIS_LAT,
                        GIS_LONG,
                        GIS_STATUS,
                        IMEI_NO,
                        SUBMIT_DATETIME,
                        POLENUMBER,
                        PUNCH_MODE});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_Insert_INPUT_Data_RVAsync(
                    string ORDER_NO, 
                    string ORDER_TYPE, 
                    string PM_ACTIVITY, 
                    string DEVICE_NO, 
                    string ACTVTY_RSN, 
                    string TF_STCKR_STUS, 
                    string TF_STCKR_NO, 
                    string ELCB_INSLD_ON_SITE, 
                    string BUS_BAR_INSTALLD, 
                    string BUS_BAR_SIZE, 
                    string BUS_BAR_NO, 
                    string BUS_BAR_CBL_SIZE, 
                    string BUS_BAR_DRM_NO, 
                    string BUS_BAR_CBL_INSTL_TYP, 
                    string BUS_BR_RUN_LENTH_FRM, 
                    string BUS_BR_RUN_LENTH_TO, 
                    string BUS_BR_CBL_LNGTH, 
                    string BUS_BAR_B_OR_C, 
                    string HV_U_INSTALL_NW_CBL, 
                    string CBL_SIZE, 
                    string CABLEINSTALLTYPE, 
                    string CBL_RUN_LENTH_FRM, 
                    string CBL_RUN_LENTH_TO, 
                    string CABLELENGTH, 
                    string CBL_DRM_NUMBR, 
                    string OUTPUTCABLELENGTH, 
                    string TERMINALSEAL1, 
                    string TERMINALSEAL2, 
                    string METERBOXSEAL1, 
                    string METERBOXSEAL2, 
                    string BUSBARSEAL1, 
                    string BUSBARSEAL2, 
                    string MTR_MRKWH, 
                    string MTR_MRKW, 
                    string MTR_MRKVAH, 
                    string MTR_MRKVA, 
                    string QC_PHOTO_TKN, 
                    string QC_METERDOWNLOAD, 
                    string QC_DBLOCKED, 
                    string QC_EARTHING_CONS, 
                    string QC_EARTHING_POLE, 
                    string QC_HEIGHTOFMETER, 
                    string QC_ANYJOINTS, 
                    string QC_FIXTR_INSL_CONS, 
                    string QC_FIXTR_INSL_POLE, 
                    string QC_FLOWMADE, 
                    string QC_ADDNL_ACC_USD, 
                    string QC_RMKS, 
                    string ORDER_STATUS, 
                    string CANCEL_RMKS, 
                    string ACTIVITY_DATE, 
                    string INSTALLEDLOCATION, 
                    string METERSCANNEDVAL, 
                    string MTR_LOC_SHIFT, 
                    string RMVD_CBL_SIZE, 
                    string RMVD_CBL_RUN_LENTH_FRM, 
                    string RMVD_CBL_RUN_LENTH_TO, 
                    string RMVD_CBL_LENTH, 
                    string RMVD_TRMNL_SEAL1, 
                    string RMVD_TRMNL_SEAL2, 
                    string RMVD_MTR_BOX_SEAL1, 
                    string RMVD_MTR_BOX_SEAL2, 
                    string RMVD_BUS_BAR_SEAL1, 
                    string RMVD_BUS_BAR_SEAL2, 
                    string RMVD_MTR_BOX, 
                    string RMVD_MTR_GLND, 
                    string RMVD_MTR_T_COVR, 
                    string RMVD_MTR_BRS_SCRW, 
                    string RMVD_MTR_BUS_BAR, 
                    string RMVD_MTR_THMBL_LUG, 
                    string RMVD_MTR_SADL, 
                    string RMVD_MTR_BASE_PLT, 
                    string OLD_MTR_MRKWH, 
                    string OLD_MTR_MRKW, 
                    string OLD_MTR_MRKVAH, 
                    string OLD_MTR_MRKVA, 
                    string OLD_MTR_STATUS, 
                    string OLD_MTR_IF_AVBL, 
                    string OLD_MTR_IF_NOT_AVBL, 
                    string GUNNY_BAG_NO, 
                    string GUNNY_BAG_SEAL_NO, 
                    string LAB_TSTNG_DT, 
                    string LAB_TSTNG_NTC, 
                    string MTR_LOC_RELOCT, 
                    string TAB_ID, 
                    string TAB_NAME, 
                    string GIS_LAT, 
                    string GIS_LONG, 
                    string GIS_STATUS, 
                    string IMEI_NO, 
                    string SUBMIT_DATETIME, 
                    string POLENUMBER, 
                    string PUNCH_MODE) {
            this.MCR_Insert_INPUT_Data_RVAsync(ORDER_NO, ORDER_TYPE, PM_ACTIVITY, DEVICE_NO, ACTVTY_RSN, TF_STCKR_STUS, TF_STCKR_NO, ELCB_INSLD_ON_SITE, BUS_BAR_INSTALLD, BUS_BAR_SIZE, BUS_BAR_NO, BUS_BAR_CBL_SIZE, BUS_BAR_DRM_NO, BUS_BAR_CBL_INSTL_TYP, BUS_BR_RUN_LENTH_FRM, BUS_BR_RUN_LENTH_TO, BUS_BR_CBL_LNGTH, BUS_BAR_B_OR_C, HV_U_INSTALL_NW_CBL, CBL_SIZE, CABLEINSTALLTYPE, CBL_RUN_LENTH_FRM, CBL_RUN_LENTH_TO, CABLELENGTH, CBL_DRM_NUMBR, OUTPUTCABLELENGTH, TERMINALSEAL1, TERMINALSEAL2, METERBOXSEAL1, METERBOXSEAL2, BUSBARSEAL1, BUSBARSEAL2, MTR_MRKWH, MTR_MRKW, MTR_MRKVAH, MTR_MRKVA, QC_PHOTO_TKN, QC_METERDOWNLOAD, QC_DBLOCKED, QC_EARTHING_CONS, QC_EARTHING_POLE, QC_HEIGHTOFMETER, QC_ANYJOINTS, QC_FIXTR_INSL_CONS, QC_FIXTR_INSL_POLE, QC_FLOWMADE, QC_ADDNL_ACC_USD, QC_RMKS, ORDER_STATUS, CANCEL_RMKS, ACTIVITY_DATE, INSTALLEDLOCATION, METERSCANNEDVAL, MTR_LOC_SHIFT, RMVD_CBL_SIZE, RMVD_CBL_RUN_LENTH_FRM, RMVD_CBL_RUN_LENTH_TO, RMVD_CBL_LENTH, RMVD_TRMNL_SEAL1, RMVD_TRMNL_SEAL2, RMVD_MTR_BOX_SEAL1, RMVD_MTR_BOX_SEAL2, RMVD_BUS_BAR_SEAL1, RMVD_BUS_BAR_SEAL2, RMVD_MTR_BOX, RMVD_MTR_GLND, RMVD_MTR_T_COVR, RMVD_MTR_BRS_SCRW, RMVD_MTR_BUS_BAR, RMVD_MTR_THMBL_LUG, RMVD_MTR_SADL, RMVD_MTR_BASE_PLT, OLD_MTR_MRKWH, OLD_MTR_MRKW, OLD_MTR_MRKVAH, OLD_MTR_MRKVA, OLD_MTR_STATUS, OLD_MTR_IF_AVBL, OLD_MTR_IF_NOT_AVBL, GUNNY_BAG_NO, GUNNY_BAG_SEAL_NO, LAB_TSTNG_DT, LAB_TSTNG_NTC, MTR_LOC_RELOCT, TAB_ID, TAB_NAME, GIS_LAT, GIS_LONG, GIS_STATUS, IMEI_NO, SUBMIT_DATETIME, POLENUMBER, PUNCH_MODE, null);
        }
        
        /// <remarks/>
        public void MCR_Insert_INPUT_Data_RVAsync(
                    string ORDER_NO, 
                    string ORDER_TYPE, 
                    string PM_ACTIVITY, 
                    string DEVICE_NO, 
                    string ACTVTY_RSN, 
                    string TF_STCKR_STUS, 
                    string TF_STCKR_NO, 
                    string ELCB_INSLD_ON_SITE, 
                    string BUS_BAR_INSTALLD, 
                    string BUS_BAR_SIZE, 
                    string BUS_BAR_NO, 
                    string BUS_BAR_CBL_SIZE, 
                    string BUS_BAR_DRM_NO, 
                    string BUS_BAR_CBL_INSTL_TYP, 
                    string BUS_BR_RUN_LENTH_FRM, 
                    string BUS_BR_RUN_LENTH_TO, 
                    string BUS_BR_CBL_LNGTH, 
                    string BUS_BAR_B_OR_C, 
                    string HV_U_INSTALL_NW_CBL, 
                    string CBL_SIZE, 
                    string CABLEINSTALLTYPE, 
                    string CBL_RUN_LENTH_FRM, 
                    string CBL_RUN_LENTH_TO, 
                    string CABLELENGTH, 
                    string CBL_DRM_NUMBR, 
                    string OUTPUTCABLELENGTH, 
                    string TERMINALSEAL1, 
                    string TERMINALSEAL2, 
                    string METERBOXSEAL1, 
                    string METERBOXSEAL2, 
                    string BUSBARSEAL1, 
                    string BUSBARSEAL2, 
                    string MTR_MRKWH, 
                    string MTR_MRKW, 
                    string MTR_MRKVAH, 
                    string MTR_MRKVA, 
                    string QC_PHOTO_TKN, 
                    string QC_METERDOWNLOAD, 
                    string QC_DBLOCKED, 
                    string QC_EARTHING_CONS, 
                    string QC_EARTHING_POLE, 
                    string QC_HEIGHTOFMETER, 
                    string QC_ANYJOINTS, 
                    string QC_FIXTR_INSL_CONS, 
                    string QC_FIXTR_INSL_POLE, 
                    string QC_FLOWMADE, 
                    string QC_ADDNL_ACC_USD, 
                    string QC_RMKS, 
                    string ORDER_STATUS, 
                    string CANCEL_RMKS, 
                    string ACTIVITY_DATE, 
                    string INSTALLEDLOCATION, 
                    string METERSCANNEDVAL, 
                    string MTR_LOC_SHIFT, 
                    string RMVD_CBL_SIZE, 
                    string RMVD_CBL_RUN_LENTH_FRM, 
                    string RMVD_CBL_RUN_LENTH_TO, 
                    string RMVD_CBL_LENTH, 
                    string RMVD_TRMNL_SEAL1, 
                    string RMVD_TRMNL_SEAL2, 
                    string RMVD_MTR_BOX_SEAL1, 
                    string RMVD_MTR_BOX_SEAL2, 
                    string RMVD_BUS_BAR_SEAL1, 
                    string RMVD_BUS_BAR_SEAL2, 
                    string RMVD_MTR_BOX, 
                    string RMVD_MTR_GLND, 
                    string RMVD_MTR_T_COVR, 
                    string RMVD_MTR_BRS_SCRW, 
                    string RMVD_MTR_BUS_BAR, 
                    string RMVD_MTR_THMBL_LUG, 
                    string RMVD_MTR_SADL, 
                    string RMVD_MTR_BASE_PLT, 
                    string OLD_MTR_MRKWH, 
                    string OLD_MTR_MRKW, 
                    string OLD_MTR_MRKVAH, 
                    string OLD_MTR_MRKVA, 
                    string OLD_MTR_STATUS, 
                    string OLD_MTR_IF_AVBL, 
                    string OLD_MTR_IF_NOT_AVBL, 
                    string GUNNY_BAG_NO, 
                    string GUNNY_BAG_SEAL_NO, 
                    string LAB_TSTNG_DT, 
                    string LAB_TSTNG_NTC, 
                    string MTR_LOC_RELOCT, 
                    string TAB_ID, 
                    string TAB_NAME, 
                    string GIS_LAT, 
                    string GIS_LONG, 
                    string GIS_STATUS, 
                    string IMEI_NO, 
                    string SUBMIT_DATETIME, 
                    string POLENUMBER, 
                    string PUNCH_MODE, 
                    object userState) {
            if ((this.MCR_Insert_INPUT_Data_RVOperationCompleted == null)) {
                this.MCR_Insert_INPUT_Data_RVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_Insert_INPUT_Data_RVOperationCompleted);
            }
            this.InvokeAsync("MCR_Insert_INPUT_Data_RV", new object[] {
                        ORDER_NO,
                        ORDER_TYPE,
                        PM_ACTIVITY,
                        DEVICE_NO,
                        ACTVTY_RSN,
                        TF_STCKR_STUS,
                        TF_STCKR_NO,
                        ELCB_INSLD_ON_SITE,
                        BUS_BAR_INSTALLD,
                        BUS_BAR_SIZE,
                        BUS_BAR_NO,
                        BUS_BAR_CBL_SIZE,
                        BUS_BAR_DRM_NO,
                        BUS_BAR_CBL_INSTL_TYP,
                        BUS_BR_RUN_LENTH_FRM,
                        BUS_BR_RUN_LENTH_TO,
                        BUS_BR_CBL_LNGTH,
                        BUS_BAR_B_OR_C,
                        HV_U_INSTALL_NW_CBL,
                        CBL_SIZE,
                        CABLEINSTALLTYPE,
                        CBL_RUN_LENTH_FRM,
                        CBL_RUN_LENTH_TO,
                        CABLELENGTH,
                        CBL_DRM_NUMBR,
                        OUTPUTCABLELENGTH,
                        TERMINALSEAL1,
                        TERMINALSEAL2,
                        METERBOXSEAL1,
                        METERBOXSEAL2,
                        BUSBARSEAL1,
                        BUSBARSEAL2,
                        MTR_MRKWH,
                        MTR_MRKW,
                        MTR_MRKVAH,
                        MTR_MRKVA,
                        QC_PHOTO_TKN,
                        QC_METERDOWNLOAD,
                        QC_DBLOCKED,
                        QC_EARTHING_CONS,
                        QC_EARTHING_POLE,
                        QC_HEIGHTOFMETER,
                        QC_ANYJOINTS,
                        QC_FIXTR_INSL_CONS,
                        QC_FIXTR_INSL_POLE,
                        QC_FLOWMADE,
                        QC_ADDNL_ACC_USD,
                        QC_RMKS,
                        ORDER_STATUS,
                        CANCEL_RMKS,
                        ACTIVITY_DATE,
                        INSTALLEDLOCATION,
                        METERSCANNEDVAL,
                        MTR_LOC_SHIFT,
                        RMVD_CBL_SIZE,
                        RMVD_CBL_RUN_LENTH_FRM,
                        RMVD_CBL_RUN_LENTH_TO,
                        RMVD_CBL_LENTH,
                        RMVD_TRMNL_SEAL1,
                        RMVD_TRMNL_SEAL2,
                        RMVD_MTR_BOX_SEAL1,
                        RMVD_MTR_BOX_SEAL2,
                        RMVD_BUS_BAR_SEAL1,
                        RMVD_BUS_BAR_SEAL2,
                        RMVD_MTR_BOX,
                        RMVD_MTR_GLND,
                        RMVD_MTR_T_COVR,
                        RMVD_MTR_BRS_SCRW,
                        RMVD_MTR_BUS_BAR,
                        RMVD_MTR_THMBL_LUG,
                        RMVD_MTR_SADL,
                        RMVD_MTR_BASE_PLT,
                        OLD_MTR_MRKWH,
                        OLD_MTR_MRKW,
                        OLD_MTR_MRKVAH,
                        OLD_MTR_MRKVA,
                        OLD_MTR_STATUS,
                        OLD_MTR_IF_AVBL,
                        OLD_MTR_IF_NOT_AVBL,
                        GUNNY_BAG_NO,
                        GUNNY_BAG_SEAL_NO,
                        LAB_TSTNG_DT,
                        LAB_TSTNG_NTC,
                        MTR_LOC_RELOCT,
                        TAB_ID,
                        TAB_NAME,
                        GIS_LAT,
                        GIS_LONG,
                        GIS_STATUS,
                        IMEI_NO,
                        SUBMIT_DATETIME,
                        POLENUMBER,
                        PUNCH_MODE}, this.MCR_Insert_INPUT_Data_RVOperationCompleted, userState);
        }
        
        private void OnMCR_Insert_INPUT_Data_RVOperationCompleted(object arg) {
            if ((this.MCR_Insert_INPUT_Data_RVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_Insert_INPUT_Data_RVCompleted(this, new MCR_Insert_INPUT_Data_RVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_Insert_INPUT_Data_Img_RV", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MCR_Insert_INPUT_Data_Img_RV(string ORDER_NO, string DEVICE_NO, string OTHERSTICKER, string MTR_PHOTO, string CMPLT_MTR_INTALL_PHOTO, string MCR_PHOTO, string MCR_CONS_SIGN_PHOTO, string MCR_POLE_N_PHOTO, string MCR_OTHR_PHOTO, string MCR_TST_RPT_PHOTO, string MCR_LAB_TST_RPT_PHOTO, string PREMISE_PHOTO, string RMVD_MTR_PHOTO, string RMVD_CMPLT_MTR_INTALL_PHOTO) {
            object[] results = this.Invoke("MCR_Insert_INPUT_Data_Img_RV", new object[] {
                        ORDER_NO,
                        DEVICE_NO,
                        OTHERSTICKER,
                        MTR_PHOTO,
                        CMPLT_MTR_INTALL_PHOTO,
                        MCR_PHOTO,
                        MCR_CONS_SIGN_PHOTO,
                        MCR_POLE_N_PHOTO,
                        MCR_OTHR_PHOTO,
                        MCR_TST_RPT_PHOTO,
                        MCR_LAB_TST_RPT_PHOTO,
                        PREMISE_PHOTO,
                        RMVD_MTR_PHOTO,
                        RMVD_CMPLT_MTR_INTALL_PHOTO});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_Insert_INPUT_Data_Img_RVAsync(string ORDER_NO, string DEVICE_NO, string OTHERSTICKER, string MTR_PHOTO, string CMPLT_MTR_INTALL_PHOTO, string MCR_PHOTO, string MCR_CONS_SIGN_PHOTO, string MCR_POLE_N_PHOTO, string MCR_OTHR_PHOTO, string MCR_TST_RPT_PHOTO, string MCR_LAB_TST_RPT_PHOTO, string PREMISE_PHOTO, string RMVD_MTR_PHOTO, string RMVD_CMPLT_MTR_INTALL_PHOTO) {
            this.MCR_Insert_INPUT_Data_Img_RVAsync(ORDER_NO, DEVICE_NO, OTHERSTICKER, MTR_PHOTO, CMPLT_MTR_INTALL_PHOTO, MCR_PHOTO, MCR_CONS_SIGN_PHOTO, MCR_POLE_N_PHOTO, MCR_OTHR_PHOTO, MCR_TST_RPT_PHOTO, MCR_LAB_TST_RPT_PHOTO, PREMISE_PHOTO, RMVD_MTR_PHOTO, RMVD_CMPLT_MTR_INTALL_PHOTO, null);
        }
        
        /// <remarks/>
        public void MCR_Insert_INPUT_Data_Img_RVAsync(string ORDER_NO, string DEVICE_NO, string OTHERSTICKER, string MTR_PHOTO, string CMPLT_MTR_INTALL_PHOTO, string MCR_PHOTO, string MCR_CONS_SIGN_PHOTO, string MCR_POLE_N_PHOTO, string MCR_OTHR_PHOTO, string MCR_TST_RPT_PHOTO, string MCR_LAB_TST_RPT_PHOTO, string PREMISE_PHOTO, string RMVD_MTR_PHOTO, string RMVD_CMPLT_MTR_INTALL_PHOTO, object userState) {
            if ((this.MCR_Insert_INPUT_Data_Img_RVOperationCompleted == null)) {
                this.MCR_Insert_INPUT_Data_Img_RVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_Insert_INPUT_Data_Img_RVOperationCompleted);
            }
            this.InvokeAsync("MCR_Insert_INPUT_Data_Img_RV", new object[] {
                        ORDER_NO,
                        DEVICE_NO,
                        OTHERSTICKER,
                        MTR_PHOTO,
                        CMPLT_MTR_INTALL_PHOTO,
                        MCR_PHOTO,
                        MCR_CONS_SIGN_PHOTO,
                        MCR_POLE_N_PHOTO,
                        MCR_OTHR_PHOTO,
                        MCR_TST_RPT_PHOTO,
                        MCR_LAB_TST_RPT_PHOTO,
                        PREMISE_PHOTO,
                        RMVD_MTR_PHOTO,
                        RMVD_CMPLT_MTR_INTALL_PHOTO}, this.MCR_Insert_INPUT_Data_Img_RVOperationCompleted, userState);
        }
        
        private void OnMCR_Insert_INPUT_Data_Img_RVOperationCompleted(object arg) {
            if ((this.MCR_Insert_INPUT_Data_Img_RVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_Insert_INPUT_Data_Img_RVCompleted(this, new MCR_Insert_INPUT_Data_Img_RVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_Insert_INPUT_Data_RV_NEW", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MCR_Insert_INPUT_Data_RV_NEW(
                    string ORDER_NO, 
                    string ORDER_TYPE, 
                    string PM_ACTIVITY, 
                    string DEVICE_NO, 
                    string ACTVTY_RSN, 
                    string TF_STCKR_STUS, 
                    string TF_STCKR_NO, 
                    string ELCB_INSLD_ON_SITE, 
                    string BUS_BAR_INSTALLD, 
                    string BUS_BAR_SIZE, 
                    string BUS_BAR_NO, 
                    string BUS_BAR_CBL_SIZE, 
                    string BUS_BAR_DRM_NO, 
                    string BUS_BAR_CBL_INSTL_TYP, 
                    string BUS_BR_RUN_LENTH_FRM, 
                    string BUS_BR_RUN_LENTH_TO, 
                    string BUS_BR_CBL_LNGTH, 
                    string BUS_BAR_B_OR_C, 
                    string HV_U_INSTALL_NW_CBL, 
                    string CBL_SIZE, 
                    string CABLEINSTALLTYPE, 
                    string CBL_RUN_LENTH_FRM, 
                    string CBL_RUN_LENTH_TO, 
                    string CABLELENGTH, 
                    string CBL_DRM_NUMBR, 
                    string OUTPUTCABLELENGTH, 
                    string TERMINALSEAL1, 
                    string TERMINALSEAL2, 
                    string METERBOXSEAL1, 
                    string METERBOXSEAL2, 
                    string BUSBARSEAL1, 
                    string BUSBARSEAL2, 
                    string MTR_MRKWH, 
                    string MTR_MRKW, 
                    string MTR_MRKVAH, 
                    string MTR_MRKVA, 
                    string QC_PHOTO_TKN, 
                    string QC_METERDOWNLOAD, 
                    string QC_DBLOCKED, 
                    string QC_EARTHING_CONS, 
                    string QC_EARTHING_POLE, 
                    string QC_HEIGHTOFMETER, 
                    string QC_ANYJOINTS, 
                    string QC_FIXTR_INSL_CONS, 
                    string QC_FIXTR_INSL_POLE, 
                    string QC_FLOWMADE, 
                    string QC_ADDNL_ACC_USD, 
                    string QC_RMKS, 
                    string ORDER_STATUS, 
                    string CANCEL_RMKS, 
                    string ACTIVITY_DATE, 
                    string INSTALLEDLOCATION, 
                    string METERSCANNEDVAL, 
                    string MTR_LOC_SHIFT, 
                    string RMVD_CBL_SIZE, 
                    string RMVD_CBL_RUN_LENTH_FRM, 
                    string RMVD_CBL_RUN_LENTH_TO, 
                    string RMVD_CBL_LENTH, 
                    string RMVD_TRMNL_SEAL1, 
                    string RMVD_TRMNL_SEAL2, 
                    string RMVD_MTR_BOX_SEAL1, 
                    string RMVD_MTR_BOX_SEAL2, 
                    string RMVD_BUS_BAR_SEAL1, 
                    string RMVD_BUS_BAR_SEAL2, 
                    string RMVD_MTR_BOX, 
                    string RMVD_MTR_GLND, 
                    string RMVD_MTR_T_COVR, 
                    string RMVD_MTR_BRS_SCRW, 
                    string RMVD_MTR_BUS_BAR, 
                    string RMVD_MTR_THMBL_LUG, 
                    string RMVD_MTR_SADL, 
                    string RMVD_MTR_BASE_PLT, 
                    string OLD_MTR_MRKWH, 
                    string OLD_MTR_MRKW, 
                    string OLD_MTR_MRKVAH, 
                    string OLD_MTR_MRKVA, 
                    string OLD_MTR_STATUS, 
                    string OLD_MTR_IF_AVBL, 
                    string OLD_MTR_IF_NOT_AVBL, 
                    string GUNNY_BAG_NO, 
                    string GUNNY_BAG_SEAL_NO, 
                    string LAB_TSTNG_DT, 
                    string LAB_TSTNG_NTC, 
                    string MTR_LOC_RELOCT, 
                    string TAB_ID, 
                    string TAB_NAME, 
                    string GIS_LAT, 
                    string GIS_LONG, 
                    string GIS_STATUS, 
                    string IMEI_NO, 
                    string SUBMIT_DATETIME, 
                    string POLENUMBER, 
                    string PUNCH_MODE, 
                    string MTR_PHOTO, 
                    string CMPLT_MTR_INTALL_PHOTO, 
                    string MCR_PHOTO, 
                    string MCR_CONS_SIGN_PHOTO, 
                    string MCR_POLE_N_PHOTO, 
                    string MCR_OTHR_PHOTO, 
                    string MCR_TST_RPT_PHOTO, 
                    string MCR_LAB_TST_RPT_PHOTO, 
                    string PREMISE_PHOTO, 
                    string RMVD_MTR_PHOTO, 
                    string RMVD_CMPLT_MTR_INTALL_PHOTO, 
                    string HAPPY_CODE, 
                    string INST_BB_CABLE_OPT, 
                    string BB_CABLE_USED, 
                    string CABLE_LEN_USED, 
                    string OUTPUT_CABLE_LEN_USED, 
                    string SIFT_DONE_BY, 
                    string CAB_REMOVE_FRM_SITE, 
                    string REPLACEMENT_DONE_CABL, 
                    string CAB_RMVD_FRM_SITE, 
                    string IS_GNY_BAG_PREPD, 
                    string GNY_PREPD_NO_RESN, 
                    string GNY_PREPD_NO_RESN_RMK, 
                    string MTR_READ_AVAIL, 
                    string METER_REMOVED_BY, 
                    string NOTICE_DATE, 
                    string startDate, 
                    string customerName, 
                    string customerAddress, 
                    string customerMobile, 
                    string customerPole, 
                    string customerMeter, 
                    string accountClass, 
                    string connCategory, 
                    string customerCA, 
                    string looseOther1, 
                    string looseOther2, 
                    string looseFlag, 
                    string cableNotInstallReason, 
                    string noHappyCodeReason, 
                    string smartMeterBool, 
                    string smartMeterSimNo, 
                    string smartMeterSimCode) {
            object[] results = this.Invoke("MCR_Insert_INPUT_Data_RV_NEW", new object[] {
                        ORDER_NO,
                        ORDER_TYPE,
                        PM_ACTIVITY,
                        DEVICE_NO,
                        ACTVTY_RSN,
                        TF_STCKR_STUS,
                        TF_STCKR_NO,
                        ELCB_INSLD_ON_SITE,
                        BUS_BAR_INSTALLD,
                        BUS_BAR_SIZE,
                        BUS_BAR_NO,
                        BUS_BAR_CBL_SIZE,
                        BUS_BAR_DRM_NO,
                        BUS_BAR_CBL_INSTL_TYP,
                        BUS_BR_RUN_LENTH_FRM,
                        BUS_BR_RUN_LENTH_TO,
                        BUS_BR_CBL_LNGTH,
                        BUS_BAR_B_OR_C,
                        HV_U_INSTALL_NW_CBL,
                        CBL_SIZE,
                        CABLEINSTALLTYPE,
                        CBL_RUN_LENTH_FRM,
                        CBL_RUN_LENTH_TO,
                        CABLELENGTH,
                        CBL_DRM_NUMBR,
                        OUTPUTCABLELENGTH,
                        TERMINALSEAL1,
                        TERMINALSEAL2,
                        METERBOXSEAL1,
                        METERBOXSEAL2,
                        BUSBARSEAL1,
                        BUSBARSEAL2,
                        MTR_MRKWH,
                        MTR_MRKW,
                        MTR_MRKVAH,
                        MTR_MRKVA,
                        QC_PHOTO_TKN,
                        QC_METERDOWNLOAD,
                        QC_DBLOCKED,
                        QC_EARTHING_CONS,
                        QC_EARTHING_POLE,
                        QC_HEIGHTOFMETER,
                        QC_ANYJOINTS,
                        QC_FIXTR_INSL_CONS,
                        QC_FIXTR_INSL_POLE,
                        QC_FLOWMADE,
                        QC_ADDNL_ACC_USD,
                        QC_RMKS,
                        ORDER_STATUS,
                        CANCEL_RMKS,
                        ACTIVITY_DATE,
                        INSTALLEDLOCATION,
                        METERSCANNEDVAL,
                        MTR_LOC_SHIFT,
                        RMVD_CBL_SIZE,
                        RMVD_CBL_RUN_LENTH_FRM,
                        RMVD_CBL_RUN_LENTH_TO,
                        RMVD_CBL_LENTH,
                        RMVD_TRMNL_SEAL1,
                        RMVD_TRMNL_SEAL2,
                        RMVD_MTR_BOX_SEAL1,
                        RMVD_MTR_BOX_SEAL2,
                        RMVD_BUS_BAR_SEAL1,
                        RMVD_BUS_BAR_SEAL2,
                        RMVD_MTR_BOX,
                        RMVD_MTR_GLND,
                        RMVD_MTR_T_COVR,
                        RMVD_MTR_BRS_SCRW,
                        RMVD_MTR_BUS_BAR,
                        RMVD_MTR_THMBL_LUG,
                        RMVD_MTR_SADL,
                        RMVD_MTR_BASE_PLT,
                        OLD_MTR_MRKWH,
                        OLD_MTR_MRKW,
                        OLD_MTR_MRKVAH,
                        OLD_MTR_MRKVA,
                        OLD_MTR_STATUS,
                        OLD_MTR_IF_AVBL,
                        OLD_MTR_IF_NOT_AVBL,
                        GUNNY_BAG_NO,
                        GUNNY_BAG_SEAL_NO,
                        LAB_TSTNG_DT,
                        LAB_TSTNG_NTC,
                        MTR_LOC_RELOCT,
                        TAB_ID,
                        TAB_NAME,
                        GIS_LAT,
                        GIS_LONG,
                        GIS_STATUS,
                        IMEI_NO,
                        SUBMIT_DATETIME,
                        POLENUMBER,
                        PUNCH_MODE,
                        MTR_PHOTO,
                        CMPLT_MTR_INTALL_PHOTO,
                        MCR_PHOTO,
                        MCR_CONS_SIGN_PHOTO,
                        MCR_POLE_N_PHOTO,
                        MCR_OTHR_PHOTO,
                        MCR_TST_RPT_PHOTO,
                        MCR_LAB_TST_RPT_PHOTO,
                        PREMISE_PHOTO,
                        RMVD_MTR_PHOTO,
                        RMVD_CMPLT_MTR_INTALL_PHOTO,
                        HAPPY_CODE,
                        INST_BB_CABLE_OPT,
                        BB_CABLE_USED,
                        CABLE_LEN_USED,
                        OUTPUT_CABLE_LEN_USED,
                        SIFT_DONE_BY,
                        CAB_REMOVE_FRM_SITE,
                        REPLACEMENT_DONE_CABL,
                        CAB_RMVD_FRM_SITE,
                        IS_GNY_BAG_PREPD,
                        GNY_PREPD_NO_RESN,
                        GNY_PREPD_NO_RESN_RMK,
                        MTR_READ_AVAIL,
                        METER_REMOVED_BY,
                        NOTICE_DATE,
                        startDate,
                        customerName,
                        customerAddress,
                        customerMobile,
                        customerPole,
                        customerMeter,
                        accountClass,
                        connCategory,
                        customerCA,
                        looseOther1,
                        looseOther2,
                        looseFlag,
                        cableNotInstallReason,
                        noHappyCodeReason,
                        smartMeterBool,
                        smartMeterSimNo,
                        smartMeterSimCode});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_Insert_INPUT_Data_RV_NEWAsync(
                    string ORDER_NO, 
                    string ORDER_TYPE, 
                    string PM_ACTIVITY, 
                    string DEVICE_NO, 
                    string ACTVTY_RSN, 
                    string TF_STCKR_STUS, 
                    string TF_STCKR_NO, 
                    string ELCB_INSLD_ON_SITE, 
                    string BUS_BAR_INSTALLD, 
                    string BUS_BAR_SIZE, 
                    string BUS_BAR_NO, 
                    string BUS_BAR_CBL_SIZE, 
                    string BUS_BAR_DRM_NO, 
                    string BUS_BAR_CBL_INSTL_TYP, 
                    string BUS_BR_RUN_LENTH_FRM, 
                    string BUS_BR_RUN_LENTH_TO, 
                    string BUS_BR_CBL_LNGTH, 
                    string BUS_BAR_B_OR_C, 
                    string HV_U_INSTALL_NW_CBL, 
                    string CBL_SIZE, 
                    string CABLEINSTALLTYPE, 
                    string CBL_RUN_LENTH_FRM, 
                    string CBL_RUN_LENTH_TO, 
                    string CABLELENGTH, 
                    string CBL_DRM_NUMBR, 
                    string OUTPUTCABLELENGTH, 
                    string TERMINALSEAL1, 
                    string TERMINALSEAL2, 
                    string METERBOXSEAL1, 
                    string METERBOXSEAL2, 
                    string BUSBARSEAL1, 
                    string BUSBARSEAL2, 
                    string MTR_MRKWH, 
                    string MTR_MRKW, 
                    string MTR_MRKVAH, 
                    string MTR_MRKVA, 
                    string QC_PHOTO_TKN, 
                    string QC_METERDOWNLOAD, 
                    string QC_DBLOCKED, 
                    string QC_EARTHING_CONS, 
                    string QC_EARTHING_POLE, 
                    string QC_HEIGHTOFMETER, 
                    string QC_ANYJOINTS, 
                    string QC_FIXTR_INSL_CONS, 
                    string QC_FIXTR_INSL_POLE, 
                    string QC_FLOWMADE, 
                    string QC_ADDNL_ACC_USD, 
                    string QC_RMKS, 
                    string ORDER_STATUS, 
                    string CANCEL_RMKS, 
                    string ACTIVITY_DATE, 
                    string INSTALLEDLOCATION, 
                    string METERSCANNEDVAL, 
                    string MTR_LOC_SHIFT, 
                    string RMVD_CBL_SIZE, 
                    string RMVD_CBL_RUN_LENTH_FRM, 
                    string RMVD_CBL_RUN_LENTH_TO, 
                    string RMVD_CBL_LENTH, 
                    string RMVD_TRMNL_SEAL1, 
                    string RMVD_TRMNL_SEAL2, 
                    string RMVD_MTR_BOX_SEAL1, 
                    string RMVD_MTR_BOX_SEAL2, 
                    string RMVD_BUS_BAR_SEAL1, 
                    string RMVD_BUS_BAR_SEAL2, 
                    string RMVD_MTR_BOX, 
                    string RMVD_MTR_GLND, 
                    string RMVD_MTR_T_COVR, 
                    string RMVD_MTR_BRS_SCRW, 
                    string RMVD_MTR_BUS_BAR, 
                    string RMVD_MTR_THMBL_LUG, 
                    string RMVD_MTR_SADL, 
                    string RMVD_MTR_BASE_PLT, 
                    string OLD_MTR_MRKWH, 
                    string OLD_MTR_MRKW, 
                    string OLD_MTR_MRKVAH, 
                    string OLD_MTR_MRKVA, 
                    string OLD_MTR_STATUS, 
                    string OLD_MTR_IF_AVBL, 
                    string OLD_MTR_IF_NOT_AVBL, 
                    string GUNNY_BAG_NO, 
                    string GUNNY_BAG_SEAL_NO, 
                    string LAB_TSTNG_DT, 
                    string LAB_TSTNG_NTC, 
                    string MTR_LOC_RELOCT, 
                    string TAB_ID, 
                    string TAB_NAME, 
                    string GIS_LAT, 
                    string GIS_LONG, 
                    string GIS_STATUS, 
                    string IMEI_NO, 
                    string SUBMIT_DATETIME, 
                    string POLENUMBER, 
                    string PUNCH_MODE, 
                    string MTR_PHOTO, 
                    string CMPLT_MTR_INTALL_PHOTO, 
                    string MCR_PHOTO, 
                    string MCR_CONS_SIGN_PHOTO, 
                    string MCR_POLE_N_PHOTO, 
                    string MCR_OTHR_PHOTO, 
                    string MCR_TST_RPT_PHOTO, 
                    string MCR_LAB_TST_RPT_PHOTO, 
                    string PREMISE_PHOTO, 
                    string RMVD_MTR_PHOTO, 
                    string RMVD_CMPLT_MTR_INTALL_PHOTO, 
                    string HAPPY_CODE, 
                    string INST_BB_CABLE_OPT, 
                    string BB_CABLE_USED, 
                    string CABLE_LEN_USED, 
                    string OUTPUT_CABLE_LEN_USED, 
                    string SIFT_DONE_BY, 
                    string CAB_REMOVE_FRM_SITE, 
                    string REPLACEMENT_DONE_CABL, 
                    string CAB_RMVD_FRM_SITE, 
                    string IS_GNY_BAG_PREPD, 
                    string GNY_PREPD_NO_RESN, 
                    string GNY_PREPD_NO_RESN_RMK, 
                    string MTR_READ_AVAIL, 
                    string METER_REMOVED_BY, 
                    string NOTICE_DATE, 
                    string startDate, 
                    string customerName, 
                    string customerAddress, 
                    string customerMobile, 
                    string customerPole, 
                    string customerMeter, 
                    string accountClass, 
                    string connCategory, 
                    string customerCA, 
                    string looseOther1, 
                    string looseOther2, 
                    string looseFlag, 
                    string cableNotInstallReason, 
                    string noHappyCodeReason, 
                    string smartMeterBool, 
                    string smartMeterSimNo, 
                    string smartMeterSimCode) {
            this.MCR_Insert_INPUT_Data_RV_NEWAsync(ORDER_NO, ORDER_TYPE, PM_ACTIVITY, DEVICE_NO, ACTVTY_RSN, TF_STCKR_STUS, TF_STCKR_NO, ELCB_INSLD_ON_SITE, BUS_BAR_INSTALLD, BUS_BAR_SIZE, BUS_BAR_NO, BUS_BAR_CBL_SIZE, BUS_BAR_DRM_NO, BUS_BAR_CBL_INSTL_TYP, BUS_BR_RUN_LENTH_FRM, BUS_BR_RUN_LENTH_TO, BUS_BR_CBL_LNGTH, BUS_BAR_B_OR_C, HV_U_INSTALL_NW_CBL, CBL_SIZE, CABLEINSTALLTYPE, CBL_RUN_LENTH_FRM, CBL_RUN_LENTH_TO, CABLELENGTH, CBL_DRM_NUMBR, OUTPUTCABLELENGTH, TERMINALSEAL1, TERMINALSEAL2, METERBOXSEAL1, METERBOXSEAL2, BUSBARSEAL1, BUSBARSEAL2, MTR_MRKWH, MTR_MRKW, MTR_MRKVAH, MTR_MRKVA, QC_PHOTO_TKN, QC_METERDOWNLOAD, QC_DBLOCKED, QC_EARTHING_CONS, QC_EARTHING_POLE, QC_HEIGHTOFMETER, QC_ANYJOINTS, QC_FIXTR_INSL_CONS, QC_FIXTR_INSL_POLE, QC_FLOWMADE, QC_ADDNL_ACC_USD, QC_RMKS, ORDER_STATUS, CANCEL_RMKS, ACTIVITY_DATE, INSTALLEDLOCATION, METERSCANNEDVAL, MTR_LOC_SHIFT, RMVD_CBL_SIZE, RMVD_CBL_RUN_LENTH_FRM, RMVD_CBL_RUN_LENTH_TO, RMVD_CBL_LENTH, RMVD_TRMNL_SEAL1, RMVD_TRMNL_SEAL2, RMVD_MTR_BOX_SEAL1, RMVD_MTR_BOX_SEAL2, RMVD_BUS_BAR_SEAL1, RMVD_BUS_BAR_SEAL2, RMVD_MTR_BOX, RMVD_MTR_GLND, RMVD_MTR_T_COVR, RMVD_MTR_BRS_SCRW, RMVD_MTR_BUS_BAR, RMVD_MTR_THMBL_LUG, RMVD_MTR_SADL, RMVD_MTR_BASE_PLT, OLD_MTR_MRKWH, OLD_MTR_MRKW, OLD_MTR_MRKVAH, OLD_MTR_MRKVA, OLD_MTR_STATUS, OLD_MTR_IF_AVBL, OLD_MTR_IF_NOT_AVBL, GUNNY_BAG_NO, GUNNY_BAG_SEAL_NO, LAB_TSTNG_DT, LAB_TSTNG_NTC, MTR_LOC_RELOCT, TAB_ID, TAB_NAME, GIS_LAT, GIS_LONG, GIS_STATUS, IMEI_NO, SUBMIT_DATETIME, POLENUMBER, PUNCH_MODE, MTR_PHOTO, CMPLT_MTR_INTALL_PHOTO, MCR_PHOTO, MCR_CONS_SIGN_PHOTO, MCR_POLE_N_PHOTO, MCR_OTHR_PHOTO, MCR_TST_RPT_PHOTO, MCR_LAB_TST_RPT_PHOTO, PREMISE_PHOTO, RMVD_MTR_PHOTO, RMVD_CMPLT_MTR_INTALL_PHOTO, HAPPY_CODE, INST_BB_CABLE_OPT, BB_CABLE_USED, CABLE_LEN_USED, OUTPUT_CABLE_LEN_USED, SIFT_DONE_BY, CAB_REMOVE_FRM_SITE, REPLACEMENT_DONE_CABL, CAB_RMVD_FRM_SITE, IS_GNY_BAG_PREPD, GNY_PREPD_NO_RESN, GNY_PREPD_NO_RESN_RMK, MTR_READ_AVAIL, METER_REMOVED_BY, NOTICE_DATE, startDate, customerName, customerAddress, customerMobile, customerPole, customerMeter, accountClass, connCategory, customerCA, looseOther1, looseOther2, looseFlag, cableNotInstallReason, noHappyCodeReason, smartMeterBool, smartMeterSimNo, smartMeterSimCode, null);
        }
        
        /// <remarks/>
        public void MCR_Insert_INPUT_Data_RV_NEWAsync(
                    string ORDER_NO, 
                    string ORDER_TYPE, 
                    string PM_ACTIVITY, 
                    string DEVICE_NO, 
                    string ACTVTY_RSN, 
                    string TF_STCKR_STUS, 
                    string TF_STCKR_NO, 
                    string ELCB_INSLD_ON_SITE, 
                    string BUS_BAR_INSTALLD, 
                    string BUS_BAR_SIZE, 
                    string BUS_BAR_NO, 
                    string BUS_BAR_CBL_SIZE, 
                    string BUS_BAR_DRM_NO, 
                    string BUS_BAR_CBL_INSTL_TYP, 
                    string BUS_BR_RUN_LENTH_FRM, 
                    string BUS_BR_RUN_LENTH_TO, 
                    string BUS_BR_CBL_LNGTH, 
                    string BUS_BAR_B_OR_C, 
                    string HV_U_INSTALL_NW_CBL, 
                    string CBL_SIZE, 
                    string CABLEINSTALLTYPE, 
                    string CBL_RUN_LENTH_FRM, 
                    string CBL_RUN_LENTH_TO, 
                    string CABLELENGTH, 
                    string CBL_DRM_NUMBR, 
                    string OUTPUTCABLELENGTH, 
                    string TERMINALSEAL1, 
                    string TERMINALSEAL2, 
                    string METERBOXSEAL1, 
                    string METERBOXSEAL2, 
                    string BUSBARSEAL1, 
                    string BUSBARSEAL2, 
                    string MTR_MRKWH, 
                    string MTR_MRKW, 
                    string MTR_MRKVAH, 
                    string MTR_MRKVA, 
                    string QC_PHOTO_TKN, 
                    string QC_METERDOWNLOAD, 
                    string QC_DBLOCKED, 
                    string QC_EARTHING_CONS, 
                    string QC_EARTHING_POLE, 
                    string QC_HEIGHTOFMETER, 
                    string QC_ANYJOINTS, 
                    string QC_FIXTR_INSL_CONS, 
                    string QC_FIXTR_INSL_POLE, 
                    string QC_FLOWMADE, 
                    string QC_ADDNL_ACC_USD, 
                    string QC_RMKS, 
                    string ORDER_STATUS, 
                    string CANCEL_RMKS, 
                    string ACTIVITY_DATE, 
                    string INSTALLEDLOCATION, 
                    string METERSCANNEDVAL, 
                    string MTR_LOC_SHIFT, 
                    string RMVD_CBL_SIZE, 
                    string RMVD_CBL_RUN_LENTH_FRM, 
                    string RMVD_CBL_RUN_LENTH_TO, 
                    string RMVD_CBL_LENTH, 
                    string RMVD_TRMNL_SEAL1, 
                    string RMVD_TRMNL_SEAL2, 
                    string RMVD_MTR_BOX_SEAL1, 
                    string RMVD_MTR_BOX_SEAL2, 
                    string RMVD_BUS_BAR_SEAL1, 
                    string RMVD_BUS_BAR_SEAL2, 
                    string RMVD_MTR_BOX, 
                    string RMVD_MTR_GLND, 
                    string RMVD_MTR_T_COVR, 
                    string RMVD_MTR_BRS_SCRW, 
                    string RMVD_MTR_BUS_BAR, 
                    string RMVD_MTR_THMBL_LUG, 
                    string RMVD_MTR_SADL, 
                    string RMVD_MTR_BASE_PLT, 
                    string OLD_MTR_MRKWH, 
                    string OLD_MTR_MRKW, 
                    string OLD_MTR_MRKVAH, 
                    string OLD_MTR_MRKVA, 
                    string OLD_MTR_STATUS, 
                    string OLD_MTR_IF_AVBL, 
                    string OLD_MTR_IF_NOT_AVBL, 
                    string GUNNY_BAG_NO, 
                    string GUNNY_BAG_SEAL_NO, 
                    string LAB_TSTNG_DT, 
                    string LAB_TSTNG_NTC, 
                    string MTR_LOC_RELOCT, 
                    string TAB_ID, 
                    string TAB_NAME, 
                    string GIS_LAT, 
                    string GIS_LONG, 
                    string GIS_STATUS, 
                    string IMEI_NO, 
                    string SUBMIT_DATETIME, 
                    string POLENUMBER, 
                    string PUNCH_MODE, 
                    string MTR_PHOTO, 
                    string CMPLT_MTR_INTALL_PHOTO, 
                    string MCR_PHOTO, 
                    string MCR_CONS_SIGN_PHOTO, 
                    string MCR_POLE_N_PHOTO, 
                    string MCR_OTHR_PHOTO, 
                    string MCR_TST_RPT_PHOTO, 
                    string MCR_LAB_TST_RPT_PHOTO, 
                    string PREMISE_PHOTO, 
                    string RMVD_MTR_PHOTO, 
                    string RMVD_CMPLT_MTR_INTALL_PHOTO, 
                    string HAPPY_CODE, 
                    string INST_BB_CABLE_OPT, 
                    string BB_CABLE_USED, 
                    string CABLE_LEN_USED, 
                    string OUTPUT_CABLE_LEN_USED, 
                    string SIFT_DONE_BY, 
                    string CAB_REMOVE_FRM_SITE, 
                    string REPLACEMENT_DONE_CABL, 
                    string CAB_RMVD_FRM_SITE, 
                    string IS_GNY_BAG_PREPD, 
                    string GNY_PREPD_NO_RESN, 
                    string GNY_PREPD_NO_RESN_RMK, 
                    string MTR_READ_AVAIL, 
                    string METER_REMOVED_BY, 
                    string NOTICE_DATE, 
                    string startDate, 
                    string customerName, 
                    string customerAddress, 
                    string customerMobile, 
                    string customerPole, 
                    string customerMeter, 
                    string accountClass, 
                    string connCategory, 
                    string customerCA, 
                    string looseOther1, 
                    string looseOther2, 
                    string looseFlag, 
                    string cableNotInstallReason, 
                    string noHappyCodeReason, 
                    string smartMeterBool, 
                    string smartMeterSimNo, 
                    string smartMeterSimCode, 
                    object userState) {
            if ((this.MCR_Insert_INPUT_Data_RV_NEWOperationCompleted == null)) {
                this.MCR_Insert_INPUT_Data_RV_NEWOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_Insert_INPUT_Data_RV_NEWOperationCompleted);
            }
            this.InvokeAsync("MCR_Insert_INPUT_Data_RV_NEW", new object[] {
                        ORDER_NO,
                        ORDER_TYPE,
                        PM_ACTIVITY,
                        DEVICE_NO,
                        ACTVTY_RSN,
                        TF_STCKR_STUS,
                        TF_STCKR_NO,
                        ELCB_INSLD_ON_SITE,
                        BUS_BAR_INSTALLD,
                        BUS_BAR_SIZE,
                        BUS_BAR_NO,
                        BUS_BAR_CBL_SIZE,
                        BUS_BAR_DRM_NO,
                        BUS_BAR_CBL_INSTL_TYP,
                        BUS_BR_RUN_LENTH_FRM,
                        BUS_BR_RUN_LENTH_TO,
                        BUS_BR_CBL_LNGTH,
                        BUS_BAR_B_OR_C,
                        HV_U_INSTALL_NW_CBL,
                        CBL_SIZE,
                        CABLEINSTALLTYPE,
                        CBL_RUN_LENTH_FRM,
                        CBL_RUN_LENTH_TO,
                        CABLELENGTH,
                        CBL_DRM_NUMBR,
                        OUTPUTCABLELENGTH,
                        TERMINALSEAL1,
                        TERMINALSEAL2,
                        METERBOXSEAL1,
                        METERBOXSEAL2,
                        BUSBARSEAL1,
                        BUSBARSEAL2,
                        MTR_MRKWH,
                        MTR_MRKW,
                        MTR_MRKVAH,
                        MTR_MRKVA,
                        QC_PHOTO_TKN,
                        QC_METERDOWNLOAD,
                        QC_DBLOCKED,
                        QC_EARTHING_CONS,
                        QC_EARTHING_POLE,
                        QC_HEIGHTOFMETER,
                        QC_ANYJOINTS,
                        QC_FIXTR_INSL_CONS,
                        QC_FIXTR_INSL_POLE,
                        QC_FLOWMADE,
                        QC_ADDNL_ACC_USD,
                        QC_RMKS,
                        ORDER_STATUS,
                        CANCEL_RMKS,
                        ACTIVITY_DATE,
                        INSTALLEDLOCATION,
                        METERSCANNEDVAL,
                        MTR_LOC_SHIFT,
                        RMVD_CBL_SIZE,
                        RMVD_CBL_RUN_LENTH_FRM,
                        RMVD_CBL_RUN_LENTH_TO,
                        RMVD_CBL_LENTH,
                        RMVD_TRMNL_SEAL1,
                        RMVD_TRMNL_SEAL2,
                        RMVD_MTR_BOX_SEAL1,
                        RMVD_MTR_BOX_SEAL2,
                        RMVD_BUS_BAR_SEAL1,
                        RMVD_BUS_BAR_SEAL2,
                        RMVD_MTR_BOX,
                        RMVD_MTR_GLND,
                        RMVD_MTR_T_COVR,
                        RMVD_MTR_BRS_SCRW,
                        RMVD_MTR_BUS_BAR,
                        RMVD_MTR_THMBL_LUG,
                        RMVD_MTR_SADL,
                        RMVD_MTR_BASE_PLT,
                        OLD_MTR_MRKWH,
                        OLD_MTR_MRKW,
                        OLD_MTR_MRKVAH,
                        OLD_MTR_MRKVA,
                        OLD_MTR_STATUS,
                        OLD_MTR_IF_AVBL,
                        OLD_MTR_IF_NOT_AVBL,
                        GUNNY_BAG_NO,
                        GUNNY_BAG_SEAL_NO,
                        LAB_TSTNG_DT,
                        LAB_TSTNG_NTC,
                        MTR_LOC_RELOCT,
                        TAB_ID,
                        TAB_NAME,
                        GIS_LAT,
                        GIS_LONG,
                        GIS_STATUS,
                        IMEI_NO,
                        SUBMIT_DATETIME,
                        POLENUMBER,
                        PUNCH_MODE,
                        MTR_PHOTO,
                        CMPLT_MTR_INTALL_PHOTO,
                        MCR_PHOTO,
                        MCR_CONS_SIGN_PHOTO,
                        MCR_POLE_N_PHOTO,
                        MCR_OTHR_PHOTO,
                        MCR_TST_RPT_PHOTO,
                        MCR_LAB_TST_RPT_PHOTO,
                        PREMISE_PHOTO,
                        RMVD_MTR_PHOTO,
                        RMVD_CMPLT_MTR_INTALL_PHOTO,
                        HAPPY_CODE,
                        INST_BB_CABLE_OPT,
                        BB_CABLE_USED,
                        CABLE_LEN_USED,
                        OUTPUT_CABLE_LEN_USED,
                        SIFT_DONE_BY,
                        CAB_REMOVE_FRM_SITE,
                        REPLACEMENT_DONE_CABL,
                        CAB_RMVD_FRM_SITE,
                        IS_GNY_BAG_PREPD,
                        GNY_PREPD_NO_RESN,
                        GNY_PREPD_NO_RESN_RMK,
                        MTR_READ_AVAIL,
                        METER_REMOVED_BY,
                        NOTICE_DATE,
                        startDate,
                        customerName,
                        customerAddress,
                        customerMobile,
                        customerPole,
                        customerMeter,
                        accountClass,
                        connCategory,
                        customerCA,
                        looseOther1,
                        looseOther2,
                        looseFlag,
                        cableNotInstallReason,
                        noHappyCodeReason,
                        smartMeterBool,
                        smartMeterSimNo,
                        smartMeterSimCode}, this.MCR_Insert_INPUT_Data_RV_NEWOperationCompleted, userState);
        }
        
        private void OnMCR_Insert_INPUT_Data_RV_NEWOperationCompleted(object arg) {
            if ((this.MCR_Insert_INPUT_Data_RV_NEWCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_Insert_INPUT_Data_RV_NEWCompleted(this, new MCR_Insert_INPUT_Data_RV_NEWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_Insert_INPUT_Data_RV_NEW1", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MCR_Insert_INPUT_Data_RV_NEW1(
                    string ORDER_NO, 
                    string ORDER_TYPE, 
                    string PM_ACTIVITY, 
                    string DEVICE_NO, 
                    string ACTVTY_RSN, 
                    string TF_STCKR_STUS, 
                    string TF_STCKR_NO, 
                    string ELCB_INSLD_ON_SITE, 
                    string BUS_BAR_INSTALLD, 
                    string BUS_BAR_SIZE, 
                    string BUS_BAR_NO, 
                    string BUS_BAR_CBL_SIZE, 
                    string BUS_BAR_DRM_NO, 
                    string BUS_BAR_CBL_INSTL_TYP, 
                    string BUS_BR_RUN_LENTH_FRM, 
                    string BUS_BR_RUN_LENTH_TO, 
                    string BUS_BR_CBL_LNGTH, 
                    string BUS_BAR_B_OR_C, 
                    string HV_U_INSTALL_NW_CBL, 
                    string CBL_SIZE, 
                    string CABLEINSTALLTYPE, 
                    string CBL_RUN_LENTH_FRM, 
                    string CBL_RUN_LENTH_TO, 
                    string CABLELENGTH, 
                    string CBL_DRM_NUMBR, 
                    string OUTPUTCABLELENGTH, 
                    string TERMINALSEAL1, 
                    string TERMINALSEAL2, 
                    string METERBOXSEAL1, 
                    string METERBOXSEAL2, 
                    string BUSBARSEAL1, 
                    string BUSBARSEAL2, 
                    string MTR_MRKWH, 
                    string MTR_MRKW, 
                    string MTR_MRKVAH, 
                    string MTR_MRKVA, 
                    string QC_PHOTO_TKN, 
                    string QC_METERDOWNLOAD, 
                    string QC_DBLOCKED, 
                    string QC_EARTHING_CONS, 
                    string QC_EARTHING_POLE, 
                    string QC_HEIGHTOFMETER, 
                    string QC_ANYJOINTS, 
                    string QC_FIXTR_INSL_CONS, 
                    string QC_FIXTR_INSL_POLE, 
                    string QC_FLOWMADE, 
                    string QC_ADDNL_ACC_USD, 
                    string QC_RMKS, 
                    string ORDER_STATUS, 
                    string CANCEL_RMKS, 
                    string ACTIVITY_DATE, 
                    string INSTALLEDLOCATION, 
                    string METERSCANNEDVAL, 
                    string MTR_LOC_SHIFT, 
                    string RMVD_CBL_SIZE, 
                    string RMVD_CBL_RUN_LENTH_FRM, 
                    string RMVD_CBL_RUN_LENTH_TO, 
                    string RMVD_CBL_LENTH, 
                    string RMVD_TRMNL_SEAL1, 
                    string RMVD_TRMNL_SEAL2, 
                    string RMVD_MTR_BOX_SEAL1, 
                    string RMVD_MTR_BOX_SEAL2, 
                    string RMVD_BUS_BAR_SEAL1, 
                    string RMVD_BUS_BAR_SEAL2, 
                    string RMVD_MTR_BOX, 
                    string RMVD_MTR_GLND, 
                    string RMVD_MTR_T_COVR, 
                    string RMVD_MTR_BRS_SCRW, 
                    string RMVD_MTR_BUS_BAR, 
                    string RMVD_MTR_THMBL_LUG, 
                    string RMVD_MTR_SADL, 
                    string RMVD_MTR_BASE_PLT, 
                    string OLD_MTR_MRKWH, 
                    string OLD_MTR_MRKW, 
                    string OLD_MTR_MRKVAH, 
                    string OLD_MTR_MRKVA, 
                    string OLD_MTR_STATUS, 
                    string OLD_MTR_IF_AVBL, 
                    string OLD_MTR_IF_NOT_AVBL, 
                    string GUNNY_BAG_NO, 
                    string GUNNY_BAG_SEAL_NO, 
                    string LAB_TSTNG_DT, 
                    string LAB_TSTNG_NTC, 
                    string MTR_LOC_RELOCT, 
                    string TAB_ID, 
                    string TAB_NAME, 
                    string GIS_LAT, 
                    string GIS_LONG, 
                    string GIS_STATUS, 
                    string IMEI_NO, 
                    string SUBMIT_DATETIME, 
                    string POLENUMBER, 
                    string PUNCH_MODE, 
                    string MTR_PHOTO, 
                    string CMPLT_MTR_INTALL_PHOTO, 
                    string MCR_PHOTO, 
                    string MCR_CONS_SIGN_PHOTO, 
                    string MCR_POLE_N_PHOTO, 
                    string MCR_OTHR_PHOTO, 
                    string MCR_TST_RPT_PHOTO, 
                    string MCR_LAB_TST_RPT_PHOTO, 
                    string PREMISE_PHOTO, 
                    string RMVD_MTR_PHOTO, 
                    string RMVD_CMPLT_MTR_INTALL_PHOTO, 
                    string HAPPY_CODE, 
                    string INST_BB_CABLE_OPT, 
                    string BB_CABLE_USED, 
                    string CABLE_LEN_USED, 
                    string OUTPUT_CABLE_LEN_USED, 
                    string SIFT_DONE_BY, 
                    string CAB_REMOVE_FRM_SITE, 
                    string REPLACEMENT_DONE_CABL, 
                    string CAB_RMVD_FRM_SITE, 
                    string IS_GNY_BAG_PREPD, 
                    string GNY_PREPD_NO_RESN, 
                    string GNY_PREPD_NO_RESN_RMK, 
                    string MTR_READ_AVAIL, 
                    string METER_REMOVED_BY, 
                    string NOTICE_DATE, 
                    string startDate, 
                    string customerName, 
                    string customerAddress, 
                    string customerMobile, 
                    string customerPole, 
                    string customerMeter, 
                    string accountClass, 
                    string connCategory, 
                    string customerCA, 
                    string looseOther1, 
                    string looseOther2, 
                    string looseFlag, 
                    string cableNotInstallReason, 
                    string noHappyCodeReason, 
                    string smartMeterBool, 
                    string smartMeterSimNo, 
                    string smartMeterSimCode, 
                    string SubDivisionCode, 
                    string mcrPDF) {
            object[] results = this.Invoke("MCR_Insert_INPUT_Data_RV_NEW1", new object[] {
                        ORDER_NO,
                        ORDER_TYPE,
                        PM_ACTIVITY,
                        DEVICE_NO,
                        ACTVTY_RSN,
                        TF_STCKR_STUS,
                        TF_STCKR_NO,
                        ELCB_INSLD_ON_SITE,
                        BUS_BAR_INSTALLD,
                        BUS_BAR_SIZE,
                        BUS_BAR_NO,
                        BUS_BAR_CBL_SIZE,
                        BUS_BAR_DRM_NO,
                        BUS_BAR_CBL_INSTL_TYP,
                        BUS_BR_RUN_LENTH_FRM,
                        BUS_BR_RUN_LENTH_TO,
                        BUS_BR_CBL_LNGTH,
                        BUS_BAR_B_OR_C,
                        HV_U_INSTALL_NW_CBL,
                        CBL_SIZE,
                        CABLEINSTALLTYPE,
                        CBL_RUN_LENTH_FRM,
                        CBL_RUN_LENTH_TO,
                        CABLELENGTH,
                        CBL_DRM_NUMBR,
                        OUTPUTCABLELENGTH,
                        TERMINALSEAL1,
                        TERMINALSEAL2,
                        METERBOXSEAL1,
                        METERBOXSEAL2,
                        BUSBARSEAL1,
                        BUSBARSEAL2,
                        MTR_MRKWH,
                        MTR_MRKW,
                        MTR_MRKVAH,
                        MTR_MRKVA,
                        QC_PHOTO_TKN,
                        QC_METERDOWNLOAD,
                        QC_DBLOCKED,
                        QC_EARTHING_CONS,
                        QC_EARTHING_POLE,
                        QC_HEIGHTOFMETER,
                        QC_ANYJOINTS,
                        QC_FIXTR_INSL_CONS,
                        QC_FIXTR_INSL_POLE,
                        QC_FLOWMADE,
                        QC_ADDNL_ACC_USD,
                        QC_RMKS,
                        ORDER_STATUS,
                        CANCEL_RMKS,
                        ACTIVITY_DATE,
                        INSTALLEDLOCATION,
                        METERSCANNEDVAL,
                        MTR_LOC_SHIFT,
                        RMVD_CBL_SIZE,
                        RMVD_CBL_RUN_LENTH_FRM,
                        RMVD_CBL_RUN_LENTH_TO,
                        RMVD_CBL_LENTH,
                        RMVD_TRMNL_SEAL1,
                        RMVD_TRMNL_SEAL2,
                        RMVD_MTR_BOX_SEAL1,
                        RMVD_MTR_BOX_SEAL2,
                        RMVD_BUS_BAR_SEAL1,
                        RMVD_BUS_BAR_SEAL2,
                        RMVD_MTR_BOX,
                        RMVD_MTR_GLND,
                        RMVD_MTR_T_COVR,
                        RMVD_MTR_BRS_SCRW,
                        RMVD_MTR_BUS_BAR,
                        RMVD_MTR_THMBL_LUG,
                        RMVD_MTR_SADL,
                        RMVD_MTR_BASE_PLT,
                        OLD_MTR_MRKWH,
                        OLD_MTR_MRKW,
                        OLD_MTR_MRKVAH,
                        OLD_MTR_MRKVA,
                        OLD_MTR_STATUS,
                        OLD_MTR_IF_AVBL,
                        OLD_MTR_IF_NOT_AVBL,
                        GUNNY_BAG_NO,
                        GUNNY_BAG_SEAL_NO,
                        LAB_TSTNG_DT,
                        LAB_TSTNG_NTC,
                        MTR_LOC_RELOCT,
                        TAB_ID,
                        TAB_NAME,
                        GIS_LAT,
                        GIS_LONG,
                        GIS_STATUS,
                        IMEI_NO,
                        SUBMIT_DATETIME,
                        POLENUMBER,
                        PUNCH_MODE,
                        MTR_PHOTO,
                        CMPLT_MTR_INTALL_PHOTO,
                        MCR_PHOTO,
                        MCR_CONS_SIGN_PHOTO,
                        MCR_POLE_N_PHOTO,
                        MCR_OTHR_PHOTO,
                        MCR_TST_RPT_PHOTO,
                        MCR_LAB_TST_RPT_PHOTO,
                        PREMISE_PHOTO,
                        RMVD_MTR_PHOTO,
                        RMVD_CMPLT_MTR_INTALL_PHOTO,
                        HAPPY_CODE,
                        INST_BB_CABLE_OPT,
                        BB_CABLE_USED,
                        CABLE_LEN_USED,
                        OUTPUT_CABLE_LEN_USED,
                        SIFT_DONE_BY,
                        CAB_REMOVE_FRM_SITE,
                        REPLACEMENT_DONE_CABL,
                        CAB_RMVD_FRM_SITE,
                        IS_GNY_BAG_PREPD,
                        GNY_PREPD_NO_RESN,
                        GNY_PREPD_NO_RESN_RMK,
                        MTR_READ_AVAIL,
                        METER_REMOVED_BY,
                        NOTICE_DATE,
                        startDate,
                        customerName,
                        customerAddress,
                        customerMobile,
                        customerPole,
                        customerMeter,
                        accountClass,
                        connCategory,
                        customerCA,
                        looseOther1,
                        looseOther2,
                        looseFlag,
                        cableNotInstallReason,
                        noHappyCodeReason,
                        smartMeterBool,
                        smartMeterSimNo,
                        smartMeterSimCode,
                        SubDivisionCode,
                        mcrPDF});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_Insert_INPUT_Data_RV_NEW1Async(
                    string ORDER_NO, 
                    string ORDER_TYPE, 
                    string PM_ACTIVITY, 
                    string DEVICE_NO, 
                    string ACTVTY_RSN, 
                    string TF_STCKR_STUS, 
                    string TF_STCKR_NO, 
                    string ELCB_INSLD_ON_SITE, 
                    string BUS_BAR_INSTALLD, 
                    string BUS_BAR_SIZE, 
                    string BUS_BAR_NO, 
                    string BUS_BAR_CBL_SIZE, 
                    string BUS_BAR_DRM_NO, 
                    string BUS_BAR_CBL_INSTL_TYP, 
                    string BUS_BR_RUN_LENTH_FRM, 
                    string BUS_BR_RUN_LENTH_TO, 
                    string BUS_BR_CBL_LNGTH, 
                    string BUS_BAR_B_OR_C, 
                    string HV_U_INSTALL_NW_CBL, 
                    string CBL_SIZE, 
                    string CABLEINSTALLTYPE, 
                    string CBL_RUN_LENTH_FRM, 
                    string CBL_RUN_LENTH_TO, 
                    string CABLELENGTH, 
                    string CBL_DRM_NUMBR, 
                    string OUTPUTCABLELENGTH, 
                    string TERMINALSEAL1, 
                    string TERMINALSEAL2, 
                    string METERBOXSEAL1, 
                    string METERBOXSEAL2, 
                    string BUSBARSEAL1, 
                    string BUSBARSEAL2, 
                    string MTR_MRKWH, 
                    string MTR_MRKW, 
                    string MTR_MRKVAH, 
                    string MTR_MRKVA, 
                    string QC_PHOTO_TKN, 
                    string QC_METERDOWNLOAD, 
                    string QC_DBLOCKED, 
                    string QC_EARTHING_CONS, 
                    string QC_EARTHING_POLE, 
                    string QC_HEIGHTOFMETER, 
                    string QC_ANYJOINTS, 
                    string QC_FIXTR_INSL_CONS, 
                    string QC_FIXTR_INSL_POLE, 
                    string QC_FLOWMADE, 
                    string QC_ADDNL_ACC_USD, 
                    string QC_RMKS, 
                    string ORDER_STATUS, 
                    string CANCEL_RMKS, 
                    string ACTIVITY_DATE, 
                    string INSTALLEDLOCATION, 
                    string METERSCANNEDVAL, 
                    string MTR_LOC_SHIFT, 
                    string RMVD_CBL_SIZE, 
                    string RMVD_CBL_RUN_LENTH_FRM, 
                    string RMVD_CBL_RUN_LENTH_TO, 
                    string RMVD_CBL_LENTH, 
                    string RMVD_TRMNL_SEAL1, 
                    string RMVD_TRMNL_SEAL2, 
                    string RMVD_MTR_BOX_SEAL1, 
                    string RMVD_MTR_BOX_SEAL2, 
                    string RMVD_BUS_BAR_SEAL1, 
                    string RMVD_BUS_BAR_SEAL2, 
                    string RMVD_MTR_BOX, 
                    string RMVD_MTR_GLND, 
                    string RMVD_MTR_T_COVR, 
                    string RMVD_MTR_BRS_SCRW, 
                    string RMVD_MTR_BUS_BAR, 
                    string RMVD_MTR_THMBL_LUG, 
                    string RMVD_MTR_SADL, 
                    string RMVD_MTR_BASE_PLT, 
                    string OLD_MTR_MRKWH, 
                    string OLD_MTR_MRKW, 
                    string OLD_MTR_MRKVAH, 
                    string OLD_MTR_MRKVA, 
                    string OLD_MTR_STATUS, 
                    string OLD_MTR_IF_AVBL, 
                    string OLD_MTR_IF_NOT_AVBL, 
                    string GUNNY_BAG_NO, 
                    string GUNNY_BAG_SEAL_NO, 
                    string LAB_TSTNG_DT, 
                    string LAB_TSTNG_NTC, 
                    string MTR_LOC_RELOCT, 
                    string TAB_ID, 
                    string TAB_NAME, 
                    string GIS_LAT, 
                    string GIS_LONG, 
                    string GIS_STATUS, 
                    string IMEI_NO, 
                    string SUBMIT_DATETIME, 
                    string POLENUMBER, 
                    string PUNCH_MODE, 
                    string MTR_PHOTO, 
                    string CMPLT_MTR_INTALL_PHOTO, 
                    string MCR_PHOTO, 
                    string MCR_CONS_SIGN_PHOTO, 
                    string MCR_POLE_N_PHOTO, 
                    string MCR_OTHR_PHOTO, 
                    string MCR_TST_RPT_PHOTO, 
                    string MCR_LAB_TST_RPT_PHOTO, 
                    string PREMISE_PHOTO, 
                    string RMVD_MTR_PHOTO, 
                    string RMVD_CMPLT_MTR_INTALL_PHOTO, 
                    string HAPPY_CODE, 
                    string INST_BB_CABLE_OPT, 
                    string BB_CABLE_USED, 
                    string CABLE_LEN_USED, 
                    string OUTPUT_CABLE_LEN_USED, 
                    string SIFT_DONE_BY, 
                    string CAB_REMOVE_FRM_SITE, 
                    string REPLACEMENT_DONE_CABL, 
                    string CAB_RMVD_FRM_SITE, 
                    string IS_GNY_BAG_PREPD, 
                    string GNY_PREPD_NO_RESN, 
                    string GNY_PREPD_NO_RESN_RMK, 
                    string MTR_READ_AVAIL, 
                    string METER_REMOVED_BY, 
                    string NOTICE_DATE, 
                    string startDate, 
                    string customerName, 
                    string customerAddress, 
                    string customerMobile, 
                    string customerPole, 
                    string customerMeter, 
                    string accountClass, 
                    string connCategory, 
                    string customerCA, 
                    string looseOther1, 
                    string looseOther2, 
                    string looseFlag, 
                    string cableNotInstallReason, 
                    string noHappyCodeReason, 
                    string smartMeterBool, 
                    string smartMeterSimNo, 
                    string smartMeterSimCode, 
                    string SubDivisionCode, 
                    string mcrPDF) {
            this.MCR_Insert_INPUT_Data_RV_NEW1Async(ORDER_NO, ORDER_TYPE, PM_ACTIVITY, DEVICE_NO, ACTVTY_RSN, TF_STCKR_STUS, TF_STCKR_NO, ELCB_INSLD_ON_SITE, BUS_BAR_INSTALLD, BUS_BAR_SIZE, BUS_BAR_NO, BUS_BAR_CBL_SIZE, BUS_BAR_DRM_NO, BUS_BAR_CBL_INSTL_TYP, BUS_BR_RUN_LENTH_FRM, BUS_BR_RUN_LENTH_TO, BUS_BR_CBL_LNGTH, BUS_BAR_B_OR_C, HV_U_INSTALL_NW_CBL, CBL_SIZE, CABLEINSTALLTYPE, CBL_RUN_LENTH_FRM, CBL_RUN_LENTH_TO, CABLELENGTH, CBL_DRM_NUMBR, OUTPUTCABLELENGTH, TERMINALSEAL1, TERMINALSEAL2, METERBOXSEAL1, METERBOXSEAL2, BUSBARSEAL1, BUSBARSEAL2, MTR_MRKWH, MTR_MRKW, MTR_MRKVAH, MTR_MRKVA, QC_PHOTO_TKN, QC_METERDOWNLOAD, QC_DBLOCKED, QC_EARTHING_CONS, QC_EARTHING_POLE, QC_HEIGHTOFMETER, QC_ANYJOINTS, QC_FIXTR_INSL_CONS, QC_FIXTR_INSL_POLE, QC_FLOWMADE, QC_ADDNL_ACC_USD, QC_RMKS, ORDER_STATUS, CANCEL_RMKS, ACTIVITY_DATE, INSTALLEDLOCATION, METERSCANNEDVAL, MTR_LOC_SHIFT, RMVD_CBL_SIZE, RMVD_CBL_RUN_LENTH_FRM, RMVD_CBL_RUN_LENTH_TO, RMVD_CBL_LENTH, RMVD_TRMNL_SEAL1, RMVD_TRMNL_SEAL2, RMVD_MTR_BOX_SEAL1, RMVD_MTR_BOX_SEAL2, RMVD_BUS_BAR_SEAL1, RMVD_BUS_BAR_SEAL2, RMVD_MTR_BOX, RMVD_MTR_GLND, RMVD_MTR_T_COVR, RMVD_MTR_BRS_SCRW, RMVD_MTR_BUS_BAR, RMVD_MTR_THMBL_LUG, RMVD_MTR_SADL, RMVD_MTR_BASE_PLT, OLD_MTR_MRKWH, OLD_MTR_MRKW, OLD_MTR_MRKVAH, OLD_MTR_MRKVA, OLD_MTR_STATUS, OLD_MTR_IF_AVBL, OLD_MTR_IF_NOT_AVBL, GUNNY_BAG_NO, GUNNY_BAG_SEAL_NO, LAB_TSTNG_DT, LAB_TSTNG_NTC, MTR_LOC_RELOCT, TAB_ID, TAB_NAME, GIS_LAT, GIS_LONG, GIS_STATUS, IMEI_NO, SUBMIT_DATETIME, POLENUMBER, PUNCH_MODE, MTR_PHOTO, CMPLT_MTR_INTALL_PHOTO, MCR_PHOTO, MCR_CONS_SIGN_PHOTO, MCR_POLE_N_PHOTO, MCR_OTHR_PHOTO, MCR_TST_RPT_PHOTO, MCR_LAB_TST_RPT_PHOTO, PREMISE_PHOTO, RMVD_MTR_PHOTO, RMVD_CMPLT_MTR_INTALL_PHOTO, HAPPY_CODE, INST_BB_CABLE_OPT, BB_CABLE_USED, CABLE_LEN_USED, OUTPUT_CABLE_LEN_USED, SIFT_DONE_BY, CAB_REMOVE_FRM_SITE, REPLACEMENT_DONE_CABL, CAB_RMVD_FRM_SITE, IS_GNY_BAG_PREPD, GNY_PREPD_NO_RESN, GNY_PREPD_NO_RESN_RMK, MTR_READ_AVAIL, METER_REMOVED_BY, NOTICE_DATE, startDate, customerName, customerAddress, customerMobile, customerPole, customerMeter, accountClass, connCategory, customerCA, looseOther1, looseOther2, looseFlag, cableNotInstallReason, noHappyCodeReason, smartMeterBool, smartMeterSimNo, smartMeterSimCode, SubDivisionCode, mcrPDF, null);
        }
        
        /// <remarks/>
        public void MCR_Insert_INPUT_Data_RV_NEW1Async(
                    string ORDER_NO, 
                    string ORDER_TYPE, 
                    string PM_ACTIVITY, 
                    string DEVICE_NO, 
                    string ACTVTY_RSN, 
                    string TF_STCKR_STUS, 
                    string TF_STCKR_NO, 
                    string ELCB_INSLD_ON_SITE, 
                    string BUS_BAR_INSTALLD, 
                    string BUS_BAR_SIZE, 
                    string BUS_BAR_NO, 
                    string BUS_BAR_CBL_SIZE, 
                    string BUS_BAR_DRM_NO, 
                    string BUS_BAR_CBL_INSTL_TYP, 
                    string BUS_BR_RUN_LENTH_FRM, 
                    string BUS_BR_RUN_LENTH_TO, 
                    string BUS_BR_CBL_LNGTH, 
                    string BUS_BAR_B_OR_C, 
                    string HV_U_INSTALL_NW_CBL, 
                    string CBL_SIZE, 
                    string CABLEINSTALLTYPE, 
                    string CBL_RUN_LENTH_FRM, 
                    string CBL_RUN_LENTH_TO, 
                    string CABLELENGTH, 
                    string CBL_DRM_NUMBR, 
                    string OUTPUTCABLELENGTH, 
                    string TERMINALSEAL1, 
                    string TERMINALSEAL2, 
                    string METERBOXSEAL1, 
                    string METERBOXSEAL2, 
                    string BUSBARSEAL1, 
                    string BUSBARSEAL2, 
                    string MTR_MRKWH, 
                    string MTR_MRKW, 
                    string MTR_MRKVAH, 
                    string MTR_MRKVA, 
                    string QC_PHOTO_TKN, 
                    string QC_METERDOWNLOAD, 
                    string QC_DBLOCKED, 
                    string QC_EARTHING_CONS, 
                    string QC_EARTHING_POLE, 
                    string QC_HEIGHTOFMETER, 
                    string QC_ANYJOINTS, 
                    string QC_FIXTR_INSL_CONS, 
                    string QC_FIXTR_INSL_POLE, 
                    string QC_FLOWMADE, 
                    string QC_ADDNL_ACC_USD, 
                    string QC_RMKS, 
                    string ORDER_STATUS, 
                    string CANCEL_RMKS, 
                    string ACTIVITY_DATE, 
                    string INSTALLEDLOCATION, 
                    string METERSCANNEDVAL, 
                    string MTR_LOC_SHIFT, 
                    string RMVD_CBL_SIZE, 
                    string RMVD_CBL_RUN_LENTH_FRM, 
                    string RMVD_CBL_RUN_LENTH_TO, 
                    string RMVD_CBL_LENTH, 
                    string RMVD_TRMNL_SEAL1, 
                    string RMVD_TRMNL_SEAL2, 
                    string RMVD_MTR_BOX_SEAL1, 
                    string RMVD_MTR_BOX_SEAL2, 
                    string RMVD_BUS_BAR_SEAL1, 
                    string RMVD_BUS_BAR_SEAL2, 
                    string RMVD_MTR_BOX, 
                    string RMVD_MTR_GLND, 
                    string RMVD_MTR_T_COVR, 
                    string RMVD_MTR_BRS_SCRW, 
                    string RMVD_MTR_BUS_BAR, 
                    string RMVD_MTR_THMBL_LUG, 
                    string RMVD_MTR_SADL, 
                    string RMVD_MTR_BASE_PLT, 
                    string OLD_MTR_MRKWH, 
                    string OLD_MTR_MRKW, 
                    string OLD_MTR_MRKVAH, 
                    string OLD_MTR_MRKVA, 
                    string OLD_MTR_STATUS, 
                    string OLD_MTR_IF_AVBL, 
                    string OLD_MTR_IF_NOT_AVBL, 
                    string GUNNY_BAG_NO, 
                    string GUNNY_BAG_SEAL_NO, 
                    string LAB_TSTNG_DT, 
                    string LAB_TSTNG_NTC, 
                    string MTR_LOC_RELOCT, 
                    string TAB_ID, 
                    string TAB_NAME, 
                    string GIS_LAT, 
                    string GIS_LONG, 
                    string GIS_STATUS, 
                    string IMEI_NO, 
                    string SUBMIT_DATETIME, 
                    string POLENUMBER, 
                    string PUNCH_MODE, 
                    string MTR_PHOTO, 
                    string CMPLT_MTR_INTALL_PHOTO, 
                    string MCR_PHOTO, 
                    string MCR_CONS_SIGN_PHOTO, 
                    string MCR_POLE_N_PHOTO, 
                    string MCR_OTHR_PHOTO, 
                    string MCR_TST_RPT_PHOTO, 
                    string MCR_LAB_TST_RPT_PHOTO, 
                    string PREMISE_PHOTO, 
                    string RMVD_MTR_PHOTO, 
                    string RMVD_CMPLT_MTR_INTALL_PHOTO, 
                    string HAPPY_CODE, 
                    string INST_BB_CABLE_OPT, 
                    string BB_CABLE_USED, 
                    string CABLE_LEN_USED, 
                    string OUTPUT_CABLE_LEN_USED, 
                    string SIFT_DONE_BY, 
                    string CAB_REMOVE_FRM_SITE, 
                    string REPLACEMENT_DONE_CABL, 
                    string CAB_RMVD_FRM_SITE, 
                    string IS_GNY_BAG_PREPD, 
                    string GNY_PREPD_NO_RESN, 
                    string GNY_PREPD_NO_RESN_RMK, 
                    string MTR_READ_AVAIL, 
                    string METER_REMOVED_BY, 
                    string NOTICE_DATE, 
                    string startDate, 
                    string customerName, 
                    string customerAddress, 
                    string customerMobile, 
                    string customerPole, 
                    string customerMeter, 
                    string accountClass, 
                    string connCategory, 
                    string customerCA, 
                    string looseOther1, 
                    string looseOther2, 
                    string looseFlag, 
                    string cableNotInstallReason, 
                    string noHappyCodeReason, 
                    string smartMeterBool, 
                    string smartMeterSimNo, 
                    string smartMeterSimCode, 
                    string SubDivisionCode, 
                    string mcrPDF, 
                    object userState) {
            if ((this.MCR_Insert_INPUT_Data_RV_NEW1OperationCompleted == null)) {
                this.MCR_Insert_INPUT_Data_RV_NEW1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_Insert_INPUT_Data_RV_NEW1OperationCompleted);
            }
            this.InvokeAsync("MCR_Insert_INPUT_Data_RV_NEW1", new object[] {
                        ORDER_NO,
                        ORDER_TYPE,
                        PM_ACTIVITY,
                        DEVICE_NO,
                        ACTVTY_RSN,
                        TF_STCKR_STUS,
                        TF_STCKR_NO,
                        ELCB_INSLD_ON_SITE,
                        BUS_BAR_INSTALLD,
                        BUS_BAR_SIZE,
                        BUS_BAR_NO,
                        BUS_BAR_CBL_SIZE,
                        BUS_BAR_DRM_NO,
                        BUS_BAR_CBL_INSTL_TYP,
                        BUS_BR_RUN_LENTH_FRM,
                        BUS_BR_RUN_LENTH_TO,
                        BUS_BR_CBL_LNGTH,
                        BUS_BAR_B_OR_C,
                        HV_U_INSTALL_NW_CBL,
                        CBL_SIZE,
                        CABLEINSTALLTYPE,
                        CBL_RUN_LENTH_FRM,
                        CBL_RUN_LENTH_TO,
                        CABLELENGTH,
                        CBL_DRM_NUMBR,
                        OUTPUTCABLELENGTH,
                        TERMINALSEAL1,
                        TERMINALSEAL2,
                        METERBOXSEAL1,
                        METERBOXSEAL2,
                        BUSBARSEAL1,
                        BUSBARSEAL2,
                        MTR_MRKWH,
                        MTR_MRKW,
                        MTR_MRKVAH,
                        MTR_MRKVA,
                        QC_PHOTO_TKN,
                        QC_METERDOWNLOAD,
                        QC_DBLOCKED,
                        QC_EARTHING_CONS,
                        QC_EARTHING_POLE,
                        QC_HEIGHTOFMETER,
                        QC_ANYJOINTS,
                        QC_FIXTR_INSL_CONS,
                        QC_FIXTR_INSL_POLE,
                        QC_FLOWMADE,
                        QC_ADDNL_ACC_USD,
                        QC_RMKS,
                        ORDER_STATUS,
                        CANCEL_RMKS,
                        ACTIVITY_DATE,
                        INSTALLEDLOCATION,
                        METERSCANNEDVAL,
                        MTR_LOC_SHIFT,
                        RMVD_CBL_SIZE,
                        RMVD_CBL_RUN_LENTH_FRM,
                        RMVD_CBL_RUN_LENTH_TO,
                        RMVD_CBL_LENTH,
                        RMVD_TRMNL_SEAL1,
                        RMVD_TRMNL_SEAL2,
                        RMVD_MTR_BOX_SEAL1,
                        RMVD_MTR_BOX_SEAL2,
                        RMVD_BUS_BAR_SEAL1,
                        RMVD_BUS_BAR_SEAL2,
                        RMVD_MTR_BOX,
                        RMVD_MTR_GLND,
                        RMVD_MTR_T_COVR,
                        RMVD_MTR_BRS_SCRW,
                        RMVD_MTR_BUS_BAR,
                        RMVD_MTR_THMBL_LUG,
                        RMVD_MTR_SADL,
                        RMVD_MTR_BASE_PLT,
                        OLD_MTR_MRKWH,
                        OLD_MTR_MRKW,
                        OLD_MTR_MRKVAH,
                        OLD_MTR_MRKVA,
                        OLD_MTR_STATUS,
                        OLD_MTR_IF_AVBL,
                        OLD_MTR_IF_NOT_AVBL,
                        GUNNY_BAG_NO,
                        GUNNY_BAG_SEAL_NO,
                        LAB_TSTNG_DT,
                        LAB_TSTNG_NTC,
                        MTR_LOC_RELOCT,
                        TAB_ID,
                        TAB_NAME,
                        GIS_LAT,
                        GIS_LONG,
                        GIS_STATUS,
                        IMEI_NO,
                        SUBMIT_DATETIME,
                        POLENUMBER,
                        PUNCH_MODE,
                        MTR_PHOTO,
                        CMPLT_MTR_INTALL_PHOTO,
                        MCR_PHOTO,
                        MCR_CONS_SIGN_PHOTO,
                        MCR_POLE_N_PHOTO,
                        MCR_OTHR_PHOTO,
                        MCR_TST_RPT_PHOTO,
                        MCR_LAB_TST_RPT_PHOTO,
                        PREMISE_PHOTO,
                        RMVD_MTR_PHOTO,
                        RMVD_CMPLT_MTR_INTALL_PHOTO,
                        HAPPY_CODE,
                        INST_BB_CABLE_OPT,
                        BB_CABLE_USED,
                        CABLE_LEN_USED,
                        OUTPUT_CABLE_LEN_USED,
                        SIFT_DONE_BY,
                        CAB_REMOVE_FRM_SITE,
                        REPLACEMENT_DONE_CABL,
                        CAB_RMVD_FRM_SITE,
                        IS_GNY_BAG_PREPD,
                        GNY_PREPD_NO_RESN,
                        GNY_PREPD_NO_RESN_RMK,
                        MTR_READ_AVAIL,
                        METER_REMOVED_BY,
                        NOTICE_DATE,
                        startDate,
                        customerName,
                        customerAddress,
                        customerMobile,
                        customerPole,
                        customerMeter,
                        accountClass,
                        connCategory,
                        customerCA,
                        looseOther1,
                        looseOther2,
                        looseFlag,
                        cableNotInstallReason,
                        noHappyCodeReason,
                        smartMeterBool,
                        smartMeterSimNo,
                        smartMeterSimCode,
                        SubDivisionCode,
                        mcrPDF}, this.MCR_Insert_INPUT_Data_RV_NEW1OperationCompleted, userState);
        }
        
        private void OnMCR_Insert_INPUT_Data_RV_NEW1OperationCompleted(object arg) {
            if ((this.MCR_Insert_INPUT_Data_RV_NEW1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_Insert_INPUT_Data_RV_NEW1Completed(this, new MCR_Insert_INPUT_Data_RV_NEW1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_GetCancelRmkDetails", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable MCR_GetCancelRmkDetails(string _sOrderType) {
            object[] results = this.Invoke("MCR_GetCancelRmkDetails", new object[] {
                        _sOrderType});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_GetCancelRmkDetailsAsync(string _sOrderType) {
            this.MCR_GetCancelRmkDetailsAsync(_sOrderType, null);
        }
        
        /// <remarks/>
        public void MCR_GetCancelRmkDetailsAsync(string _sOrderType, object userState) {
            if ((this.MCR_GetCancelRmkDetailsOperationCompleted == null)) {
                this.MCR_GetCancelRmkDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_GetCancelRmkDetailsOperationCompleted);
            }
            this.InvokeAsync("MCR_GetCancelRmkDetails", new object[] {
                        _sOrderType}, this.MCR_GetCancelRmkDetailsOperationCompleted, userState);
        }
        
        private void OnMCR_GetCancelRmkDetailsOperationCompleted(object arg) {
            if ((this.MCR_GetCancelRmkDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_GetCancelRmkDetailsCompleted(this, new MCR_GetCancelRmkDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_GetSubDiv_Division", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable MCR_GetSubDiv_Division(string _sDivision) {
            object[] results = this.Invoke("MCR_GetSubDiv_Division", new object[] {
                        _sDivision});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_GetSubDiv_DivisionAsync(string _sDivision) {
            this.MCR_GetSubDiv_DivisionAsync(_sDivision, null);
        }
        
        /// <remarks/>
        public void MCR_GetSubDiv_DivisionAsync(string _sDivision, object userState) {
            if ((this.MCR_GetSubDiv_DivisionOperationCompleted == null)) {
                this.MCR_GetSubDiv_DivisionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_GetSubDiv_DivisionOperationCompleted);
            }
            this.InvokeAsync("MCR_GetSubDiv_Division", new object[] {
                        _sDivision}, this.MCR_GetSubDiv_DivisionOperationCompleted, userState);
        }
        
        private void OnMCR_GetSubDiv_DivisionOperationCompleted(object arg) {
            if ((this.MCR_GetSubDiv_DivisionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_GetSubDiv_DivisionCompleted(this, new MCR_GetSubDiv_DivisionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/MCR_GetUserMCR_INPUT_COMP_DT", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable MCR_GetUserMCR_INPUT_COMP_DT(string strUser) {
            object[] results = this.Invoke("MCR_GetUserMCR_INPUT_COMP_DT", new object[] {
                        strUser});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void MCR_GetUserMCR_INPUT_COMP_DTAsync(string strUser) {
            this.MCR_GetUserMCR_INPUT_COMP_DTAsync(strUser, null);
        }
        
        /// <remarks/>
        public void MCR_GetUserMCR_INPUT_COMP_DTAsync(string strUser, object userState) {
            if ((this.MCR_GetUserMCR_INPUT_COMP_DTOperationCompleted == null)) {
                this.MCR_GetUserMCR_INPUT_COMP_DTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMCR_GetUserMCR_INPUT_COMP_DTOperationCompleted);
            }
            this.InvokeAsync("MCR_GetUserMCR_INPUT_COMP_DT", new object[] {
                        strUser}, this.MCR_GetUserMCR_INPUT_COMP_DTOperationCompleted, userState);
        }
        
        private void OnMCR_GetUserMCR_INPUT_COMP_DTOperationCompleted(object arg) {
            if ((this.MCR_GetUserMCR_INPUT_COMP_DTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MCR_GetUserMCR_INPUT_COMP_DTCompleted(this, new MCR_GetUserMCR_INPUT_COMP_DTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/RecServices_Category", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RecServices_Category(string strKeyParam) {
            object[] results = this.Invoke("RecServices_Category", new object[] {
                        strKeyParam});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RecServices_CategoryAsync(string strKeyParam) {
            this.RecServices_CategoryAsync(strKeyParam, null);
        }
        
        /// <remarks/>
        public void RecServices_CategoryAsync(string strKeyParam, object userState) {
            if ((this.RecServices_CategoryOperationCompleted == null)) {
                this.RecServices_CategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecServices_CategoryOperationCompleted);
            }
            this.InvokeAsync("RecServices_Category", new object[] {
                        strKeyParam}, this.RecServices_CategoryOperationCompleted, userState);
        }
        
        private void OnRecServices_CategoryOperationCompleted(object arg) {
            if ((this.RecServices_CategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecServices_CategoryCompleted(this, new RecServices_CategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/RecServices_Amount_Bucket", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RecServices_Amount_Bucket(string strKeyParam) {
            object[] results = this.Invoke("RecServices_Amount_Bucket", new object[] {
                        strKeyParam});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RecServices_Amount_BucketAsync(string strKeyParam) {
            this.RecServices_Amount_BucketAsync(strKeyParam, null);
        }
        
        /// <remarks/>
        public void RecServices_Amount_BucketAsync(string strKeyParam, object userState) {
            if ((this.RecServices_Amount_BucketOperationCompleted == null)) {
                this.RecServices_Amount_BucketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecServices_Amount_BucketOperationCompleted);
            }
            this.InvokeAsync("RecServices_Amount_Bucket", new object[] {
                        strKeyParam}, this.RecServices_Amount_BucketOperationCompleted, userState);
        }
        
        private void OnRecServices_Amount_BucketOperationCompleted(object arg) {
            if ((this.RecServices_Amount_BucketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecServices_Amount_BucketCompleted(this, new RecServices_Amount_BucketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/RecServices_Aging_Bucket", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RecServices_Aging_Bucket(string strKeyParam) {
            object[] results = this.Invoke("RecServices_Aging_Bucket", new object[] {
                        strKeyParam});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RecServices_Aging_BucketAsync(string strKeyParam) {
            this.RecServices_Aging_BucketAsync(strKeyParam, null);
        }
        
        /// <remarks/>
        public void RecServices_Aging_BucketAsync(string strKeyParam, object userState) {
            if ((this.RecServices_Aging_BucketOperationCompleted == null)) {
                this.RecServices_Aging_BucketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecServices_Aging_BucketOperationCompleted);
            }
            this.InvokeAsync("RecServices_Aging_Bucket", new object[] {
                        strKeyParam}, this.RecServices_Aging_BucketOperationCompleted, userState);
        }
        
        private void OnRecServices_Aging_BucketOperationCompleted(object arg) {
            if ((this.RecServices_Aging_BucketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecServices_Aging_BucketCompleted(this, new RecServices_Aging_BucketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/RecServices_Account_Class", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RecServices_Account_Class(string strKeyParam) {
            object[] results = this.Invoke("RecServices_Account_Class", new object[] {
                        strKeyParam});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RecServices_Account_ClassAsync(string strKeyParam) {
            this.RecServices_Account_ClassAsync(strKeyParam, null);
        }
        
        /// <remarks/>
        public void RecServices_Account_ClassAsync(string strKeyParam, object userState) {
            if ((this.RecServices_Account_ClassOperationCompleted == null)) {
                this.RecServices_Account_ClassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecServices_Account_ClassOperationCompleted);
            }
            this.InvokeAsync("RecServices_Account_Class", new object[] {
                        strKeyParam}, this.RecServices_Account_ClassOperationCompleted, userState);
        }
        
        private void OnRecServices_Account_ClassOperationCompleted(object arg) {
            if ((this.RecServices_Account_ClassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecServices_Account_ClassCompleted(this, new RecServices_Account_ClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/RecServices_ATR_Status", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RecServices_ATR_Status(string strKeyParam) {
            object[] results = this.Invoke("RecServices_ATR_Status", new object[] {
                        strKeyParam});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RecServices_ATR_StatusAsync(string strKeyParam) {
            this.RecServices_ATR_StatusAsync(strKeyParam, null);
        }
        
        /// <remarks/>
        public void RecServices_ATR_StatusAsync(string strKeyParam, object userState) {
            if ((this.RecServices_ATR_StatusOperationCompleted == null)) {
                this.RecServices_ATR_StatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecServices_ATR_StatusOperationCompleted);
            }
            this.InvokeAsync("RecServices_ATR_Status", new object[] {
                        strKeyParam}, this.RecServices_ATR_StatusOperationCompleted, userState);
        }
        
        private void OnRecServices_ATR_StatusOperationCompleted(object arg) {
            if ((this.RecServices_ATR_StatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecServices_ATR_StatusCompleted(this, new RecServices_ATR_StatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/RecAllocDefltrs", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable RecAllocDefltrs(string strKeyParam, string _sCategory, string _sAmtBktID, string _sAgeBktID, string _sAccountClass, string _sDishonorFlag, string _sFEID) {
            object[] results = this.Invoke("RecAllocDefltrs", new object[] {
                        strKeyParam,
                        _sCategory,
                        _sAmtBktID,
                        _sAgeBktID,
                        _sAccountClass,
                        _sDishonorFlag,
                        _sFEID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void RecAllocDefltrsAsync(string strKeyParam, string _sCategory, string _sAmtBktID, string _sAgeBktID, string _sAccountClass, string _sDishonorFlag, string _sFEID) {
            this.RecAllocDefltrsAsync(strKeyParam, _sCategory, _sAmtBktID, _sAgeBktID, _sAccountClass, _sDishonorFlag, _sFEID, null);
        }
        
        /// <remarks/>
        public void RecAllocDefltrsAsync(string strKeyParam, string _sCategory, string _sAmtBktID, string _sAgeBktID, string _sAccountClass, string _sDishonorFlag, string _sFEID, object userState) {
            if ((this.RecAllocDefltrsOperationCompleted == null)) {
                this.RecAllocDefltrsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecAllocDefltrsOperationCompleted);
            }
            this.InvokeAsync("RecAllocDefltrs", new object[] {
                        strKeyParam,
                        _sCategory,
                        _sAmtBktID,
                        _sAgeBktID,
                        _sAccountClass,
                        _sDishonorFlag,
                        _sFEID}, this.RecAllocDefltrsOperationCompleted, userState);
        }
        
        private void OnRecAllocDefltrsOperationCompleted(object arg) {
            if ((this.RecAllocDefltrsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecAllocDefltrsCompleted(this, new RecAllocDefltrsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/searchDefltrs", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable searchDefltrs(string strKeyParam, string _sCANumber, string _sMeterNumber, string _sFEID) {
            object[] results = this.Invoke("searchDefltrs", new object[] {
                        strKeyParam,
                        _sCANumber,
                        _sMeterNumber,
                        _sFEID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void searchDefltrsAsync(string strKeyParam, string _sCANumber, string _sMeterNumber, string _sFEID) {
            this.searchDefltrsAsync(strKeyParam, _sCANumber, _sMeterNumber, _sFEID, null);
        }
        
        /// <remarks/>
        public void searchDefltrsAsync(string strKeyParam, string _sCANumber, string _sMeterNumber, string _sFEID, object userState) {
            if ((this.searchDefltrsOperationCompleted == null)) {
                this.searchDefltrsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsearchDefltrsOperationCompleted);
            }
            this.InvokeAsync("searchDefltrs", new object[] {
                        strKeyParam,
                        _sCANumber,
                        _sMeterNumber,
                        _sFEID}, this.searchDefltrsOperationCompleted, userState);
        }
        
        private void OnsearchDefltrsOperationCompleted(object arg) {
            if ((this.searchDefltrsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.searchDefltrsCompleted(this, new searchDefltrsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/getPayment", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getPayment(string strKeyParam, string _sCANumber, string _sMeterNumber) {
            object[] results = this.Invoke("getPayment", new object[] {
                        strKeyParam,
                        _sCANumber,
                        _sMeterNumber});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getPaymentAsync(string strKeyParam, string _sCANumber, string _sMeterNumber) {
            this.getPaymentAsync(strKeyParam, _sCANumber, _sMeterNumber, null);
        }
        
        /// <remarks/>
        public void getPaymentAsync(string strKeyParam, string _sCANumber, string _sMeterNumber, object userState) {
            if ((this.getPaymentOperationCompleted == null)) {
                this.getPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPaymentOperationCompleted);
            }
            this.InvokeAsync("getPayment", new object[] {
                        strKeyParam,
                        _sCANumber,
                        _sMeterNumber}, this.getPaymentOperationCompleted, userState);
        }
        
        private void OngetPaymentOperationCompleted(object arg) {
            if ((this.getPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPaymentCompleted(this, new getPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/insertATR", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool insertATR(string strKeyParam, string _sCANumber, string _sStatus, string _sFEID, string _sTabUpdStatus, string _sRemarks, string _sImgFlg, string _sImgPath, string _sFollowDate, string _sAltContNo, string _sAltEmailID, string _sMobileNo, string _sMessage, string _sUpdationID) {
            object[] results = this.Invoke("insertATR", new object[] {
                        strKeyParam,
                        _sCANumber,
                        _sStatus,
                        _sFEID,
                        _sTabUpdStatus,
                        _sRemarks,
                        _sImgFlg,
                        _sImgPath,
                        _sFollowDate,
                        _sAltContNo,
                        _sAltEmailID,
                        _sMobileNo,
                        _sMessage,
                        _sUpdationID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void insertATRAsync(string strKeyParam, string _sCANumber, string _sStatus, string _sFEID, string _sTabUpdStatus, string _sRemarks, string _sImgFlg, string _sImgPath, string _sFollowDate, string _sAltContNo, string _sAltEmailID, string _sMobileNo, string _sMessage, string _sUpdationID) {
            this.insertATRAsync(strKeyParam, _sCANumber, _sStatus, _sFEID, _sTabUpdStatus, _sRemarks, _sImgFlg, _sImgPath, _sFollowDate, _sAltContNo, _sAltEmailID, _sMobileNo, _sMessage, _sUpdationID, null);
        }
        
        /// <remarks/>
        public void insertATRAsync(string strKeyParam, string _sCANumber, string _sStatus, string _sFEID, string _sTabUpdStatus, string _sRemarks, string _sImgFlg, string _sImgPath, string _sFollowDate, string _sAltContNo, string _sAltEmailID, string _sMobileNo, string _sMessage, string _sUpdationID, object userState) {
            if ((this.insertATROperationCompleted == null)) {
                this.insertATROperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertATROperationCompleted);
            }
            this.InvokeAsync("insertATR", new object[] {
                        strKeyParam,
                        _sCANumber,
                        _sStatus,
                        _sFEID,
                        _sTabUpdStatus,
                        _sRemarks,
                        _sImgFlg,
                        _sImgPath,
                        _sFollowDate,
                        _sAltContNo,
                        _sAltEmailID,
                        _sMobileNo,
                        _sMessage,
                        _sUpdationID}, this.insertATROperationCompleted, userState);
        }
        
        private void OninsertATROperationCompleted(object arg) {
            if ((this.insertATRCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertATRCompleted(this, new insertATRCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/DetailofMIS", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DetailofMIS(string strKeyParam, string _sFEID) {
            object[] results = this.Invoke("DetailofMIS", new object[] {
                        strKeyParam,
                        _sFEID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void DetailofMISAsync(string strKeyParam, string _sFEID) {
            this.DetailofMISAsync(strKeyParam, _sFEID, null);
        }
        
        /// <remarks/>
        public void DetailofMISAsync(string strKeyParam, string _sFEID, object userState) {
            if ((this.DetailofMISOperationCompleted == null)) {
                this.DetailofMISOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDetailofMISOperationCompleted);
            }
            this.InvokeAsync("DetailofMIS", new object[] {
                        strKeyParam,
                        _sFEID}, this.DetailofMISOperationCompleted, userState);
        }
        
        private void OnDetailofMISOperationCompleted(object arg) {
            if ((this.DetailofMISCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DetailofMISCompleted(this, new DetailofMISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/loginFE", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable loginFE(string strKeyParam, string _sLogin, string _sPassword, string _sIMEINo) {
            object[] results = this.Invoke("loginFE", new object[] {
                        strKeyParam,
                        _sLogin,
                        _sPassword,
                        _sIMEINo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void loginFEAsync(string strKeyParam, string _sLogin, string _sPassword, string _sIMEINo) {
            this.loginFEAsync(strKeyParam, _sLogin, _sPassword, _sIMEINo, null);
        }
        
        /// <remarks/>
        public void loginFEAsync(string strKeyParam, string _sLogin, string _sPassword, string _sIMEINo, object userState) {
            if ((this.loginFEOperationCompleted == null)) {
                this.loginFEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnloginFEOperationCompleted);
            }
            this.InvokeAsync("loginFE", new object[] {
                        strKeyParam,
                        _sLogin,
                        _sPassword,
                        _sIMEINo}, this.loginFEOperationCompleted, userState);
        }
        
        private void OnloginFEOperationCompleted(object arg) {
            if ((this.loginFECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.loginFECompleted(this, new loginFECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/changePassword", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool changePassword(string strKeyParam, string _sLogin, string _sOldPassword, string _sNewPassword) {
            object[] results = this.Invoke("changePassword", new object[] {
                        strKeyParam,
                        _sLogin,
                        _sOldPassword,
                        _sNewPassword});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void changePasswordAsync(string strKeyParam, string _sLogin, string _sOldPassword, string _sNewPassword) {
            this.changePasswordAsync(strKeyParam, _sLogin, _sOldPassword, _sNewPassword, null);
        }
        
        /// <remarks/>
        public void changePasswordAsync(string strKeyParam, string _sLogin, string _sOldPassword, string _sNewPassword, object userState) {
            if ((this.changePasswordOperationCompleted == null)) {
                this.changePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnchangePasswordOperationCompleted);
            }
            this.InvokeAsync("changePassword", new object[] {
                        strKeyParam,
                        _sLogin,
                        _sOldPassword,
                        _sNewPassword}, this.changePasswordOperationCompleted, userState);
        }
        
        private void OnchangePasswordOperationCompleted(object arg) {
            if ((this.changePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.changePasswordCompleted(this, new changePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/insertLog", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool insertLog(string strKeyParam, string _sFEID, string _sCANO, string _sMeterNo, string _sInTime, string _sOutTime, string _sNetStatus, string _sLatitude, string _sLongitude, string _sInsDate, string strOne, string strTwo, string strThree, string strFour) {
            object[] results = this.Invoke("insertLog", new object[] {
                        strKeyParam,
                        _sFEID,
                        _sCANO,
                        _sMeterNo,
                        _sInTime,
                        _sOutTime,
                        _sNetStatus,
                        _sLatitude,
                        _sLongitude,
                        _sInsDate,
                        strOne,
                        strTwo,
                        strThree,
                        strFour});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void insertLogAsync(string strKeyParam, string _sFEID, string _sCANO, string _sMeterNo, string _sInTime, string _sOutTime, string _sNetStatus, string _sLatitude, string _sLongitude, string _sInsDate, string strOne, string strTwo, string strThree, string strFour) {
            this.insertLogAsync(strKeyParam, _sFEID, _sCANO, _sMeterNo, _sInTime, _sOutTime, _sNetStatus, _sLatitude, _sLongitude, _sInsDate, strOne, strTwo, strThree, strFour, null);
        }
        
        /// <remarks/>
        public void insertLogAsync(string strKeyParam, string _sFEID, string _sCANO, string _sMeterNo, string _sInTime, string _sOutTime, string _sNetStatus, string _sLatitude, string _sLongitude, string _sInsDate, string strOne, string strTwo, string strThree, string strFour, object userState) {
            if ((this.insertLogOperationCompleted == null)) {
                this.insertLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertLogOperationCompleted);
            }
            this.InvokeAsync("insertLog", new object[] {
                        strKeyParam,
                        _sFEID,
                        _sCANO,
                        _sMeterNo,
                        _sInTime,
                        _sOutTime,
                        _sNetStatus,
                        _sLatitude,
                        _sLongitude,
                        _sInsDate,
                        strOne,
                        strTwo,
                        strThree,
                        strFour}, this.insertLogOperationCompleted, userState);
        }
        
        private void OninsertLogOperationCompleted(object arg) {
            if ((this.insertLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertLogCompleted(this, new insertLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/RecServices_New", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RecServices_New(string strKeyParam) {
            object[] results = this.Invoke("RecServices_New", new object[] {
                        strKeyParam});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RecServices_NewAsync(string strKeyParam) {
            this.RecServices_NewAsync(strKeyParam, null);
        }
        
        /// <remarks/>
        public void RecServices_NewAsync(string strKeyParam, object userState) {
            if ((this.RecServices_NewOperationCompleted == null)) {
                this.RecServices_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecServices_NewOperationCompleted);
            }
            this.InvokeAsync("RecServices_New", new object[] {
                        strKeyParam}, this.RecServices_NewOperationCompleted, userState);
        }
        
        private void OnRecServices_NewOperationCompleted(object arg) {
            if ((this.RecServices_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecServices_NewCompleted(this, new RecServices_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ZBAPI_UPDATE_TNO", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ZBAPI_UPDATE_TNO(string strCA_no, string strTelephone, string strMobile, string strEmail, string strLandmark, string strDISPATCH_CTRL) {
            object[] results = this.Invoke("ZBAPI_UPDATE_TNO", new object[] {
                        strCA_no,
                        strTelephone,
                        strMobile,
                        strEmail,
                        strLandmark,
                        strDISPATCH_CTRL});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ZBAPI_UPDATE_TNOAsync(string strCA_no, string strTelephone, string strMobile, string strEmail, string strLandmark, string strDISPATCH_CTRL) {
            this.ZBAPI_UPDATE_TNOAsync(strCA_no, strTelephone, strMobile, strEmail, strLandmark, strDISPATCH_CTRL, null);
        }
        
        /// <remarks/>
        public void ZBAPI_UPDATE_TNOAsync(string strCA_no, string strTelephone, string strMobile, string strEmail, string strLandmark, string strDISPATCH_CTRL, object userState) {
            if ((this.ZBAPI_UPDATE_TNOOperationCompleted == null)) {
                this.ZBAPI_UPDATE_TNOOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZBAPI_UPDATE_TNOOperationCompleted);
            }
            this.InvokeAsync("ZBAPI_UPDATE_TNO", new object[] {
                        strCA_no,
                        strTelephone,
                        strMobile,
                        strEmail,
                        strLandmark,
                        strDISPATCH_CTRL}, this.ZBAPI_UPDATE_TNOOperationCompleted, userState);
        }
        
        private void OnZBAPI_UPDATE_TNOOperationCompleted(object arg) {
            if ((this.ZBAPI_UPDATE_TNOCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZBAPI_UPDATE_TNOCompleted(this, new ZBAPI_UPDATE_TNOCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ZBAPI_CNTAPP_DETAILMOB", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ZBAPI_CNTAPP_DETAILMOB(string strOrderType, string strDiv, string strApp_DT, string strAPPTM, string strCount) {
            object[] results = this.Invoke("ZBAPI_CNTAPP_DETAILMOB", new object[] {
                        strOrderType,
                        strDiv,
                        strApp_DT,
                        strAPPTM,
                        strCount});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ZBAPI_CNTAPP_DETAILMOBAsync(string strOrderType, string strDiv, string strApp_DT, string strAPPTM, string strCount) {
            this.ZBAPI_CNTAPP_DETAILMOBAsync(strOrderType, strDiv, strApp_DT, strAPPTM, strCount, null);
        }
        
        /// <remarks/>
        public void ZBAPI_CNTAPP_DETAILMOBAsync(string strOrderType, string strDiv, string strApp_DT, string strAPPTM, string strCount, object userState) {
            if ((this.ZBAPI_CNTAPP_DETAILMOBOperationCompleted == null)) {
                this.ZBAPI_CNTAPP_DETAILMOBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZBAPI_CNTAPP_DETAILMOBOperationCompleted);
            }
            this.InvokeAsync("ZBAPI_CNTAPP_DETAILMOB", new object[] {
                        strOrderType,
                        strDiv,
                        strApp_DT,
                        strAPPTM,
                        strCount}, this.ZBAPI_CNTAPP_DETAILMOBOperationCompleted, userState);
        }
        
        private void OnZBAPI_CNTAPP_DETAILMOBOperationCompleted(object arg) {
            if ((this.ZBAPI_CNTAPP_DETAILMOBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZBAPI_CNTAPP_DETAILMOBCompleted(this, new ZBAPI_CNTAPP_DETAILMOBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ZBAPI_CREATESO_POST", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ZBAPI_CREATESO_POST(string strKeyParam, string strPMAufart, string strPlanPlant, string strRegioGroup, string strShortText, string strILA, string strMFText, string strUserFieldCH20, string StrControkey, string strSerialNumber, string strComplaintGroup, string strCANumber, string strContract, string strMFText1) {
            object[] results = this.Invoke("ZBAPI_CREATESO_POST", new object[] {
                        strKeyParam,
                        strPMAufart,
                        strPlanPlant,
                        strRegioGroup,
                        strShortText,
                        strILA,
                        strMFText,
                        strUserFieldCH20,
                        StrControkey,
                        strSerialNumber,
                        strComplaintGroup,
                        strCANumber,
                        strContract,
                        strMFText1});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ZBAPI_CREATESO_POSTAsync(string strKeyParam, string strPMAufart, string strPlanPlant, string strRegioGroup, string strShortText, string strILA, string strMFText, string strUserFieldCH20, string StrControkey, string strSerialNumber, string strComplaintGroup, string strCANumber, string strContract, string strMFText1) {
            this.ZBAPI_CREATESO_POSTAsync(strKeyParam, strPMAufart, strPlanPlant, strRegioGroup, strShortText, strILA, strMFText, strUserFieldCH20, StrControkey, strSerialNumber, strComplaintGroup, strCANumber, strContract, strMFText1, null);
        }
        
        /// <remarks/>
        public void ZBAPI_CREATESO_POSTAsync(string strKeyParam, string strPMAufart, string strPlanPlant, string strRegioGroup, string strShortText, string strILA, string strMFText, string strUserFieldCH20, string StrControkey, string strSerialNumber, string strComplaintGroup, string strCANumber, string strContract, string strMFText1, object userState) {
            if ((this.ZBAPI_CREATESO_POSTOperationCompleted == null)) {
                this.ZBAPI_CREATESO_POSTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZBAPI_CREATESO_POSTOperationCompleted);
            }
            this.InvokeAsync("ZBAPI_CREATESO_POST", new object[] {
                        strKeyParam,
                        strPMAufart,
                        strPlanPlant,
                        strRegioGroup,
                        strShortText,
                        strILA,
                        strMFText,
                        strUserFieldCH20,
                        StrControkey,
                        strSerialNumber,
                        strComplaintGroup,
                        strCANumber,
                        strContract,
                        strMFText1}, this.ZBAPI_CREATESO_POSTOperationCompleted, userState);
        }
        
        private void OnZBAPI_CREATESO_POSTOperationCompleted(object arg) {
            if ((this.ZBAPI_CREATESO_POSTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZBAPI_CREATESO_POSTCompleted(this, new ZBAPI_CREATESO_POSTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/LR_Scheme_DivSchmMapping", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LR_Scheme_DivSchmMapping(string strKeyParam, string circle, string division, string subdivision, string scheme) {
            object[] results = this.Invoke("LR_Scheme_DivSchmMapping", new object[] {
                        strKeyParam,
                        circle,
                        division,
                        subdivision,
                        scheme});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LR_Scheme_DivSchmMappingAsync(string strKeyParam, string circle, string division, string subdivision, string scheme) {
            this.LR_Scheme_DivSchmMappingAsync(strKeyParam, circle, division, subdivision, scheme, null);
        }
        
        /// <remarks/>
        public void LR_Scheme_DivSchmMappingAsync(string strKeyParam, string circle, string division, string subdivision, string scheme, object userState) {
            if ((this.LR_Scheme_DivSchmMappingOperationCompleted == null)) {
                this.LR_Scheme_DivSchmMappingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLR_Scheme_DivSchmMappingOperationCompleted);
            }
            this.InvokeAsync("LR_Scheme_DivSchmMapping", new object[] {
                        strKeyParam,
                        circle,
                        division,
                        subdivision,
                        scheme}, this.LR_Scheme_DivSchmMappingOperationCompleted, userState);
        }
        
        private void OnLR_Scheme_DivSchmMappingOperationCompleted(object arg) {
            if ((this.LR_Scheme_DivSchmMappingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LR_Scheme_DivSchmMappingCompleted(this, new LR_Scheme_DivSchmMappingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/LR_Scheme_AllDivSchmMapping", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LR_Scheme_AllDivSchmMapping(string strKeyParam, string circle, string division, string subdivision, string scheme) {
            object[] results = this.Invoke("LR_Scheme_AllDivSchmMapping", new object[] {
                        strKeyParam,
                        circle,
                        division,
                        subdivision,
                        scheme});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LR_Scheme_AllDivSchmMappingAsync(string strKeyParam, string circle, string division, string subdivision, string scheme) {
            this.LR_Scheme_AllDivSchmMappingAsync(strKeyParam, circle, division, subdivision, scheme, null);
        }
        
        /// <remarks/>
        public void LR_Scheme_AllDivSchmMappingAsync(string strKeyParam, string circle, string division, string subdivision, string scheme, object userState) {
            if ((this.LR_Scheme_AllDivSchmMappingOperationCompleted == null)) {
                this.LR_Scheme_AllDivSchmMappingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLR_Scheme_AllDivSchmMappingOperationCompleted);
            }
            this.InvokeAsync("LR_Scheme_AllDivSchmMapping", new object[] {
                        strKeyParam,
                        circle,
                        division,
                        subdivision,
                        scheme}, this.LR_Scheme_AllDivSchmMappingOperationCompleted, userState);
        }
        
        private void OnLR_Scheme_AllDivSchmMappingOperationCompleted(object arg) {
            if ((this.LR_Scheme_AllDivSchmMappingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LR_Scheme_AllDivSchmMappingCompleted(this, new LR_Scheme_AllDivSchmMappingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/LR_NewActivityModuleSchemeMIS", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LR_NewActivityModuleSchemeMIS(string strKeyParam, string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv) {
            object[] results = this.Invoke("LR_NewActivityModuleSchemeMIS", new object[] {
                        strKeyParam,
                        strDivName,
                        strRolRght,
                        strDate,
                        strToDate,
                        strSubDiv});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LR_NewActivityModuleSchemeMISAsync(string strKeyParam, string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv) {
            this.LR_NewActivityModuleSchemeMISAsync(strKeyParam, strDivName, strRolRght, strDate, strToDate, strSubDiv, null);
        }
        
        /// <remarks/>
        public void LR_NewActivityModuleSchemeMISAsync(string strKeyParam, string strDivName, string strRolRght, string strDate, string strToDate, string strSubDiv, object userState) {
            if ((this.LR_NewActivityModuleSchemeMISOperationCompleted == null)) {
                this.LR_NewActivityModuleSchemeMISOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLR_NewActivityModuleSchemeMISOperationCompleted);
            }
            this.InvokeAsync("LR_NewActivityModuleSchemeMIS", new object[] {
                        strKeyParam,
                        strDivName,
                        strRolRght,
                        strDate,
                        strToDate,
                        strSubDiv}, this.LR_NewActivityModuleSchemeMISOperationCompleted, userState);
        }
        
        private void OnLR_NewActivityModuleSchemeMISOperationCompleted(object arg) {
            if ((this.LR_NewActivityModuleSchemeMISCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LR_NewActivityModuleSchemeMISCompleted(this, new LR_NewActivityModuleSchemeMISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/LR_NewSurvellanceCircleDivMIS", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LR_NewSurvellanceCircleDivMIS(string strKeyParam, string strDivName, string strRolRght, string frmDate, string toDate, string strSubDiv) {
            object[] results = this.Invoke("LR_NewSurvellanceCircleDivMIS", new object[] {
                        strKeyParam,
                        strDivName,
                        strRolRght,
                        frmDate,
                        toDate,
                        strSubDiv});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LR_NewSurvellanceCircleDivMISAsync(string strKeyParam, string strDivName, string strRolRght, string frmDate, string toDate, string strSubDiv) {
            this.LR_NewSurvellanceCircleDivMISAsync(strKeyParam, strDivName, strRolRght, frmDate, toDate, strSubDiv, null);
        }
        
        /// <remarks/>
        public void LR_NewSurvellanceCircleDivMISAsync(string strKeyParam, string strDivName, string strRolRght, string frmDate, string toDate, string strSubDiv, object userState) {
            if ((this.LR_NewSurvellanceCircleDivMISOperationCompleted == null)) {
                this.LR_NewSurvellanceCircleDivMISOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLR_NewSurvellanceCircleDivMISOperationCompleted);
            }
            this.InvokeAsync("LR_NewSurvellanceCircleDivMIS", new object[] {
                        strKeyParam,
                        strDivName,
                        strRolRght,
                        frmDate,
                        toDate,
                        strSubDiv}, this.LR_NewSurvellanceCircleDivMISOperationCompleted, userState);
        }
        
        private void OnLR_NewSurvellanceCircleDivMISOperationCompleted(object arg) {
            if ((this.LR_NewSurvellanceCircleDivMISCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LR_NewSurvellanceCircleDivMISCompleted(this, new LR_NewSurvellanceCircleDivMISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/LR_NEW_QC_MIS", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable LR_NEW_QC_MIS(string strKeyParam, string strDivName, string strRolRght, string frmDate, string toDate, string strSubDiv) {
            object[] results = this.Invoke("LR_NEW_QC_MIS", new object[] {
                        strKeyParam,
                        strDivName,
                        strRolRght,
                        frmDate,
                        toDate,
                        strSubDiv});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void LR_NEW_QC_MISAsync(string strKeyParam, string strDivName, string strRolRght, string frmDate, string toDate, string strSubDiv) {
            this.LR_NEW_QC_MISAsync(strKeyParam, strDivName, strRolRght, frmDate, toDate, strSubDiv, null);
        }
        
        /// <remarks/>
        public void LR_NEW_QC_MISAsync(string strKeyParam, string strDivName, string strRolRght, string frmDate, string toDate, string strSubDiv, object userState) {
            if ((this.LR_NEW_QC_MISOperationCompleted == null)) {
                this.LR_NEW_QC_MISOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLR_NEW_QC_MISOperationCompleted);
            }
            this.InvokeAsync("LR_NEW_QC_MIS", new object[] {
                        strKeyParam,
                        strDivName,
                        strRolRght,
                        frmDate,
                        toDate,
                        strSubDiv}, this.LR_NEW_QC_MISOperationCompleted, userState);
        }
        
        private void OnLR_NEW_QC_MISOperationCompleted(object arg) {
            if ((this.LR_NEW_QC_MISCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LR_NEW_QC_MISCompleted(this, new LR_NEW_QC_MISCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Seva_get_Login_Details", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Seva_get_Login_Details(string strUser_id, string strPassword, string strIMEI, string strLongitude, string strLatitude) {
            object[] results = this.Invoke("Seva_get_Login_Details", new object[] {
                        strUser_id,
                        strPassword,
                        strIMEI,
                        strLongitude,
                        strLatitude});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Seva_get_Login_DetailsAsync(string strUser_id, string strPassword, string strIMEI, string strLongitude, string strLatitude) {
            this.Seva_get_Login_DetailsAsync(strUser_id, strPassword, strIMEI, strLongitude, strLatitude, null);
        }
        
        /// <remarks/>
        public void Seva_get_Login_DetailsAsync(string strUser_id, string strPassword, string strIMEI, string strLongitude, string strLatitude, object userState) {
            if ((this.Seva_get_Login_DetailsOperationCompleted == null)) {
                this.Seva_get_Login_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSeva_get_Login_DetailsOperationCompleted);
            }
            this.InvokeAsync("Seva_get_Login_Details", new object[] {
                        strUser_id,
                        strPassword,
                        strIMEI,
                        strLongitude,
                        strLatitude}, this.Seva_get_Login_DetailsOperationCompleted, userState);
        }
        
        private void OnSeva_get_Login_DetailsOperationCompleted(object arg) {
            if ((this.Seva_get_Login_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Seva_get_Login_DetailsCompleted(this, new Seva_get_Login_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Seva_change_Password", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Seva_change_Password(string strUser_id, string strCurrent_Password, string strNew_Password) {
            object[] results = this.Invoke("Seva_change_Password", new object[] {
                        strUser_id,
                        strCurrent_Password,
                        strNew_Password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Seva_change_PasswordAsync(string strUser_id, string strCurrent_Password, string strNew_Password) {
            this.Seva_change_PasswordAsync(strUser_id, strCurrent_Password, strNew_Password, null);
        }
        
        /// <remarks/>
        public void Seva_change_PasswordAsync(string strUser_id, string strCurrent_Password, string strNew_Password, object userState) {
            if ((this.Seva_change_PasswordOperationCompleted == null)) {
                this.Seva_change_PasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSeva_change_PasswordOperationCompleted);
            }
            this.InvokeAsync("Seva_change_Password", new object[] {
                        strUser_id,
                        strCurrent_Password,
                        strNew_Password}, this.Seva_change_PasswordOperationCompleted, userState);
        }
        
        private void OnSeva_change_PasswordOperationCompleted(object arg) {
            if ((this.Seva_change_PasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Seva_change_PasswordCompleted(this, new Seva_change_PasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Seva_get_Order_Details", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Seva_get_Order_Details(string strUser_id, string strDivision) {
            object[] results = this.Invoke("Seva_get_Order_Details", new object[] {
                        strUser_id,
                        strDivision});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Seva_get_Order_DetailsAsync(string strUser_id, string strDivision) {
            this.Seva_get_Order_DetailsAsync(strUser_id, strDivision, null);
        }
        
        /// <remarks/>
        public void Seva_get_Order_DetailsAsync(string strUser_id, string strDivision, object userState) {
            if ((this.Seva_get_Order_DetailsOperationCompleted == null)) {
                this.Seva_get_Order_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSeva_get_Order_DetailsOperationCompleted);
            }
            this.InvokeAsync("Seva_get_Order_Details", new object[] {
                        strUser_id,
                        strDivision}, this.Seva_get_Order_DetailsOperationCompleted, userState);
        }
        
        private void OnSeva_get_Order_DetailsOperationCompleted(object arg) {
            if ((this.Seva_get_Order_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Seva_get_Order_DetailsCompleted(this, new Seva_get_Order_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Seva_get_Order_Wise_Complete_Details", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Seva_get_Order_Wise_Complete_Details(string strOrder_no) {
            object[] results = this.Invoke("Seva_get_Order_Wise_Complete_Details", new object[] {
                        strOrder_no});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Seva_get_Order_Wise_Complete_DetailsAsync(string strOrder_no) {
            this.Seva_get_Order_Wise_Complete_DetailsAsync(strOrder_no, null);
        }
        
        /// <remarks/>
        public void Seva_get_Order_Wise_Complete_DetailsAsync(string strOrder_no, object userState) {
            if ((this.Seva_get_Order_Wise_Complete_DetailsOperationCompleted == null)) {
                this.Seva_get_Order_Wise_Complete_DetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSeva_get_Order_Wise_Complete_DetailsOperationCompleted);
            }
            this.InvokeAsync("Seva_get_Order_Wise_Complete_Details", new object[] {
                        strOrder_no}, this.Seva_get_Order_Wise_Complete_DetailsOperationCompleted, userState);
        }
        
        private void OnSeva_get_Order_Wise_Complete_DetailsOperationCompleted(object arg) {
            if ((this.Seva_get_Order_Wise_Complete_DetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Seva_get_Order_Wise_Complete_DetailsCompleted(this, new Seva_get_Order_Wise_Complete_DetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Seva_Insert_Data_New_Conn", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Seva_Insert_Data_New_Conn(
                    string strKYC, 
                    string strProfile, 
                    string strTechDetails, 
                    string strORDER_NO, 
                    string strREGTYPE, 
                    string strFIRST_NAME, 
                    string strMIDDLE_NAME, 
                    string strLAST_NAME, 
                    string strTITLE, 
                    string strGENDER, 
                    string strDOB, 
                    string strFATHER_NAME, 
                    string strMOTHER_NAME, 
                    string strDESIGNATION_AS, 
                    string strTYPE_ORG, 
                    string strDOI, 
                    string strHOUSE_NO, 
                    string strBUILDING_NAME, 
                    string strSTREET, 
                    string strAREA, 
                    string strPIN, 
                    string strLANDMARK, 
                    string strMOBILE_NO, 
                    string strPHONE_NO, 
                    string strEMAIL, 
                    string strHOUSE_NO_PA, 
                    string strBUILDING_NAME_PA, 
                    string strSTREET_PA, 
                    string strAREA_PA, 
                    string strPIN_PA, 
                    string strLANDMARK_PA, 
                    string strMOBILE_NO_PA, 
                    string strPHONE_NO_PA, 
                    string strEMAIL_PA, 
                    string strAPPLIED_CATEGORY, 
                    string strNEWOREXISTING, 
                    string strSERVICE_REQ, 
                    string strBILLING_TYPE, 
                    string strAREA_TYPE, 
                    string strPREMISES_TYPE, 
                    string strPURPOSE, 
                    string strMETER_CHOICE, 
                    string strAPPLIED_LOAD, 
                    string strAPPLIED_VOLTAGE_LVL, 
                    string strAPPLIED_PHASE, 
                    string strPAN_NO, 
                    string strID_NO, 
                    string strPIC_NAME, 
                    string strSIG_NAME, 
                    string strCOMPANY, 
                    string strLOAD_TYPE, 
                    string strAADHAR_NO, 
                    string strFN_AS, 
                    string strMN_AS, 
                    string strLN_AS, 
                    string strFINGER_NAME, 
                    string strDOA, 
                    string strCF_REMARK, 
                    string strZZ_CONNTYPE, 
                    string strUser_id) {
            object[] results = this.Invoke("Seva_Insert_Data_New_Conn", new object[] {
                        strKYC,
                        strProfile,
                        strTechDetails,
                        strORDER_NO,
                        strREGTYPE,
                        strFIRST_NAME,
                        strMIDDLE_NAME,
                        strLAST_NAME,
                        strTITLE,
                        strGENDER,
                        strDOB,
                        strFATHER_NAME,
                        strMOTHER_NAME,
                        strDESIGNATION_AS,
                        strTYPE_ORG,
                        strDOI,
                        strHOUSE_NO,
                        strBUILDING_NAME,
                        strSTREET,
                        strAREA,
                        strPIN,
                        strLANDMARK,
                        strMOBILE_NO,
                        strPHONE_NO,
                        strEMAIL,
                        strHOUSE_NO_PA,
                        strBUILDING_NAME_PA,
                        strSTREET_PA,
                        strAREA_PA,
                        strPIN_PA,
                        strLANDMARK_PA,
                        strMOBILE_NO_PA,
                        strPHONE_NO_PA,
                        strEMAIL_PA,
                        strAPPLIED_CATEGORY,
                        strNEWOREXISTING,
                        strSERVICE_REQ,
                        strBILLING_TYPE,
                        strAREA_TYPE,
                        strPREMISES_TYPE,
                        strPURPOSE,
                        strMETER_CHOICE,
                        strAPPLIED_LOAD,
                        strAPPLIED_VOLTAGE_LVL,
                        strAPPLIED_PHASE,
                        strPAN_NO,
                        strID_NO,
                        strPIC_NAME,
                        strSIG_NAME,
                        strCOMPANY,
                        strLOAD_TYPE,
                        strAADHAR_NO,
                        strFN_AS,
                        strMN_AS,
                        strLN_AS,
                        strFINGER_NAME,
                        strDOA,
                        strCF_REMARK,
                        strZZ_CONNTYPE,
                        strUser_id});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Seva_Insert_Data_New_ConnAsync(
                    string strKYC, 
                    string strProfile, 
                    string strTechDetails, 
                    string strORDER_NO, 
                    string strREGTYPE, 
                    string strFIRST_NAME, 
                    string strMIDDLE_NAME, 
                    string strLAST_NAME, 
                    string strTITLE, 
                    string strGENDER, 
                    string strDOB, 
                    string strFATHER_NAME, 
                    string strMOTHER_NAME, 
                    string strDESIGNATION_AS, 
                    string strTYPE_ORG, 
                    string strDOI, 
                    string strHOUSE_NO, 
                    string strBUILDING_NAME, 
                    string strSTREET, 
                    string strAREA, 
                    string strPIN, 
                    string strLANDMARK, 
                    string strMOBILE_NO, 
                    string strPHONE_NO, 
                    string strEMAIL, 
                    string strHOUSE_NO_PA, 
                    string strBUILDING_NAME_PA, 
                    string strSTREET_PA, 
                    string strAREA_PA, 
                    string strPIN_PA, 
                    string strLANDMARK_PA, 
                    string strMOBILE_NO_PA, 
                    string strPHONE_NO_PA, 
                    string strEMAIL_PA, 
                    string strAPPLIED_CATEGORY, 
                    string strNEWOREXISTING, 
                    string strSERVICE_REQ, 
                    string strBILLING_TYPE, 
                    string strAREA_TYPE, 
                    string strPREMISES_TYPE, 
                    string strPURPOSE, 
                    string strMETER_CHOICE, 
                    string strAPPLIED_LOAD, 
                    string strAPPLIED_VOLTAGE_LVL, 
                    string strAPPLIED_PHASE, 
                    string strPAN_NO, 
                    string strID_NO, 
                    string strPIC_NAME, 
                    string strSIG_NAME, 
                    string strCOMPANY, 
                    string strLOAD_TYPE, 
                    string strAADHAR_NO, 
                    string strFN_AS, 
                    string strMN_AS, 
                    string strLN_AS, 
                    string strFINGER_NAME, 
                    string strDOA, 
                    string strCF_REMARK, 
                    string strZZ_CONNTYPE, 
                    string strUser_id) {
            this.Seva_Insert_Data_New_ConnAsync(strKYC, strProfile, strTechDetails, strORDER_NO, strREGTYPE, strFIRST_NAME, strMIDDLE_NAME, strLAST_NAME, strTITLE, strGENDER, strDOB, strFATHER_NAME, strMOTHER_NAME, strDESIGNATION_AS, strTYPE_ORG, strDOI, strHOUSE_NO, strBUILDING_NAME, strSTREET, strAREA, strPIN, strLANDMARK, strMOBILE_NO, strPHONE_NO, strEMAIL, strHOUSE_NO_PA, strBUILDING_NAME_PA, strSTREET_PA, strAREA_PA, strPIN_PA, strLANDMARK_PA, strMOBILE_NO_PA, strPHONE_NO_PA, strEMAIL_PA, strAPPLIED_CATEGORY, strNEWOREXISTING, strSERVICE_REQ, strBILLING_TYPE, strAREA_TYPE, strPREMISES_TYPE, strPURPOSE, strMETER_CHOICE, strAPPLIED_LOAD, strAPPLIED_VOLTAGE_LVL, strAPPLIED_PHASE, strPAN_NO, strID_NO, strPIC_NAME, strSIG_NAME, strCOMPANY, strLOAD_TYPE, strAADHAR_NO, strFN_AS, strMN_AS, strLN_AS, strFINGER_NAME, strDOA, strCF_REMARK, strZZ_CONNTYPE, strUser_id, null);
        }
        
        /// <remarks/>
        public void Seva_Insert_Data_New_ConnAsync(
                    string strKYC, 
                    string strProfile, 
                    string strTechDetails, 
                    string strORDER_NO, 
                    string strREGTYPE, 
                    string strFIRST_NAME, 
                    string strMIDDLE_NAME, 
                    string strLAST_NAME, 
                    string strTITLE, 
                    string strGENDER, 
                    string strDOB, 
                    string strFATHER_NAME, 
                    string strMOTHER_NAME, 
                    string strDESIGNATION_AS, 
                    string strTYPE_ORG, 
                    string strDOI, 
                    string strHOUSE_NO, 
                    string strBUILDING_NAME, 
                    string strSTREET, 
                    string strAREA, 
                    string strPIN, 
                    string strLANDMARK, 
                    string strMOBILE_NO, 
                    string strPHONE_NO, 
                    string strEMAIL, 
                    string strHOUSE_NO_PA, 
                    string strBUILDING_NAME_PA, 
                    string strSTREET_PA, 
                    string strAREA_PA, 
                    string strPIN_PA, 
                    string strLANDMARK_PA, 
                    string strMOBILE_NO_PA, 
                    string strPHONE_NO_PA, 
                    string strEMAIL_PA, 
                    string strAPPLIED_CATEGORY, 
                    string strNEWOREXISTING, 
                    string strSERVICE_REQ, 
                    string strBILLING_TYPE, 
                    string strAREA_TYPE, 
                    string strPREMISES_TYPE, 
                    string strPURPOSE, 
                    string strMETER_CHOICE, 
                    string strAPPLIED_LOAD, 
                    string strAPPLIED_VOLTAGE_LVL, 
                    string strAPPLIED_PHASE, 
                    string strPAN_NO, 
                    string strID_NO, 
                    string strPIC_NAME, 
                    string strSIG_NAME, 
                    string strCOMPANY, 
                    string strLOAD_TYPE, 
                    string strAADHAR_NO, 
                    string strFN_AS, 
                    string strMN_AS, 
                    string strLN_AS, 
                    string strFINGER_NAME, 
                    string strDOA, 
                    string strCF_REMARK, 
                    string strZZ_CONNTYPE, 
                    string strUser_id, 
                    object userState) {
            if ((this.Seva_Insert_Data_New_ConnOperationCompleted == null)) {
                this.Seva_Insert_Data_New_ConnOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSeva_Insert_Data_New_ConnOperationCompleted);
            }
            this.InvokeAsync("Seva_Insert_Data_New_Conn", new object[] {
                        strKYC,
                        strProfile,
                        strTechDetails,
                        strORDER_NO,
                        strREGTYPE,
                        strFIRST_NAME,
                        strMIDDLE_NAME,
                        strLAST_NAME,
                        strTITLE,
                        strGENDER,
                        strDOB,
                        strFATHER_NAME,
                        strMOTHER_NAME,
                        strDESIGNATION_AS,
                        strTYPE_ORG,
                        strDOI,
                        strHOUSE_NO,
                        strBUILDING_NAME,
                        strSTREET,
                        strAREA,
                        strPIN,
                        strLANDMARK,
                        strMOBILE_NO,
                        strPHONE_NO,
                        strEMAIL,
                        strHOUSE_NO_PA,
                        strBUILDING_NAME_PA,
                        strSTREET_PA,
                        strAREA_PA,
                        strPIN_PA,
                        strLANDMARK_PA,
                        strMOBILE_NO_PA,
                        strPHONE_NO_PA,
                        strEMAIL_PA,
                        strAPPLIED_CATEGORY,
                        strNEWOREXISTING,
                        strSERVICE_REQ,
                        strBILLING_TYPE,
                        strAREA_TYPE,
                        strPREMISES_TYPE,
                        strPURPOSE,
                        strMETER_CHOICE,
                        strAPPLIED_LOAD,
                        strAPPLIED_VOLTAGE_LVL,
                        strAPPLIED_PHASE,
                        strPAN_NO,
                        strID_NO,
                        strPIC_NAME,
                        strSIG_NAME,
                        strCOMPANY,
                        strLOAD_TYPE,
                        strAADHAR_NO,
                        strFN_AS,
                        strMN_AS,
                        strLN_AS,
                        strFINGER_NAME,
                        strDOA,
                        strCF_REMARK,
                        strZZ_CONNTYPE,
                        strUser_id}, this.Seva_Insert_Data_New_ConnOperationCompleted, userState);
        }
        
        private void OnSeva_Insert_Data_New_ConnOperationCompleted(object arg) {
            if ((this.Seva_Insert_Data_New_ConnCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Seva_Insert_Data_New_ConnCompleted(this, new Seva_Insert_Data_New_ConnCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Insert_DOCLIST_sign", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Insert_DOCLIST_sign(string strOrderNo, string strsign_Img) {
            object[] results = this.Invoke("Insert_DOCLIST_sign", new object[] {
                        strOrderNo,
                        strsign_Img});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_DOCLIST_signAsync(string strOrderNo, string strsign_Img) {
            this.Insert_DOCLIST_signAsync(strOrderNo, strsign_Img, null);
        }
        
        /// <remarks/>
        public void Insert_DOCLIST_signAsync(string strOrderNo, string strsign_Img, object userState) {
            if ((this.Insert_DOCLIST_signOperationCompleted == null)) {
                this.Insert_DOCLIST_signOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_DOCLIST_signOperationCompleted);
            }
            this.InvokeAsync("Insert_DOCLIST_sign", new object[] {
                        strOrderNo,
                        strsign_Img}, this.Insert_DOCLIST_signOperationCompleted, userState);
        }
        
        private void OnInsert_DOCLIST_signOperationCompleted(object arg) {
            if ((this.Insert_DOCLIST_signCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_DOCLIST_signCompleted(this, new Insert_DOCLIST_signCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Insert_CA_building_img", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Insert_CA_building_img(string strCA, string strbuilding_img) {
            object[] results = this.Invoke("Insert_CA_building_img", new object[] {
                        strCA,
                        strbuilding_img});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_CA_building_imgAsync(string strCA, string strbuilding_img) {
            this.Insert_CA_building_imgAsync(strCA, strbuilding_img, null);
        }
        
        /// <remarks/>
        public void Insert_CA_building_imgAsync(string strCA, string strbuilding_img, object userState) {
            if ((this.Insert_CA_building_imgOperationCompleted == null)) {
                this.Insert_CA_building_imgOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_CA_building_imgOperationCompleted);
            }
            this.InvokeAsync("Insert_CA_building_img", new object[] {
                        strCA,
                        strbuilding_img}, this.Insert_CA_building_imgOperationCompleted, userState);
        }
        
        private void OnInsert_CA_building_imgOperationCompleted(object arg) {
            if ((this.Insert_CA_building_imgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_CA_building_imgCompleted(this, new Insert_CA_building_imgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Insert_IR_DATA", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Insert_IR_DATA(
                    string strOrderNo, 
                    string strdivision, 
                    string strbp, 
                    string strapplicantName, 
                    string strcategory, 
                    string strfathersName, 
                    string strloadKW, 
                    string strloadKVA, 
                    string strappliedAddress, 
                    string strcontactNo, 
                    string strvisitDate, 
                    string strtime, 
                    string strdocReceived, 
                    string strcreation, 
                    string strenggName, 
                    string strEmail_id) {
            object[] results = this.Invoke("Insert_IR_DATA", new object[] {
                        strOrderNo,
                        strdivision,
                        strbp,
                        strapplicantName,
                        strcategory,
                        strfathersName,
                        strloadKW,
                        strloadKVA,
                        strappliedAddress,
                        strcontactNo,
                        strvisitDate,
                        strtime,
                        strdocReceived,
                        strcreation,
                        strenggName,
                        strEmail_id});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_IR_DATAAsync(
                    string strOrderNo, 
                    string strdivision, 
                    string strbp, 
                    string strapplicantName, 
                    string strcategory, 
                    string strfathersName, 
                    string strloadKW, 
                    string strloadKVA, 
                    string strappliedAddress, 
                    string strcontactNo, 
                    string strvisitDate, 
                    string strtime, 
                    string strdocReceived, 
                    string strcreation, 
                    string strenggName, 
                    string strEmail_id) {
            this.Insert_IR_DATAAsync(strOrderNo, strdivision, strbp, strapplicantName, strcategory, strfathersName, strloadKW, strloadKVA, strappliedAddress, strcontactNo, strvisitDate, strtime, strdocReceived, strcreation, strenggName, strEmail_id, null);
        }
        
        /// <remarks/>
        public void Insert_IR_DATAAsync(
                    string strOrderNo, 
                    string strdivision, 
                    string strbp, 
                    string strapplicantName, 
                    string strcategory, 
                    string strfathersName, 
                    string strloadKW, 
                    string strloadKVA, 
                    string strappliedAddress, 
                    string strcontactNo, 
                    string strvisitDate, 
                    string strtime, 
                    string strdocReceived, 
                    string strcreation, 
                    string strenggName, 
                    string strEmail_id, 
                    object userState) {
            if ((this.Insert_IR_DATAOperationCompleted == null)) {
                this.Insert_IR_DATAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_IR_DATAOperationCompleted);
            }
            this.InvokeAsync("Insert_IR_DATA", new object[] {
                        strOrderNo,
                        strdivision,
                        strbp,
                        strapplicantName,
                        strcategory,
                        strfathersName,
                        strloadKW,
                        strloadKVA,
                        strappliedAddress,
                        strcontactNo,
                        strvisitDate,
                        strtime,
                        strdocReceived,
                        strcreation,
                        strenggName,
                        strEmail_id}, this.Insert_IR_DATAOperationCompleted, userState);
        }
        
        private void OnInsert_IR_DATAOperationCompleted(object arg) {
            if ((this.Insert_IR_DATACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_IR_DATACompleted(this, new Insert_IR_DATACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/UPDATE_IR_DATA", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UPDATE_IR_DATA(string strOrderNo, string strdivision, string strbp, string strapplicantName, string strcategory, string strfathersName, string strloadKW, string strloadKVA, string strappliedAddress, string strcontactNo, string strvisitDate, string strtime, string strdocReceived, string strcreation, string strenggName) {
            object[] results = this.Invoke("UPDATE_IR_DATA", new object[] {
                        strOrderNo,
                        strdivision,
                        strbp,
                        strapplicantName,
                        strcategory,
                        strfathersName,
                        strloadKW,
                        strloadKVA,
                        strappliedAddress,
                        strcontactNo,
                        strvisitDate,
                        strtime,
                        strdocReceived,
                        strcreation,
                        strenggName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UPDATE_IR_DATAAsync(string strOrderNo, string strdivision, string strbp, string strapplicantName, string strcategory, string strfathersName, string strloadKW, string strloadKVA, string strappliedAddress, string strcontactNo, string strvisitDate, string strtime, string strdocReceived, string strcreation, string strenggName) {
            this.UPDATE_IR_DATAAsync(strOrderNo, strdivision, strbp, strapplicantName, strcategory, strfathersName, strloadKW, strloadKVA, strappliedAddress, strcontactNo, strvisitDate, strtime, strdocReceived, strcreation, strenggName, null);
        }
        
        /// <remarks/>
        public void UPDATE_IR_DATAAsync(
                    string strOrderNo, 
                    string strdivision, 
                    string strbp, 
                    string strapplicantName, 
                    string strcategory, 
                    string strfathersName, 
                    string strloadKW, 
                    string strloadKVA, 
                    string strappliedAddress, 
                    string strcontactNo, 
                    string strvisitDate, 
                    string strtime, 
                    string strdocReceived, 
                    string strcreation, 
                    string strenggName, 
                    object userState) {
            if ((this.UPDATE_IR_DATAOperationCompleted == null)) {
                this.UPDATE_IR_DATAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUPDATE_IR_DATAOperationCompleted);
            }
            this.InvokeAsync("UPDATE_IR_DATA", new object[] {
                        strOrderNo,
                        strdivision,
                        strbp,
                        strapplicantName,
                        strcategory,
                        strfathersName,
                        strloadKW,
                        strloadKVA,
                        strappliedAddress,
                        strcontactNo,
                        strvisitDate,
                        strtime,
                        strdocReceived,
                        strcreation,
                        strenggName}, this.UPDATE_IR_DATAOperationCompleted, userState);
        }
        
        private void OnUPDATE_IR_DATAOperationCompleted(object arg) {
            if ((this.UPDATE_IR_DATACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UPDATE_IR_DATACompleted(this, new UPDATE_IR_DATACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Insert_CF_DATA", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Insert_CF_DATA(string strOrderNo, string strnetoutstandingAmt, string strbp, string strca, string strmoveOutDate, string strconsref, string strname, string straddress, string strcheckEnforcement, string strlastPaymentMode, string strsequenceNo, string strcheckRelated, string strUserType) {
            object[] results = this.Invoke("Insert_CF_DATA", new object[] {
                        strOrderNo,
                        strnetoutstandingAmt,
                        strbp,
                        strca,
                        strmoveOutDate,
                        strconsref,
                        strname,
                        straddress,
                        strcheckEnforcement,
                        strlastPaymentMode,
                        strsequenceNo,
                        strcheckRelated,
                        strUserType});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_CF_DATAAsync(string strOrderNo, string strnetoutstandingAmt, string strbp, string strca, string strmoveOutDate, string strconsref, string strname, string straddress, string strcheckEnforcement, string strlastPaymentMode, string strsequenceNo, string strcheckRelated, string strUserType) {
            this.Insert_CF_DATAAsync(strOrderNo, strnetoutstandingAmt, strbp, strca, strmoveOutDate, strconsref, strname, straddress, strcheckEnforcement, strlastPaymentMode, strsequenceNo, strcheckRelated, strUserType, null);
        }
        
        /// <remarks/>
        public void Insert_CF_DATAAsync(string strOrderNo, string strnetoutstandingAmt, string strbp, string strca, string strmoveOutDate, string strconsref, string strname, string straddress, string strcheckEnforcement, string strlastPaymentMode, string strsequenceNo, string strcheckRelated, string strUserType, object userState) {
            if ((this.Insert_CF_DATAOperationCompleted == null)) {
                this.Insert_CF_DATAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_CF_DATAOperationCompleted);
            }
            this.InvokeAsync("Insert_CF_DATA", new object[] {
                        strOrderNo,
                        strnetoutstandingAmt,
                        strbp,
                        strca,
                        strmoveOutDate,
                        strconsref,
                        strname,
                        straddress,
                        strcheckEnforcement,
                        strlastPaymentMode,
                        strsequenceNo,
                        strcheckRelated,
                        strUserType}, this.Insert_CF_DATAOperationCompleted, userState);
        }
        
        private void OnInsert_CF_DATAOperationCompleted(object arg) {
            if ((this.Insert_CF_DATACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_CF_DATACompleted(this, new Insert_CF_DATACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/UPDATE_CF_DATA", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UPDATE_CF_DATA(string strOrderNo, string strnetoutstandingAmt, string strbp, string strca, string strmoveOutDate, string strconsref, string strname, string straddress, string strcheckEnforcement, string strlastPaymentMode, string strsequenceNo, string strcheckRelated) {
            object[] results = this.Invoke("UPDATE_CF_DATA", new object[] {
                        strOrderNo,
                        strnetoutstandingAmt,
                        strbp,
                        strca,
                        strmoveOutDate,
                        strconsref,
                        strname,
                        straddress,
                        strcheckEnforcement,
                        strlastPaymentMode,
                        strsequenceNo,
                        strcheckRelated});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UPDATE_CF_DATAAsync(string strOrderNo, string strnetoutstandingAmt, string strbp, string strca, string strmoveOutDate, string strconsref, string strname, string straddress, string strcheckEnforcement, string strlastPaymentMode, string strsequenceNo, string strcheckRelated) {
            this.UPDATE_CF_DATAAsync(strOrderNo, strnetoutstandingAmt, strbp, strca, strmoveOutDate, strconsref, strname, straddress, strcheckEnforcement, strlastPaymentMode, strsequenceNo, strcheckRelated, null);
        }
        
        /// <remarks/>
        public void UPDATE_CF_DATAAsync(string strOrderNo, string strnetoutstandingAmt, string strbp, string strca, string strmoveOutDate, string strconsref, string strname, string straddress, string strcheckEnforcement, string strlastPaymentMode, string strsequenceNo, string strcheckRelated, object userState) {
            if ((this.UPDATE_CF_DATAOperationCompleted == null)) {
                this.UPDATE_CF_DATAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUPDATE_CF_DATAOperationCompleted);
            }
            this.InvokeAsync("UPDATE_CF_DATA", new object[] {
                        strOrderNo,
                        strnetoutstandingAmt,
                        strbp,
                        strca,
                        strmoveOutDate,
                        strconsref,
                        strname,
                        straddress,
                        strcheckEnforcement,
                        strlastPaymentMode,
                        strsequenceNo,
                        strcheckRelated}, this.UPDATE_CF_DATAOperationCompleted, userState);
        }
        
        private void OnUPDATE_CF_DATAOperationCompleted(object arg) {
            if ((this.UPDATE_CF_DATACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UPDATE_CF_DATACompleted(this, new UPDATE_CF_DATACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Insert_RECF_DATA", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Insert_RECF_DATA(string strOrderNo, string strmeter1, string stradd1, string strmeter2, string stradd2, string strmeter3, string stradd3, string strmeter4, string stradd4, string strmeter5, string stradd5) {
            object[] results = this.Invoke("Insert_RECF_DATA", new object[] {
                        strOrderNo,
                        strmeter1,
                        stradd1,
                        strmeter2,
                        stradd2,
                        strmeter3,
                        stradd3,
                        strmeter4,
                        stradd4,
                        strmeter5,
                        stradd5});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void Insert_RECF_DATAAsync(string strOrderNo, string strmeter1, string stradd1, string strmeter2, string stradd2, string strmeter3, string stradd3, string strmeter4, string stradd4, string strmeter5, string stradd5) {
            this.Insert_RECF_DATAAsync(strOrderNo, strmeter1, stradd1, strmeter2, stradd2, strmeter3, stradd3, strmeter4, stradd4, strmeter5, stradd5, null);
        }
        
        /// <remarks/>
        public void Insert_RECF_DATAAsync(string strOrderNo, string strmeter1, string stradd1, string strmeter2, string stradd2, string strmeter3, string stradd3, string strmeter4, string stradd4, string strmeter5, string stradd5, object userState) {
            if ((this.Insert_RECF_DATAOperationCompleted == null)) {
                this.Insert_RECF_DATAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsert_RECF_DATAOperationCompleted);
            }
            this.InvokeAsync("Insert_RECF_DATA", new object[] {
                        strOrderNo,
                        strmeter1,
                        stradd1,
                        strmeter2,
                        stradd2,
                        strmeter3,
                        stradd3,
                        strmeter4,
                        stradd4,
                        strmeter5,
                        stradd5}, this.Insert_RECF_DATAOperationCompleted, userState);
        }
        
        private void OnInsert_RECF_DATAOperationCompleted(object arg) {
            if ((this.Insert_RECF_DATACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Insert_RECF_DATACompleted(this, new Insert_RECF_DATACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/GCMRegistration", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GCMRegistration(string singleParameter) {
            object[] results = this.Invoke("GCMRegistration", new object[] {
                        singleParameter});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GCMRegistrationAsync(string singleParameter) {
            this.GCMRegistrationAsync(singleParameter, null);
        }
        
        /// <remarks/>
        public void GCMRegistrationAsync(string singleParameter, object userState) {
            if ((this.GCMRegistrationOperationCompleted == null)) {
                this.GCMRegistrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGCMRegistrationOperationCompleted);
            }
            this.InvokeAsync("GCMRegistration", new object[] {
                        singleParameter}, this.GCMRegistrationOperationCompleted, userState);
        }
        
        private void OnGCMRegistrationOperationCompleted(object arg) {
            if ((this.GCMRegistrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GCMRegistrationCompleted(this, new GCMRegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/GCMUserMsgLog", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GCMUserMsgLog(string singleParameter) {
            object[] results = this.Invoke("GCMUserMsgLog", new object[] {
                        singleParameter});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GCMUserMsgLogAsync(string singleParameter) {
            this.GCMUserMsgLogAsync(singleParameter, null);
        }
        
        /// <remarks/>
        public void GCMUserMsgLogAsync(string singleParameter, object userState) {
            if ((this.GCMUserMsgLogOperationCompleted == null)) {
                this.GCMUserMsgLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGCMUserMsgLogOperationCompleted);
            }
            this.InvokeAsync("GCMUserMsgLog", new object[] {
                        singleParameter}, this.GCMUserMsgLogOperationCompleted, userState);
        }
        
        private void OnGCMUserMsgLogOperationCompleted(object arg) {
            if ((this.GCMUserMsgLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GCMUserMsgLogCompleted(this, new GCMUserMsgLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/GCMUpdateMsgLog", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GCMUpdateMsgLog(string singleParameter) {
            object[] results = this.Invoke("GCMUpdateMsgLog", new object[] {
                        singleParameter});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GCMUpdateMsgLogAsync(string singleParameter) {
            this.GCMUpdateMsgLogAsync(singleParameter, null);
        }
        
        /// <remarks/>
        public void GCMUpdateMsgLogAsync(string singleParameter, object userState) {
            if ((this.GCMUpdateMsgLogOperationCompleted == null)) {
                this.GCMUpdateMsgLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGCMUpdateMsgLogOperationCompleted);
            }
            this.InvokeAsync("GCMUpdateMsgLog", new object[] {
                        singleParameter}, this.GCMUpdateMsgLogOperationCompleted, userState);
        }
        
        private void OnGCMUpdateMsgLogOperationCompleted(object arg) {
            if ((this.GCMUpdateMsgLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GCMUpdateMsgLogCompleted(this, new GCMUpdateMsgLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/GCMCheckRegistrationLog", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GCMCheckRegistrationLog(string singleParameter) {
            object[] results = this.Invoke("GCMCheckRegistrationLog", new object[] {
                        singleParameter});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GCMCheckRegistrationLogAsync(string singleParameter) {
            this.GCMCheckRegistrationLogAsync(singleParameter, null);
        }
        
        /// <remarks/>
        public void GCMCheckRegistrationLogAsync(string singleParameter, object userState) {
            if ((this.GCMCheckRegistrationLogOperationCompleted == null)) {
                this.GCMCheckRegistrationLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGCMCheckRegistrationLogOperationCompleted);
            }
            this.InvokeAsync("GCMCheckRegistrationLog", new object[] {
                        singleParameter}, this.GCMCheckRegistrationLogOperationCompleted, userState);
        }
        
        private void OnGCMCheckRegistrationLogOperationCompleted(object arg) {
            if ((this.GCMCheckRegistrationLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GCMCheckRegistrationLogCompleted(this, new GCMCheckRegistrationLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/RegisterSmartAppComplaint", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet RegisterSmartAppComplaint(string CA, string Phone, string FaultCategory, string SubFaultType, string CallerName, string Address, string Email, string Remarks) {
            object[] results = this.Invoke("RegisterSmartAppComplaint", new object[] {
                        CA,
                        Phone,
                        FaultCategory,
                        SubFaultType,
                        CallerName,
                        Address,
                        Email,
                        Remarks});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterSmartAppComplaintAsync(string CA, string Phone, string FaultCategory, string SubFaultType, string CallerName, string Address, string Email, string Remarks) {
            this.RegisterSmartAppComplaintAsync(CA, Phone, FaultCategory, SubFaultType, CallerName, Address, Email, Remarks, null);
        }
        
        /// <remarks/>
        public void RegisterSmartAppComplaintAsync(string CA, string Phone, string FaultCategory, string SubFaultType, string CallerName, string Address, string Email, string Remarks, object userState) {
            if ((this.RegisterSmartAppComplaintOperationCompleted == null)) {
                this.RegisterSmartAppComplaintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterSmartAppComplaintOperationCompleted);
            }
            this.InvokeAsync("RegisterSmartAppComplaint", new object[] {
                        CA,
                        Phone,
                        FaultCategory,
                        SubFaultType,
                        CallerName,
                        Address,
                        Email,
                        Remarks}, this.RegisterSmartAppComplaintOperationCompleted, userState);
        }
        
        private void OnRegisterSmartAppComplaintOperationCompleted(object arg) {
            if ((this.RegisterSmartAppComplaintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterSmartAppComplaintCompleted(this, new RegisterSmartAppComplaintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/updatebreakdown", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string updatebreakdown(string BD_ID, int newhour, int newminutes) {
            object[] results = this.Invoke("updatebreakdown", new object[] {
                        BD_ID,
                        newhour,
                        newminutes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updatebreakdownAsync(string BD_ID, int newhour, int newminutes) {
            this.updatebreakdownAsync(BD_ID, newhour, newminutes, null);
        }
        
        /// <remarks/>
        public void updatebreakdownAsync(string BD_ID, int newhour, int newminutes, object userState) {
            if ((this.updatebreakdownOperationCompleted == null)) {
                this.updatebreakdownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdatebreakdownOperationCompleted);
            }
            this.InvokeAsync("updatebreakdown", new object[] {
                        BD_ID,
                        newhour,
                        newminutes}, this.updatebreakdownOperationCompleted, userState);
        }
        
        private void OnupdatebreakdownOperationCompleted(object arg) {
            if ((this.updatebreakdownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updatebreakdownCompleted(this, new updatebreakdownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/GetComplaintStatus", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetComplaintStatus(string ComplaintNo) {
            object[] results = this.Invoke("GetComplaintStatus", new object[] {
                        ComplaintNo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetComplaintStatusAsync(string ComplaintNo) {
            this.GetComplaintStatusAsync(ComplaintNo, null);
        }
        
        /// <remarks/>
        public void GetComplaintStatusAsync(string ComplaintNo, object userState) {
            if ((this.GetComplaintStatusOperationCompleted == null)) {
                this.GetComplaintStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetComplaintStatusOperationCompleted);
            }
            this.InvokeAsync("GetComplaintStatus", new object[] {
                        ComplaintNo}, this.GetComplaintStatusOperationCompleted, userState);
        }
        
        private void OnGetComplaintStatusOperationCompleted(object arg) {
            if ((this.GetComplaintStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetComplaintStatusCompleted(this, new GetComplaintStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/GetComplaintDetailsCA", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetComplaintDetailsCA(string CANo) {
            object[] results = this.Invoke("GetComplaintDetailsCA", new object[] {
                        CANo});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetComplaintDetailsCAAsync(string CANo) {
            this.GetComplaintDetailsCAAsync(CANo, null);
        }
        
        /// <remarks/>
        public void GetComplaintDetailsCAAsync(string CANo, object userState) {
            if ((this.GetComplaintDetailsCAOperationCompleted == null)) {
                this.GetComplaintDetailsCAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetComplaintDetailsCAOperationCompleted);
            }
            this.InvokeAsync("GetComplaintDetailsCA", new object[] {
                        CANo}, this.GetComplaintDetailsCAOperationCompleted, userState);
        }
        
        private void OnGetComplaintDetailsCAOperationCompleted(object arg) {
            if ((this.GetComplaintDetailsCACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetComplaintDetailsCACompleted(this, new GetComplaintDetailsCACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/GetValidateUser", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetValidateUser(string _sUser, string _sPass) {
            object[] results = this.Invoke("GetValidateUser", new object[] {
                        _sUser,
                        _sPass});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetValidateUserAsync(string _sUser, string _sPass) {
            this.GetValidateUserAsync(_sUser, _sPass, null);
        }
        
        /// <remarks/>
        public void GetValidateUserAsync(string _sUser, string _sPass, object userState) {
            if ((this.GetValidateUserOperationCompleted == null)) {
                this.GetValidateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetValidateUserOperationCompleted);
            }
            this.InvokeAsync("GetValidateUser", new object[] {
                        _sUser,
                        _sPass}, this.GetValidateUserOperationCompleted, userState);
        }
        
        private void OnGetValidateUserOperationCompleted(object arg) {
            if ((this.GetValidateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetValidateUserCompleted(this, new GetValidateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/NewRegistration_ARD", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NewRegistration_ARD(string strConsRef, string strUserName, string strPass, string strEmailId, string strMobileNo, string strPhoneNo, string strContactPerson) {
            object[] results = this.Invoke("NewRegistration_ARD", new object[] {
                        strConsRef,
                        strUserName,
                        strPass,
                        strEmailId,
                        strMobileNo,
                        strPhoneNo,
                        strContactPerson});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NewRegistration_ARDAsync(string strConsRef, string strUserName, string strPass, string strEmailId, string strMobileNo, string strPhoneNo, string strContactPerson) {
            this.NewRegistration_ARDAsync(strConsRef, strUserName, strPass, strEmailId, strMobileNo, strPhoneNo, strContactPerson, null);
        }
        
        /// <remarks/>
        public void NewRegistration_ARDAsync(string strConsRef, string strUserName, string strPass, string strEmailId, string strMobileNo, string strPhoneNo, string strContactPerson, object userState) {
            if ((this.NewRegistration_ARDOperationCompleted == null)) {
                this.NewRegistration_ARDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewRegistration_ARDOperationCompleted);
            }
            this.InvokeAsync("NewRegistration_ARD", new object[] {
                        strConsRef,
                        strUserName,
                        strPass,
                        strEmailId,
                        strMobileNo,
                        strPhoneNo,
                        strContactPerson}, this.NewRegistration_ARDOperationCompleted, userState);
        }
        
        private void OnNewRegistration_ARDOperationCompleted(object arg) {
            if ((this.NewRegistration_ARDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewRegistration_ARDCompleted(this, new NewRegistration_ARDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/GetPasswordSMS", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPasswordSMS(string strConsRef) {
            object[] results = this.Invoke("GetPasswordSMS", new object[] {
                        strConsRef});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPasswordSMSAsync(string strConsRef) {
            this.GetPasswordSMSAsync(strConsRef, null);
        }
        
        /// <remarks/>
        public void GetPasswordSMSAsync(string strConsRef, object userState) {
            if ((this.GetPasswordSMSOperationCompleted == null)) {
                this.GetPasswordSMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPasswordSMSOperationCompleted);
            }
            this.InvokeAsync("GetPasswordSMS", new object[] {
                        strConsRef}, this.GetPasswordSMSOperationCompleted, userState);
        }
        
        private void OnGetPasswordSMSOperationCompleted(object arg) {
            if ((this.GetPasswordSMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPasswordSMSCompleted(this, new GetPasswordSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/EMP_UserDetails", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable EMP_UserDetails(string strEmpNo, string strOtherIfAny) {
            object[] results = this.Invoke("EMP_UserDetails", new object[] {
                        strEmpNo,
                        strOtherIfAny});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void EMP_UserDetailsAsync(string strEmpNo, string strOtherIfAny) {
            this.EMP_UserDetailsAsync(strEmpNo, strOtherIfAny, null);
        }
        
        /// <remarks/>
        public void EMP_UserDetailsAsync(string strEmpNo, string strOtherIfAny, object userState) {
            if ((this.EMP_UserDetailsOperationCompleted == null)) {
                this.EMP_UserDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEMP_UserDetailsOperationCompleted);
            }
            this.InvokeAsync("EMP_UserDetails", new object[] {
                        strEmpNo,
                        strOtherIfAny}, this.EMP_UserDetailsOperationCompleted, userState);
        }
        
        private void OnEMP_UserDetailsOperationCompleted(object arg) {
            if ((this.EMP_UserDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EMP_UserDetailsCompleted(this, new EMP_UserDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_GetAssignedComplaintsToTeam", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_GetAssignedComplaintsToTeam(string imeiNo) {
            object[] results = this.Invoke("ONM_GetAssignedComplaintsToTeam", new object[] {
                        imeiNo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_GetAssignedComplaintsToTeamAsync(string imeiNo) {
            this.ONM_GetAssignedComplaintsToTeamAsync(imeiNo, null);
        }
        
        /// <remarks/>
        public void ONM_GetAssignedComplaintsToTeamAsync(string imeiNo, object userState) {
            if ((this.ONM_GetAssignedComplaintsToTeamOperationCompleted == null)) {
                this.ONM_GetAssignedComplaintsToTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_GetAssignedComplaintsToTeamOperationCompleted);
            }
            this.InvokeAsync("ONM_GetAssignedComplaintsToTeam", new object[] {
                        imeiNo}, this.ONM_GetAssignedComplaintsToTeamOperationCompleted, userState);
        }
        
        private void OnONM_GetAssignedComplaintsToTeamOperationCompleted(object arg) {
            if ((this.ONM_GetAssignedComplaintsToTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_GetAssignedComplaintsToTeamCompleted(this, new ONM_GetAssignedComplaintsToTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_UpdateComplaintResolutiontime", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ONM_UpdateComplaintResolutiontime(string ComplaintNo, string imeiNo, string FCode, string Latitude, string longitude, string remarks, string resolutionStatus, int resolutionTime, string Area_Power_Restored, int Restoration_Time) {
            object[] results = this.Invoke("ONM_UpdateComplaintResolutiontime", new object[] {
                        ComplaintNo,
                        imeiNo,
                        FCode,
                        Latitude,
                        longitude,
                        remarks,
                        resolutionStatus,
                        resolutionTime,
                        Area_Power_Restored,
                        Restoration_Time});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_UpdateComplaintResolutiontimeAsync(string ComplaintNo, string imeiNo, string FCode, string Latitude, string longitude, string remarks, string resolutionStatus, int resolutionTime, string Area_Power_Restored, int Restoration_Time) {
            this.ONM_UpdateComplaintResolutiontimeAsync(ComplaintNo, imeiNo, FCode, Latitude, longitude, remarks, resolutionStatus, resolutionTime, Area_Power_Restored, Restoration_Time, null);
        }
        
        /// <remarks/>
        public void ONM_UpdateComplaintResolutiontimeAsync(string ComplaintNo, string imeiNo, string FCode, string Latitude, string longitude, string remarks, string resolutionStatus, int resolutionTime, string Area_Power_Restored, int Restoration_Time, object userState) {
            if ((this.ONM_UpdateComplaintResolutiontimeOperationCompleted == null)) {
                this.ONM_UpdateComplaintResolutiontimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_UpdateComplaintResolutiontimeOperationCompleted);
            }
            this.InvokeAsync("ONM_UpdateComplaintResolutiontime", new object[] {
                        ComplaintNo,
                        imeiNo,
                        FCode,
                        Latitude,
                        longitude,
                        remarks,
                        resolutionStatus,
                        resolutionTime,
                        Area_Power_Restored,
                        Restoration_Time}, this.ONM_UpdateComplaintResolutiontimeOperationCompleted, userState);
        }
        
        private void OnONM_UpdateComplaintResolutiontimeOperationCompleted(object arg) {
            if ((this.ONM_UpdateComplaintResolutiontimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_UpdateComplaintResolutiontimeCompleted(this, new ONM_UpdateComplaintResolutiontimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_GetComplaintStatus", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_GetComplaintStatus(string CompNo, string IMEINo) {
            object[] results = this.Invoke("ONM_GetComplaintStatus", new object[] {
                        CompNo,
                        IMEINo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_GetComplaintStatusAsync(string CompNo, string IMEINo) {
            this.ONM_GetComplaintStatusAsync(CompNo, IMEINo, null);
        }
        
        /// <remarks/>
        public void ONM_GetComplaintStatusAsync(string CompNo, string IMEINo, object userState) {
            if ((this.ONM_GetComplaintStatusOperationCompleted == null)) {
                this.ONM_GetComplaintStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_GetComplaintStatusOperationCompleted);
            }
            this.InvokeAsync("ONM_GetComplaintStatus", new object[] {
                        CompNo,
                        IMEINo}, this.ONM_GetComplaintStatusOperationCompleted, userState);
        }
        
        private void OnONM_GetComplaintStatusOperationCompleted(object arg) {
            if ((this.ONM_GetComplaintStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_GetComplaintStatusCompleted(this, new ONM_GetComplaintStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/CloseComplaintSig", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CloseComplaintSig(string ComplaintNo, string CA, string FCode, string ClosingRemark, string OtherRemarks, string IMEI, string Latitude, string Longitude, string SignatureData) {
            object[] results = this.Invoke("CloseComplaintSig", new object[] {
                        ComplaintNo,
                        CA,
                        FCode,
                        ClosingRemark,
                        OtherRemarks,
                        IMEI,
                        Latitude,
                        Longitude,
                        SignatureData});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CloseComplaintSigAsync(string ComplaintNo, string CA, string FCode, string ClosingRemark, string OtherRemarks, string IMEI, string Latitude, string Longitude, string SignatureData) {
            this.CloseComplaintSigAsync(ComplaintNo, CA, FCode, ClosingRemark, OtherRemarks, IMEI, Latitude, Longitude, SignatureData, null);
        }
        
        /// <remarks/>
        public void CloseComplaintSigAsync(string ComplaintNo, string CA, string FCode, string ClosingRemark, string OtherRemarks, string IMEI, string Latitude, string Longitude, string SignatureData, object userState) {
            if ((this.CloseComplaintSigOperationCompleted == null)) {
                this.CloseComplaintSigOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseComplaintSigOperationCompleted);
            }
            this.InvokeAsync("CloseComplaintSig", new object[] {
                        ComplaintNo,
                        CA,
                        FCode,
                        ClosingRemark,
                        OtherRemarks,
                        IMEI,
                        Latitude,
                        Longitude,
                        SignatureData}, this.CloseComplaintSigOperationCompleted, userState);
        }
        
        private void OnCloseComplaintSigOperationCompleted(object arg) {
            if ((this.CloseComplaintSigCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseComplaintSigCompleted(this, new CloseComplaintSigCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/UpdateIMEILocation", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateIMEILocation(string IMEINO, string Latitude, string Longitude, string Remarks) {
            object[] results = this.Invoke("UpdateIMEILocation", new object[] {
                        IMEINO,
                        Latitude,
                        Longitude,
                        Remarks});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateIMEILocationAsync(string IMEINO, string Latitude, string Longitude, string Remarks) {
            this.UpdateIMEILocationAsync(IMEINO, Latitude, Longitude, Remarks, null);
        }
        
        /// <remarks/>
        public void UpdateIMEILocationAsync(string IMEINO, string Latitude, string Longitude, string Remarks, object userState) {
            if ((this.UpdateIMEILocationOperationCompleted == null)) {
                this.UpdateIMEILocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateIMEILocationOperationCompleted);
            }
            this.InvokeAsync("UpdateIMEILocation", new object[] {
                        IMEINO,
                        Latitude,
                        Longitude,
                        Remarks}, this.UpdateIMEILocationOperationCompleted, userState);
        }
        
        private void OnUpdateIMEILocationOperationCompleted(object arg) {
            if ((this.UpdateIMEILocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateIMEILocationCompleted(this, new UpdateIMEILocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_LINEMEN_LOGIN", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_LINEMEN_LOGIN(string strPassword, string strIMEI_No) {
            object[] results = this.Invoke("ONM_LINEMEN_LOGIN", new object[] {
                        strPassword,
                        strIMEI_No});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_LINEMEN_LOGINAsync(string strPassword, string strIMEI_No) {
            this.ONM_LINEMEN_LOGINAsync(strPassword, strIMEI_No, null);
        }
        
        /// <remarks/>
        public void ONM_LINEMEN_LOGINAsync(string strPassword, string strIMEI_No, object userState) {
            if ((this.ONM_LINEMEN_LOGINOperationCompleted == null)) {
                this.ONM_LINEMEN_LOGINOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_LINEMEN_LOGINOperationCompleted);
            }
            this.InvokeAsync("ONM_LINEMEN_LOGIN", new object[] {
                        strPassword,
                        strIMEI_No}, this.ONM_LINEMEN_LOGINOperationCompleted, userState);
        }
        
        private void OnONM_LINEMEN_LOGINOperationCompleted(object arg) {
            if ((this.ONM_LINEMEN_LOGINCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_LINEMEN_LOGINCompleted(this, new ONM_LINEMEN_LOGINCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_LINEMEN_LOGOUT", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ONM_LINEMEN_LOGOUT(string strIMEI_No) {
            object[] results = this.Invoke("ONM_LINEMEN_LOGOUT", new object[] {
                        strIMEI_No});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_LINEMEN_LOGOUTAsync(string strIMEI_No) {
            this.ONM_LINEMEN_LOGOUTAsync(strIMEI_No, null);
        }
        
        /// <remarks/>
        public void ONM_LINEMEN_LOGOUTAsync(string strIMEI_No, object userState) {
            if ((this.ONM_LINEMEN_LOGOUTOperationCompleted == null)) {
                this.ONM_LINEMEN_LOGOUTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_LINEMEN_LOGOUTOperationCompleted);
            }
            this.InvokeAsync("ONM_LINEMEN_LOGOUT", new object[] {
                        strIMEI_No}, this.ONM_LINEMEN_LOGOUTOperationCompleted, userState);
        }
        
        private void OnONM_LINEMEN_LOGOUTOperationCompleted(object arg) {
            if ((this.ONM_LINEMEN_LOGOUTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_LINEMEN_LOGOUTCompleted(this, new ONM_LINEMEN_LOGOUTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_COMPLAINT_DETAIL", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_COMPLAINT_DETAIL(string strKeyMap, string imeiNo) {
            object[] results = this.Invoke("ONM_COMPLAINT_DETAIL", new object[] {
                        strKeyMap,
                        imeiNo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_COMPLAINT_DETAILAsync(string strKeyMap, string imeiNo) {
            this.ONM_COMPLAINT_DETAILAsync(strKeyMap, imeiNo, null);
        }
        
        /// <remarks/>
        public void ONM_COMPLAINT_DETAILAsync(string strKeyMap, string imeiNo, object userState) {
            if ((this.ONM_COMPLAINT_DETAILOperationCompleted == null)) {
                this.ONM_COMPLAINT_DETAILOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_COMPLAINT_DETAILOperationCompleted);
            }
            this.InvokeAsync("ONM_COMPLAINT_DETAIL", new object[] {
                        strKeyMap,
                        imeiNo}, this.ONM_COMPLAINT_DETAILOperationCompleted, userState);
        }
        
        private void OnONM_COMPLAINT_DETAILOperationCompleted(object arg) {
            if ((this.ONM_COMPLAINT_DETAILCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_COMPLAINT_DETAILCompleted(this, new ONM_COMPLAINT_DETAILCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/onm_mark_read", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool onm_mark_read(string complain_no, string fault_id, string occurance_dt, string imei_no, string lm_read_flag, string lm_latitude, string lm_longitude) {
            object[] results = this.Invoke("onm_mark_read", new object[] {
                        complain_no,
                        fault_id,
                        occurance_dt,
                        imei_no,
                        lm_read_flag,
                        lm_latitude,
                        lm_longitude});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void onm_mark_readAsync(string complain_no, string fault_id, string occurance_dt, string imei_no, string lm_read_flag, string lm_latitude, string lm_longitude) {
            this.onm_mark_readAsync(complain_no, fault_id, occurance_dt, imei_no, lm_read_flag, lm_latitude, lm_longitude, null);
        }
        
        /// <remarks/>
        public void onm_mark_readAsync(string complain_no, string fault_id, string occurance_dt, string imei_no, string lm_read_flag, string lm_latitude, string lm_longitude, object userState) {
            if ((this.onm_mark_readOperationCompleted == null)) {
                this.onm_mark_readOperationCompleted = new System.Threading.SendOrPostCallback(this.Ononm_mark_readOperationCompleted);
            }
            this.InvokeAsync("onm_mark_read", new object[] {
                        complain_no,
                        fault_id,
                        occurance_dt,
                        imei_no,
                        lm_read_flag,
                        lm_latitude,
                        lm_longitude}, this.onm_mark_readOperationCompleted, userState);
        }
        
        private void Ononm_mark_readOperationCompleted(object arg) {
            if ((this.onm_mark_readCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.onm_mark_readCompleted(this, new onm_mark_readCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/update_onm_complaint", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool update_onm_complaint(string complain_no, string faultid, string sbmt_latitude, string sbmt_longtude, string sbmt_remarks, string resolve_status, string resolve_time, string area_power_restored, string time_for_restoration, string fcode, string fault) {
            object[] results = this.Invoke("update_onm_complaint", new object[] {
                        complain_no,
                        faultid,
                        sbmt_latitude,
                        sbmt_longtude,
                        sbmt_remarks,
                        resolve_status,
                        resolve_time,
                        area_power_restored,
                        time_for_restoration,
                        fcode,
                        fault});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void update_onm_complaintAsync(string complain_no, string faultid, string sbmt_latitude, string sbmt_longtude, string sbmt_remarks, string resolve_status, string resolve_time, string area_power_restored, string time_for_restoration, string fcode, string fault) {
            this.update_onm_complaintAsync(complain_no, faultid, sbmt_latitude, sbmt_longtude, sbmt_remarks, resolve_status, resolve_time, area_power_restored, time_for_restoration, fcode, fault, null);
        }
        
        /// <remarks/>
        public void update_onm_complaintAsync(string complain_no, string faultid, string sbmt_latitude, string sbmt_longtude, string sbmt_remarks, string resolve_status, string resolve_time, string area_power_restored, string time_for_restoration, string fcode, string fault, object userState) {
            if ((this.update_onm_complaintOperationCompleted == null)) {
                this.update_onm_complaintOperationCompleted = new System.Threading.SendOrPostCallback(this.Onupdate_onm_complaintOperationCompleted);
            }
            this.InvokeAsync("update_onm_complaint", new object[] {
                        complain_no,
                        faultid,
                        sbmt_latitude,
                        sbmt_longtude,
                        sbmt_remarks,
                        resolve_status,
                        resolve_time,
                        area_power_restored,
                        time_for_restoration,
                        fcode,
                        fault}, this.update_onm_complaintOperationCompleted, userState);
        }
        
        private void Onupdate_onm_complaintOperationCompleted(object arg) {
            if ((this.update_onm_complaintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.update_onm_complaintCompleted(this, new update_onm_complaintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_UpdatebreakdowndetailsHour", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ONM_UpdatebreakdowndetailsHour(string BreakDownID, string FaultID, string NewHour, string NewMin) {
            object[] results = this.Invoke("ONM_UpdatebreakdowndetailsHour", new object[] {
                        BreakDownID,
                        FaultID,
                        NewHour,
                        NewMin});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_UpdatebreakdowndetailsHourAsync(string BreakDownID, string FaultID, string NewHour, string NewMin) {
            this.ONM_UpdatebreakdowndetailsHourAsync(BreakDownID, FaultID, NewHour, NewMin, null);
        }
        
        /// <remarks/>
        public void ONM_UpdatebreakdowndetailsHourAsync(string BreakDownID, string FaultID, string NewHour, string NewMin, object userState) {
            if ((this.ONM_UpdatebreakdowndetailsHourOperationCompleted == null)) {
                this.ONM_UpdatebreakdowndetailsHourOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_UpdatebreakdowndetailsHourOperationCompleted);
            }
            this.InvokeAsync("ONM_UpdatebreakdowndetailsHour", new object[] {
                        BreakDownID,
                        FaultID,
                        NewHour,
                        NewMin}, this.ONM_UpdatebreakdowndetailsHourOperationCompleted, userState);
        }
        
        private void OnONM_UpdatebreakdowndetailsHourOperationCompleted(object arg) {
            if ((this.ONM_UpdatebreakdowndetailsHourCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_UpdatebreakdowndetailsHourCompleted(this, new ONM_UpdatebreakdowndetailsHourCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/GetbreakdowndetailsIMEI", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetbreakdowndetailsIMEI(string imeiNo) {
            object[] results = this.Invoke("GetbreakdowndetailsIMEI", new object[] {
                        imeiNo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetbreakdowndetailsIMEIAsync(string imeiNo) {
            this.GetbreakdowndetailsIMEIAsync(imeiNo, null);
        }
        
        /// <remarks/>
        public void GetbreakdowndetailsIMEIAsync(string imeiNo, object userState) {
            if ((this.GetbreakdowndetailsIMEIOperationCompleted == null)) {
                this.GetbreakdowndetailsIMEIOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetbreakdowndetailsIMEIOperationCompleted);
            }
            this.InvokeAsync("GetbreakdowndetailsIMEI", new object[] {
                        imeiNo}, this.GetbreakdowndetailsIMEIOperationCompleted, userState);
        }
        
        private void OnGetbreakdowndetailsIMEIOperationCompleted(object arg) {
            if ((this.GetbreakdowndetailsIMEICompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetbreakdowndetailsIMEICompleted(this, new GetbreakdowndetailsIMEICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_updatebreakdownreadstatsu", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ONM_updatebreakdownreadstatsu(string BREAK_DOWN_ID, string FAULTID) {
            object[] results = this.Invoke("ONM_updatebreakdownreadstatsu", new object[] {
                        BREAK_DOWN_ID,
                        FAULTID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_updatebreakdownreadstatsuAsync(string BREAK_DOWN_ID, string FAULTID) {
            this.ONM_updatebreakdownreadstatsuAsync(BREAK_DOWN_ID, FAULTID, null);
        }
        
        /// <remarks/>
        public void ONM_updatebreakdownreadstatsuAsync(string BREAK_DOWN_ID, string FAULTID, object userState) {
            if ((this.ONM_updatebreakdownreadstatsuOperationCompleted == null)) {
                this.ONM_updatebreakdownreadstatsuOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_updatebreakdownreadstatsuOperationCompleted);
            }
            this.InvokeAsync("ONM_updatebreakdownreadstatsu", new object[] {
                        BREAK_DOWN_ID,
                        FAULTID}, this.ONM_updatebreakdownreadstatsuOperationCompleted, userState);
        }
        
        private void OnONM_updatebreakdownreadstatsuOperationCompleted(object arg) {
            if ((this.ONM_updatebreakdownreadstatsuCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_updatebreakdownreadstatsuCompleted(this, new ONM_updatebreakdownreadstatsuCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/getbreakdownstatusBD", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getbreakdownstatusBD(string BREAK_DOWN_ID, string faultID) {
            object[] results = this.Invoke("getbreakdownstatusBD", new object[] {
                        BREAK_DOWN_ID,
                        faultID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getbreakdownstatusBDAsync(string BREAK_DOWN_ID, string faultID) {
            this.getbreakdownstatusBDAsync(BREAK_DOWN_ID, faultID, null);
        }
        
        /// <remarks/>
        public void getbreakdownstatusBDAsync(string BREAK_DOWN_ID, string faultID, object userState) {
            if ((this.getbreakdownstatusBDOperationCompleted == null)) {
                this.getbreakdownstatusBDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetbreakdownstatusBDOperationCompleted);
            }
            this.InvokeAsync("getbreakdownstatusBD", new object[] {
                        BREAK_DOWN_ID,
                        faultID}, this.getbreakdownstatusBDOperationCompleted, userState);
        }
        
        private void OngetbreakdownstatusBDOperationCompleted(object arg) {
            if ((this.getbreakdownstatusBDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getbreakdownstatusBDCompleted(this, new getbreakdownstatusBDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_getbreakdownbackfeedlist", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_getbreakdownbackfeedlist(string BREAK_DOWN_ID) {
            object[] results = this.Invoke("ONM_getbreakdownbackfeedlist", new object[] {
                        BREAK_DOWN_ID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_getbreakdownbackfeedlistAsync(string BREAK_DOWN_ID) {
            this.ONM_getbreakdownbackfeedlistAsync(BREAK_DOWN_ID, null);
        }
        
        /// <remarks/>
        public void ONM_getbreakdownbackfeedlistAsync(string BREAK_DOWN_ID, object userState) {
            if ((this.ONM_getbreakdownbackfeedlistOperationCompleted == null)) {
                this.ONM_getbreakdownbackfeedlistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_getbreakdownbackfeedlistOperationCompleted);
            }
            this.InvokeAsync("ONM_getbreakdownbackfeedlist", new object[] {
                        BREAK_DOWN_ID}, this.ONM_getbreakdownbackfeedlistOperationCompleted, userState);
        }
        
        private void OnONM_getbreakdownbackfeedlistOperationCompleted(object arg) {
            if ((this.ONM_getbreakdownbackfeedlistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_getbreakdownbackfeedlistCompleted(this, new ONM_getbreakdownbackfeedlistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_updatebreakdownbackfeed", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ONM_updatebreakdownbackfeed(string BREAK_DOWN_ID, string FAULTID, string restoreddate, string restoredload, string restoresource, string restoretype, string remarks, string selectedsource) {
            object[] results = this.Invoke("ONM_updatebreakdownbackfeed", new object[] {
                        BREAK_DOWN_ID,
                        FAULTID,
                        restoreddate,
                        restoredload,
                        restoresource,
                        restoretype,
                        remarks,
                        selectedsource});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_updatebreakdownbackfeedAsync(string BREAK_DOWN_ID, string FAULTID, string restoreddate, string restoredload, string restoresource, string restoretype, string remarks, string selectedsource) {
            this.ONM_updatebreakdownbackfeedAsync(BREAK_DOWN_ID, FAULTID, restoreddate, restoredload, restoresource, restoretype, remarks, selectedsource, null);
        }
        
        /// <remarks/>
        public void ONM_updatebreakdownbackfeedAsync(string BREAK_DOWN_ID, string FAULTID, string restoreddate, string restoredload, string restoresource, string restoretype, string remarks, string selectedsource, object userState) {
            if ((this.ONM_updatebreakdownbackfeedOperationCompleted == null)) {
                this.ONM_updatebreakdownbackfeedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_updatebreakdownbackfeedOperationCompleted);
            }
            this.InvokeAsync("ONM_updatebreakdownbackfeed", new object[] {
                        BREAK_DOWN_ID,
                        FAULTID,
                        restoreddate,
                        restoredload,
                        restoresource,
                        restoretype,
                        remarks,
                        selectedsource}, this.ONM_updatebreakdownbackfeedOperationCompleted, userState);
        }
        
        private void OnONM_updatebreakdownbackfeedOperationCompleted(object arg) {
            if ((this.ONM_updatebreakdownbackfeedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_updatebreakdownbackfeedCompleted(this, new ONM_updatebreakdownbackfeedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_CloseCableDetails", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ONM_CloseCableDetails(string BREAK_DOWN_ID, string FAULTID, string restoreddate, string restoredload, string restoresource, string restoretype, string remarks, string selectedsource) {
            object[] results = this.Invoke("ONM_CloseCableDetails", new object[] {
                        BREAK_DOWN_ID,
                        FAULTID,
                        restoreddate,
                        restoredload,
                        restoresource,
                        restoretype,
                        remarks,
                        selectedsource});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_CloseCableDetailsAsync(string BREAK_DOWN_ID, string FAULTID, string restoreddate, string restoredload, string restoresource, string restoretype, string remarks, string selectedsource) {
            this.ONM_CloseCableDetailsAsync(BREAK_DOWN_ID, FAULTID, restoreddate, restoredload, restoresource, restoretype, remarks, selectedsource, null);
        }
        
        /// <remarks/>
        public void ONM_CloseCableDetailsAsync(string BREAK_DOWN_ID, string FAULTID, string restoreddate, string restoredload, string restoresource, string restoretype, string remarks, string selectedsource, object userState) {
            if ((this.ONM_CloseCableDetailsOperationCompleted == null)) {
                this.ONM_CloseCableDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_CloseCableDetailsOperationCompleted);
            }
            this.InvokeAsync("ONM_CloseCableDetails", new object[] {
                        BREAK_DOWN_ID,
                        FAULTID,
                        restoreddate,
                        restoredload,
                        restoresource,
                        restoretype,
                        remarks,
                        selectedsource}, this.ONM_CloseCableDetailsOperationCompleted, userState);
        }
        
        private void OnONM_CloseCableDetailsOperationCompleted(object arg) {
            if ((this.ONM_CloseCableDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_CloseCableDetailsCompleted(this, new ONM_CloseCableDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_BurnMeterUpdate", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_BurnMeterUpdate(string strComp1) {
            object[] results = this.Invoke("ONM_BurnMeterUpdate", new object[] {
                        strComp1});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_BurnMeterUpdateAsync(string strComp1) {
            this.ONM_BurnMeterUpdateAsync(strComp1, null);
        }
        
        /// <remarks/>
        public void ONM_BurnMeterUpdateAsync(string strComp1, object userState) {
            if ((this.ONM_BurnMeterUpdateOperationCompleted == null)) {
                this.ONM_BurnMeterUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_BurnMeterUpdateOperationCompleted);
            }
            this.InvokeAsync("ONM_BurnMeterUpdate", new object[] {
                        strComp1}, this.ONM_BurnMeterUpdateOperationCompleted, userState);
        }
        
        private void OnONM_BurnMeterUpdateOperationCompleted(object arg) {
            if ((this.ONM_BurnMeterUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_BurnMeterUpdateCompleted(this, new ONM_BurnMeterUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_Get_Meter_OComp_List", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_Get_Meter_OComp_List(string distName, string complaintCentre, string status, string areaName) {
            object[] results = this.Invoke("ONM_Get_Meter_OComp_List", new object[] {
                        distName,
                        complaintCentre,
                        status,
                        areaName});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_Get_Meter_OComp_ListAsync(string distName, string complaintCentre, string status, string areaName) {
            this.ONM_Get_Meter_OComp_ListAsync(distName, complaintCentre, status, areaName, null);
        }
        
        /// <remarks/>
        public void ONM_Get_Meter_OComp_ListAsync(string distName, string complaintCentre, string status, string areaName, object userState) {
            if ((this.ONM_Get_Meter_OComp_ListOperationCompleted == null)) {
                this.ONM_Get_Meter_OComp_ListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_Get_Meter_OComp_ListOperationCompleted);
            }
            this.InvokeAsync("ONM_Get_Meter_OComp_List", new object[] {
                        distName,
                        complaintCentre,
                        status,
                        areaName}, this.ONM_Get_Meter_OComp_ListOperationCompleted, userState);
        }
        
        private void OnONM_Get_Meter_OComp_ListOperationCompleted(object arg) {
            if ((this.ONM_Get_Meter_OComp_ListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_Get_Meter_OComp_ListCompleted(this, new ONM_Get_Meter_OComp_ListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_Get_Meter_CComp_List", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_Get_Meter_CComp_List(string distName, string complaintCentre, string status, string areaName) {
            object[] results = this.Invoke("ONM_Get_Meter_CComp_List", new object[] {
                        distName,
                        complaintCentre,
                        status,
                        areaName});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_Get_Meter_CComp_ListAsync(string distName, string complaintCentre, string status, string areaName) {
            this.ONM_Get_Meter_CComp_ListAsync(distName, complaintCentre, status, areaName, null);
        }
        
        /// <remarks/>
        public void ONM_Get_Meter_CComp_ListAsync(string distName, string complaintCentre, string status, string areaName, object userState) {
            if ((this.ONM_Get_Meter_CComp_ListOperationCompleted == null)) {
                this.ONM_Get_Meter_CComp_ListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_Get_Meter_CComp_ListOperationCompleted);
            }
            this.InvokeAsync("ONM_Get_Meter_CComp_List", new object[] {
                        distName,
                        complaintCentre,
                        status,
                        areaName}, this.ONM_Get_Meter_CComp_ListOperationCompleted, userState);
        }
        
        private void OnONM_Get_Meter_CComp_ListOperationCompleted(object arg) {
            if ((this.ONM_Get_Meter_CComp_ListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_Get_Meter_CComp_ListCompleted(this, new ONM_Get_Meter_CComp_ListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_Dashboard_Report", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_Dashboard_Report(string strStartDate, string strEndDate, string strDivision, string strCompType) {
            object[] results = this.Invoke("ONM_Dashboard_Report", new object[] {
                        strStartDate,
                        strEndDate,
                        strDivision,
                        strCompType});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_Dashboard_ReportAsync(string strStartDate, string strEndDate, string strDivision, string strCompType) {
            this.ONM_Dashboard_ReportAsync(strStartDate, strEndDate, strDivision, strCompType, null);
        }
        
        /// <remarks/>
        public void ONM_Dashboard_ReportAsync(string strStartDate, string strEndDate, string strDivision, string strCompType, object userState) {
            if ((this.ONM_Dashboard_ReportOperationCompleted == null)) {
                this.ONM_Dashboard_ReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_Dashboard_ReportOperationCompleted);
            }
            this.InvokeAsync("ONM_Dashboard_Report", new object[] {
                        strStartDate,
                        strEndDate,
                        strDivision,
                        strCompType}, this.ONM_Dashboard_ReportOperationCompleted, userState);
        }
        
        private void OnONM_Dashboard_ReportOperationCompleted(object arg) {
            if ((this.ONM_Dashboard_ReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_Dashboard_ReportCompleted(this, new ONM_Dashboard_ReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_Dashboard_OnSelect", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_Dashboard_OnSelect(string strStartDate, string strEndDate, string strDivCode, string strCompType, string strCompSubType) {
            object[] results = this.Invoke("ONM_Dashboard_OnSelect", new object[] {
                        strStartDate,
                        strEndDate,
                        strDivCode,
                        strCompType,
                        strCompSubType});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_Dashboard_OnSelectAsync(string strStartDate, string strEndDate, string strDivCode, string strCompType, string strCompSubType) {
            this.ONM_Dashboard_OnSelectAsync(strStartDate, strEndDate, strDivCode, strCompType, strCompSubType, null);
        }
        
        /// <remarks/>
        public void ONM_Dashboard_OnSelectAsync(string strStartDate, string strEndDate, string strDivCode, string strCompType, string strCompSubType, object userState) {
            if ((this.ONM_Dashboard_OnSelectOperationCompleted == null)) {
                this.ONM_Dashboard_OnSelectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_Dashboard_OnSelectOperationCompleted);
            }
            this.InvokeAsync("ONM_Dashboard_OnSelect", new object[] {
                        strStartDate,
                        strEndDate,
                        strDivCode,
                        strCompType,
                        strCompSubType}, this.ONM_Dashboard_OnSelectOperationCompleted, userState);
        }
        
        private void OnONM_Dashboard_OnSelectOperationCompleted(object arg) {
            if ((this.ONM_Dashboard_OnSelectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_Dashboard_OnSelectCompleted(this, new ONM_Dashboard_OnSelectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_Dashboard_Report_Old", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_Dashboard_Report_Old(string strStartDate, string strEndDate, string strDivision) {
            object[] results = this.Invoke("ONM_Dashboard_Report_Old", new object[] {
                        strStartDate,
                        strEndDate,
                        strDivision});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_Dashboard_Report_OldAsync(string strStartDate, string strEndDate, string strDivision) {
            this.ONM_Dashboard_Report_OldAsync(strStartDate, strEndDate, strDivision, null);
        }
        
        /// <remarks/>
        public void ONM_Dashboard_Report_OldAsync(string strStartDate, string strEndDate, string strDivision, object userState) {
            if ((this.ONM_Dashboard_Report_OldOperationCompleted == null)) {
                this.ONM_Dashboard_Report_OldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_Dashboard_Report_OldOperationCompleted);
            }
            this.InvokeAsync("ONM_Dashboard_Report_Old", new object[] {
                        strStartDate,
                        strEndDate,
                        strDivision}, this.ONM_Dashboard_Report_OldOperationCompleted, userState);
        }
        
        private void OnONM_Dashboard_Report_OldOperationCompleted(object arg) {
            if ((this.ONM_Dashboard_Report_OldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_Dashboard_Report_OldCompleted(this, new ONM_Dashboard_Report_OldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_Dashboard_OnSelect_Old", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_Dashboard_OnSelect_Old(string strStartDate, string strEndDate, string strDivCode) {
            object[] results = this.Invoke("ONM_Dashboard_OnSelect_Old", new object[] {
                        strStartDate,
                        strEndDate,
                        strDivCode});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_Dashboard_OnSelect_OldAsync(string strStartDate, string strEndDate, string strDivCode) {
            this.ONM_Dashboard_OnSelect_OldAsync(strStartDate, strEndDate, strDivCode, null);
        }
        
        /// <remarks/>
        public void ONM_Dashboard_OnSelect_OldAsync(string strStartDate, string strEndDate, string strDivCode, object userState) {
            if ((this.ONM_Dashboard_OnSelect_OldOperationCompleted == null)) {
                this.ONM_Dashboard_OnSelect_OldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_Dashboard_OnSelect_OldOperationCompleted);
            }
            this.InvokeAsync("ONM_Dashboard_OnSelect_Old", new object[] {
                        strStartDate,
                        strEndDate,
                        strDivCode}, this.ONM_Dashboard_OnSelect_OldOperationCompleted, userState);
        }
        
        private void OnONM_Dashboard_OnSelect_OldOperationCompleted(object arg) {
            if ((this.ONM_Dashboard_OnSelect_OldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_Dashboard_OnSelect_OldCompleted(this, new ONM_Dashboard_OnSelect_OldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Test_Application", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Test_Application(string strString) {
            object[] results = this.Invoke("Test_Application", new object[] {
                        strString});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Test_ApplicationAsync(string strString) {
            this.Test_ApplicationAsync(strString, null);
        }
        
        /// <remarks/>
        public void Test_ApplicationAsync(string strString, object userState) {
            if ((this.Test_ApplicationOperationCompleted == null)) {
                this.Test_ApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTest_ApplicationOperationCompleted);
            }
            this.InvokeAsync("Test_Application", new object[] {
                        strString}, this.Test_ApplicationOperationCompleted, userState);
        }
        
        private void OnTest_ApplicationOperationCompleted(object arg) {
            if ((this.Test_ApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Test_ApplicationCompleted(this, new Test_ApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_NCC_Registration", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ONM_NCC_Registration(string _sCANo, string cboPriority, string lstFaultCatg, string txtCustRemarks, string cboMinutes, string cboDays, string AreaCode, string _sMobileNo) {
            object[] results = this.Invoke("ONM_NCC_Registration", new object[] {
                        _sCANo,
                        cboPriority,
                        lstFaultCatg,
                        txtCustRemarks,
                        cboMinutes,
                        cboDays,
                        AreaCode,
                        _sMobileNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_NCC_RegistrationAsync(string _sCANo, string cboPriority, string lstFaultCatg, string txtCustRemarks, string cboMinutes, string cboDays, string AreaCode, string _sMobileNo) {
            this.ONM_NCC_RegistrationAsync(_sCANo, cboPriority, lstFaultCatg, txtCustRemarks, cboMinutes, cboDays, AreaCode, _sMobileNo, null);
        }
        
        /// <remarks/>
        public void ONM_NCC_RegistrationAsync(string _sCANo, string cboPriority, string lstFaultCatg, string txtCustRemarks, string cboMinutes, string cboDays, string AreaCode, string _sMobileNo, object userState) {
            if ((this.ONM_NCC_RegistrationOperationCompleted == null)) {
                this.ONM_NCC_RegistrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_NCC_RegistrationOperationCompleted);
            }
            this.InvokeAsync("ONM_NCC_Registration", new object[] {
                        _sCANo,
                        cboPriority,
                        lstFaultCatg,
                        txtCustRemarks,
                        cboMinutes,
                        cboDays,
                        AreaCode,
                        _sMobileNo}, this.ONM_NCC_RegistrationOperationCompleted, userState);
        }
        
        private void OnONM_NCC_RegistrationOperationCompleted(object arg) {
            if ((this.ONM_NCC_RegistrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_NCC_RegistrationCompleted(this, new ONM_NCC_RegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_Area_Code", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_Area_Code(string _strDiv) {
            object[] results = this.Invoke("ONM_Area_Code", new object[] {
                        _strDiv});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_Area_CodeAsync(string _strDiv) {
            this.ONM_Area_CodeAsync(_strDiv, null);
        }
        
        /// <remarks/>
        public void ONM_Area_CodeAsync(string _strDiv, object userState) {
            if ((this.ONM_Area_CodeOperationCompleted == null)) {
                this.ONM_Area_CodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_Area_CodeOperationCompleted);
            }
            this.InvokeAsync("ONM_Area_Code", new object[] {
                        _strDiv}, this.ONM_Area_CodeOperationCompleted, userState);
        }
        
        private void OnONM_Area_CodeOperationCompleted(object arg) {
            if ((this.ONM_Area_CodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_Area_CodeCompleted(this, new ONM_Area_CodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_LOGIN_USER", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_LOGIN_USER(string strUser_Name, string strPassword, string strIMEI_No) {
            object[] results = this.Invoke("ONM_LOGIN_USER", new object[] {
                        strUser_Name,
                        strPassword,
                        strIMEI_No});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_LOGIN_USERAsync(string strUser_Name, string strPassword, string strIMEI_No) {
            this.ONM_LOGIN_USERAsync(strUser_Name, strPassword, strIMEI_No, null);
        }
        
        /// <remarks/>
        public void ONM_LOGIN_USERAsync(string strUser_Name, string strPassword, string strIMEI_No, object userState) {
            if ((this.ONM_LOGIN_USEROperationCompleted == null)) {
                this.ONM_LOGIN_USEROperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_LOGIN_USEROperationCompleted);
            }
            this.InvokeAsync("ONM_LOGIN_USER", new object[] {
                        strUser_Name,
                        strPassword,
                        strIMEI_No}, this.ONM_LOGIN_USEROperationCompleted, userState);
        }
        
        private void OnONM_LOGIN_USEROperationCompleted(object arg) {
            if ((this.ONM_LOGIN_USERCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_LOGIN_USERCompleted(this, new ONM_LOGIN_USERCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_LINEMEN_USER_LIST", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_LINEMEN_USER_LIST(string strDist, string strTOImeiNo) {
            object[] results = this.Invoke("ONM_LINEMEN_USER_LIST", new object[] {
                        strDist,
                        strTOImeiNo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_LINEMEN_USER_LISTAsync(string strDist, string strTOImeiNo) {
            this.ONM_LINEMEN_USER_LISTAsync(strDist, strTOImeiNo, null);
        }
        
        /// <remarks/>
        public void ONM_LINEMEN_USER_LISTAsync(string strDist, string strTOImeiNo, object userState) {
            if ((this.ONM_LINEMEN_USER_LISTOperationCompleted == null)) {
                this.ONM_LINEMEN_USER_LISTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_LINEMEN_USER_LISTOperationCompleted);
            }
            this.InvokeAsync("ONM_LINEMEN_USER_LIST", new object[] {
                        strDist,
                        strTOImeiNo}, this.ONM_LINEMEN_USER_LISTOperationCompleted, userState);
        }
        
        private void OnONM_LINEMEN_USER_LISTOperationCompleted(object arg) {
            if ((this.ONM_LINEMEN_USER_LISTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_LINEMEN_USER_LISTCompleted(this, new ONM_LINEMEN_USER_LISTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_Get_Complaint_List", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_Get_Complaint_List(string distName, string complaintCentre, string status, string areaName) {
            object[] results = this.Invoke("ONM_Get_Complaint_List", new object[] {
                        distName,
                        complaintCentre,
                        status,
                        areaName});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_Get_Complaint_ListAsync(string distName, string complaintCentre, string status, string areaName) {
            this.ONM_Get_Complaint_ListAsync(distName, complaintCentre, status, areaName, null);
        }
        
        /// <remarks/>
        public void ONM_Get_Complaint_ListAsync(string distName, string complaintCentre, string status, string areaName, object userState) {
            if ((this.ONM_Get_Complaint_ListOperationCompleted == null)) {
                this.ONM_Get_Complaint_ListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_Get_Complaint_ListOperationCompleted);
            }
            this.InvokeAsync("ONM_Get_Complaint_List", new object[] {
                        distName,
                        complaintCentre,
                        status,
                        areaName}, this.ONM_Get_Complaint_ListOperationCompleted, userState);
        }
        
        private void OnONM_Get_Complaint_ListOperationCompleted(object arg) {
            if ((this.ONM_Get_Complaint_ListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_Get_Complaint_ListCompleted(this, new ONM_Get_Complaint_ListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_Allocate_Complaint", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ONM_Allocate_Complaint(string ccAssignBy, string ccAssignReason, string ccCompRegisterNo, string ccInfPerson, string faultId) {
            object[] results = this.Invoke("ONM_Allocate_Complaint", new object[] {
                        ccAssignBy,
                        ccAssignReason,
                        ccCompRegisterNo,
                        ccInfPerson,
                        faultId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_Allocate_ComplaintAsync(string ccAssignBy, string ccAssignReason, string ccCompRegisterNo, string ccInfPerson, string faultId) {
            this.ONM_Allocate_ComplaintAsync(ccAssignBy, ccAssignReason, ccCompRegisterNo, ccInfPerson, faultId, null);
        }
        
        /// <remarks/>
        public void ONM_Allocate_ComplaintAsync(string ccAssignBy, string ccAssignReason, string ccCompRegisterNo, string ccInfPerson, string faultId, object userState) {
            if ((this.ONM_Allocate_ComplaintOperationCompleted == null)) {
                this.ONM_Allocate_ComplaintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_Allocate_ComplaintOperationCompleted);
            }
            this.InvokeAsync("ONM_Allocate_Complaint", new object[] {
                        ccAssignBy,
                        ccAssignReason,
                        ccCompRegisterNo,
                        ccInfPerson,
                        faultId}, this.ONM_Allocate_ComplaintOperationCompleted, userState);
        }
        
        private void OnONM_Allocate_ComplaintOperationCompleted(object arg) {
            if ((this.ONM_Allocate_ComplaintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_Allocate_ComplaintCompleted(this, new ONM_Allocate_ComplaintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/BD_Get_Complaint_List", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable BD_Get_Complaint_List(string distName, string areaName) {
            object[] results = this.Invoke("BD_Get_Complaint_List", new object[] {
                        distName,
                        areaName});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void BD_Get_Complaint_ListAsync(string distName, string areaName) {
            this.BD_Get_Complaint_ListAsync(distName, areaName, null);
        }
        
        /// <remarks/>
        public void BD_Get_Complaint_ListAsync(string distName, string areaName, object userState) {
            if ((this.BD_Get_Complaint_ListOperationCompleted == null)) {
                this.BD_Get_Complaint_ListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBD_Get_Complaint_ListOperationCompleted);
            }
            this.InvokeAsync("BD_Get_Complaint_List", new object[] {
                        distName,
                        areaName}, this.BD_Get_Complaint_ListOperationCompleted, userState);
        }
        
        private void OnBD_Get_Complaint_ListOperationCompleted(object arg) {
            if ((this.BD_Get_Complaint_ListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BD_Get_Complaint_ListCompleted(this, new BD_Get_Complaint_ListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_Get_UserDevice_List", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_Get_UserDevice_List(string strDistCode, string strDeviceImeinNo) {
            object[] results = this.Invoke("ONM_Get_UserDevice_List", new object[] {
                        strDistCode,
                        strDeviceImeinNo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_Get_UserDevice_ListAsync(string strDistCode, string strDeviceImeinNo) {
            this.ONM_Get_UserDevice_ListAsync(strDistCode, strDeviceImeinNo, null);
        }
        
        /// <remarks/>
        public void ONM_Get_UserDevice_ListAsync(string strDistCode, string strDeviceImeinNo, object userState) {
            if ((this.ONM_Get_UserDevice_ListOperationCompleted == null)) {
                this.ONM_Get_UserDevice_ListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_Get_UserDevice_ListOperationCompleted);
            }
            this.InvokeAsync("ONM_Get_UserDevice_List", new object[] {
                        strDistCode,
                        strDeviceImeinNo}, this.ONM_Get_UserDevice_ListOperationCompleted, userState);
        }
        
        private void OnONM_Get_UserDevice_ListOperationCompleted(object arg) {
            if ((this.ONM_Get_UserDevice_ListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_Get_UserDevice_ListCompleted(this, new ONM_Get_UserDevice_ListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_Get_Device_Name_List", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_Get_Device_Name_List(string strDiviceName, string strDistName, string strTOImeiNo) {
            object[] results = this.Invoke("ONM_Get_Device_Name_List", new object[] {
                        strDiviceName,
                        strDistName,
                        strTOImeiNo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_Get_Device_Name_ListAsync(string strDiviceName, string strDistName, string strTOImeiNo) {
            this.ONM_Get_Device_Name_ListAsync(strDiviceName, strDistName, strTOImeiNo, null);
        }
        
        /// <remarks/>
        public void ONM_Get_Device_Name_ListAsync(string strDiviceName, string strDistName, string strTOImeiNo, object userState) {
            if ((this.ONM_Get_Device_Name_ListOperationCompleted == null)) {
                this.ONM_Get_Device_Name_ListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_Get_Device_Name_ListOperationCompleted);
            }
            this.InvokeAsync("ONM_Get_Device_Name_List", new object[] {
                        strDiviceName,
                        strDistName,
                        strTOImeiNo}, this.ONM_Get_Device_Name_ListOperationCompleted, userState);
        }
        
        private void OnONM_Get_Device_Name_ListOperationCompleted(object arg) {
            if ((this.ONM_Get_Device_Name_ListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_Get_Device_Name_ListCompleted(this, new ONM_Get_Device_Name_ListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_Update_UserDevice_List", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ONM_Update_UserDevice_List(string userName, string userEmpId, string userStartTime, string userEndTime, string userEntryDate, string deviceIMEI, string password) {
            object[] results = this.Invoke("ONM_Update_UserDevice_List", new object[] {
                        userName,
                        userEmpId,
                        userStartTime,
                        userEndTime,
                        userEntryDate,
                        deviceIMEI,
                        password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_Update_UserDevice_ListAsync(string userName, string userEmpId, string userStartTime, string userEndTime, string userEntryDate, string deviceIMEI, string password) {
            this.ONM_Update_UserDevice_ListAsync(userName, userEmpId, userStartTime, userEndTime, userEntryDate, deviceIMEI, password, null);
        }
        
        /// <remarks/>
        public void ONM_Update_UserDevice_ListAsync(string userName, string userEmpId, string userStartTime, string userEndTime, string userEntryDate, string deviceIMEI, string password, object userState) {
            if ((this.ONM_Update_UserDevice_ListOperationCompleted == null)) {
                this.ONM_Update_UserDevice_ListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_Update_UserDevice_ListOperationCompleted);
            }
            this.InvokeAsync("ONM_Update_UserDevice_List", new object[] {
                        userName,
                        userEmpId,
                        userStartTime,
                        userEndTime,
                        userEntryDate,
                        deviceIMEI,
                        password}, this.ONM_Update_UserDevice_ListOperationCompleted, userState);
        }
        
        private void OnONM_Update_UserDevice_ListOperationCompleted(object arg) {
            if ((this.ONM_Update_UserDevice_ListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_Update_UserDevice_ListCompleted(this, new ONM_Update_UserDevice_ListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Street_Light_AreaList", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable Street_Light_AreaList(string anyInput) {
            object[] results = this.Invoke("Street_Light_AreaList", new object[] {
                        anyInput});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void Street_Light_AreaListAsync(string anyInput) {
            this.Street_Light_AreaListAsync(anyInput, null);
        }
        
        /// <remarks/>
        public void Street_Light_AreaListAsync(string anyInput, object userState) {
            if ((this.Street_Light_AreaListOperationCompleted == null)) {
                this.Street_Light_AreaListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStreet_Light_AreaListOperationCompleted);
            }
            this.InvokeAsync("Street_Light_AreaList", new object[] {
                        anyInput}, this.Street_Light_AreaListOperationCompleted, userState);
        }
        
        private void OnStreet_Light_AreaListOperationCompleted(object arg) {
            if ((this.Street_Light_AreaListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Street_Light_AreaListCompleted(this, new Street_Light_AreaListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Street_Light_AreaList_All", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable Street_Light_AreaList_All(string anyInput) {
            object[] results = this.Invoke("Street_Light_AreaList_All", new object[] {
                        anyInput});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void Street_Light_AreaList_AllAsync(string anyInput) {
            this.Street_Light_AreaList_AllAsync(anyInput, null);
        }
        
        /// <remarks/>
        public void Street_Light_AreaList_AllAsync(string anyInput, object userState) {
            if ((this.Street_Light_AreaList_AllOperationCompleted == null)) {
                this.Street_Light_AreaList_AllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStreet_Light_AreaList_AllOperationCompleted);
            }
            this.InvokeAsync("Street_Light_AreaList_All", new object[] {
                        anyInput}, this.Street_Light_AreaList_AllOperationCompleted, userState);
        }
        
        private void OnStreet_Light_AreaList_AllOperationCompleted(object arg) {
            if ((this.Street_Light_AreaList_AllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Street_Light_AreaList_AllCompleted(this, new Street_Light_AreaList_AllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Street_Light_Registration", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Street_Light_Registration(
                    string caNo, 
                    string area_Code, 
                    string fault_Code, 
                    string sarvey_Typ, 
                    string fixture_Typ, 
                    string fixture_No, 
                    string since_LastInMin, 
                    string since_LastInDays, 
                    string cust_Name, 
                    string cust_Add1, 
                    string cust_Add2, 
                    string cust_MbNo, 
                    string cust_AddlContNo, 
                    string cust_Road, 
                    string cust_Landmark, 
                    string cust_Rmks) {
            object[] results = this.Invoke("Street_Light_Registration", new object[] {
                        caNo,
                        area_Code,
                        fault_Code,
                        sarvey_Typ,
                        fixture_Typ,
                        fixture_No,
                        since_LastInMin,
                        since_LastInDays,
                        cust_Name,
                        cust_Add1,
                        cust_Add2,
                        cust_MbNo,
                        cust_AddlContNo,
                        cust_Road,
                        cust_Landmark,
                        cust_Rmks});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Street_Light_RegistrationAsync(
                    string caNo, 
                    string area_Code, 
                    string fault_Code, 
                    string sarvey_Typ, 
                    string fixture_Typ, 
                    string fixture_No, 
                    string since_LastInMin, 
                    string since_LastInDays, 
                    string cust_Name, 
                    string cust_Add1, 
                    string cust_Add2, 
                    string cust_MbNo, 
                    string cust_AddlContNo, 
                    string cust_Road, 
                    string cust_Landmark, 
                    string cust_Rmks) {
            this.Street_Light_RegistrationAsync(caNo, area_Code, fault_Code, sarvey_Typ, fixture_Typ, fixture_No, since_LastInMin, since_LastInDays, cust_Name, cust_Add1, cust_Add2, cust_MbNo, cust_AddlContNo, cust_Road, cust_Landmark, cust_Rmks, null);
        }
        
        /// <remarks/>
        public void Street_Light_RegistrationAsync(
                    string caNo, 
                    string area_Code, 
                    string fault_Code, 
                    string sarvey_Typ, 
                    string fixture_Typ, 
                    string fixture_No, 
                    string since_LastInMin, 
                    string since_LastInDays, 
                    string cust_Name, 
                    string cust_Add1, 
                    string cust_Add2, 
                    string cust_MbNo, 
                    string cust_AddlContNo, 
                    string cust_Road, 
                    string cust_Landmark, 
                    string cust_Rmks, 
                    object userState) {
            if ((this.Street_Light_RegistrationOperationCompleted == null)) {
                this.Street_Light_RegistrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStreet_Light_RegistrationOperationCompleted);
            }
            this.InvokeAsync("Street_Light_Registration", new object[] {
                        caNo,
                        area_Code,
                        fault_Code,
                        sarvey_Typ,
                        fixture_Typ,
                        fixture_No,
                        since_LastInMin,
                        since_LastInDays,
                        cust_Name,
                        cust_Add1,
                        cust_Add2,
                        cust_MbNo,
                        cust_AddlContNo,
                        cust_Road,
                        cust_Landmark,
                        cust_Rmks}, this.Street_Light_RegistrationOperationCompleted, userState);
        }
        
        private void OnStreet_Light_RegistrationOperationCompleted(object arg) {
            if ((this.Street_Light_RegistrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Street_Light_RegistrationCompleted(this, new Street_Light_RegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/SL_Complaint_List", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable SL_Complaint_List(string distName, string complaintCentre, string status, string areaName) {
            object[] results = this.Invoke("SL_Complaint_List", new object[] {
                        distName,
                        complaintCentre,
                        status,
                        areaName});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void SL_Complaint_ListAsync(string distName, string complaintCentre, string status, string areaName) {
            this.SL_Complaint_ListAsync(distName, complaintCentre, status, areaName, null);
        }
        
        /// <remarks/>
        public void SL_Complaint_ListAsync(string distName, string complaintCentre, string status, string areaName, object userState) {
            if ((this.SL_Complaint_ListOperationCompleted == null)) {
                this.SL_Complaint_ListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSL_Complaint_ListOperationCompleted);
            }
            this.InvokeAsync("SL_Complaint_List", new object[] {
                        distName,
                        complaintCentre,
                        status,
                        areaName}, this.SL_Complaint_ListOperationCompleted, userState);
        }
        
        private void OnSL_Complaint_ListOperationCompleted(object arg) {
            if ((this.SL_Complaint_ListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SL_Complaint_ListCompleted(this, new SL_Complaint_ListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/SL_Complaint_Allocation", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SL_Complaint_Allocation(string acknowledgeBy, string acknowledgeByDesig, string scheduleDt, string areaName, string areaCode, string operationalCompNo, string faultId) {
            object[] results = this.Invoke("SL_Complaint_Allocation", new object[] {
                        acknowledgeBy,
                        acknowledgeByDesig,
                        scheduleDt,
                        areaName,
                        areaCode,
                        operationalCompNo,
                        faultId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SL_Complaint_AllocationAsync(string acknowledgeBy, string acknowledgeByDesig, string scheduleDt, string areaName, string areaCode, string operationalCompNo, string faultId) {
            this.SL_Complaint_AllocationAsync(acknowledgeBy, acknowledgeByDesig, scheduleDt, areaName, areaCode, operationalCompNo, faultId, null);
        }
        
        /// <remarks/>
        public void SL_Complaint_AllocationAsync(string acknowledgeBy, string acknowledgeByDesig, string scheduleDt, string areaName, string areaCode, string operationalCompNo, string faultId, object userState) {
            if ((this.SL_Complaint_AllocationOperationCompleted == null)) {
                this.SL_Complaint_AllocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSL_Complaint_AllocationOperationCompleted);
            }
            this.InvokeAsync("SL_Complaint_Allocation", new object[] {
                        acknowledgeBy,
                        acknowledgeByDesig,
                        scheduleDt,
                        areaName,
                        areaCode,
                        operationalCompNo,
                        faultId}, this.SL_Complaint_AllocationOperationCompleted, userState);
        }
        
        private void OnSL_Complaint_AllocationOperationCompleted(object arg) {
            if ((this.SL_Complaint_AllocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SL_Complaint_AllocationCompleted(this, new SL_Complaint_AllocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/SL_Vendor_List", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable SL_Vendor_List(string distName, string complaintCentre, string status, string areaName) {
            object[] results = this.Invoke("SL_Vendor_List", new object[] {
                        distName,
                        complaintCentre,
                        status,
                        areaName});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void SL_Vendor_ListAsync(string distName, string complaintCentre, string status, string areaName) {
            this.SL_Vendor_ListAsync(distName, complaintCentre, status, areaName, null);
        }
        
        /// <remarks/>
        public void SL_Vendor_ListAsync(string distName, string complaintCentre, string status, string areaName, object userState) {
            if ((this.SL_Vendor_ListOperationCompleted == null)) {
                this.SL_Vendor_ListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSL_Vendor_ListOperationCompleted);
            }
            this.InvokeAsync("SL_Vendor_List", new object[] {
                        distName,
                        complaintCentre,
                        status,
                        areaName}, this.SL_Vendor_ListOperationCompleted, userState);
        }
        
        private void OnSL_Vendor_ListOperationCompleted(object arg) {
            if ((this.SL_Vendor_ListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SL_Vendor_ListCompleted(this, new SL_Vendor_ListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Emergency_Registration", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Emergency_Registration(
                    string caNo, 
                    string area_Code, 
                    string fault_Code, 
                    string sarvey_Typ, 
                    string fixture_Typ, 
                    string fixture_No, 
                    string since_LastInMin, 
                    string since_LastInDays, 
                    string cust_Name, 
                    string cust_Add1, 
                    string cust_Add2, 
                    string cust_MbNo, 
                    string cust_AddlContNo, 
                    string cust_Road, 
                    string cust_Landmark, 
                    string cust_Rmks) {
            object[] results = this.Invoke("Emergency_Registration", new object[] {
                        caNo,
                        area_Code,
                        fault_Code,
                        sarvey_Typ,
                        fixture_Typ,
                        fixture_No,
                        since_LastInMin,
                        since_LastInDays,
                        cust_Name,
                        cust_Add1,
                        cust_Add2,
                        cust_MbNo,
                        cust_AddlContNo,
                        cust_Road,
                        cust_Landmark,
                        cust_Rmks});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void Emergency_RegistrationAsync(
                    string caNo, 
                    string area_Code, 
                    string fault_Code, 
                    string sarvey_Typ, 
                    string fixture_Typ, 
                    string fixture_No, 
                    string since_LastInMin, 
                    string since_LastInDays, 
                    string cust_Name, 
                    string cust_Add1, 
                    string cust_Add2, 
                    string cust_MbNo, 
                    string cust_AddlContNo, 
                    string cust_Road, 
                    string cust_Landmark, 
                    string cust_Rmks) {
            this.Emergency_RegistrationAsync(caNo, area_Code, fault_Code, sarvey_Typ, fixture_Typ, fixture_No, since_LastInMin, since_LastInDays, cust_Name, cust_Add1, cust_Add2, cust_MbNo, cust_AddlContNo, cust_Road, cust_Landmark, cust_Rmks, null);
        }
        
        /// <remarks/>
        public void Emergency_RegistrationAsync(
                    string caNo, 
                    string area_Code, 
                    string fault_Code, 
                    string sarvey_Typ, 
                    string fixture_Typ, 
                    string fixture_No, 
                    string since_LastInMin, 
                    string since_LastInDays, 
                    string cust_Name, 
                    string cust_Add1, 
                    string cust_Add2, 
                    string cust_MbNo, 
                    string cust_AddlContNo, 
                    string cust_Road, 
                    string cust_Landmark, 
                    string cust_Rmks, 
                    object userState) {
            if ((this.Emergency_RegistrationOperationCompleted == null)) {
                this.Emergency_RegistrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEmergency_RegistrationOperationCompleted);
            }
            this.InvokeAsync("Emergency_Registration", new object[] {
                        caNo,
                        area_Code,
                        fault_Code,
                        sarvey_Typ,
                        fixture_Typ,
                        fixture_No,
                        since_LastInMin,
                        since_LastInDays,
                        cust_Name,
                        cust_Add1,
                        cust_Add2,
                        cust_MbNo,
                        cust_AddlContNo,
                        cust_Road,
                        cust_Landmark,
                        cust_Rmks}, this.Emergency_RegistrationOperationCompleted, userState);
        }
        
        private void OnEmergency_RegistrationOperationCompleted(object arg) {
            if ((this.Emergency_RegistrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Emergency_RegistrationCompleted(this, new Emergency_RegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/IMSGLoginUser", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet IMSGLoginUser(string strUserName, string strPassword, string strGCMId, string strImeiNo, string strAppVersion) {
            object[] results = this.Invoke("IMSGLoginUser", new object[] {
                        strUserName,
                        strPassword,
                        strGCMId,
                        strImeiNo,
                        strAppVersion});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void IMSGLoginUserAsync(string strUserName, string strPassword, string strGCMId, string strImeiNo, string strAppVersion) {
            this.IMSGLoginUserAsync(strUserName, strPassword, strGCMId, strImeiNo, strAppVersion, null);
        }
        
        /// <remarks/>
        public void IMSGLoginUserAsync(string strUserName, string strPassword, string strGCMId, string strImeiNo, string strAppVersion, object userState) {
            if ((this.IMSGLoginUserOperationCompleted == null)) {
                this.IMSGLoginUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIMSGLoginUserOperationCompleted);
            }
            this.InvokeAsync("IMSGLoginUser", new object[] {
                        strUserName,
                        strPassword,
                        strGCMId,
                        strImeiNo,
                        strAppVersion}, this.IMSGLoginUserOperationCompleted, userState);
        }
        
        private void OnIMSGLoginUserOperationCompleted(object arg) {
            if ((this.IMSGLoginUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IMSGLoginUserCompleted(this, new IMSGLoginUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/IMSGCompanyMst", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet IMSGCompanyMst(string strEmpRole, string strComp) {
            object[] results = this.Invoke("IMSGCompanyMst", new object[] {
                        strEmpRole,
                        strComp});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void IMSGCompanyMstAsync(string strEmpRole, string strComp) {
            this.IMSGCompanyMstAsync(strEmpRole, strComp, null);
        }
        
        /// <remarks/>
        public void IMSGCompanyMstAsync(string strEmpRole, string strComp, object userState) {
            if ((this.IMSGCompanyMstOperationCompleted == null)) {
                this.IMSGCompanyMstOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIMSGCompanyMstOperationCompleted);
            }
            this.InvokeAsync("IMSGCompanyMst", new object[] {
                        strEmpRole,
                        strComp}, this.IMSGCompanyMstOperationCompleted, userState);
        }
        
        private void OnIMSGCompanyMstOperationCompleted(object arg) {
            if ((this.IMSGCompanyMstCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IMSGCompanyMstCompleted(this, new IMSGCompanyMstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/IMSGCompGrpMst", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet IMSGCompGrpMst(string strCompId, string strEmpRole) {
            object[] results = this.Invoke("IMSGCompGrpMst", new object[] {
                        strCompId,
                        strEmpRole});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void IMSGCompGrpMstAsync(string strCompId, string strEmpRole) {
            this.IMSGCompGrpMstAsync(strCompId, strEmpRole, null);
        }
        
        /// <remarks/>
        public void IMSGCompGrpMstAsync(string strCompId, string strEmpRole, object userState) {
            if ((this.IMSGCompGrpMstOperationCompleted == null)) {
                this.IMSGCompGrpMstOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIMSGCompGrpMstOperationCompleted);
            }
            this.InvokeAsync("IMSGCompGrpMst", new object[] {
                        strCompId,
                        strEmpRole}, this.IMSGCompGrpMstOperationCompleted, userState);
        }
        
        private void OnIMSGCompGrpMstOperationCompleted(object arg) {
            if ((this.IMSGCompGrpMstCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IMSGCompGrpMstCompleted(this, new IMSGCompGrpMstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/IMSGCompSubGrpMst", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet IMSGCompSubGrpMst(string strCompId, string strEmpRole) {
            object[] results = this.Invoke("IMSGCompSubGrpMst", new object[] {
                        strCompId,
                        strEmpRole});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void IMSGCompSubGrpMstAsync(string strCompId, string strEmpRole) {
            this.IMSGCompSubGrpMstAsync(strCompId, strEmpRole, null);
        }
        
        /// <remarks/>
        public void IMSGCompSubGrpMstAsync(string strCompId, string strEmpRole, object userState) {
            if ((this.IMSGCompSubGrpMstOperationCompleted == null)) {
                this.IMSGCompSubGrpMstOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIMSGCompSubGrpMstOperationCompleted);
            }
            this.InvokeAsync("IMSGCompSubGrpMst", new object[] {
                        strCompId,
                        strEmpRole}, this.IMSGCompSubGrpMstOperationCompleted, userState);
        }
        
        private void OnIMSGCompSubGrpMstOperationCompleted(object arg) {
            if ((this.IMSGCompSubGrpMstCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IMSGCompSubGrpMstCompleted(this, new IMSGCompSubGrpMstCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/IMsgGCMRegistration", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet IMsgGCMRegistration(string strLoginId, string strGCMID, string strStatus) {
            object[] results = this.Invoke("IMsgGCMRegistration", new object[] {
                        strLoginId,
                        strGCMID,
                        strStatus});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void IMsgGCMRegistrationAsync(string strLoginId, string strGCMID, string strStatus) {
            this.IMsgGCMRegistrationAsync(strLoginId, strGCMID, strStatus, null);
        }
        
        /// <remarks/>
        public void IMsgGCMRegistrationAsync(string strLoginId, string strGCMID, string strStatus, object userState) {
            if ((this.IMsgGCMRegistrationOperationCompleted == null)) {
                this.IMsgGCMRegistrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIMsgGCMRegistrationOperationCompleted);
            }
            this.InvokeAsync("IMsgGCMRegistration", new object[] {
                        strLoginId,
                        strGCMID,
                        strStatus}, this.IMsgGCMRegistrationOperationCompleted, userState);
        }
        
        private void OnIMsgGCMRegistrationOperationCompleted(object arg) {
            if ((this.IMsgGCMRegistrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IMsgGCMRegistrationCompleted(this, new IMsgGCMRegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/IMsgGCMRegIds", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet IMsgGCMRegIds(string strComp, string strCompGrpId, string strSubCompId, string strEmpId) {
            object[] results = this.Invoke("IMsgGCMRegIds", new object[] {
                        strComp,
                        strCompGrpId,
                        strSubCompId,
                        strEmpId});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void IMsgGCMRegIdsAsync(string strComp, string strCompGrpId, string strSubCompId, string strEmpId) {
            this.IMsgGCMRegIdsAsync(strComp, strCompGrpId, strSubCompId, strEmpId, null);
        }
        
        /// <remarks/>
        public void IMsgGCMRegIdsAsync(string strComp, string strCompGrpId, string strSubCompId, string strEmpId, object userState) {
            if ((this.IMsgGCMRegIdsOperationCompleted == null)) {
                this.IMsgGCMRegIdsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIMsgGCMRegIdsOperationCompleted);
            }
            this.InvokeAsync("IMsgGCMRegIds", new object[] {
                        strComp,
                        strCompGrpId,
                        strSubCompId,
                        strEmpId}, this.IMsgGCMRegIdsOperationCompleted, userState);
        }
        
        private void OnIMsgGCMRegIdsOperationCompleted(object arg) {
            if ((this.IMsgGCMRegIdsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IMsgGCMRegIdsCompleted(this, new IMsgGCMRegIdsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/IMsgUpdateLog", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IMsgUpdateLog(string strMsgId, string strMsgEmp) {
            object[] results = this.Invoke("IMsgUpdateLog", new object[] {
                        strMsgId,
                        strMsgEmp});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IMsgUpdateLogAsync(string strMsgId, string strMsgEmp) {
            this.IMsgUpdateLogAsync(strMsgId, strMsgEmp, null);
        }
        
        /// <remarks/>
        public void IMsgUpdateLogAsync(string strMsgId, string strMsgEmp, object userState) {
            if ((this.IMsgUpdateLogOperationCompleted == null)) {
                this.IMsgUpdateLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIMsgUpdateLogOperationCompleted);
            }
            this.InvokeAsync("IMsgUpdateLog", new object[] {
                        strMsgId,
                        strMsgEmp}, this.IMsgUpdateLogOperationCompleted, userState);
        }
        
        private void OnIMsgUpdateLogOperationCompleted(object arg) {
            if ((this.IMsgUpdateLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IMsgUpdateLogCompleted(this, new IMsgUpdateLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/IMSGMsgSend", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet IMSGMsgSend(string strEmpId, string strDeviceGCMID, string strEmpRole, string strMsgSDt, string strMsgEDt, string strMsgRead) {
            object[] results = this.Invoke("IMSGMsgSend", new object[] {
                        strEmpId,
                        strDeviceGCMID,
                        strEmpRole,
                        strMsgSDt,
                        strMsgEDt,
                        strMsgRead});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void IMSGMsgSendAsync(string strEmpId, string strDeviceGCMID, string strEmpRole, string strMsgSDt, string strMsgEDt, string strMsgRead) {
            this.IMSGMsgSendAsync(strEmpId, strDeviceGCMID, strEmpRole, strMsgSDt, strMsgEDt, strMsgRead, null);
        }
        
        /// <remarks/>
        public void IMSGMsgSendAsync(string strEmpId, string strDeviceGCMID, string strEmpRole, string strMsgSDt, string strMsgEDt, string strMsgRead, object userState) {
            if ((this.IMSGMsgSendOperationCompleted == null)) {
                this.IMSGMsgSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIMSGMsgSendOperationCompleted);
            }
            this.InvokeAsync("IMSGMsgSend", new object[] {
                        strEmpId,
                        strDeviceGCMID,
                        strEmpRole,
                        strMsgSDt,
                        strMsgEDt,
                        strMsgRead}, this.IMSGMsgSendOperationCompleted, userState);
        }
        
        private void OnIMSGMsgSendOperationCompleted(object arg) {
            if ((this.IMSGMsgSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IMSGMsgSendCompleted(this, new IMSGMsgSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/IMSGMsgTextTBSend", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool IMSGMsgTextTBSend(string strNotifyId, string strTxtMsg, string strTitle, string strComp, string strCompGrpId, string strSubCompId, string strEmpId, string strSenderId, string strMsgStatus, string strOther) {
            object[] results = this.Invoke("IMSGMsgTextTBSend", new object[] {
                        strNotifyId,
                        strTxtMsg,
                        strTitle,
                        strComp,
                        strCompGrpId,
                        strSubCompId,
                        strEmpId,
                        strSenderId,
                        strMsgStatus,
                        strOther});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IMSGMsgTextTBSendAsync(string strNotifyId, string strTxtMsg, string strTitle, string strComp, string strCompGrpId, string strSubCompId, string strEmpId, string strSenderId, string strMsgStatus, string strOther) {
            this.IMSGMsgTextTBSendAsync(strNotifyId, strTxtMsg, strTitle, strComp, strCompGrpId, strSubCompId, strEmpId, strSenderId, strMsgStatus, strOther, null);
        }
        
        /// <remarks/>
        public void IMSGMsgTextTBSendAsync(string strNotifyId, string strTxtMsg, string strTitle, string strComp, string strCompGrpId, string strSubCompId, string strEmpId, string strSenderId, string strMsgStatus, string strOther, object userState) {
            if ((this.IMSGMsgTextTBSendOperationCompleted == null)) {
                this.IMSGMsgTextTBSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIMSGMsgTextTBSendOperationCompleted);
            }
            this.InvokeAsync("IMSGMsgTextTBSend", new object[] {
                        strNotifyId,
                        strTxtMsg,
                        strTitle,
                        strComp,
                        strCompGrpId,
                        strSubCompId,
                        strEmpId,
                        strSenderId,
                        strMsgStatus,
                        strOther}, this.IMSGMsgTextTBSendOperationCompleted, userState);
        }
        
        private void OnIMSGMsgTextTBSendOperationCompleted(object arg) {
            if ((this.IMSGMsgTextTBSendCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IMSGMsgTextTBSendCompleted(this, new IMSGMsgTextTBSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/IMsgLoadEmployees", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet IMsgLoadEmployees(string strCompId, string strEmpRole) {
            object[] results = this.Invoke("IMsgLoadEmployees", new object[] {
                        strCompId,
                        strEmpRole});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void IMsgLoadEmployeesAsync(string strCompId, string strEmpRole) {
            this.IMsgLoadEmployeesAsync(strCompId, strEmpRole, null);
        }
        
        /// <remarks/>
        public void IMsgLoadEmployeesAsync(string strCompId, string strEmpRole, object userState) {
            if ((this.IMsgLoadEmployeesOperationCompleted == null)) {
                this.IMsgLoadEmployeesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIMsgLoadEmployeesOperationCompleted);
            }
            this.InvokeAsync("IMsgLoadEmployees", new object[] {
                        strCompId,
                        strEmpRole}, this.IMsgLoadEmployeesOperationCompleted, userState);
        }
        
        private void OnIMsgLoadEmployeesOperationCompleted(object arg) {
            if ((this.IMsgLoadEmployeesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IMsgLoadEmployeesCompleted(this, new IMsgLoadEmployeesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/IMSGMsgChatRoom", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet IMSGMsgChatRoom(string strEmpId, string strOther) {
            object[] results = this.Invoke("IMSGMsgChatRoom", new object[] {
                        strEmpId,
                        strOther});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void IMSGMsgChatRoomAsync(string strEmpId, string strOther) {
            this.IMSGMsgChatRoomAsync(strEmpId, strOther, null);
        }
        
        /// <remarks/>
        public void IMSGMsgChatRoomAsync(string strEmpId, string strOther, object userState) {
            if ((this.IMSGMsgChatRoomOperationCompleted == null)) {
                this.IMSGMsgChatRoomOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIMSGMsgChatRoomOperationCompleted);
            }
            this.InvokeAsync("IMSGMsgChatRoom", new object[] {
                        strEmpId,
                        strOther}, this.IMSGMsgChatRoomOperationCompleted, userState);
        }
        
        private void OnIMSGMsgChatRoomOperationCompleted(object arg) {
            if ((this.IMSGMsgChatRoomCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IMSGMsgChatRoomCompleted(this, new IMSGMsgChatRoomCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/TTS_LOGIN_MOBILE", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable TTS_LOGIN_MOBILE(string UserName, string Password) {
            object[] results = this.Invoke("TTS_LOGIN_MOBILE", new object[] {
                        UserName,
                        Password});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void TTS_LOGIN_MOBILEAsync(string UserName, string Password) {
            this.TTS_LOGIN_MOBILEAsync(UserName, Password, null);
        }
        
        /// <remarks/>
        public void TTS_LOGIN_MOBILEAsync(string UserName, string Password, object userState) {
            if ((this.TTS_LOGIN_MOBILEOperationCompleted == null)) {
                this.TTS_LOGIN_MOBILEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTTS_LOGIN_MOBILEOperationCompleted);
            }
            this.InvokeAsync("TTS_LOGIN_MOBILE", new object[] {
                        UserName,
                        Password}, this.TTS_LOGIN_MOBILEOperationCompleted, userState);
        }
        
        private void OnTTS_LOGIN_MOBILEOperationCompleted(object arg) {
            if ((this.TTS_LOGIN_MOBILECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TTS_LOGIN_MOBILECompleted(this, new TTS_LOGIN_MOBILECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/TMS_TaskAllocationAction_Data", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable TMS_TaskAllocationAction_Data(string ModuleCode, string UserID) {
            object[] results = this.Invoke("TMS_TaskAllocationAction_Data", new object[] {
                        ModuleCode,
                        UserID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void TMS_TaskAllocationAction_DataAsync(string ModuleCode, string UserID) {
            this.TMS_TaskAllocationAction_DataAsync(ModuleCode, UserID, null);
        }
        
        /// <remarks/>
        public void TMS_TaskAllocationAction_DataAsync(string ModuleCode, string UserID, object userState) {
            if ((this.TMS_TaskAllocationAction_DataOperationCompleted == null)) {
                this.TMS_TaskAllocationAction_DataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTMS_TaskAllocationAction_DataOperationCompleted);
            }
            this.InvokeAsync("TMS_TaskAllocationAction_Data", new object[] {
                        ModuleCode,
                        UserID}, this.TMS_TaskAllocationAction_DataOperationCompleted, userState);
        }
        
        private void OnTMS_TaskAllocationAction_DataOperationCompleted(object arg) {
            if ((this.TMS_TaskAllocationAction_DataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TMS_TaskAllocationAction_DataCompleted(this, new TMS_TaskAllocationAction_DataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/TTS_TASK_ACTION", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TTS_TASK_ACTION(string UPDATED_BY, string TASK_ALLOTED_TO, string TASK_STATUS, string TASK_FINAL_STATUS, string TASK_ID, string TASK_REMARKS) {
            object[] results = this.Invoke("TTS_TASK_ACTION", new object[] {
                        UPDATED_BY,
                        TASK_ALLOTED_TO,
                        TASK_STATUS,
                        TASK_FINAL_STATUS,
                        TASK_ID,
                        TASK_REMARKS});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TTS_TASK_ACTIONAsync(string UPDATED_BY, string TASK_ALLOTED_TO, string TASK_STATUS, string TASK_FINAL_STATUS, string TASK_ID, string TASK_REMARKS) {
            this.TTS_TASK_ACTIONAsync(UPDATED_BY, TASK_ALLOTED_TO, TASK_STATUS, TASK_FINAL_STATUS, TASK_ID, TASK_REMARKS, null);
        }
        
        /// <remarks/>
        public void TTS_TASK_ACTIONAsync(string UPDATED_BY, string TASK_ALLOTED_TO, string TASK_STATUS, string TASK_FINAL_STATUS, string TASK_ID, string TASK_REMARKS, object userState) {
            if ((this.TTS_TASK_ACTIONOperationCompleted == null)) {
                this.TTS_TASK_ACTIONOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTTS_TASK_ACTIONOperationCompleted);
            }
            this.InvokeAsync("TTS_TASK_ACTION", new object[] {
                        UPDATED_BY,
                        TASK_ALLOTED_TO,
                        TASK_STATUS,
                        TASK_FINAL_STATUS,
                        TASK_ID,
                        TASK_REMARKS}, this.TTS_TASK_ACTIONOperationCompleted, userState);
        }
        
        private void OnTTS_TASK_ACTIONOperationCompleted(object arg) {
            if ((this.TTS_TASK_ACTIONCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TTS_TASK_ACTIONCompleted(this, new TTS_TASK_ACTIONCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/BDSDTotalCounts", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable BDSDTotalCounts(string strStartDate, string strEndDate, string strDivision, string strKeyParam) {
            object[] results = this.Invoke("BDSDTotalCounts", new object[] {
                        strStartDate,
                        strEndDate,
                        strDivision,
                        strKeyParam});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void BDSDTotalCountsAsync(string strStartDate, string strEndDate, string strDivision, string strKeyParam) {
            this.BDSDTotalCountsAsync(strStartDate, strEndDate, strDivision, strKeyParam, null);
        }
        
        /// <remarks/>
        public void BDSDTotalCountsAsync(string strStartDate, string strEndDate, string strDivision, string strKeyParam, object userState) {
            if ((this.BDSDTotalCountsOperationCompleted == null)) {
                this.BDSDTotalCountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBDSDTotalCountsOperationCompleted);
            }
            this.InvokeAsync("BDSDTotalCounts", new object[] {
                        strStartDate,
                        strEndDate,
                        strDivision,
                        strKeyParam}, this.BDSDTotalCountsOperationCompleted, userState);
        }
        
        private void OnBDSDTotalCountsOperationCompleted(object arg) {
            if ((this.BDSDTotalCountsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BDSDTotalCountsCompleted(this, new BDSDTotalCountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/BDSDHTLTTotalCounts", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable BDSDHTLTTotalCounts(string strStartDate, string strEndDate, string strDivision, string strHTLTTyp, string strBDSDTyp) {
            object[] results = this.Invoke("BDSDHTLTTotalCounts", new object[] {
                        strStartDate,
                        strEndDate,
                        strDivision,
                        strHTLTTyp,
                        strBDSDTyp});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void BDSDHTLTTotalCountsAsync(string strStartDate, string strEndDate, string strDivision, string strHTLTTyp, string strBDSDTyp) {
            this.BDSDHTLTTotalCountsAsync(strStartDate, strEndDate, strDivision, strHTLTTyp, strBDSDTyp, null);
        }
        
        /// <remarks/>
        public void BDSDHTLTTotalCountsAsync(string strStartDate, string strEndDate, string strDivision, string strHTLTTyp, string strBDSDTyp, object userState) {
            if ((this.BDSDHTLTTotalCountsOperationCompleted == null)) {
                this.BDSDHTLTTotalCountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBDSDHTLTTotalCountsOperationCompleted);
            }
            this.InvokeAsync("BDSDHTLTTotalCounts", new object[] {
                        strStartDate,
                        strEndDate,
                        strDivision,
                        strHTLTTyp,
                        strBDSDTyp}, this.BDSDHTLTTotalCountsOperationCompleted, userState);
        }
        
        private void OnBDSDHTLTTotalCountsOperationCompleted(object arg) {
            if ((this.BDSDHTLTTotalCountsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BDSDHTLTTotalCountsCompleted(this, new BDSDHTLTTotalCountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/BDSDHTLTDetailsOnTotal", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable BDSDHTLTDetailsOnTotal(string strStartDate, string strEndDate, string strDivision, string strHTLTTyp, string strBDSDTyp, string strOpenClose) {
            object[] results = this.Invoke("BDSDHTLTDetailsOnTotal", new object[] {
                        strStartDate,
                        strEndDate,
                        strDivision,
                        strHTLTTyp,
                        strBDSDTyp,
                        strOpenClose});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void BDSDHTLTDetailsOnTotalAsync(string strStartDate, string strEndDate, string strDivision, string strHTLTTyp, string strBDSDTyp, string strOpenClose) {
            this.BDSDHTLTDetailsOnTotalAsync(strStartDate, strEndDate, strDivision, strHTLTTyp, strBDSDTyp, strOpenClose, null);
        }
        
        /// <remarks/>
        public void BDSDHTLTDetailsOnTotalAsync(string strStartDate, string strEndDate, string strDivision, string strHTLTTyp, string strBDSDTyp, string strOpenClose, object userState) {
            if ((this.BDSDHTLTDetailsOnTotalOperationCompleted == null)) {
                this.BDSDHTLTDetailsOnTotalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBDSDHTLTDetailsOnTotalOperationCompleted);
            }
            this.InvokeAsync("BDSDHTLTDetailsOnTotal", new object[] {
                        strStartDate,
                        strEndDate,
                        strDivision,
                        strHTLTTyp,
                        strBDSDTyp,
                        strOpenClose}, this.BDSDHTLTDetailsOnTotalOperationCompleted, userState);
        }
        
        private void OnBDSDHTLTDetailsOnTotalOperationCompleted(object arg) {
            if ((this.BDSDHTLTDetailsOnTotalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BDSDHTLTDetailsOnTotalCompleted(this, new BDSDHTLTDetailsOnTotalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/BDSDHTLTOnSlctAreaList", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable BDSDHTLTOnSlctAreaList(string strBDSDId, string strFeederCode) {
            object[] results = this.Invoke("BDSDHTLTOnSlctAreaList", new object[] {
                        strBDSDId,
                        strFeederCode});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void BDSDHTLTOnSlctAreaListAsync(string strBDSDId, string strFeederCode) {
            this.BDSDHTLTOnSlctAreaListAsync(strBDSDId, strFeederCode, null);
        }
        
        /// <remarks/>
        public void BDSDHTLTOnSlctAreaListAsync(string strBDSDId, string strFeederCode, object userState) {
            if ((this.BDSDHTLTOnSlctAreaListOperationCompleted == null)) {
                this.BDSDHTLTOnSlctAreaListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBDSDHTLTOnSlctAreaListOperationCompleted);
            }
            this.InvokeAsync("BDSDHTLTOnSlctAreaList", new object[] {
                        strBDSDId,
                        strFeederCode}, this.BDSDHTLTOnSlctAreaListOperationCompleted, userState);
        }
        
        private void OnBDSDHTLTOnSlctAreaListOperationCompleted(object arg) {
            if ((this.BDSDHTLTOnSlctAreaListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BDSDHTLTOnSlctAreaListCompleted(this, new BDSDHTLTOnSlctAreaListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/BDSDHTLTOnAreaListConsCount", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable BDSDHTLTOnAreaListConsCount(string strExternalId, string strDTCode) {
            object[] results = this.Invoke("BDSDHTLTOnAreaListConsCount", new object[] {
                        strExternalId,
                        strDTCode});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void BDSDHTLTOnAreaListConsCountAsync(string strExternalId, string strDTCode) {
            this.BDSDHTLTOnAreaListConsCountAsync(strExternalId, strDTCode, null);
        }
        
        /// <remarks/>
        public void BDSDHTLTOnAreaListConsCountAsync(string strExternalId, string strDTCode, object userState) {
            if ((this.BDSDHTLTOnAreaListConsCountOperationCompleted == null)) {
                this.BDSDHTLTOnAreaListConsCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBDSDHTLTOnAreaListConsCountOperationCompleted);
            }
            this.InvokeAsync("BDSDHTLTOnAreaListConsCount", new object[] {
                        strExternalId,
                        strDTCode}, this.BDSDHTLTOnAreaListConsCountOperationCompleted, userState);
        }
        
        private void OnBDSDHTLTOnAreaListConsCountOperationCompleted(object arg) {
            if ((this.BDSDHTLTOnAreaListConsCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BDSDHTLTOnAreaListConsCountCompleted(this, new BDSDHTLTOnAreaListConsCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/BDSDContactList", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable BDSDContactList(string strDivCode) {
            object[] results = this.Invoke("BDSDContactList", new object[] {
                        strDivCode});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void BDSDContactListAsync(string strDivCode) {
            this.BDSDContactListAsync(strDivCode, null);
        }
        
        /// <remarks/>
        public void BDSDContactListAsync(string strDivCode, object userState) {
            if ((this.BDSDContactListOperationCompleted == null)) {
                this.BDSDContactListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBDSDContactListOperationCompleted);
            }
            this.InvokeAsync("BDSDContactList", new object[] {
                        strDivCode}, this.BDSDContactListOperationCompleted, userState);
        }
        
        private void OnBDSDContactListOperationCompleted(object arg) {
            if ((this.BDSDContactListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BDSDContactListCompleted(this, new BDSDContactListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/BDSDSMSCountList", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable BDSDSMSCountList(string strBDSDId) {
            object[] results = this.Invoke("BDSDSMSCountList", new object[] {
                        strBDSDId});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void BDSDSMSCountListAsync(string strBDSDId) {
            this.BDSDSMSCountListAsync(strBDSDId, null);
        }
        
        /// <remarks/>
        public void BDSDSMSCountListAsync(string strBDSDId, object userState) {
            if ((this.BDSDSMSCountListOperationCompleted == null)) {
                this.BDSDSMSCountListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBDSDSMSCountListOperationCompleted);
            }
            this.InvokeAsync("BDSDSMSCountList", new object[] {
                        strBDSDId}, this.BDSDSMSCountListOperationCompleted, userState);
        }
        
        private void OnBDSDSMSCountListOperationCompleted(object arg) {
            if ((this.BDSDSMSCountListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BDSDSMSCountListCompleted(this, new BDSDSMSCountListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_getbreakdownbackfeedlist_New", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_getbreakdownbackfeedlist_New(string BREAK_DOWN_ID) {
            object[] results = this.Invoke("ONM_getbreakdownbackfeedlist_New", new object[] {
                        BREAK_DOWN_ID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_getbreakdownbackfeedlist_NewAsync(string BREAK_DOWN_ID) {
            this.ONM_getbreakdownbackfeedlist_NewAsync(BREAK_DOWN_ID, null);
        }
        
        /// <remarks/>
        public void ONM_getbreakdownbackfeedlist_NewAsync(string BREAK_DOWN_ID, object userState) {
            if ((this.ONM_getbreakdownbackfeedlist_NewOperationCompleted == null)) {
                this.ONM_getbreakdownbackfeedlist_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_getbreakdownbackfeedlist_NewOperationCompleted);
            }
            this.InvokeAsync("ONM_getbreakdownbackfeedlist_New", new object[] {
                        BREAK_DOWN_ID}, this.ONM_getbreakdownbackfeedlist_NewOperationCompleted, userState);
        }
        
        private void OnONM_getbreakdownbackfeedlist_NewOperationCompleted(object arg) {
            if ((this.ONM_getbreakdownbackfeedlist_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_getbreakdownbackfeedlist_NewCompleted(this, new ONM_getbreakdownbackfeedlist_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/VSS_GetCompliantCentre_DivisionWise", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable VSS_GetCompliantCentre_DivisionWise(string strKeyParam, string DisivionName, string DivisionID) {
            object[] results = this.Invoke("VSS_GetCompliantCentre_DivisionWise", new object[] {
                        strKeyParam,
                        DisivionName,
                        DivisionID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void VSS_GetCompliantCentre_DivisionWiseAsync(string strKeyParam, string DisivionName, string DivisionID) {
            this.VSS_GetCompliantCentre_DivisionWiseAsync(strKeyParam, DisivionName, DivisionID, null);
        }
        
        /// <remarks/>
        public void VSS_GetCompliantCentre_DivisionWiseAsync(string strKeyParam, string DisivionName, string DivisionID, object userState) {
            if ((this.VSS_GetCompliantCentre_DivisionWiseOperationCompleted == null)) {
                this.VSS_GetCompliantCentre_DivisionWiseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVSS_GetCompliantCentre_DivisionWiseOperationCompleted);
            }
            this.InvokeAsync("VSS_GetCompliantCentre_DivisionWise", new object[] {
                        strKeyParam,
                        DisivionName,
                        DivisionID}, this.VSS_GetCompliantCentre_DivisionWiseOperationCompleted, userState);
        }
        
        private void OnVSS_GetCompliantCentre_DivisionWiseOperationCompleted(object arg) {
            if ((this.VSS_GetCompliantCentre_DivisionWiseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VSS_GetCompliantCentre_DivisionWiseCompleted(this, new VSS_GetCompliantCentre_DivisionWiseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Get_Lat_Long", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Get_Lat_Long(string Longitude, string Latitude) {
            object[] results = this.Invoke("Get_Lat_Long", new object[] {
                        Longitude,
                        Latitude});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Get_Lat_LongAsync(string Longitude, string Latitude) {
            this.Get_Lat_LongAsync(Longitude, Latitude, null);
        }
        
        /// <remarks/>
        public void Get_Lat_LongAsync(string Longitude, string Latitude, object userState) {
            if ((this.Get_Lat_LongOperationCompleted == null)) {
                this.Get_Lat_LongOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_Lat_LongOperationCompleted);
            }
            this.InvokeAsync("Get_Lat_Long", new object[] {
                        Longitude,
                        Latitude}, this.Get_Lat_LongOperationCompleted, userState);
        }
        
        private void OnGet_Lat_LongOperationCompleted(object arg) {
            if ((this.Get_Lat_LongCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_Lat_LongCompleted(this, new Get_Lat_LongCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Get_Lat_Long_Android", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Get_Lat_Long_Android(string Longitude, string Latitude) {
            object[] results = this.Invoke("Get_Lat_Long_Android", new object[] {
                        Longitude,
                        Latitude});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Get_Lat_Long_AndroidAsync(string Longitude, string Latitude) {
            this.Get_Lat_Long_AndroidAsync(Longitude, Latitude, null);
        }
        
        /// <remarks/>
        public void Get_Lat_Long_AndroidAsync(string Longitude, string Latitude, object userState) {
            if ((this.Get_Lat_Long_AndroidOperationCompleted == null)) {
                this.Get_Lat_Long_AndroidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet_Lat_Long_AndroidOperationCompleted);
            }
            this.InvokeAsync("Get_Lat_Long_Android", new object[] {
                        Longitude,
                        Latitude}, this.Get_Lat_Long_AndroidOperationCompleted, userState);
        }
        
        private void OnGet_Lat_Long_AndroidOperationCompleted(object arg) {
            if ((this.Get_Lat_Long_AndroidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get_Lat_Long_AndroidCompleted(this, new Get_Lat_Long_AndroidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ZBAPI_EDISTRICT", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ZBAPI_EDISTRICT(string strCANumber, string strCRNNumber, string txnID) {
            object[] results = this.Invoke("ZBAPI_EDISTRICT", new object[] {
                        strCANumber,
                        strCRNNumber,
                        txnID});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ZBAPI_EDISTRICTAsync(string strCANumber, string strCRNNumber, string txnID) {
            this.ZBAPI_EDISTRICTAsync(strCANumber, strCRNNumber, txnID, null);
        }
        
        /// <remarks/>
        public void ZBAPI_EDISTRICTAsync(string strCANumber, string strCRNNumber, string txnID, object userState) {
            if ((this.ZBAPI_EDISTRICTOperationCompleted == null)) {
                this.ZBAPI_EDISTRICTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZBAPI_EDISTRICTOperationCompleted);
            }
            this.InvokeAsync("ZBAPI_EDISTRICT", new object[] {
                        strCANumber,
                        strCRNNumber,
                        txnID}, this.ZBAPI_EDISTRICTOperationCompleted, userState);
        }
        
        private void OnZBAPI_EDISTRICTOperationCompleted(object arg) {
            if ((this.ZBAPI_EDISTRICTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZBAPI_EDISTRICTCompleted(this, new ZBAPI_EDISTRICTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Z_BAPI_DSS_ISU_CA_DISPLAY", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable Z_BAPI_DSS_ISU_CA_DISPLAY(string strCANumber) {
            object[] results = this.Invoke("Z_BAPI_DSS_ISU_CA_DISPLAY", new object[] {
                        strCANumber});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void Z_BAPI_DSS_ISU_CA_DISPLAYAsync(string strCANumber) {
            this.Z_BAPI_DSS_ISU_CA_DISPLAYAsync(strCANumber, null);
        }
        
        /// <remarks/>
        public void Z_BAPI_DSS_ISU_CA_DISPLAYAsync(string strCANumber, object userState) {
            if ((this.Z_BAPI_DSS_ISU_CA_DISPLAYOperationCompleted == null)) {
                this.Z_BAPI_DSS_ISU_CA_DISPLAYOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZ_BAPI_DSS_ISU_CA_DISPLAYOperationCompleted);
            }
            this.InvokeAsync("Z_BAPI_DSS_ISU_CA_DISPLAY", new object[] {
                        strCANumber}, this.Z_BAPI_DSS_ISU_CA_DISPLAYOperationCompleted, userState);
        }
        
        private void OnZ_BAPI_DSS_ISU_CA_DISPLAYOperationCompleted(object arg) {
            if ((this.Z_BAPI_DSS_ISU_CA_DISPLAYCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Z_BAPI_DSS_ISU_CA_DISPLAYCompleted(this, new Z_BAPI_DSS_ISU_CA_DISPLAYCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Z_BAPI_DSS_ISU_CA_DISPLAY_SAP", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable Z_BAPI_DSS_ISU_CA_DISPLAY_SAP(string strCANumber) {
            object[] results = this.Invoke("Z_BAPI_DSS_ISU_CA_DISPLAY_SAP", new object[] {
                        strCANumber});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void Z_BAPI_DSS_ISU_CA_DISPLAY_SAPAsync(string strCANumber) {
            this.Z_BAPI_DSS_ISU_CA_DISPLAY_SAPAsync(strCANumber, null);
        }
        
        /// <remarks/>
        public void Z_BAPI_DSS_ISU_CA_DISPLAY_SAPAsync(string strCANumber, object userState) {
            if ((this.Z_BAPI_DSS_ISU_CA_DISPLAY_SAPOperationCompleted == null)) {
                this.Z_BAPI_DSS_ISU_CA_DISPLAY_SAPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZ_BAPI_DSS_ISU_CA_DISPLAY_SAPOperationCompleted);
            }
            this.InvokeAsync("Z_BAPI_DSS_ISU_CA_DISPLAY_SAP", new object[] {
                        strCANumber}, this.Z_BAPI_DSS_ISU_CA_DISPLAY_SAPOperationCompleted, userState);
        }
        
        private void OnZ_BAPI_DSS_ISU_CA_DISPLAY_SAPOperationCompleted(object arg) {
            if ((this.Z_BAPI_DSS_ISU_CA_DISPLAY_SAPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Z_BAPI_DSS_ISU_CA_DISPLAY_SAPCompleted(this, new Z_BAPI_DSS_ISU_CA_DISPLAY_SAPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Z_BAPI_DSS_ISU_CA_DISPLAY_RCM", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable Z_BAPI_DSS_ISU_CA_DISPLAY_RCM(string strCANumber) {
            object[] results = this.Invoke("Z_BAPI_DSS_ISU_CA_DISPLAY_RCM", new object[] {
                        strCANumber});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void Z_BAPI_DSS_ISU_CA_DISPLAY_RCMAsync(string strCANumber) {
            this.Z_BAPI_DSS_ISU_CA_DISPLAY_RCMAsync(strCANumber, null);
        }
        
        /// <remarks/>
        public void Z_BAPI_DSS_ISU_CA_DISPLAY_RCMAsync(string strCANumber, object userState) {
            if ((this.Z_BAPI_DSS_ISU_CA_DISPLAY_RCMOperationCompleted == null)) {
                this.Z_BAPI_DSS_ISU_CA_DISPLAY_RCMOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZ_BAPI_DSS_ISU_CA_DISPLAY_RCMOperationCompleted);
            }
            this.InvokeAsync("Z_BAPI_DSS_ISU_CA_DISPLAY_RCM", new object[] {
                        strCANumber}, this.Z_BAPI_DSS_ISU_CA_DISPLAY_RCMOperationCompleted, userState);
        }
        
        private void OnZ_BAPI_DSS_ISU_CA_DISPLAY_RCMOperationCompleted(object arg) {
            if ((this.Z_BAPI_DSS_ISU_CA_DISPLAY_RCMCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Z_BAPI_DSS_ISU_CA_DISPLAY_RCMCompleted(this, new Z_BAPI_DSS_ISU_CA_DISPLAY_RCMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ONM_CloseMeterComplaint", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ONM_CloseMeterComplaint(
                    string strComplaintNo, 
                    string strDuesPending, 
                    string strGroupMeter, 
                    string strMeterStatus, 
                    string strActionRemarks, 
                    string strKNumber, 
                    string strContactNumber, 
                    string strByPassDt, 
                    string strPaperSealNo, 
                    string strTerminalSealNo, 
                    string strPlasticSealNo, 
                    string strMeterNo, 
                    string strMeterReading, 
                    string strPersonAttended, 
                    string strPoleNo, 
                    string strClosingDt, 
                    string strActualClosingDt) {
            object[] results = this.Invoke("ONM_CloseMeterComplaint", new object[] {
                        strComplaintNo,
                        strDuesPending,
                        strGroupMeter,
                        strMeterStatus,
                        strActionRemarks,
                        strKNumber,
                        strContactNumber,
                        strByPassDt,
                        strPaperSealNo,
                        strTerminalSealNo,
                        strPlasticSealNo,
                        strMeterNo,
                        strMeterReading,
                        strPersonAttended,
                        strPoleNo,
                        strClosingDt,
                        strActualClosingDt});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ONM_CloseMeterComplaintAsync(
                    string strComplaintNo, 
                    string strDuesPending, 
                    string strGroupMeter, 
                    string strMeterStatus, 
                    string strActionRemarks, 
                    string strKNumber, 
                    string strContactNumber, 
                    string strByPassDt, 
                    string strPaperSealNo, 
                    string strTerminalSealNo, 
                    string strPlasticSealNo, 
                    string strMeterNo, 
                    string strMeterReading, 
                    string strPersonAttended, 
                    string strPoleNo, 
                    string strClosingDt, 
                    string strActualClosingDt) {
            this.ONM_CloseMeterComplaintAsync(strComplaintNo, strDuesPending, strGroupMeter, strMeterStatus, strActionRemarks, strKNumber, strContactNumber, strByPassDt, strPaperSealNo, strTerminalSealNo, strPlasticSealNo, strMeterNo, strMeterReading, strPersonAttended, strPoleNo, strClosingDt, strActualClosingDt, null);
        }
        
        /// <remarks/>
        public void ONM_CloseMeterComplaintAsync(
                    string strComplaintNo, 
                    string strDuesPending, 
                    string strGroupMeter, 
                    string strMeterStatus, 
                    string strActionRemarks, 
                    string strKNumber, 
                    string strContactNumber, 
                    string strByPassDt, 
                    string strPaperSealNo, 
                    string strTerminalSealNo, 
                    string strPlasticSealNo, 
                    string strMeterNo, 
                    string strMeterReading, 
                    string strPersonAttended, 
                    string strPoleNo, 
                    string strClosingDt, 
                    string strActualClosingDt, 
                    object userState) {
            if ((this.ONM_CloseMeterComplaintOperationCompleted == null)) {
                this.ONM_CloseMeterComplaintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnONM_CloseMeterComplaintOperationCompleted);
            }
            this.InvokeAsync("ONM_CloseMeterComplaint", new object[] {
                        strComplaintNo,
                        strDuesPending,
                        strGroupMeter,
                        strMeterStatus,
                        strActionRemarks,
                        strKNumber,
                        strContactNumber,
                        strByPassDt,
                        strPaperSealNo,
                        strTerminalSealNo,
                        strPlasticSealNo,
                        strMeterNo,
                        strMeterReading,
                        strPersonAttended,
                        strPoleNo,
                        strClosingDt,
                        strActualClosingDt}, this.ONM_CloseMeterComplaintOperationCompleted, userState);
        }
        
        private void OnONM_CloseMeterComplaintOperationCompleted(object arg) {
            if ((this.ONM_CloseMeterComplaintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ONM_CloseMeterComplaintCompleted(this, new ONM_CloseMeterComplaintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ZBAPI_ONLINE_BILL_PDF_V2", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ZBAPI_ONLINE_BILL_PDF_V2(string strCANumber, string strEBSKNO) {
            object[] results = this.Invoke("ZBAPI_ONLINE_BILL_PDF_V2", new object[] {
                        strCANumber,
                        strEBSKNO});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ZBAPI_ONLINE_BILL_PDF_V2Async(string strCANumber, string strEBSKNO) {
            this.ZBAPI_ONLINE_BILL_PDF_V2Async(strCANumber, strEBSKNO, null);
        }
        
        /// <remarks/>
        public void ZBAPI_ONLINE_BILL_PDF_V2Async(string strCANumber, string strEBSKNO, object userState) {
            if ((this.ZBAPI_ONLINE_BILL_PDF_V2OperationCompleted == null)) {
                this.ZBAPI_ONLINE_BILL_PDF_V2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnZBAPI_ONLINE_BILL_PDF_V2OperationCompleted);
            }
            this.InvokeAsync("ZBAPI_ONLINE_BILL_PDF_V2", new object[] {
                        strCANumber,
                        strEBSKNO}, this.ZBAPI_ONLINE_BILL_PDF_V2OperationCompleted, userState);
        }
        
        private void OnZBAPI_ONLINE_BILL_PDF_V2OperationCompleted(object arg) {
            if ((this.ZBAPI_ONLINE_BILL_PDF_V2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZBAPI_ONLINE_BILL_PDF_V2Completed(this, new ZBAPI_ONLINE_BILL_PDF_V2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ZBAPI_ONLINE_BILL_PDF", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ZBAPI_ONLINE_BILL_PDF(string strCANumber, string strEBSKNO) {
            object[] results = this.Invoke("ZBAPI_ONLINE_BILL_PDF", new object[] {
                        strCANumber,
                        strEBSKNO});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ZBAPI_ONLINE_BILL_PDFAsync(string strCANumber, string strEBSKNO) {
            this.ZBAPI_ONLINE_BILL_PDFAsync(strCANumber, strEBSKNO, null);
        }
        
        /// <remarks/>
        public void ZBAPI_ONLINE_BILL_PDFAsync(string strCANumber, string strEBSKNO, object userState) {
            if ((this.ZBAPI_ONLINE_BILL_PDFOperationCompleted == null)) {
                this.ZBAPI_ONLINE_BILL_PDFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZBAPI_ONLINE_BILL_PDFOperationCompleted);
            }
            this.InvokeAsync("ZBAPI_ONLINE_BILL_PDF", new object[] {
                        strCANumber,
                        strEBSKNO}, this.ZBAPI_ONLINE_BILL_PDFOperationCompleted, userState);
        }
        
        private void OnZBAPI_ONLINE_BILL_PDFOperationCompleted(object arg) {
            if ((this.ZBAPI_ONLINE_BILL_PDFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZBAPI_ONLINE_BILL_PDFCompleted(this, new ZBAPI_ONLINE_BILL_PDFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ZBAPI_ONLINE_BILL_PDF_MS", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ZBAPI_ONLINE_BILL_PDF_MS(string strCANumber, string strEBSKNO) {
            object[] results = this.Invoke("ZBAPI_ONLINE_BILL_PDF_MS", new object[] {
                        strCANumber,
                        strEBSKNO});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ZBAPI_ONLINE_BILL_PDF_MSAsync(string strCANumber, string strEBSKNO) {
            this.ZBAPI_ONLINE_BILL_PDF_MSAsync(strCANumber, strEBSKNO, null);
        }
        
        /// <remarks/>
        public void ZBAPI_ONLINE_BILL_PDF_MSAsync(string strCANumber, string strEBSKNO, object userState) {
            if ((this.ZBAPI_ONLINE_BILL_PDF_MSOperationCompleted == null)) {
                this.ZBAPI_ONLINE_BILL_PDF_MSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZBAPI_ONLINE_BILL_PDF_MSOperationCompleted);
            }
            this.InvokeAsync("ZBAPI_ONLINE_BILL_PDF_MS", new object[] {
                        strCANumber,
                        strEBSKNO}, this.ZBAPI_ONLINE_BILL_PDF_MSOperationCompleted, userState);
        }
        
        private void OnZBAPI_ONLINE_BILL_PDF_MSOperationCompleted(object arg) {
            if ((this.ZBAPI_ONLINE_BILL_PDF_MSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZBAPI_ONLINE_BILL_PDF_MSCompleted(this, new ZBAPI_ONLINE_BILL_PDF_MSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ZBAPI_ONLINE_BILL_PDF_WA", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ZBAPI_ONLINE_BILL_PDF_WA(string strCANumber, string strEBSKNO, string _sSource) {
            object[] results = this.Invoke("ZBAPI_ONLINE_BILL_PDF_WA", new object[] {
                        strCANumber,
                        strEBSKNO,
                        _sSource});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ZBAPI_ONLINE_BILL_PDF_WAAsync(string strCANumber, string strEBSKNO, string _sSource) {
            this.ZBAPI_ONLINE_BILL_PDF_WAAsync(strCANumber, strEBSKNO, _sSource, null);
        }
        
        /// <remarks/>
        public void ZBAPI_ONLINE_BILL_PDF_WAAsync(string strCANumber, string strEBSKNO, string _sSource, object userState) {
            if ((this.ZBAPI_ONLINE_BILL_PDF_WAOperationCompleted == null)) {
                this.ZBAPI_ONLINE_BILL_PDF_WAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZBAPI_ONLINE_BILL_PDF_WAOperationCompleted);
            }
            this.InvokeAsync("ZBAPI_ONLINE_BILL_PDF_WA", new object[] {
                        strCANumber,
                        strEBSKNO,
                        _sSource}, this.ZBAPI_ONLINE_BILL_PDF_WAOperationCompleted, userState);
        }
        
        private void OnZBAPI_ONLINE_BILL_PDF_WAOperationCompleted(object arg) {
            if ((this.ZBAPI_ONLINE_BILL_PDF_WACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZBAPI_ONLINE_BILL_PDF_WACompleted(this, new ZBAPI_ONLINE_BILL_PDF_WACompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ZBAPI_DEMAND_NOTE_ONLINE", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ZBAPI_DEMAND_NOTE_ONLINE(string strOrdNumber) {
            object[] results = this.Invoke("ZBAPI_DEMAND_NOTE_ONLINE", new object[] {
                        strOrdNumber});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ZBAPI_DEMAND_NOTE_ONLINEAsync(string strOrdNumber) {
            this.ZBAPI_DEMAND_NOTE_ONLINEAsync(strOrdNumber, null);
        }
        
        /// <remarks/>
        public void ZBAPI_DEMAND_NOTE_ONLINEAsync(string strOrdNumber, object userState) {
            if ((this.ZBAPI_DEMAND_NOTE_ONLINEOperationCompleted == null)) {
                this.ZBAPI_DEMAND_NOTE_ONLINEOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZBAPI_DEMAND_NOTE_ONLINEOperationCompleted);
            }
            this.InvokeAsync("ZBAPI_DEMAND_NOTE_ONLINE", new object[] {
                        strOrdNumber}, this.ZBAPI_DEMAND_NOTE_ONLINEOperationCompleted, userState);
        }
        
        private void OnZBAPI_DEMAND_NOTE_ONLINEOperationCompleted(object arg) {
            if ((this.ZBAPI_DEMAND_NOTE_ONLINECompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZBAPI_DEMAND_NOTE_ONLINECompleted(this, new ZBAPI_DEMAND_NOTE_ONLINECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/GetAssignedComplaintsToTeam", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAssignedComplaintsToTeam(string imei) {
            object[] results = this.Invoke("GetAssignedComplaintsToTeam", new object[] {
                        imei});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAssignedComplaintsToTeamAsync(string imei) {
            this.GetAssignedComplaintsToTeamAsync(imei, null);
        }
        
        /// <remarks/>
        public void GetAssignedComplaintsToTeamAsync(string imei, object userState) {
            if ((this.GetAssignedComplaintsToTeamOperationCompleted == null)) {
                this.GetAssignedComplaintsToTeamOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssignedComplaintsToTeamOperationCompleted);
            }
            this.InvokeAsync("GetAssignedComplaintsToTeam", new object[] {
                        imei}, this.GetAssignedComplaintsToTeamOperationCompleted, userState);
        }
        
        private void OnGetAssignedComplaintsToTeamOperationCompleted(object arg) {
            if ((this.GetAssignedComplaintsToTeamCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssignedComplaintsToTeamCompleted(this, new GetAssignedComplaintsToTeamCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/GetClosingRemarksFromCategory", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetClosingRemarksFromCategory(string category) {
            object[] results = this.Invoke("GetClosingRemarksFromCategory", new object[] {
                        category});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetClosingRemarksFromCategoryAsync(string category) {
            this.GetClosingRemarksFromCategoryAsync(category, null);
        }
        
        /// <remarks/>
        public void GetClosingRemarksFromCategoryAsync(string category, object userState) {
            if ((this.GetClosingRemarksFromCategoryOperationCompleted == null)) {
                this.GetClosingRemarksFromCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetClosingRemarksFromCategoryOperationCompleted);
            }
            this.InvokeAsync("GetClosingRemarksFromCategory", new object[] {
                        category}, this.GetClosingRemarksFromCategoryOperationCompleted, userState);
        }
        
        private void OnGetClosingRemarksFromCategoryOperationCompleted(object arg) {
            if ((this.GetClosingRemarksFromCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetClosingRemarksFromCategoryCompleted(this, new GetClosingRemarksFromCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/CloseComplaint", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet CloseComplaint(string ComplaintNo, string CA, string FaultCategory, string FaultType, string ClosingRemark, string OtherRemarks, string IMEI) {
            object[] results = this.Invoke("CloseComplaint", new object[] {
                        ComplaintNo,
                        CA,
                        FaultCategory,
                        FaultType,
                        ClosingRemark,
                        OtherRemarks,
                        IMEI});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void CloseComplaintAsync(string ComplaintNo, string CA, string FaultCategory, string FaultType, string ClosingRemark, string OtherRemarks, string IMEI) {
            this.CloseComplaintAsync(ComplaintNo, CA, FaultCategory, FaultType, ClosingRemark, OtherRemarks, IMEI, null);
        }
        
        /// <remarks/>
        public void CloseComplaintAsync(string ComplaintNo, string CA, string FaultCategory, string FaultType, string ClosingRemark, string OtherRemarks, string IMEI, object userState) {
            if ((this.CloseComplaintOperationCompleted == null)) {
                this.CloseComplaintOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseComplaintOperationCompleted);
            }
            this.InvokeAsync("CloseComplaint", new object[] {
                        ComplaintNo,
                        CA,
                        FaultCategory,
                        FaultType,
                        ClosingRemark,
                        OtherRemarks,
                        IMEI}, this.CloseComplaintOperationCompleted, userState);
        }
        
        private void OnCloseComplaintOperationCompleted(object arg) {
            if ((this.CloseComplaintCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseComplaintCompleted(this, new CloseComplaintCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Z_BAPI_ZDSS_WEB_LINK", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Z_BAPI_ZDSS_WEB_LINK(
                    string I_ILART, 
                    string I_VKONT, 
                    string I_VKONA, 
                    string PARTNERCATEGORY, 
                    string PARTNERTYPE, 
                    string TITLE_KEY, 
                    string FIRSTNAME, 
                    string LASTNAME, 
                    string MIDDLENAME, 
                    string FATHERSNAME, 
                    string HOUSE_NO, 
                    string BUILDING, 
                    string STR_SUPPL1, 
                    string STR_SUPPL2, 
                    string STR_SUPPL3, 
                    string POSTL_COD1, 
                    string CITY, 
                    string E_MAIL, 
                    string LANDLINE, 
                    string MOBILE, 
                    string FEMALE, 
                    string MALE, 
                    string JOBGR, 
                    string IDTYPE, 
                    string IDNUMBER, 
                    string PLANNINGPLANT, 
                    string WORKCENTRE, 
                    string SYSTEMCOND, 
                    string APPLIEDCAT, 
                    string APPLIEDLOAD, 
                    string APPLIEDLOADKVA, 
                    string CONNECTIONTYPE, 
                    string STATEMENT_CA, 
                    string START_DATE, 
                    string START_TIME, 
                    string FINISH_DATE, 
                    string FINISH_TIME, 
                    string SORTFIELD, 
                    string ABKRS, 
                    string AppVersion) {
            object[] results = this.Invoke("Z_BAPI_ZDSS_WEB_LINK", new object[] {
                        I_ILART,
                        I_VKONT,
                        I_VKONA,
                        PARTNERCATEGORY,
                        PARTNERTYPE,
                        TITLE_KEY,
                        FIRSTNAME,
                        LASTNAME,
                        MIDDLENAME,
                        FATHERSNAME,
                        HOUSE_NO,
                        BUILDING,
                        STR_SUPPL1,
                        STR_SUPPL2,
                        STR_SUPPL3,
                        POSTL_COD1,
                        CITY,
                        E_MAIL,
                        LANDLINE,
                        MOBILE,
                        FEMALE,
                        MALE,
                        JOBGR,
                        IDTYPE,
                        IDNUMBER,
                        PLANNINGPLANT,
                        WORKCENTRE,
                        SYSTEMCOND,
                        APPLIEDCAT,
                        APPLIEDLOAD,
                        APPLIEDLOADKVA,
                        CONNECTIONTYPE,
                        STATEMENT_CA,
                        START_DATE,
                        START_TIME,
                        FINISH_DATE,
                        FINISH_TIME,
                        SORTFIELD,
                        ABKRS,
                        AppVersion});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Z_BAPI_ZDSS_WEB_LINKAsync(
                    string I_ILART, 
                    string I_VKONT, 
                    string I_VKONA, 
                    string PARTNERCATEGORY, 
                    string PARTNERTYPE, 
                    string TITLE_KEY, 
                    string FIRSTNAME, 
                    string LASTNAME, 
                    string MIDDLENAME, 
                    string FATHERSNAME, 
                    string HOUSE_NO, 
                    string BUILDING, 
                    string STR_SUPPL1, 
                    string STR_SUPPL2, 
                    string STR_SUPPL3, 
                    string POSTL_COD1, 
                    string CITY, 
                    string E_MAIL, 
                    string LANDLINE, 
                    string MOBILE, 
                    string FEMALE, 
                    string MALE, 
                    string JOBGR, 
                    string IDTYPE, 
                    string IDNUMBER, 
                    string PLANNINGPLANT, 
                    string WORKCENTRE, 
                    string SYSTEMCOND, 
                    string APPLIEDCAT, 
                    string APPLIEDLOAD, 
                    string APPLIEDLOADKVA, 
                    string CONNECTIONTYPE, 
                    string STATEMENT_CA, 
                    string START_DATE, 
                    string START_TIME, 
                    string FINISH_DATE, 
                    string FINISH_TIME, 
                    string SORTFIELD, 
                    string ABKRS, 
                    string AppVersion) {
            this.Z_BAPI_ZDSS_WEB_LINKAsync(I_ILART, I_VKONT, I_VKONA, PARTNERCATEGORY, PARTNERTYPE, TITLE_KEY, FIRSTNAME, LASTNAME, MIDDLENAME, FATHERSNAME, HOUSE_NO, BUILDING, STR_SUPPL1, STR_SUPPL2, STR_SUPPL3, POSTL_COD1, CITY, E_MAIL, LANDLINE, MOBILE, FEMALE, MALE, JOBGR, IDTYPE, IDNUMBER, PLANNINGPLANT, WORKCENTRE, SYSTEMCOND, APPLIEDCAT, APPLIEDLOAD, APPLIEDLOADKVA, CONNECTIONTYPE, STATEMENT_CA, START_DATE, START_TIME, FINISH_DATE, FINISH_TIME, SORTFIELD, ABKRS, AppVersion, null);
        }
        
        /// <remarks/>
        public void Z_BAPI_ZDSS_WEB_LINKAsync(
                    string I_ILART, 
                    string I_VKONT, 
                    string I_VKONA, 
                    string PARTNERCATEGORY, 
                    string PARTNERTYPE, 
                    string TITLE_KEY, 
                    string FIRSTNAME, 
                    string LASTNAME, 
                    string MIDDLENAME, 
                    string FATHERSNAME, 
                    string HOUSE_NO, 
                    string BUILDING, 
                    string STR_SUPPL1, 
                    string STR_SUPPL2, 
                    string STR_SUPPL3, 
                    string POSTL_COD1, 
                    string CITY, 
                    string E_MAIL, 
                    string LANDLINE, 
                    string MOBILE, 
                    string FEMALE, 
                    string MALE, 
                    string JOBGR, 
                    string IDTYPE, 
                    string IDNUMBER, 
                    string PLANNINGPLANT, 
                    string WORKCENTRE, 
                    string SYSTEMCOND, 
                    string APPLIEDCAT, 
                    string APPLIEDLOAD, 
                    string APPLIEDLOADKVA, 
                    string CONNECTIONTYPE, 
                    string STATEMENT_CA, 
                    string START_DATE, 
                    string START_TIME, 
                    string FINISH_DATE, 
                    string FINISH_TIME, 
                    string SORTFIELD, 
                    string ABKRS, 
                    string AppVersion, 
                    object userState) {
            if ((this.Z_BAPI_ZDSS_WEB_LINKOperationCompleted == null)) {
                this.Z_BAPI_ZDSS_WEB_LINKOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZ_BAPI_ZDSS_WEB_LINKOperationCompleted);
            }
            this.InvokeAsync("Z_BAPI_ZDSS_WEB_LINK", new object[] {
                        I_ILART,
                        I_VKONT,
                        I_VKONA,
                        PARTNERCATEGORY,
                        PARTNERTYPE,
                        TITLE_KEY,
                        FIRSTNAME,
                        LASTNAME,
                        MIDDLENAME,
                        FATHERSNAME,
                        HOUSE_NO,
                        BUILDING,
                        STR_SUPPL1,
                        STR_SUPPL2,
                        STR_SUPPL3,
                        POSTL_COD1,
                        CITY,
                        E_MAIL,
                        LANDLINE,
                        MOBILE,
                        FEMALE,
                        MALE,
                        JOBGR,
                        IDTYPE,
                        IDNUMBER,
                        PLANNINGPLANT,
                        WORKCENTRE,
                        SYSTEMCOND,
                        APPLIEDCAT,
                        APPLIEDLOAD,
                        APPLIEDLOADKVA,
                        CONNECTIONTYPE,
                        STATEMENT_CA,
                        START_DATE,
                        START_TIME,
                        FINISH_DATE,
                        FINISH_TIME,
                        SORTFIELD,
                        ABKRS,
                        AppVersion}, this.Z_BAPI_ZDSS_WEB_LINKOperationCompleted, userState);
        }
        
        private void OnZ_BAPI_ZDSS_WEB_LINKOperationCompleted(object arg) {
            if ((this.Z_BAPI_ZDSS_WEB_LINKCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Z_BAPI_ZDSS_WEB_LINKCompleted(this, new Z_BAPI_ZDSS_WEB_LINKCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/NewConnOTPRqstFrm", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string NewConnOTPRqstFrm(string strDiscom, string strFirstName, string strLastName, string strEmailId, string strMobileNo) {
            object[] results = this.Invoke("NewConnOTPRqstFrm", new object[] {
                        strDiscom,
                        strFirstName,
                        strLastName,
                        strEmailId,
                        strMobileNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NewConnOTPRqstFrmAsync(string strDiscom, string strFirstName, string strLastName, string strEmailId, string strMobileNo) {
            this.NewConnOTPRqstFrmAsync(strDiscom, strFirstName, strLastName, strEmailId, strMobileNo, null);
        }
        
        /// <remarks/>
        public void NewConnOTPRqstFrmAsync(string strDiscom, string strFirstName, string strLastName, string strEmailId, string strMobileNo, object userState) {
            if ((this.NewConnOTPRqstFrmOperationCompleted == null)) {
                this.NewConnOTPRqstFrmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewConnOTPRqstFrmOperationCompleted);
            }
            this.InvokeAsync("NewConnOTPRqstFrm", new object[] {
                        strDiscom,
                        strFirstName,
                        strLastName,
                        strEmailId,
                        strMobileNo}, this.NewConnOTPRqstFrmOperationCompleted, userState);
        }
        
        private void OnNewConnOTPRqstFrmOperationCompleted(object arg) {
            if ((this.NewConnOTPRqstFrmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewConnOTPRqstFrmCompleted(this, new NewConnOTPRqstFrmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/NewConnOTPVerifyFrm", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NewConnOTPVerifyFrm(string strOTP, string strLblId) {
            object[] results = this.Invoke("NewConnOTPVerifyFrm", new object[] {
                        strOTP,
                        strLblId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NewConnOTPVerifyFrmAsync(string strOTP, string strLblId) {
            this.NewConnOTPVerifyFrmAsync(strOTP, strLblId, null);
        }
        
        /// <remarks/>
        public void NewConnOTPVerifyFrmAsync(string strOTP, string strLblId, object userState) {
            if ((this.NewConnOTPVerifyFrmOperationCompleted == null)) {
                this.NewConnOTPVerifyFrmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewConnOTPVerifyFrmOperationCompleted);
            }
            this.InvokeAsync("NewConnOTPVerifyFrm", new object[] {
                        strOTP,
                        strLblId}, this.NewConnOTPVerifyFrmOperationCompleted, userState);
        }
        
        private void OnNewConnOTPVerifyFrmOperationCompleted(object arg) {
            if ((this.NewConnOTPVerifyFrmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewConnOTPVerifyFrmCompleted(this, new NewConnOTPVerifyFrmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/NewConnResendOTPVerifyFrm", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NewConnResendOTPVerifyFrm(string strLblId) {
            object[] results = this.Invoke("NewConnResendOTPVerifyFrm", new object[] {
                        strLblId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NewConnResendOTPVerifyFrmAsync(string strLblId) {
            this.NewConnResendOTPVerifyFrmAsync(strLblId, null);
        }
        
        /// <remarks/>
        public void NewConnResendOTPVerifyFrmAsync(string strLblId, object userState) {
            if ((this.NewConnResendOTPVerifyFrmOperationCompleted == null)) {
                this.NewConnResendOTPVerifyFrmOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewConnResendOTPVerifyFrmOperationCompleted);
            }
            this.InvokeAsync("NewConnResendOTPVerifyFrm", new object[] {
                        strLblId}, this.NewConnResendOTPVerifyFrmOperationCompleted, userState);
        }
        
        private void OnNewConnResendOTPVerifyFrmOperationCompleted(object arg) {
            if ((this.NewConnResendOTPVerifyFrmCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewConnResendOTPVerifyFrmCompleted(this, new NewConnResendOTPVerifyFrmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/App_log", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool App_log(string strIMEI, string strActionType, string strActionPerform) {
            object[] results = this.Invoke("App_log", new object[] {
                        strIMEI,
                        strActionType,
                        strActionPerform});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void App_logAsync(string strIMEI, string strActionType, string strActionPerform) {
            this.App_logAsync(strIMEI, strActionType, strActionPerform, null);
        }
        
        /// <remarks/>
        public void App_logAsync(string strIMEI, string strActionType, string strActionPerform, object userState) {
            if ((this.App_logOperationCompleted == null)) {
                this.App_logOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApp_logOperationCompleted);
            }
            this.InvokeAsync("App_log", new object[] {
                        strIMEI,
                        strActionType,
                        strActionPerform}, this.App_logOperationCompleted, userState);
        }
        
        private void OnApp_logOperationCompleted(object arg) {
            if ((this.App_logCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.App_logCompleted(this, new App_logCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/getPendingOrderOracle", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getPendingOrderOracle(string imeiNo) {
            object[] results = this.Invoke("getPendingOrderOracle", new object[] {
                        imeiNo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getPendingOrderOracleAsync(string imeiNo) {
            this.getPendingOrderOracleAsync(imeiNo, null);
        }
        
        /// <remarks/>
        public void getPendingOrderOracleAsync(string imeiNo, object userState) {
            if ((this.getPendingOrderOracleOperationCompleted == null)) {
                this.getPendingOrderOracleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPendingOrderOracleOperationCompleted);
            }
            this.InvokeAsync("getPendingOrderOracle", new object[] {
                        imeiNo}, this.getPendingOrderOracleOperationCompleted, userState);
        }
        
        private void OngetPendingOrderOracleOperationCompleted(object arg) {
            if ((this.getPendingOrderOracleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPendingOrderOracleCompleted(this, new getPendingOrderOracleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/getCompleteOrderOracle", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getCompleteOrderOracle(string imeiNo) {
            object[] results = this.Invoke("getCompleteOrderOracle", new object[] {
                        imeiNo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getCompleteOrderOracleAsync(string imeiNo) {
            this.getCompleteOrderOracleAsync(imeiNo, null);
        }
        
        /// <remarks/>
        public void getCompleteOrderOracleAsync(string imeiNo, object userState) {
            if ((this.getCompleteOrderOracleOperationCompleted == null)) {
                this.getCompleteOrderOracleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCompleteOrderOracleOperationCompleted);
            }
            this.InvokeAsync("getCompleteOrderOracle", new object[] {
                        imeiNo}, this.getCompleteOrderOracleOperationCompleted, userState);
        }
        
        private void OngetCompleteOrderOracleOperationCompleted(object arg) {
            if ((this.getCompleteOrderOracleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCompleteOrderOracleCompleted(this, new getCompleteOrderOracleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/getPendingOrderOracleKCC", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getPendingOrderOracleKCC(string imeiNo) {
            object[] results = this.Invoke("getPendingOrderOracleKCC", new object[] {
                        imeiNo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getPendingOrderOracleKCCAsync(string imeiNo) {
            this.getPendingOrderOracleKCCAsync(imeiNo, null);
        }
        
        /// <remarks/>
        public void getPendingOrderOracleKCCAsync(string imeiNo, object userState) {
            if ((this.getPendingOrderOracleKCCOperationCompleted == null)) {
                this.getPendingOrderOracleKCCOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPendingOrderOracleKCCOperationCompleted);
            }
            this.InvokeAsync("getPendingOrderOracleKCC", new object[] {
                        imeiNo}, this.getPendingOrderOracleKCCOperationCompleted, userState);
        }
        
        private void OngetPendingOrderOracleKCCOperationCompleted(object arg) {
            if ((this.getPendingOrderOracleKCCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPendingOrderOracleKCCCompleted(this, new getPendingOrderOracleKCCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ChkUsrForClosingComplnt", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ChkUsrForClosingComplnt(string strEmpNo, string strPass) {
            object[] results = this.Invoke("ChkUsrForClosingComplnt", new object[] {
                        strEmpNo,
                        strPass});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ChkUsrForClosingComplntAsync(string strEmpNo, string strPass) {
            this.ChkUsrForClosingComplntAsync(strEmpNo, strPass, null);
        }
        
        /// <remarks/>
        public void ChkUsrForClosingComplntAsync(string strEmpNo, string strPass, object userState) {
            if ((this.ChkUsrForClosingComplntOperationCompleted == null)) {
                this.ChkUsrForClosingComplntOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChkUsrForClosingComplntOperationCompleted);
            }
            this.InvokeAsync("ChkUsrForClosingComplnt", new object[] {
                        strEmpNo,
                        strPass}, this.ChkUsrForClosingComplntOperationCompleted, userState);
        }
        
        private void OnChkUsrForClosingComplntOperationCompleted(object arg) {
            if ((this.ChkUsrForClosingComplntCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChkUsrForClosingComplntCompleted(this, new ChkUsrForClosingComplntCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/updateOrderStatus", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool updateOrderStatus(string orderNo, string status) {
            object[] results = this.Invoke("updateOrderStatus", new object[] {
                        orderNo,
                        status});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void updateOrderStatusAsync(string orderNo, string status) {
            this.updateOrderStatusAsync(orderNo, status, null);
        }
        
        /// <remarks/>
        public void updateOrderStatusAsync(string orderNo, string status, object userState) {
            if ((this.updateOrderStatusOperationCompleted == null)) {
                this.updateOrderStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateOrderStatusOperationCompleted);
            }
            this.InvokeAsync("updateOrderStatus", new object[] {
                        orderNo,
                        status}, this.updateOrderStatusOperationCompleted, userState);
        }
        
        private void OnupdateOrderStatusOperationCompleted(object arg) {
            if ((this.updateOrderStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateOrderStatusCompleted(this, new updateOrderStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/getIVRSCallID", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getIVRSCallID() {
            object[] results = this.Invoke("getIVRSCallID", new object[0]);
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getIVRSCallIDAsync() {
            this.getIVRSCallIDAsync(null);
        }
        
        /// <remarks/>
        public void getIVRSCallIDAsync(object userState) {
            if ((this.getIVRSCallIDOperationCompleted == null)) {
                this.getIVRSCallIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetIVRSCallIDOperationCompleted);
            }
            this.InvokeAsync("getIVRSCallID", new object[0], this.getIVRSCallIDOperationCompleted, userState);
        }
        
        private void OngetIVRSCallIDOperationCompleted(object arg) {
            if ((this.getIVRSCallIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getIVRSCallIDCompleted(this, new getIVRSCallIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/getCFOracle", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable getCFOracle(string orderNo) {
            object[] results = this.Invoke("getCFOracle", new object[] {
                        orderNo});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void getCFOracleAsync(string orderNo) {
            this.getCFOracleAsync(orderNo, null);
        }
        
        /// <remarks/>
        public void getCFOracleAsync(string orderNo, object userState) {
            if ((this.getCFOracleOperationCompleted == null)) {
                this.getCFOracleOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCFOracleOperationCompleted);
            }
            this.InvokeAsync("getCFOracle", new object[] {
                        orderNo}, this.getCFOracleOperationCompleted, userState);
        }
        
        private void OngetCFOracleOperationCompleted(object arg) {
            if ((this.getCFOracleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCFOracleCompleted(this, new getCFOracleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ZBAPI_CS_ORD_STAT", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ZBAPI_CS_ORD_STAT(string strOrder) {
            object[] results = this.Invoke("ZBAPI_CS_ORD_STAT", new object[] {
                        strOrder});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ZBAPI_CS_ORD_STATAsync(string strOrder) {
            this.ZBAPI_CS_ORD_STATAsync(strOrder, null);
        }
        
        /// <remarks/>
        public void ZBAPI_CS_ORD_STATAsync(string strOrder, object userState) {
            if ((this.ZBAPI_CS_ORD_STATOperationCompleted == null)) {
                this.ZBAPI_CS_ORD_STATOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZBAPI_CS_ORD_STATOperationCompleted);
            }
            this.InvokeAsync("ZBAPI_CS_ORD_STAT", new object[] {
                        strOrder}, this.ZBAPI_CS_ORD_STATOperationCompleted, userState);
        }
        
        private void OnZBAPI_CS_ORD_STATOperationCompleted(object arg) {
            if ((this.ZBAPI_CS_ORD_STATCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZBAPI_CS_ORD_STATCompleted(this, new ZBAPI_CS_ORD_STATCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ZBAPI_DISPLAY_BILL_WEB", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ZBAPI_DISPLAY_BILL_WEB(string strCANumber, string strBillMonth) {
            object[] results = this.Invoke("ZBAPI_DISPLAY_BILL_WEB", new object[] {
                        strCANumber,
                        strBillMonth});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ZBAPI_DISPLAY_BILL_WEBAsync(string strCANumber, string strBillMonth) {
            this.ZBAPI_DISPLAY_BILL_WEBAsync(strCANumber, strBillMonth, null);
        }
        
        /// <remarks/>
        public void ZBAPI_DISPLAY_BILL_WEBAsync(string strCANumber, string strBillMonth, object userState) {
            if ((this.ZBAPI_DISPLAY_BILL_WEBOperationCompleted == null)) {
                this.ZBAPI_DISPLAY_BILL_WEBOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZBAPI_DISPLAY_BILL_WEBOperationCompleted);
            }
            this.InvokeAsync("ZBAPI_DISPLAY_BILL_WEB", new object[] {
                        strCANumber,
                        strBillMonth}, this.ZBAPI_DISPLAY_BILL_WEBOperationCompleted, userState);
        }
        
        private void OnZBAPI_DISPLAY_BILL_WEBOperationCompleted(object arg) {
            if ((this.ZBAPI_DISPLAY_BILL_WEBCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZBAPI_DISPLAY_BILL_WEBCompleted(this, new ZBAPI_DISPLAY_BILL_WEBCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ZBAPI_DISPLAY_BILL_WEB_VALID", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ZBAPI_DISPLAY_BILL_WEB_VALID(string strCANumber) {
            object[] results = this.Invoke("ZBAPI_DISPLAY_BILL_WEB_VALID", new object[] {
                        strCANumber});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ZBAPI_DISPLAY_BILL_WEB_VALIDAsync(string strCANumber) {
            this.ZBAPI_DISPLAY_BILL_WEB_VALIDAsync(strCANumber, null);
        }
        
        /// <remarks/>
        public void ZBAPI_DISPLAY_BILL_WEB_VALIDAsync(string strCANumber, object userState) {
            if ((this.ZBAPI_DISPLAY_BILL_WEB_VALIDOperationCompleted == null)) {
                this.ZBAPI_DISPLAY_BILL_WEB_VALIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZBAPI_DISPLAY_BILL_WEB_VALIDOperationCompleted);
            }
            this.InvokeAsync("ZBAPI_DISPLAY_BILL_WEB_VALID", new object[] {
                        strCANumber}, this.ZBAPI_DISPLAY_BILL_WEB_VALIDOperationCompleted, userState);
        }
        
        private void OnZBAPI_DISPLAY_BILL_WEB_VALIDOperationCompleted(object arg) {
            if ((this.ZBAPI_DISPLAY_BILL_WEB_VALIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZBAPI_DISPLAY_BILL_WEB_VALIDCompleted(this, new ZBAPI_DISPLAY_BILL_WEB_VALIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/GetTransformerSetupDetail_delhi", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetTransformerSetupDetail_delhi(string Circle, string Company, string district) {
            object[] results = this.Invoke("GetTransformerSetupDetail_delhi", new object[] {
                        Circle,
                        Company,
                        district});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetTransformerSetupDetail_delhiAsync(string Circle, string Company, string district) {
            this.GetTransformerSetupDetail_delhiAsync(Circle, Company, district, null);
        }
        
        /// <remarks/>
        public void GetTransformerSetupDetail_delhiAsync(string Circle, string Company, string district, object userState) {
            if ((this.GetTransformerSetupDetail_delhiOperationCompleted == null)) {
                this.GetTransformerSetupDetail_delhiOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTransformerSetupDetail_delhiOperationCompleted);
            }
            this.InvokeAsync("GetTransformerSetupDetail_delhi", new object[] {
                        Circle,
                        Company,
                        district}, this.GetTransformerSetupDetail_delhiOperationCompleted, userState);
        }
        
        private void OnGetTransformerSetupDetail_delhiOperationCompleted(object arg) {
            if ((this.GetTransformerSetupDetail_delhiCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTransformerSetupDetail_delhiCompleted(this, new GetTransformerSetupDetail_delhiCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/FIVE_COMPL", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable FIVE_COMPL(string _CA_NO) {
            object[] results = this.Invoke("FIVE_COMPL", new object[] {
                        _CA_NO});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void FIVE_COMPLAsync(string _CA_NO) {
            this.FIVE_COMPLAsync(_CA_NO, null);
        }
        
        /// <remarks/>
        public void FIVE_COMPLAsync(string _CA_NO, object userState) {
            if ((this.FIVE_COMPLOperationCompleted == null)) {
                this.FIVE_COMPLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFIVE_COMPLOperationCompleted);
            }
            this.InvokeAsync("FIVE_COMPL", new object[] {
                        _CA_NO}, this.FIVE_COMPLOperationCompleted, userState);
        }
        
        private void OnFIVE_COMPLOperationCompleted(object arg) {
            if ((this.FIVE_COMPLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FIVE_COMPLCompleted(this, new FIVE_COMPLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/FEEDBACK", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FEEDBACK(string name, string number, string ip_addr, string imei_no, string email, [System.Xml.Serialization.XmlElementAttribute("feedback")] string feedback1) {
            object[] results = this.Invoke("FEEDBACK", new object[] {
                        name,
                        number,
                        ip_addr,
                        imei_no,
                        email,
                        feedback1});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FEEDBACKAsync(string name, string number, string ip_addr, string imei_no, string email, string feedback1) {
            this.FEEDBACKAsync(name, number, ip_addr, imei_no, email, feedback1, null);
        }
        
        /// <remarks/>
        public void FEEDBACKAsync(string name, string number, string ip_addr, string imei_no, string email, string feedback1, object userState) {
            if ((this.FEEDBACKOperationCompleted == null)) {
                this.FEEDBACKOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFEEDBACKOperationCompleted);
            }
            this.InvokeAsync("FEEDBACK", new object[] {
                        name,
                        number,
                        ip_addr,
                        imei_no,
                        email,
                        feedback1}, this.FEEDBACKOperationCompleted, userState);
        }
        
        private void OnFEEDBACKOperationCompleted(object arg) {
            if ((this.FEEDBACKCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FEEDBACKCompleted(this, new FEEDBACKCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/FEEDBACK_MOBAPP", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FEEDBACK_MOBAPP(string name, string number, string email, string answerOne, string answerTwo, string answerThree, string answerFour, string answerFive, string answerSix) {
            object[] results = this.Invoke("FEEDBACK_MOBAPP", new object[] {
                        name,
                        number,
                        email,
                        answerOne,
                        answerTwo,
                        answerThree,
                        answerFour,
                        answerFive,
                        answerSix});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FEEDBACK_MOBAPPAsync(string name, string number, string email, string answerOne, string answerTwo, string answerThree, string answerFour, string answerFive, string answerSix) {
            this.FEEDBACK_MOBAPPAsync(name, number, email, answerOne, answerTwo, answerThree, answerFour, answerFive, answerSix, null);
        }
        
        /// <remarks/>
        public void FEEDBACK_MOBAPPAsync(string name, string number, string email, string answerOne, string answerTwo, string answerThree, string answerFour, string answerFive, string answerSix, object userState) {
            if ((this.FEEDBACK_MOBAPPOperationCompleted == null)) {
                this.FEEDBACK_MOBAPPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFEEDBACK_MOBAPPOperationCompleted);
            }
            this.InvokeAsync("FEEDBACK_MOBAPP", new object[] {
                        name,
                        number,
                        email,
                        answerOne,
                        answerTwo,
                        answerThree,
                        answerFour,
                        answerFive,
                        answerSix}, this.FEEDBACK_MOBAPPOperationCompleted, userState);
        }
        
        private void OnFEEDBACK_MOBAPPOperationCompleted(object arg) {
            if ((this.FEEDBACK_MOBAPPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FEEDBACK_MOBAPPCompleted(this, new FEEDBACK_MOBAPPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Area_Code", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable Area_Code(string _strDiv) {
            object[] results = this.Invoke("Area_Code", new object[] {
                        _strDiv});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void Area_CodeAsync(string _strDiv) {
            this.Area_CodeAsync(_strDiv, null);
        }
        
        /// <remarks/>
        public void Area_CodeAsync(string _strDiv, object userState) {
            if ((this.Area_CodeOperationCompleted == null)) {
                this.Area_CodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnArea_CodeOperationCompleted);
            }
            this.InvokeAsync("Area_Code", new object[] {
                        _strDiv}, this.Area_CodeOperationCompleted, userState);
        }
        
        private void OnArea_CodeOperationCompleted(object arg) {
            if ((this.Area_CodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Area_CodeCompleted(this, new Area_CodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/GetARDAppVersion", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetARDAppVersion(string _sAppID) {
            object[] results = this.Invoke("GetARDAppVersion", new object[] {
                        _sAppID});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetARDAppVersionAsync(string _sAppID) {
            this.GetARDAppVersionAsync(_sAppID, null);
        }
        
        /// <remarks/>
        public void GetARDAppVersionAsync(string _sAppID, object userState) {
            if ((this.GetARDAppVersionOperationCompleted == null)) {
                this.GetARDAppVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetARDAppVersionOperationCompleted);
            }
            this.InvokeAsync("GetARDAppVersion", new object[] {
                        _sAppID}, this.GetARDAppVersionOperationCompleted, userState);
        }
        
        private void OnGetARDAppVersionOperationCompleted(object arg) {
            if ((this.GetARDAppVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetARDAppVersionCompleted(this, new GetARDAppVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/NewRegistration", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NewRegistration(string _sIMEI_No, string _sUserName, string _sManager_EmpCode, string _sActive_Flag, string _sEmpCode, string _sDesignation, string _sMobileNo, string _sEmailID) {
            object[] results = this.Invoke("NewRegistration", new object[] {
                        _sIMEI_No,
                        _sUserName,
                        _sManager_EmpCode,
                        _sActive_Flag,
                        _sEmpCode,
                        _sDesignation,
                        _sMobileNo,
                        _sEmailID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NewRegistrationAsync(string _sIMEI_No, string _sUserName, string _sManager_EmpCode, string _sActive_Flag, string _sEmpCode, string _sDesignation, string _sMobileNo, string _sEmailID) {
            this.NewRegistrationAsync(_sIMEI_No, _sUserName, _sManager_EmpCode, _sActive_Flag, _sEmpCode, _sDesignation, _sMobileNo, _sEmailID, null);
        }
        
        /// <remarks/>
        public void NewRegistrationAsync(string _sIMEI_No, string _sUserName, string _sManager_EmpCode, string _sActive_Flag, string _sEmpCode, string _sDesignation, string _sMobileNo, string _sEmailID, object userState) {
            if ((this.NewRegistrationOperationCompleted == null)) {
                this.NewRegistrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewRegistrationOperationCompleted);
            }
            this.InvokeAsync("NewRegistration", new object[] {
                        _sIMEI_No,
                        _sUserName,
                        _sManager_EmpCode,
                        _sActive_Flag,
                        _sEmpCode,
                        _sDesignation,
                        _sMobileNo,
                        _sEmailID}, this.NewRegistrationOperationCompleted, userState);
        }
        
        private void OnNewRegistrationOperationCompleted(object arg) {
            if ((this.NewRegistrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewRegistrationCompleted(this, new NewRegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/NCC_Registration", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string NCC_Registration(string _sCANo, string cboPriority, string lstFaultCatg, string txtCustRemarks, string cboMinutes, string cboDays, string AreaCode) {
            object[] results = this.Invoke("NCC_Registration", new object[] {
                        _sCANo,
                        cboPriority,
                        lstFaultCatg,
                        txtCustRemarks,
                        cboMinutes,
                        cboDays,
                        AreaCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NCC_RegistrationAsync(string _sCANo, string cboPriority, string lstFaultCatg, string txtCustRemarks, string cboMinutes, string cboDays, string AreaCode) {
            this.NCC_RegistrationAsync(_sCANo, cboPriority, lstFaultCatg, txtCustRemarks, cboMinutes, cboDays, AreaCode, null);
        }
        
        /// <remarks/>
        public void NCC_RegistrationAsync(string _sCANo, string cboPriority, string lstFaultCatg, string txtCustRemarks, string cboMinutes, string cboDays, string AreaCode, object userState) {
            if ((this.NCC_RegistrationOperationCompleted == null)) {
                this.NCC_RegistrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNCC_RegistrationOperationCompleted);
            }
            this.InvokeAsync("NCC_Registration", new object[] {
                        _sCANo,
                        cboPriority,
                        lstFaultCatg,
                        txtCustRemarks,
                        cboMinutes,
                        cboDays,
                        AreaCode}, this.NCC_RegistrationOperationCompleted, userState);
        }
        
        private void OnNCC_RegistrationOperationCompleted(object arg) {
            if ((this.NCC_RegistrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NCC_RegistrationCompleted(this, new NCC_RegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/DISPLAY_BILL", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable DISPLAY_BILL(string strCANumber) {
            object[] results = this.Invoke("DISPLAY_BILL", new object[] {
                        strCANumber});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void DISPLAY_BILLAsync(string strCANumber) {
            this.DISPLAY_BILLAsync(strCANumber, null);
        }
        
        /// <remarks/>
        public void DISPLAY_BILLAsync(string strCANumber, object userState) {
            if ((this.DISPLAY_BILLOperationCompleted == null)) {
                this.DISPLAY_BILLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDISPLAY_BILLOperationCompleted);
            }
            this.InvokeAsync("DISPLAY_BILL", new object[] {
                        strCANumber}, this.DISPLAY_BILLOperationCompleted, userState);
        }
        
        private void OnDISPLAY_BILLOperationCompleted(object arg) {
            if ((this.DISPLAY_BILLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DISPLAY_BILLCompleted(this, new DISPLAY_BILLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/BILL_HIST", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable BILL_HIST(string strCANumber, string strBillMonth) {
            object[] results = this.Invoke("BILL_HIST", new object[] {
                        strCANumber,
                        strBillMonth});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void BILL_HISTAsync(string strCANumber, string strBillMonth) {
            this.BILL_HISTAsync(strCANumber, strBillMonth, null);
        }
        
        /// <remarks/>
        public void BILL_HISTAsync(string strCANumber, string strBillMonth, object userState) {
            if ((this.BILL_HISTOperationCompleted == null)) {
                this.BILL_HISTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBILL_HISTOperationCompleted);
            }
            this.InvokeAsync("BILL_HIST", new object[] {
                        strCANumber,
                        strBillMonth}, this.BILL_HISTOperationCompleted, userState);
        }
        
        private void OnBILL_HISTOperationCompleted(object arg) {
            if ((this.BILL_HISTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BILL_HISTCompleted(this, new BILL_HISTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/Z_BAPI_IVRS", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable Z_BAPI_IVRS(string strContractAccountNumber) {
            object[] results = this.Invoke("Z_BAPI_IVRS", new object[] {
                        strContractAccountNumber});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void Z_BAPI_IVRSAsync(string strContractAccountNumber) {
            this.Z_BAPI_IVRSAsync(strContractAccountNumber, null);
        }
        
        /// <remarks/>
        public void Z_BAPI_IVRSAsync(string strContractAccountNumber, object userState) {
            if ((this.Z_BAPI_IVRSOperationCompleted == null)) {
                this.Z_BAPI_IVRSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZ_BAPI_IVRSOperationCompleted);
            }
            this.InvokeAsync("Z_BAPI_IVRS", new object[] {
                        strContractAccountNumber}, this.Z_BAPI_IVRSOperationCompleted, userState);
        }
        
        private void OnZ_BAPI_IVRSOperationCompleted(object arg) {
            if ((this.Z_BAPI_IVRSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Z_BAPI_IVRSCompleted(this, new Z_BAPI_IVRSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ZBAPI_IVR_CREATESO_ISU", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ZBAPI_IVR_CREATESO_ISU(string strCANumber, string strCACrn, string strCAKNumber, string strMeterNumber, string strISUOrder, string strComplaintType, string strContractNumber, string strTelephoneNo, string strDescription) {
            object[] results = this.Invoke("ZBAPI_IVR_CREATESO_ISU", new object[] {
                        strCANumber,
                        strCACrn,
                        strCAKNumber,
                        strMeterNumber,
                        strISUOrder,
                        strComplaintType,
                        strContractNumber,
                        strTelephoneNo,
                        strDescription});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ZBAPI_IVR_CREATESO_ISUAsync(string strCANumber, string strCACrn, string strCAKNumber, string strMeterNumber, string strISUOrder, string strComplaintType, string strContractNumber, string strTelephoneNo, string strDescription) {
            this.ZBAPI_IVR_CREATESO_ISUAsync(strCANumber, strCACrn, strCAKNumber, strMeterNumber, strISUOrder, strComplaintType, strContractNumber, strTelephoneNo, strDescription, null);
        }
        
        /// <remarks/>
        public void ZBAPI_IVR_CREATESO_ISUAsync(string strCANumber, string strCACrn, string strCAKNumber, string strMeterNumber, string strISUOrder, string strComplaintType, string strContractNumber, string strTelephoneNo, string strDescription, object userState) {
            if ((this.ZBAPI_IVR_CREATESO_ISUOperationCompleted == null)) {
                this.ZBAPI_IVR_CREATESO_ISUOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZBAPI_IVR_CREATESO_ISUOperationCompleted);
            }
            this.InvokeAsync("ZBAPI_IVR_CREATESO_ISU", new object[] {
                        strCANumber,
                        strCACrn,
                        strCAKNumber,
                        strMeterNumber,
                        strISUOrder,
                        strComplaintType,
                        strContractNumber,
                        strTelephoneNo,
                        strDescription}, this.ZBAPI_IVR_CREATESO_ISUOperationCompleted, userState);
        }
        
        private void OnZBAPI_IVR_CREATESO_ISUOperationCompleted(object arg) {
            if ((this.ZBAPI_IVR_CREATESO_ISUCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZBAPI_IVR_CREATESO_ISUCompleted(this, new ZBAPI_IVR_CREATESO_ISUCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/CA_DISPLAY", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable CA_DISPLAY(string strCANumber, string strSerialNumber, string strConsumerNumber, string strTelephoneNumber, string strKNumber, string strContractNumber) {
            object[] results = this.Invoke("CA_DISPLAY", new object[] {
                        strCANumber,
                        strSerialNumber,
                        strConsumerNumber,
                        strTelephoneNumber,
                        strKNumber,
                        strContractNumber});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void CA_DISPLAYAsync(string strCANumber, string strSerialNumber, string strConsumerNumber, string strTelephoneNumber, string strKNumber, string strContractNumber) {
            this.CA_DISPLAYAsync(strCANumber, strSerialNumber, strConsumerNumber, strTelephoneNumber, strKNumber, strContractNumber, null);
        }
        
        /// <remarks/>
        public void CA_DISPLAYAsync(string strCANumber, string strSerialNumber, string strConsumerNumber, string strTelephoneNumber, string strKNumber, string strContractNumber, object userState) {
            if ((this.CA_DISPLAYOperationCompleted == null)) {
                this.CA_DISPLAYOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCA_DISPLAYOperationCompleted);
            }
            this.InvokeAsync("CA_DISPLAY", new object[] {
                        strCANumber,
                        strSerialNumber,
                        strConsumerNumber,
                        strTelephoneNumber,
                        strKNumber,
                        strContractNumber}, this.CA_DISPLAYOperationCompleted, userState);
        }
        
        private void OnCA_DISPLAYOperationCompleted(object arg) {
            if ((this.CA_DISPLAYCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CA_DISPLAYCompleted(this, new CA_DISPLAYCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/CA_ADDRESS_UPLOAD", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CA_ADDRESS_UPLOAD(
                    string strCa_Number, 
                    string strBp_Name, 
                    string strHouse_Number, 
                    string strHouse_Number_Sup, 
                    string strFloor, 
                    string strStreet, 
                    string strStreet2, 
                    string strStreet3, 
                    string strStreet4, 
                    string strCity, 
                    string strPost_Code, 
                    string strTelephone_No, 
                    string strE_Mail, 
                    string strsign_Img, 
                    string strIDProof_Img, 
                    string strIMEI, 
                    string strLatitude, 
                    string strLongtitude, 
                    string strPoleNo, 
                    string strCustomerIdNo, 
                    string strEmpName, 
                    string strEmpId) {
            object[] results = this.Invoke("CA_ADDRESS_UPLOAD", new object[] {
                        strCa_Number,
                        strBp_Name,
                        strHouse_Number,
                        strHouse_Number_Sup,
                        strFloor,
                        strStreet,
                        strStreet2,
                        strStreet3,
                        strStreet4,
                        strCity,
                        strPost_Code,
                        strTelephone_No,
                        strE_Mail,
                        strsign_Img,
                        strIDProof_Img,
                        strIMEI,
                        strLatitude,
                        strLongtitude,
                        strPoleNo,
                        strCustomerIdNo,
                        strEmpName,
                        strEmpId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CA_ADDRESS_UPLOADAsync(
                    string strCa_Number, 
                    string strBp_Name, 
                    string strHouse_Number, 
                    string strHouse_Number_Sup, 
                    string strFloor, 
                    string strStreet, 
                    string strStreet2, 
                    string strStreet3, 
                    string strStreet4, 
                    string strCity, 
                    string strPost_Code, 
                    string strTelephone_No, 
                    string strE_Mail, 
                    string strsign_Img, 
                    string strIDProof_Img, 
                    string strIMEI, 
                    string strLatitude, 
                    string strLongtitude, 
                    string strPoleNo, 
                    string strCustomerIdNo, 
                    string strEmpName, 
                    string strEmpId) {
            this.CA_ADDRESS_UPLOADAsync(strCa_Number, strBp_Name, strHouse_Number, strHouse_Number_Sup, strFloor, strStreet, strStreet2, strStreet3, strStreet4, strCity, strPost_Code, strTelephone_No, strE_Mail, strsign_Img, strIDProof_Img, strIMEI, strLatitude, strLongtitude, strPoleNo, strCustomerIdNo, strEmpName, strEmpId, null);
        }
        
        /// <remarks/>
        public void CA_ADDRESS_UPLOADAsync(
                    string strCa_Number, 
                    string strBp_Name, 
                    string strHouse_Number, 
                    string strHouse_Number_Sup, 
                    string strFloor, 
                    string strStreet, 
                    string strStreet2, 
                    string strStreet3, 
                    string strStreet4, 
                    string strCity, 
                    string strPost_Code, 
                    string strTelephone_No, 
                    string strE_Mail, 
                    string strsign_Img, 
                    string strIDProof_Img, 
                    string strIMEI, 
                    string strLatitude, 
                    string strLongtitude, 
                    string strPoleNo, 
                    string strCustomerIdNo, 
                    string strEmpName, 
                    string strEmpId, 
                    object userState) {
            if ((this.CA_ADDRESS_UPLOADOperationCompleted == null)) {
                this.CA_ADDRESS_UPLOADOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCA_ADDRESS_UPLOADOperationCompleted);
            }
            this.InvokeAsync("CA_ADDRESS_UPLOAD", new object[] {
                        strCa_Number,
                        strBp_Name,
                        strHouse_Number,
                        strHouse_Number_Sup,
                        strFloor,
                        strStreet,
                        strStreet2,
                        strStreet3,
                        strStreet4,
                        strCity,
                        strPost_Code,
                        strTelephone_No,
                        strE_Mail,
                        strsign_Img,
                        strIDProof_Img,
                        strIMEI,
                        strLatitude,
                        strLongtitude,
                        strPoleNo,
                        strCustomerIdNo,
                        strEmpName,
                        strEmpId}, this.CA_ADDRESS_UPLOADOperationCompleted, userState);
        }
        
        private void OnCA_ADDRESS_UPLOADOperationCompleted(object arg) {
            if ((this.CA_ADDRESS_UPLOADCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CA_ADDRESS_UPLOADCompleted(this, new CA_ADDRESS_UPLOADCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ZBAPIDOCLIST", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ZBAPIDOCLIST(
                    string strAufnr, 
                    string strC_001, 
                    string strC_002, 
                    string strC_003, 
                    string strC_004, 
                    string strC_005, 
                    string strC_007, 
                    string strC_008, 
                    string strC_009, 
                    string strC_010, 
                    string strC_011, 
                    string strC_012, 
                    string strC_013, 
                    string strC_014, 
                    string strC_015, 
                    string strC_016, 
                    string strC_017, 
                    string strC_018, 
                    string strC_019, 
                    string strC_020, 
                    string strC_021, 
                    string strC_022, 
                    string strC_023, 
                    string strC_024, 
                    string strC_025, 
                    string strC_026, 
                    string strC_027, 
                    string strC_028, 
                    string strC_029, 
                    string strC_030, 
                    string strC_031, 
                    string strC_032, 
                    string strC_033, 
                    string strC_034, 
                    string strC_035, 
                    string strC_036, 
                    string strC_037, 
                    string strC_038, 
                    string strC_039, 
                    string strC_040, 
                    string strC_041, 
                    string strC_070, 
                    string strR_Cdll, 
                    string strR_Occ, 
                    string strR_Own, 
                    string strZ_Appltype) {
            object[] results = this.Invoke("ZBAPIDOCLIST", new object[] {
                        strAufnr,
                        strC_001,
                        strC_002,
                        strC_003,
                        strC_004,
                        strC_005,
                        strC_007,
                        strC_008,
                        strC_009,
                        strC_010,
                        strC_011,
                        strC_012,
                        strC_013,
                        strC_014,
                        strC_015,
                        strC_016,
                        strC_017,
                        strC_018,
                        strC_019,
                        strC_020,
                        strC_021,
                        strC_022,
                        strC_023,
                        strC_024,
                        strC_025,
                        strC_026,
                        strC_027,
                        strC_028,
                        strC_029,
                        strC_030,
                        strC_031,
                        strC_032,
                        strC_033,
                        strC_034,
                        strC_035,
                        strC_036,
                        strC_037,
                        strC_038,
                        strC_039,
                        strC_040,
                        strC_041,
                        strC_070,
                        strR_Cdll,
                        strR_Occ,
                        strR_Own,
                        strZ_Appltype});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ZBAPIDOCLISTAsync(
                    string strAufnr, 
                    string strC_001, 
                    string strC_002, 
                    string strC_003, 
                    string strC_004, 
                    string strC_005, 
                    string strC_007, 
                    string strC_008, 
                    string strC_009, 
                    string strC_010, 
                    string strC_011, 
                    string strC_012, 
                    string strC_013, 
                    string strC_014, 
                    string strC_015, 
                    string strC_016, 
                    string strC_017, 
                    string strC_018, 
                    string strC_019, 
                    string strC_020, 
                    string strC_021, 
                    string strC_022, 
                    string strC_023, 
                    string strC_024, 
                    string strC_025, 
                    string strC_026, 
                    string strC_027, 
                    string strC_028, 
                    string strC_029, 
                    string strC_030, 
                    string strC_031, 
                    string strC_032, 
                    string strC_033, 
                    string strC_034, 
                    string strC_035, 
                    string strC_036, 
                    string strC_037, 
                    string strC_038, 
                    string strC_039, 
                    string strC_040, 
                    string strC_041, 
                    string strC_070, 
                    string strR_Cdll, 
                    string strR_Occ, 
                    string strR_Own, 
                    string strZ_Appltype) {
            this.ZBAPIDOCLISTAsync(strAufnr, strC_001, strC_002, strC_003, strC_004, strC_005, strC_007, strC_008, strC_009, strC_010, strC_011, strC_012, strC_013, strC_014, strC_015, strC_016, strC_017, strC_018, strC_019, strC_020, strC_021, strC_022, strC_023, strC_024, strC_025, strC_026, strC_027, strC_028, strC_029, strC_030, strC_031, strC_032, strC_033, strC_034, strC_035, strC_036, strC_037, strC_038, strC_039, strC_040, strC_041, strC_070, strR_Cdll, strR_Occ, strR_Own, strZ_Appltype, null);
        }
        
        /// <remarks/>
        public void ZBAPIDOCLISTAsync(
                    string strAufnr, 
                    string strC_001, 
                    string strC_002, 
                    string strC_003, 
                    string strC_004, 
                    string strC_005, 
                    string strC_007, 
                    string strC_008, 
                    string strC_009, 
                    string strC_010, 
                    string strC_011, 
                    string strC_012, 
                    string strC_013, 
                    string strC_014, 
                    string strC_015, 
                    string strC_016, 
                    string strC_017, 
                    string strC_018, 
                    string strC_019, 
                    string strC_020, 
                    string strC_021, 
                    string strC_022, 
                    string strC_023, 
                    string strC_024, 
                    string strC_025, 
                    string strC_026, 
                    string strC_027, 
                    string strC_028, 
                    string strC_029, 
                    string strC_030, 
                    string strC_031, 
                    string strC_032, 
                    string strC_033, 
                    string strC_034, 
                    string strC_035, 
                    string strC_036, 
                    string strC_037, 
                    string strC_038, 
                    string strC_039, 
                    string strC_040, 
                    string strC_041, 
                    string strC_070, 
                    string strR_Cdll, 
                    string strR_Occ, 
                    string strR_Own, 
                    string strZ_Appltype, 
                    object userState) {
            if ((this.ZBAPIDOCLISTOperationCompleted == null)) {
                this.ZBAPIDOCLISTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnZBAPIDOCLISTOperationCompleted);
            }
            this.InvokeAsync("ZBAPIDOCLIST", new object[] {
                        strAufnr,
                        strC_001,
                        strC_002,
                        strC_003,
                        strC_004,
                        strC_005,
                        strC_007,
                        strC_008,
                        strC_009,
                        strC_010,
                        strC_011,
                        strC_012,
                        strC_013,
                        strC_014,
                        strC_015,
                        strC_016,
                        strC_017,
                        strC_018,
                        strC_019,
                        strC_020,
                        strC_021,
                        strC_022,
                        strC_023,
                        strC_024,
                        strC_025,
                        strC_026,
                        strC_027,
                        strC_028,
                        strC_029,
                        strC_030,
                        strC_031,
                        strC_032,
                        strC_033,
                        strC_034,
                        strC_035,
                        strC_036,
                        strC_037,
                        strC_038,
                        strC_039,
                        strC_040,
                        strC_041,
                        strC_070,
                        strR_Cdll,
                        strR_Occ,
                        strR_Own,
                        strZ_Appltype}, this.ZBAPIDOCLISTOperationCompleted, userState);
        }
        
        private void OnZBAPIDOCLISTOperationCompleted(object arg) {
            if ((this.ZBAPIDOCLISTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ZBAPIDOCLISTCompleted(this, new ZBAPIDOCLISTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/NEW_CONNECTION_SITE_TASKS", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NEW_CONNECTION_SITE_TASKS(
                    string Connected_Load, 
                    string Usage_Category_Of_site, 
                    string Pole_No_Feeder_Pillar_No, 
                    string meter_No, 
                    string Service_Line_Length, 
                    string Building_Hieght, 
                    string Wiring_Completed, 
                    string Lift_Installed, 
                    string Lift_Certificate_Required, 
                    string Affidavit_Required, 
                    string Floor, 
                    string Tf_Seal_No, 
                    string metering_position, 
                    string Initial_Cf_OK, 
                    string CA_No, 
                    string Amount, 
                    string applied_premises, 
                    string remarks, 
                    string strOrderNo, 
                    string strsign_Img, 
                    string building_img1, 
                    string building_img2, 
                    string IMEI_NO, 
                    string strLatitude, 
                    string strLongtitude, 
                    string FILE_ATTACHMENT, 
                    string SITE_LAYOUT_IMG, 
                    string CABLE_TYPE, 
                    string LEFT_METER_NO, 
                    string RIGHT_METER_NO, 
                    string APPLIED_AREA, 
                    string BUILDING_AREA, 
                    string strPasted) {
            object[] results = this.Invoke("NEW_CONNECTION_SITE_TASKS", new object[] {
                        Connected_Load,
                        Usage_Category_Of_site,
                        Pole_No_Feeder_Pillar_No,
                        meter_No,
                        Service_Line_Length,
                        Building_Hieght,
                        Wiring_Completed,
                        Lift_Installed,
                        Lift_Certificate_Required,
                        Affidavit_Required,
                        Floor,
                        Tf_Seal_No,
                        metering_position,
                        Initial_Cf_OK,
                        CA_No,
                        Amount,
                        applied_premises,
                        remarks,
                        strOrderNo,
                        strsign_Img,
                        building_img1,
                        building_img2,
                        IMEI_NO,
                        strLatitude,
                        strLongtitude,
                        FILE_ATTACHMENT,
                        SITE_LAYOUT_IMG,
                        CABLE_TYPE,
                        LEFT_METER_NO,
                        RIGHT_METER_NO,
                        APPLIED_AREA,
                        BUILDING_AREA,
                        strPasted});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NEW_CONNECTION_SITE_TASKSAsync(
                    string Connected_Load, 
                    string Usage_Category_Of_site, 
                    string Pole_No_Feeder_Pillar_No, 
                    string meter_No, 
                    string Service_Line_Length, 
                    string Building_Hieght, 
                    string Wiring_Completed, 
                    string Lift_Installed, 
                    string Lift_Certificate_Required, 
                    string Affidavit_Required, 
                    string Floor, 
                    string Tf_Seal_No, 
                    string metering_position, 
                    string Initial_Cf_OK, 
                    string CA_No, 
                    string Amount, 
                    string applied_premises, 
                    string remarks, 
                    string strOrderNo, 
                    string strsign_Img, 
                    string building_img1, 
                    string building_img2, 
                    string IMEI_NO, 
                    string strLatitude, 
                    string strLongtitude, 
                    string FILE_ATTACHMENT, 
                    string SITE_LAYOUT_IMG, 
                    string CABLE_TYPE, 
                    string LEFT_METER_NO, 
                    string RIGHT_METER_NO, 
                    string APPLIED_AREA, 
                    string BUILDING_AREA, 
                    string strPasted) {
            this.NEW_CONNECTION_SITE_TASKSAsync(Connected_Load, Usage_Category_Of_site, Pole_No_Feeder_Pillar_No, meter_No, Service_Line_Length, Building_Hieght, Wiring_Completed, Lift_Installed, Lift_Certificate_Required, Affidavit_Required, Floor, Tf_Seal_No, metering_position, Initial_Cf_OK, CA_No, Amount, applied_premises, remarks, strOrderNo, strsign_Img, building_img1, building_img2, IMEI_NO, strLatitude, strLongtitude, FILE_ATTACHMENT, SITE_LAYOUT_IMG, CABLE_TYPE, LEFT_METER_NO, RIGHT_METER_NO, APPLIED_AREA, BUILDING_AREA, strPasted, null);
        }
        
        /// <remarks/>
        public void NEW_CONNECTION_SITE_TASKSAsync(
                    string Connected_Load, 
                    string Usage_Category_Of_site, 
                    string Pole_No_Feeder_Pillar_No, 
                    string meter_No, 
                    string Service_Line_Length, 
                    string Building_Hieght, 
                    string Wiring_Completed, 
                    string Lift_Installed, 
                    string Lift_Certificate_Required, 
                    string Affidavit_Required, 
                    string Floor, 
                    string Tf_Seal_No, 
                    string metering_position, 
                    string Initial_Cf_OK, 
                    string CA_No, 
                    string Amount, 
                    string applied_premises, 
                    string remarks, 
                    string strOrderNo, 
                    string strsign_Img, 
                    string building_img1, 
                    string building_img2, 
                    string IMEI_NO, 
                    string strLatitude, 
                    string strLongtitude, 
                    string FILE_ATTACHMENT, 
                    string SITE_LAYOUT_IMG, 
                    string CABLE_TYPE, 
                    string LEFT_METER_NO, 
                    string RIGHT_METER_NO, 
                    string APPLIED_AREA, 
                    string BUILDING_AREA, 
                    string strPasted, 
                    object userState) {
            if ((this.NEW_CONNECTION_SITE_TASKSOperationCompleted == null)) {
                this.NEW_CONNECTION_SITE_TASKSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNEW_CONNECTION_SITE_TASKSOperationCompleted);
            }
            this.InvokeAsync("NEW_CONNECTION_SITE_TASKS", new object[] {
                        Connected_Load,
                        Usage_Category_Of_site,
                        Pole_No_Feeder_Pillar_No,
                        meter_No,
                        Service_Line_Length,
                        Building_Hieght,
                        Wiring_Completed,
                        Lift_Installed,
                        Lift_Certificate_Required,
                        Affidavit_Required,
                        Floor,
                        Tf_Seal_No,
                        metering_position,
                        Initial_Cf_OK,
                        CA_No,
                        Amount,
                        applied_premises,
                        remarks,
                        strOrderNo,
                        strsign_Img,
                        building_img1,
                        building_img2,
                        IMEI_NO,
                        strLatitude,
                        strLongtitude,
                        FILE_ATTACHMENT,
                        SITE_LAYOUT_IMG,
                        CABLE_TYPE,
                        LEFT_METER_NO,
                        RIGHT_METER_NO,
                        APPLIED_AREA,
                        BUILDING_AREA,
                        strPasted}, this.NEW_CONNECTION_SITE_TASKSOperationCompleted, userState);
        }
        
        private void OnNEW_CONNECTION_SITE_TASKSOperationCompleted(object arg) {
            if ((this.NEW_CONNECTION_SITE_TASKSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NEW_CONNECTION_SITE_TASKSCompleted(this, new NEW_CONNECTION_SITE_TASKSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/NEW_CONNECTION_SITE_TASKS2", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NEW_CONNECTION_SITE_TASKS2(
                    string Connected_Load, 
                    string Usage_Category_Of_site, 
                    string Pole_No_Feeder_Pillar_No, 
                    string meter_No, 
                    string Service_Line_Length, 
                    string Building_Hieght, 
                    string Wiring_Completed, 
                    string Lift_Installed, 
                    string Lift_Certificate_Required, 
                    string Affidavit_Required, 
                    string Floor, 
                    string Tf_Seal_No, 
                    string metering_position, 
                    string Initial_Cf_OK, 
                    string CA_No, 
                    string Amount, 
                    string applied_premises, 
                    string remarks, 
                    string strOrderNo, 
                    string strsign_Img, 
                    string building_img1, 
                    string building_img2, 
                    string IMEI_NO, 
                    string strLatitude, 
                    string strLongtitude, 
                    string FILE_ATTACHMENT, 
                    string SITE_LAYOUT_IMG, 
                    string CABLE_TYPE, 
                    string LEFT_METER_NO, 
                    string RIGHT_METER_NO, 
                    string APPLIED_AREA, 
                    string BUILDING_AREA, 
                    string strPasted, 
                    string NEW_BUILDING, 
                    string NORMATIVE_LOAD, 
                    string COVERED_AREA, 
                    string PLOT_AREA, 
                    string Existing_Meter_No, 
                    string Encroachment) {
            object[] results = this.Invoke("NEW_CONNECTION_SITE_TASKS2", new object[] {
                        Connected_Load,
                        Usage_Category_Of_site,
                        Pole_No_Feeder_Pillar_No,
                        meter_No,
                        Service_Line_Length,
                        Building_Hieght,
                        Wiring_Completed,
                        Lift_Installed,
                        Lift_Certificate_Required,
                        Affidavit_Required,
                        Floor,
                        Tf_Seal_No,
                        metering_position,
                        Initial_Cf_OK,
                        CA_No,
                        Amount,
                        applied_premises,
                        remarks,
                        strOrderNo,
                        strsign_Img,
                        building_img1,
                        building_img2,
                        IMEI_NO,
                        strLatitude,
                        strLongtitude,
                        FILE_ATTACHMENT,
                        SITE_LAYOUT_IMG,
                        CABLE_TYPE,
                        LEFT_METER_NO,
                        RIGHT_METER_NO,
                        APPLIED_AREA,
                        BUILDING_AREA,
                        strPasted,
                        NEW_BUILDING,
                        NORMATIVE_LOAD,
                        COVERED_AREA,
                        PLOT_AREA,
                        Existing_Meter_No,
                        Encroachment});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NEW_CONNECTION_SITE_TASKS2Async(
                    string Connected_Load, 
                    string Usage_Category_Of_site, 
                    string Pole_No_Feeder_Pillar_No, 
                    string meter_No, 
                    string Service_Line_Length, 
                    string Building_Hieght, 
                    string Wiring_Completed, 
                    string Lift_Installed, 
                    string Lift_Certificate_Required, 
                    string Affidavit_Required, 
                    string Floor, 
                    string Tf_Seal_No, 
                    string metering_position, 
                    string Initial_Cf_OK, 
                    string CA_No, 
                    string Amount, 
                    string applied_premises, 
                    string remarks, 
                    string strOrderNo, 
                    string strsign_Img, 
                    string building_img1, 
                    string building_img2, 
                    string IMEI_NO, 
                    string strLatitude, 
                    string strLongtitude, 
                    string FILE_ATTACHMENT, 
                    string SITE_LAYOUT_IMG, 
                    string CABLE_TYPE, 
                    string LEFT_METER_NO, 
                    string RIGHT_METER_NO, 
                    string APPLIED_AREA, 
                    string BUILDING_AREA, 
                    string strPasted, 
                    string NEW_BUILDING, 
                    string NORMATIVE_LOAD, 
                    string COVERED_AREA, 
                    string PLOT_AREA, 
                    string Existing_Meter_No, 
                    string Encroachment) {
            this.NEW_CONNECTION_SITE_TASKS2Async(Connected_Load, Usage_Category_Of_site, Pole_No_Feeder_Pillar_No, meter_No, Service_Line_Length, Building_Hieght, Wiring_Completed, Lift_Installed, Lift_Certificate_Required, Affidavit_Required, Floor, Tf_Seal_No, metering_position, Initial_Cf_OK, CA_No, Amount, applied_premises, remarks, strOrderNo, strsign_Img, building_img1, building_img2, IMEI_NO, strLatitude, strLongtitude, FILE_ATTACHMENT, SITE_LAYOUT_IMG, CABLE_TYPE, LEFT_METER_NO, RIGHT_METER_NO, APPLIED_AREA, BUILDING_AREA, strPasted, NEW_BUILDING, NORMATIVE_LOAD, COVERED_AREA, PLOT_AREA, Existing_Meter_No, Encroachment, null);
        }
        
        /// <remarks/>
        public void NEW_CONNECTION_SITE_TASKS2Async(
                    string Connected_Load, 
                    string Usage_Category_Of_site, 
                    string Pole_No_Feeder_Pillar_No, 
                    string meter_No, 
                    string Service_Line_Length, 
                    string Building_Hieght, 
                    string Wiring_Completed, 
                    string Lift_Installed, 
                    string Lift_Certificate_Required, 
                    string Affidavit_Required, 
                    string Floor, 
                    string Tf_Seal_No, 
                    string metering_position, 
                    string Initial_Cf_OK, 
                    string CA_No, 
                    string Amount, 
                    string applied_premises, 
                    string remarks, 
                    string strOrderNo, 
                    string strsign_Img, 
                    string building_img1, 
                    string building_img2, 
                    string IMEI_NO, 
                    string strLatitude, 
                    string strLongtitude, 
                    string FILE_ATTACHMENT, 
                    string SITE_LAYOUT_IMG, 
                    string CABLE_TYPE, 
                    string LEFT_METER_NO, 
                    string RIGHT_METER_NO, 
                    string APPLIED_AREA, 
                    string BUILDING_AREA, 
                    string strPasted, 
                    string NEW_BUILDING, 
                    string NORMATIVE_LOAD, 
                    string COVERED_AREA, 
                    string PLOT_AREA, 
                    string Existing_Meter_No, 
                    string Encroachment, 
                    object userState) {
            if ((this.NEW_CONNECTION_SITE_TASKS2OperationCompleted == null)) {
                this.NEW_CONNECTION_SITE_TASKS2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnNEW_CONNECTION_SITE_TASKS2OperationCompleted);
            }
            this.InvokeAsync("NEW_CONNECTION_SITE_TASKS2", new object[] {
                        Connected_Load,
                        Usage_Category_Of_site,
                        Pole_No_Feeder_Pillar_No,
                        meter_No,
                        Service_Line_Length,
                        Building_Hieght,
                        Wiring_Completed,
                        Lift_Installed,
                        Lift_Certificate_Required,
                        Affidavit_Required,
                        Floor,
                        Tf_Seal_No,
                        metering_position,
                        Initial_Cf_OK,
                        CA_No,
                        Amount,
                        applied_premises,
                        remarks,
                        strOrderNo,
                        strsign_Img,
                        building_img1,
                        building_img2,
                        IMEI_NO,
                        strLatitude,
                        strLongtitude,
                        FILE_ATTACHMENT,
                        SITE_LAYOUT_IMG,
                        CABLE_TYPE,
                        LEFT_METER_NO,
                        RIGHT_METER_NO,
                        APPLIED_AREA,
                        BUILDING_AREA,
                        strPasted,
                        NEW_BUILDING,
                        NORMATIVE_LOAD,
                        COVERED_AREA,
                        PLOT_AREA,
                        Existing_Meter_No,
                        Encroachment}, this.NEW_CONNECTION_SITE_TASKS2OperationCompleted, userState);
        }
        
        private void OnNEW_CONNECTION_SITE_TASKS2OperationCompleted(object arg) {
            if ((this.NEW_CONNECTION_SITE_TASKS2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NEW_CONNECTION_SITE_TASKS2Completed(this, new NEW_CONNECTION_SITE_TASKS2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/NEW_CONNECTION_SITE_TASKS3", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NEW_CONNECTION_SITE_TASKS3(
                    string Connected_Load, 
                    string Usage_Category_Of_site, 
                    string Pole_No_Feeder_Pillar_No, 
                    string meter_No, 
                    string Service_Line_Length, 
                    string Building_Hieght, 
                    string Wiring_Completed, 
                    string Lift_Installed, 
                    string Lift_Certificate_Required, 
                    string Affidavit_Required, 
                    string Floor, 
                    string Tf_Seal_No, 
                    string metering_position, 
                    string Initial_Cf_OK, 
                    string CA_No, 
                    string Amount, 
                    string applied_premises, 
                    string remarks, 
                    string strOrderNo, 
                    string strsign_Img, 
                    string building_img1, 
                    string building_img2, 
                    string IMEI_NO, 
                    string strLatitude, 
                    string strLongtitude, 
                    string FILE_ATTACHMENT, 
                    string SITE_LAYOUT_IMG, 
                    string CABLE_TYPE, 
                    string LEFT_METER_NO, 
                    string RIGHT_METER_NO, 
                    string APPLIED_AREA, 
                    string BUILDING_AREA, 
                    string strPasted, 
                    string NEW_BUILDING, 
                    string NORMATIVE_LOAD, 
                    string COVERED_AREA, 
                    string PLOT_AREA, 
                    string Existing_Meter_No, 
                    string Encroachment, 
                    string BuildingHeightRemarks, 
                    string ELCB) {
            object[] results = this.Invoke("NEW_CONNECTION_SITE_TASKS3", new object[] {
                        Connected_Load,
                        Usage_Category_Of_site,
                        Pole_No_Feeder_Pillar_No,
                        meter_No,
                        Service_Line_Length,
                        Building_Hieght,
                        Wiring_Completed,
                        Lift_Installed,
                        Lift_Certificate_Required,
                        Affidavit_Required,
                        Floor,
                        Tf_Seal_No,
                        metering_position,
                        Initial_Cf_OK,
                        CA_No,
                        Amount,
                        applied_premises,
                        remarks,
                        strOrderNo,
                        strsign_Img,
                        building_img1,
                        building_img2,
                        IMEI_NO,
                        strLatitude,
                        strLongtitude,
                        FILE_ATTACHMENT,
                        SITE_LAYOUT_IMG,
                        CABLE_TYPE,
                        LEFT_METER_NO,
                        RIGHT_METER_NO,
                        APPLIED_AREA,
                        BUILDING_AREA,
                        strPasted,
                        NEW_BUILDING,
                        NORMATIVE_LOAD,
                        COVERED_AREA,
                        PLOT_AREA,
                        Existing_Meter_No,
                        Encroachment,
                        BuildingHeightRemarks,
                        ELCB});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NEW_CONNECTION_SITE_TASKS3Async(
                    string Connected_Load, 
                    string Usage_Category_Of_site, 
                    string Pole_No_Feeder_Pillar_No, 
                    string meter_No, 
                    string Service_Line_Length, 
                    string Building_Hieght, 
                    string Wiring_Completed, 
                    string Lift_Installed, 
                    string Lift_Certificate_Required, 
                    string Affidavit_Required, 
                    string Floor, 
                    string Tf_Seal_No, 
                    string metering_position, 
                    string Initial_Cf_OK, 
                    string CA_No, 
                    string Amount, 
                    string applied_premises, 
                    string remarks, 
                    string strOrderNo, 
                    string strsign_Img, 
                    string building_img1, 
                    string building_img2, 
                    string IMEI_NO, 
                    string strLatitude, 
                    string strLongtitude, 
                    string FILE_ATTACHMENT, 
                    string SITE_LAYOUT_IMG, 
                    string CABLE_TYPE, 
                    string LEFT_METER_NO, 
                    string RIGHT_METER_NO, 
                    string APPLIED_AREA, 
                    string BUILDING_AREA, 
                    string strPasted, 
                    string NEW_BUILDING, 
                    string NORMATIVE_LOAD, 
                    string COVERED_AREA, 
                    string PLOT_AREA, 
                    string Existing_Meter_No, 
                    string Encroachment, 
                    string BuildingHeightRemarks, 
                    string ELCB) {
            this.NEW_CONNECTION_SITE_TASKS3Async(Connected_Load, Usage_Category_Of_site, Pole_No_Feeder_Pillar_No, meter_No, Service_Line_Length, Building_Hieght, Wiring_Completed, Lift_Installed, Lift_Certificate_Required, Affidavit_Required, Floor, Tf_Seal_No, metering_position, Initial_Cf_OK, CA_No, Amount, applied_premises, remarks, strOrderNo, strsign_Img, building_img1, building_img2, IMEI_NO, strLatitude, strLongtitude, FILE_ATTACHMENT, SITE_LAYOUT_IMG, CABLE_TYPE, LEFT_METER_NO, RIGHT_METER_NO, APPLIED_AREA, BUILDING_AREA, strPasted, NEW_BUILDING, NORMATIVE_LOAD, COVERED_AREA, PLOT_AREA, Existing_Meter_No, Encroachment, BuildingHeightRemarks, ELCB, null);
        }
        
        /// <remarks/>
        public void NEW_CONNECTION_SITE_TASKS3Async(
                    string Connected_Load, 
                    string Usage_Category_Of_site, 
                    string Pole_No_Feeder_Pillar_No, 
                    string meter_No, 
                    string Service_Line_Length, 
                    string Building_Hieght, 
                    string Wiring_Completed, 
                    string Lift_Installed, 
                    string Lift_Certificate_Required, 
                    string Affidavit_Required, 
                    string Floor, 
                    string Tf_Seal_No, 
                    string metering_position, 
                    string Initial_Cf_OK, 
                    string CA_No, 
                    string Amount, 
                    string applied_premises, 
                    string remarks, 
                    string strOrderNo, 
                    string strsign_Img, 
                    string building_img1, 
                    string building_img2, 
                    string IMEI_NO, 
                    string strLatitude, 
                    string strLongtitude, 
                    string FILE_ATTACHMENT, 
                    string SITE_LAYOUT_IMG, 
                    string CABLE_TYPE, 
                    string LEFT_METER_NO, 
                    string RIGHT_METER_NO, 
                    string APPLIED_AREA, 
                    string BUILDING_AREA, 
                    string strPasted, 
                    string NEW_BUILDING, 
                    string NORMATIVE_LOAD, 
                    string COVERED_AREA, 
                    string PLOT_AREA, 
                    string Existing_Meter_No, 
                    string Encroachment, 
                    string BuildingHeightRemarks, 
                    string ELCB, 
                    object userState) {
            if ((this.NEW_CONNECTION_SITE_TASKS3OperationCompleted == null)) {
                this.NEW_CONNECTION_SITE_TASKS3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnNEW_CONNECTION_SITE_TASKS3OperationCompleted);
            }
            this.InvokeAsync("NEW_CONNECTION_SITE_TASKS3", new object[] {
                        Connected_Load,
                        Usage_Category_Of_site,
                        Pole_No_Feeder_Pillar_No,
                        meter_No,
                        Service_Line_Length,
                        Building_Hieght,
                        Wiring_Completed,
                        Lift_Installed,
                        Lift_Certificate_Required,
                        Affidavit_Required,
                        Floor,
                        Tf_Seal_No,
                        metering_position,
                        Initial_Cf_OK,
                        CA_No,
                        Amount,
                        applied_premises,
                        remarks,
                        strOrderNo,
                        strsign_Img,
                        building_img1,
                        building_img2,
                        IMEI_NO,
                        strLatitude,
                        strLongtitude,
                        FILE_ATTACHMENT,
                        SITE_LAYOUT_IMG,
                        CABLE_TYPE,
                        LEFT_METER_NO,
                        RIGHT_METER_NO,
                        APPLIED_AREA,
                        BUILDING_AREA,
                        strPasted,
                        NEW_BUILDING,
                        NORMATIVE_LOAD,
                        COVERED_AREA,
                        PLOT_AREA,
                        Existing_Meter_No,
                        Encroachment,
                        BuildingHeightRemarks,
                        ELCB}, this.NEW_CONNECTION_SITE_TASKS3OperationCompleted, userState);
        }
        
        private void OnNEW_CONNECTION_SITE_TASKS3OperationCompleted(object arg) {
            if ((this.NEW_CONNECTION_SITE_TASKS3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NEW_CONNECTION_SITE_TASKS3Completed(this, new NEW_CONNECTION_SITE_TASKS3CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/updatebreakdownreadstatsu", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string updatebreakdownreadstatsu(string BD_ID) {
            object[] results = this.Invoke("updatebreakdownreadstatsu", new object[] {
                        BD_ID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void updatebreakdownreadstatsuAsync(string BD_ID) {
            this.updatebreakdownreadstatsuAsync(BD_ID, null);
        }
        
        /// <remarks/>
        public void updatebreakdownreadstatsuAsync(string BD_ID, object userState) {
            if ((this.updatebreakdownreadstatsuOperationCompleted == null)) {
                this.updatebreakdownreadstatsuOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdatebreakdownreadstatsuOperationCompleted);
            }
            this.InvokeAsync("updatebreakdownreadstatsu", new object[] {
                        BD_ID}, this.updatebreakdownreadstatsuOperationCompleted, userState);
        }
        
        private void OnupdatebreakdownreadstatsuOperationCompleted(object arg) {
            if ((this.updatebreakdownreadstatsuCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updatebreakdownreadstatsuCompleted(this, new updatebreakdownreadstatsuCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/getbreakdowndetails", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet getbreakdowndetails(string IMEINO) {
            object[] results = this.Invoke("getbreakdowndetails", new object[] {
                        IMEINO});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void getbreakdowndetailsAsync(string IMEINO) {
            this.getbreakdowndetailsAsync(IMEINO, null);
        }
        
        /// <remarks/>
        public void getbreakdowndetailsAsync(string IMEINO, object userState) {
            if ((this.getbreakdowndetailsOperationCompleted == null)) {
                this.getbreakdowndetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetbreakdowndetailsOperationCompleted);
            }
            this.InvokeAsync("getbreakdowndetails", new object[] {
                        IMEINO}, this.getbreakdowndetailsOperationCompleted, userState);
        }
        
        private void OngetbreakdowndetailsOperationCompleted(object arg) {
            if ((this.getbreakdowndetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getbreakdowndetailsCompleted(this, new getbreakdowndetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/getbreakdownstatus", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string getbreakdownstatus(string BD_ID) {
            object[] results = this.Invoke("getbreakdownstatus", new object[] {
                        BD_ID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getbreakdownstatusAsync(string BD_ID) {
            this.getbreakdownstatusAsync(BD_ID, null);
        }
        
        /// <remarks/>
        public void getbreakdownstatusAsync(string BD_ID, object userState) {
            if ((this.getbreakdownstatusOperationCompleted == null)) {
                this.getbreakdownstatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetbreakdownstatusOperationCompleted);
            }
            this.InvokeAsync("getbreakdownstatus", new object[] {
                        BD_ID}, this.getbreakdownstatusOperationCompleted, userState);
        }
        
        private void OngetbreakdownstatusOperationCompleted(object arg) {
            if ((this.getbreakdownstatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getbreakdownstatusCompleted(this, new getbreakdownstatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/SCAN_FOR_AFFIDAVIT", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SCAN_FOR_AFFIDAVIT(string strOrderNo, string strScan_for_AFFIDAVIT) {
            object[] results = this.Invoke("SCAN_FOR_AFFIDAVIT", new object[] {
                        strOrderNo,
                        strScan_for_AFFIDAVIT});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SCAN_FOR_AFFIDAVITAsync(string strOrderNo, string strScan_for_AFFIDAVIT) {
            this.SCAN_FOR_AFFIDAVITAsync(strOrderNo, strScan_for_AFFIDAVIT, null);
        }
        
        /// <remarks/>
        public void SCAN_FOR_AFFIDAVITAsync(string strOrderNo, string strScan_for_AFFIDAVIT, object userState) {
            if ((this.SCAN_FOR_AFFIDAVITOperationCompleted == null)) {
                this.SCAN_FOR_AFFIDAVITOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSCAN_FOR_AFFIDAVITOperationCompleted);
            }
            this.InvokeAsync("SCAN_FOR_AFFIDAVIT", new object[] {
                        strOrderNo,
                        strScan_for_AFFIDAVIT}, this.SCAN_FOR_AFFIDAVITOperationCompleted, userState);
        }
        
        private void OnSCAN_FOR_AFFIDAVITOperationCompleted(object arg) {
            if ((this.SCAN_FOR_AFFIDAVITCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SCAN_FOR_AFFIDAVITCompleted(this, new SCAN_FOR_AFFIDAVITCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/NEW_CONNECTION_SITE_STATUS", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NEW_CONNECTION_SITE_STATUS(string strOrderNo, string strStatus, string strNewRemarks, string strRescheduledate) {
            object[] results = this.Invoke("NEW_CONNECTION_SITE_STATUS", new object[] {
                        strOrderNo,
                        strStatus,
                        strNewRemarks,
                        strRescheduledate});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NEW_CONNECTION_SITE_STATUSAsync(string strOrderNo, string strStatus, string strNewRemarks, string strRescheduledate) {
            this.NEW_CONNECTION_SITE_STATUSAsync(strOrderNo, strStatus, strNewRemarks, strRescheduledate, null);
        }
        
        /// <remarks/>
        public void NEW_CONNECTION_SITE_STATUSAsync(string strOrderNo, string strStatus, string strNewRemarks, string strRescheduledate, object userState) {
            if ((this.NEW_CONNECTION_SITE_STATUSOperationCompleted == null)) {
                this.NEW_CONNECTION_SITE_STATUSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNEW_CONNECTION_SITE_STATUSOperationCompleted);
            }
            this.InvokeAsync("NEW_CONNECTION_SITE_STATUS", new object[] {
                        strOrderNo,
                        strStatus,
                        strNewRemarks,
                        strRescheduledate}, this.NEW_CONNECTION_SITE_STATUSOperationCompleted, userState);
        }
        
        private void OnNEW_CONNECTION_SITE_STATUSOperationCompleted(object arg) {
            if ((this.NEW_CONNECTION_SITE_STATUSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NEW_CONNECTION_SITE_STATUSCompleted(this, new NEW_CONNECTION_SITE_STATUSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/SCAN_FOR_ADDRESS_PROOF", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SCAN_FOR_ADDRESS_PROOF(string strOrderNo, string strScan_for_AFFIDAVIT) {
            object[] results = this.Invoke("SCAN_FOR_ADDRESS_PROOF", new object[] {
                        strOrderNo,
                        strScan_for_AFFIDAVIT});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SCAN_FOR_ADDRESS_PROOFAsync(string strOrderNo, string strScan_for_AFFIDAVIT) {
            this.SCAN_FOR_ADDRESS_PROOFAsync(strOrderNo, strScan_for_AFFIDAVIT, null);
        }
        
        /// <remarks/>
        public void SCAN_FOR_ADDRESS_PROOFAsync(string strOrderNo, string strScan_for_AFFIDAVIT, object userState) {
            if ((this.SCAN_FOR_ADDRESS_PROOFOperationCompleted == null)) {
                this.SCAN_FOR_ADDRESS_PROOFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSCAN_FOR_ADDRESS_PROOFOperationCompleted);
            }
            this.InvokeAsync("SCAN_FOR_ADDRESS_PROOF", new object[] {
                        strOrderNo,
                        strScan_for_AFFIDAVIT}, this.SCAN_FOR_ADDRESS_PROOFOperationCompleted, userState);
        }
        
        private void OnSCAN_FOR_ADDRESS_PROOFOperationCompleted(object arg) {
            if ((this.SCAN_FOR_ADDRESS_PROOFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SCAN_FOR_ADDRESS_PROOFCompleted(this, new SCAN_FOR_ADDRESS_PROOFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/SCAN_FOR_ID_PROOF", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SCAN_FOR_ID_PROOF(string strOrderNo, string strScan_for_AFFIDAVIT) {
            object[] results = this.Invoke("SCAN_FOR_ID_PROOF", new object[] {
                        strOrderNo,
                        strScan_for_AFFIDAVIT});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SCAN_FOR_ID_PROOFAsync(string strOrderNo, string strScan_for_AFFIDAVIT) {
            this.SCAN_FOR_ID_PROOFAsync(strOrderNo, strScan_for_AFFIDAVIT, null);
        }
        
        /// <remarks/>
        public void SCAN_FOR_ID_PROOFAsync(string strOrderNo, string strScan_for_AFFIDAVIT, object userState) {
            if ((this.SCAN_FOR_ID_PROOFOperationCompleted == null)) {
                this.SCAN_FOR_ID_PROOFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSCAN_FOR_ID_PROOFOperationCompleted);
            }
            this.InvokeAsync("SCAN_FOR_ID_PROOF", new object[] {
                        strOrderNo,
                        strScan_for_AFFIDAVIT}, this.SCAN_FOR_ID_PROOFOperationCompleted, userState);
        }
        
        private void OnSCAN_FOR_ID_PROOFOperationCompleted(object arg) {
            if ((this.SCAN_FOR_ID_PROOFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SCAN_FOR_ID_PROOFCompleted(this, new SCAN_FOR_ID_PROOFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/SCAN_FOR_Ownership", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SCAN_FOR_Ownership(string strOrderNo, string strScan_for_Ownership) {
            object[] results = this.Invoke("SCAN_FOR_Ownership", new object[] {
                        strOrderNo,
                        strScan_for_Ownership});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SCAN_FOR_OwnershipAsync(string strOrderNo, string strScan_for_Ownership) {
            this.SCAN_FOR_OwnershipAsync(strOrderNo, strScan_for_Ownership, null);
        }
        
        /// <remarks/>
        public void SCAN_FOR_OwnershipAsync(string strOrderNo, string strScan_for_Ownership, object userState) {
            if ((this.SCAN_FOR_OwnershipOperationCompleted == null)) {
                this.SCAN_FOR_OwnershipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSCAN_FOR_OwnershipOperationCompleted);
            }
            this.InvokeAsync("SCAN_FOR_Ownership", new object[] {
                        strOrderNo,
                        strScan_for_Ownership}, this.SCAN_FOR_OwnershipOperationCompleted, userState);
        }
        
        private void OnSCAN_FOR_OwnershipOperationCompleted(object arg) {
            if ((this.SCAN_FOR_OwnershipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SCAN_FOR_OwnershipCompleted(this, new SCAN_FOR_OwnershipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/SCAN_FOR_Application", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SCAN_FOR_Application(string strOrderNo, string strScan_for_Application) {
            object[] results = this.Invoke("SCAN_FOR_Application", new object[] {
                        strOrderNo,
                        strScan_for_Application});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SCAN_FOR_ApplicationAsync(string strOrderNo, string strScan_for_Application) {
            this.SCAN_FOR_ApplicationAsync(strOrderNo, strScan_for_Application, null);
        }
        
        /// <remarks/>
        public void SCAN_FOR_ApplicationAsync(string strOrderNo, string strScan_for_Application, object userState) {
            if ((this.SCAN_FOR_ApplicationOperationCompleted == null)) {
                this.SCAN_FOR_ApplicationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSCAN_FOR_ApplicationOperationCompleted);
            }
            this.InvokeAsync("SCAN_FOR_Application", new object[] {
                        strOrderNo,
                        strScan_for_Application}, this.SCAN_FOR_ApplicationOperationCompleted, userState);
        }
        
        private void OnSCAN_FOR_ApplicationOperationCompleted(object arg) {
            if ((this.SCAN_FOR_ApplicationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SCAN_FOR_ApplicationCompleted(this, new SCAN_FOR_ApplicationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/SCAN_FOR_OTHER", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SCAN_FOR_OTHER(string strOrderNo, string strScan_for_AFFIDAVIT) {
            object[] results = this.Invoke("SCAN_FOR_OTHER", new object[] {
                        strOrderNo,
                        strScan_for_AFFIDAVIT});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SCAN_FOR_OTHERAsync(string strOrderNo, string strScan_for_AFFIDAVIT) {
            this.SCAN_FOR_OTHERAsync(strOrderNo, strScan_for_AFFIDAVIT, null);
        }
        
        /// <remarks/>
        public void SCAN_FOR_OTHERAsync(string strOrderNo, string strScan_for_AFFIDAVIT, object userState) {
            if ((this.SCAN_FOR_OTHEROperationCompleted == null)) {
                this.SCAN_FOR_OTHEROperationCompleted = new System.Threading.SendOrPostCallback(this.OnSCAN_FOR_OTHEROperationCompleted);
            }
            this.InvokeAsync("SCAN_FOR_OTHER", new object[] {
                        strOrderNo,
                        strScan_for_AFFIDAVIT}, this.SCAN_FOR_OTHEROperationCompleted, userState);
        }
        
        private void OnSCAN_FOR_OTHEROperationCompleted(object arg) {
            if ((this.SCAN_FOR_OTHERCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SCAN_FOR_OTHERCompleted(this, new SCAN_FOR_OTHERCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/NEW_CONNECTION_SITE_TASKS1", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NEW_CONNECTION_SITE_TASKS1(string strOrderNo, string strCode_Group, string strTask_Code) {
            object[] results = this.Invoke("NEW_CONNECTION_SITE_TASKS1", new object[] {
                        strOrderNo,
                        strCode_Group,
                        strTask_Code});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NEW_CONNECTION_SITE_TASKS1Async(string strOrderNo, string strCode_Group, string strTask_Code) {
            this.NEW_CONNECTION_SITE_TASKS1Async(strOrderNo, strCode_Group, strTask_Code, null);
        }
        
        /// <remarks/>
        public void NEW_CONNECTION_SITE_TASKS1Async(string strOrderNo, string strCode_Group, string strTask_Code, object userState) {
            if ((this.NEW_CONNECTION_SITE_TASKS1OperationCompleted == null)) {
                this.NEW_CONNECTION_SITE_TASKS1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnNEW_CONNECTION_SITE_TASKS1OperationCompleted);
            }
            this.InvokeAsync("NEW_CONNECTION_SITE_TASKS1", new object[] {
                        strOrderNo,
                        strCode_Group,
                        strTask_Code}, this.NEW_CONNECTION_SITE_TASKS1OperationCompleted, userState);
        }
        
        private void OnNEW_CONNECTION_SITE_TASKS1OperationCompleted(object arg) {
            if ((this.NEW_CONNECTION_SITE_TASKS1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NEW_CONNECTION_SITE_TASKS1Completed(this, new NEW_CONNECTION_SITE_TASKS1CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/NEW_CONNECTION_SITE_SIGN_IMG", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NEW_CONNECTION_SITE_SIGN_IMG(string strOrderNo, string strsign_Img, string building_img1, string building_img2) {
            object[] results = this.Invoke("NEW_CONNECTION_SITE_SIGN_IMG", new object[] {
                        strOrderNo,
                        strsign_Img,
                        building_img1,
                        building_img2});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NEW_CONNECTION_SITE_SIGN_IMGAsync(string strOrderNo, string strsign_Img, string building_img1, string building_img2) {
            this.NEW_CONNECTION_SITE_SIGN_IMGAsync(strOrderNo, strsign_Img, building_img1, building_img2, null);
        }
        
        /// <remarks/>
        public void NEW_CONNECTION_SITE_SIGN_IMGAsync(string strOrderNo, string strsign_Img, string building_img1, string building_img2, object userState) {
            if ((this.NEW_CONNECTION_SITE_SIGN_IMGOperationCompleted == null)) {
                this.NEW_CONNECTION_SITE_SIGN_IMGOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNEW_CONNECTION_SITE_SIGN_IMGOperationCompleted);
            }
            this.InvokeAsync("NEW_CONNECTION_SITE_SIGN_IMG", new object[] {
                        strOrderNo,
                        strsign_Img,
                        building_img1,
                        building_img2}, this.NEW_CONNECTION_SITE_SIGN_IMGOperationCompleted, userState);
        }
        
        private void OnNEW_CONNECTION_SITE_SIGN_IMGOperationCompleted(object arg) {
            if ((this.NEW_CONNECTION_SITE_SIGN_IMGCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NEW_CONNECTION_SITE_SIGN_IMGCompleted(this, new NEW_CONNECTION_SITE_SIGN_IMGCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/NEW_CONNECTION_pole_TF_RC_Premises", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NEW_CONNECTION_pole_TF_RC_Premises(string strOrderNo, string strPole_Img, string strTF_Img, string strRC_Premises_Img) {
            object[] results = this.Invoke("NEW_CONNECTION_pole_TF_RC_Premises", new object[] {
                        strOrderNo,
                        strPole_Img,
                        strTF_Img,
                        strRC_Premises_Img});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NEW_CONNECTION_pole_TF_RC_PremisesAsync(string strOrderNo, string strPole_Img, string strTF_Img, string strRC_Premises_Img) {
            this.NEW_CONNECTION_pole_TF_RC_PremisesAsync(strOrderNo, strPole_Img, strTF_Img, strRC_Premises_Img, null);
        }
        
        /// <remarks/>
        public void NEW_CONNECTION_pole_TF_RC_PremisesAsync(string strOrderNo, string strPole_Img, string strTF_Img, string strRC_Premises_Img, object userState) {
            if ((this.NEW_CONNECTION_pole_TF_RC_PremisesOperationCompleted == null)) {
                this.NEW_CONNECTION_pole_TF_RC_PremisesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNEW_CONNECTION_pole_TF_RC_PremisesOperationCompleted);
            }
            this.InvokeAsync("NEW_CONNECTION_pole_TF_RC_Premises", new object[] {
                        strOrderNo,
                        strPole_Img,
                        strTF_Img,
                        strRC_Premises_Img}, this.NEW_CONNECTION_pole_TF_RC_PremisesOperationCompleted, userState);
        }
        
        private void OnNEW_CONNECTION_pole_TF_RC_PremisesOperationCompleted(object arg) {
            if ((this.NEW_CONNECTION_pole_TF_RC_PremisesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NEW_CONNECTION_pole_TF_RC_PremisesCompleted(this, new NEW_CONNECTION_pole_TF_RC_PremisesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/NEW_CONNECTION_pole_TF_RC_Premises_KCC", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool NEW_CONNECTION_pole_TF_RC_Premises_KCC(string strOrderNo, string strPole_Img, string strTF_Img, string strRC_Premises_Img, string strOtherImg2, string strOtherImg3, string strOtherImg4) {
            object[] results = this.Invoke("NEW_CONNECTION_pole_TF_RC_Premises_KCC", new object[] {
                        strOrderNo,
                        strPole_Img,
                        strTF_Img,
                        strRC_Premises_Img,
                        strOtherImg2,
                        strOtherImg3,
                        strOtherImg4});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void NEW_CONNECTION_pole_TF_RC_Premises_KCCAsync(string strOrderNo, string strPole_Img, string strTF_Img, string strRC_Premises_Img, string strOtherImg2, string strOtherImg3, string strOtherImg4) {
            this.NEW_CONNECTION_pole_TF_RC_Premises_KCCAsync(strOrderNo, strPole_Img, strTF_Img, strRC_Premises_Img, strOtherImg2, strOtherImg3, strOtherImg4, null);
        }
        
        /// <remarks/>
        public void NEW_CONNECTION_pole_TF_RC_Premises_KCCAsync(string strOrderNo, string strPole_Img, string strTF_Img, string strRC_Premises_Img, string strOtherImg2, string strOtherImg3, string strOtherImg4, object userState) {
            if ((this.NEW_CONNECTION_pole_TF_RC_Premises_KCCOperationCompleted == null)) {
                this.NEW_CONNECTION_pole_TF_RC_Premises_KCCOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNEW_CONNECTION_pole_TF_RC_Premises_KCCOperationCompleted);
            }
            this.InvokeAsync("NEW_CONNECTION_pole_TF_RC_Premises_KCC", new object[] {
                        strOrderNo,
                        strPole_Img,
                        strTF_Img,
                        strRC_Premises_Img,
                        strOtherImg2,
                        strOtherImg3,
                        strOtherImg4}, this.NEW_CONNECTION_pole_TF_RC_Premises_KCCOperationCompleted, userState);
        }
        
        private void OnNEW_CONNECTION_pole_TF_RC_Premises_KCCOperationCompleted(object arg) {
            if ((this.NEW_CONNECTION_pole_TF_RC_Premises_KCCCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NEW_CONNECTION_pole_TF_RC_Premises_KCCCompleted(this, new NEW_CONNECTION_pole_TF_RC_Premises_KCCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/ISUSTD_USER", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable ISUSTD_USER(string strUser_Name, string strPassword, string strIMEI_No) {
            object[] results = this.Invoke("ISUSTD_USER", new object[] {
                        strUser_Name,
                        strPassword,
                        strIMEI_No});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void ISUSTD_USERAsync(string strUser_Name, string strPassword, string strIMEI_No) {
            this.ISUSTD_USERAsync(strUser_Name, strPassword, strIMEI_No, null);
        }
        
        /// <remarks/>
        public void ISUSTD_USERAsync(string strUser_Name, string strPassword, string strIMEI_No, object userState) {
            if ((this.ISUSTD_USEROperationCompleted == null)) {
                this.ISUSTD_USEROperationCompleted = new System.Threading.SendOrPostCallback(this.OnISUSTD_USEROperationCompleted);
            }
            this.InvokeAsync("ISUSTD_USER", new object[] {
                        strUser_Name,
                        strPassword,
                        strIMEI_No}, this.ISUSTD_USEROperationCompleted, userState);
        }
        
        private void OnISUSTD_USEROperationCompleted(object arg) {
            if ((this.ISUSTD_USERCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ISUSTD_USERCompleted(this, new ISUSTD_USERCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/DOCLIST", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DOCLIST(
                    string strOrderNo, 
                    string strC_001, 
                    string strC_002, 
                    string strC_003, 
                    string strC_004, 
                    string strC_005, 
                    string strC_006, 
                    string strC_007, 
                    string strC_008, 
                    string strC_009, 
                    string strC_010, 
                    string strC_011, 
                    string strC_012, 
                    string strC_013, 
                    string strC_014, 
                    string strC_015, 
                    string strC_016, 
                    string strC_017, 
                    string strC_018, 
                    string strC_019, 
                    string strC_020, 
                    string strC_021, 
                    string strC_022, 
                    string strC_023, 
                    string strC_024, 
                    string strC_025, 
                    string strC_026, 
                    string strC_027, 
                    string strC_028, 
                    string strC_029, 
                    string strC_030, 
                    string strC_031, 
                    string strC_032, 
                    string strC_033, 
                    string strC_034, 
                    string strC_035, 
                    string strC_036, 
                    string strC_037, 
                    string strC_038, 
                    string strC_039, 
                    string strC_040, 
                    string strC_041, 
                    string strC_070, 
                    string strsign_Img) {
            object[] results = this.Invoke("DOCLIST", new object[] {
                        strOrderNo,
                        strC_001,
                        strC_002,
                        strC_003,
                        strC_004,
                        strC_005,
                        strC_006,
                        strC_007,
                        strC_008,
                        strC_009,
                        strC_010,
                        strC_011,
                        strC_012,
                        strC_013,
                        strC_014,
                        strC_015,
                        strC_016,
                        strC_017,
                        strC_018,
                        strC_019,
                        strC_020,
                        strC_021,
                        strC_022,
                        strC_023,
                        strC_024,
                        strC_025,
                        strC_026,
                        strC_027,
                        strC_028,
                        strC_029,
                        strC_030,
                        strC_031,
                        strC_032,
                        strC_033,
                        strC_034,
                        strC_035,
                        strC_036,
                        strC_037,
                        strC_038,
                        strC_039,
                        strC_040,
                        strC_041,
                        strC_070,
                        strsign_Img});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DOCLISTAsync(
                    string strOrderNo, 
                    string strC_001, 
                    string strC_002, 
                    string strC_003, 
                    string strC_004, 
                    string strC_005, 
                    string strC_006, 
                    string strC_007, 
                    string strC_008, 
                    string strC_009, 
                    string strC_010, 
                    string strC_011, 
                    string strC_012, 
                    string strC_013, 
                    string strC_014, 
                    string strC_015, 
                    string strC_016, 
                    string strC_017, 
                    string strC_018, 
                    string strC_019, 
                    string strC_020, 
                    string strC_021, 
                    string strC_022, 
                    string strC_023, 
                    string strC_024, 
                    string strC_025, 
                    string strC_026, 
                    string strC_027, 
                    string strC_028, 
                    string strC_029, 
                    string strC_030, 
                    string strC_031, 
                    string strC_032, 
                    string strC_033, 
                    string strC_034, 
                    string strC_035, 
                    string strC_036, 
                    string strC_037, 
                    string strC_038, 
                    string strC_039, 
                    string strC_040, 
                    string strC_041, 
                    string strC_070, 
                    string strsign_Img) {
            this.DOCLISTAsync(strOrderNo, strC_001, strC_002, strC_003, strC_004, strC_005, strC_006, strC_007, strC_008, strC_009, strC_010, strC_011, strC_012, strC_013, strC_014, strC_015, strC_016, strC_017, strC_018, strC_019, strC_020, strC_021, strC_022, strC_023, strC_024, strC_025, strC_026, strC_027, strC_028, strC_029, strC_030, strC_031, strC_032, strC_033, strC_034, strC_035, strC_036, strC_037, strC_038, strC_039, strC_040, strC_041, strC_070, strsign_Img, null);
        }
        
        /// <remarks/>
        public void DOCLISTAsync(
                    string strOrderNo, 
                    string strC_001, 
                    string strC_002, 
                    string strC_003, 
                    string strC_004, 
                    string strC_005, 
                    string strC_006, 
                    string strC_007, 
                    string strC_008, 
                    string strC_009, 
                    string strC_010, 
                    string strC_011, 
                    string strC_012, 
                    string strC_013, 
                    string strC_014, 
                    string strC_015, 
                    string strC_016, 
                    string strC_017, 
                    string strC_018, 
                    string strC_019, 
                    string strC_020, 
                    string strC_021, 
                    string strC_022, 
                    string strC_023, 
                    string strC_024, 
                    string strC_025, 
                    string strC_026, 
                    string strC_027, 
                    string strC_028, 
                    string strC_029, 
                    string strC_030, 
                    string strC_031, 
                    string strC_032, 
                    string strC_033, 
                    string strC_034, 
                    string strC_035, 
                    string strC_036, 
                    string strC_037, 
                    string strC_038, 
                    string strC_039, 
                    string strC_040, 
                    string strC_041, 
                    string strC_070, 
                    string strsign_Img, 
                    object userState) {
            if ((this.DOCLISTOperationCompleted == null)) {
                this.DOCLISTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDOCLISTOperationCompleted);
            }
            this.InvokeAsync("DOCLIST", new object[] {
                        strOrderNo,
                        strC_001,
                        strC_002,
                        strC_003,
                        strC_004,
                        strC_005,
                        strC_006,
                        strC_007,
                        strC_008,
                        strC_009,
                        strC_010,
                        strC_011,
                        strC_012,
                        strC_013,
                        strC_014,
                        strC_015,
                        strC_016,
                        strC_017,
                        strC_018,
                        strC_019,
                        strC_020,
                        strC_021,
                        strC_022,
                        strC_023,
                        strC_024,
                        strC_025,
                        strC_026,
                        strC_027,
                        strC_028,
                        strC_029,
                        strC_030,
                        strC_031,
                        strC_032,
                        strC_033,
                        strC_034,
                        strC_035,
                        strC_036,
                        strC_037,
                        strC_038,
                        strC_039,
                        strC_040,
                        strC_041,
                        strC_070,
                        strsign_Img}, this.DOCLISTOperationCompleted, userState);
        }
        
        private void OnDOCLISTOperationCompleted(object arg) {
            if ((this.DOCLISTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DOCLISTCompleted(this, new DOCLISTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("UserCredentialsValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://10.125.88.80/DOCLIST_NEW", RequestNamespace="http://10.125.88.80/", ResponseNamespace="http://10.125.88.80/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DOCLIST_NEW(string strOrderNo, string strDocument_Type) {
            object[] results = this.Invoke("DOCLIST_NEW", new object[] {
                        strOrderNo,
                        strDocument_Type});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DOCLIST_NEWAsync(string strOrderNo, string strDocument_Type) {
            this.DOCLIST_NEWAsync(strOrderNo, strDocument_Type, null);
        }
        
        /// <remarks/>
        public void DOCLIST_NEWAsync(string strOrderNo, string strDocument_Type, object userState) {
            if ((this.DOCLIST_NEWOperationCompleted == null)) {
                this.DOCLIST_NEWOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDOCLIST_NEWOperationCompleted);
            }
            this.InvokeAsync("DOCLIST_NEW", new object[] {
                        strOrderNo,
                        strDocument_Type}, this.DOCLIST_NEWOperationCompleted, userState);
        }
        
        private void OnDOCLIST_NEWOperationCompleted(object arg) {
            if ((this.DOCLIST_NEWCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DOCLIST_NEWCompleted(this, new DOCLIST_NEWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.8.3752.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://10.125.88.80/")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://10.125.88.80/", IsNullable=false)]
    public partial class UserCredentials : System.Web.Services.Protocols.SoapHeader {
        
        private string userNameField;
        
        private string passwordField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string userName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string password {
            get {
                return this.passwordField;
            }
            set {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Seva_Insert_Data_Other_ConnectionCompletedEventHandler(object sender, Seva_Insert_Data_Other_ConnectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Seva_Insert_Data_Other_ConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Seva_Insert_Data_Other_ConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Z_BAPI_DSS_ISU_CA_DISPLAY_GISCompletedEventHandler(object sender, Z_BAPI_DSS_ISU_CA_DISPLAY_GISCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Z_BAPI_DSS_ISU_CA_DISPLAY_GISCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Z_BAPI_DSS_ISU_CA_DISPLAY_GISCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GET_METERDETAILSCompletedEventHandler(object sender, GET_METERDETAILSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GET_METERDETAILSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GET_METERDETAILSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMeterCA_DetailsCompletedEventHandler(object sender, GetMeterCA_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMeterCA_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMeterCA_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PowerThef_DivMasterCompletedEventHandler(object sender, PowerThef_DivMasterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PowerThef_DivMasterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PowerThef_DivMasterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GET_METER_CA_DETAILSCompletedEventHandler(object sender, GET_METER_CA_DETAILSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GET_METER_CA_DETAILSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GET_METER_CA_DETAILSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PowerThef_Insert_INPUTDataCompletedEventHandler(object sender, PowerThef_Insert_INPUTDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PowerThef_Insert_INPUTDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PowerThef_Insert_INPUTDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LeadStatus_PowerTheftMISCompletedEventHandler(object sender, LeadStatus_PowerTheftMISCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LeadStatus_PowerTheftMISCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LeadStatus_PowerTheftMISCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Mobile_PowerTheftMISCompletedEventHandler(object sender, Mobile_PowerTheftMISCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Mobile_PowerTheftMISCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Mobile_PowerTheftMISCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Mobile_PowerTheftMIS_SummaryCompletedEventHandler(object sender, Mobile_PowerTheftMIS_SummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Mobile_PowerTheftMIS_SummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Mobile_PowerTheftMIS_SummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ENF_Redem_RewardCompletedEventHandler(object sender, ENF_Redem_RewardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ENF_Redem_RewardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ENF_Redem_RewardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ENF_Reward_EarnedCompletedEventHandler(object sender, ENF_Reward_EarnedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ENF_Reward_EarnedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ENF_Reward_EarnedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PowerTheft_RegisterUserCompletedEventHandler(object sender, PowerTheft_RegisterUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PowerTheft_RegisterUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PowerTheft_RegisterUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PowerTheft_LoginFECompletedEventHandler(object sender, PowerTheft_LoginFECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PowerTheft_LoginFECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PowerTheft_LoginFECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void NewConnOTPRqstFrm_theftCompletedEventHandler(object sender, NewConnOTPRqstFrm_theftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewConnOTPRqstFrm_theftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewConnOTPRqstFrm_theftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PowerTheft_GetPasswordCompletedEventHandler(object sender, PowerTheft_GetPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PowerTheft_GetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PowerTheft_GetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void NewConnResendOTPVerifyFrm_theftCompletedEventHandler(object sender, NewConnResendOTPVerifyFrm_theftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewConnResendOTPVerifyFrm_theftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewConnResendOTPVerifyFrm_theftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void NewConnOTPVerifyFrm_theftCompletedEventHandler(object sender, NewConnOTPVerifyFrm_theftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewConnOTPVerifyFrm_theftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewConnOTPVerifyFrm_theftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void loginFE_theftCompletedEventHandler(object sender, loginFE_theftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class loginFE_theftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal loginFE_theftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void complaintSubmit_theftCompletedEventHandler(object sender, complaintSubmit_theftCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class complaintSubmit_theftCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal complaintSubmit_theftCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PowerThef_ResetPasswordCompletedEventHandler(object sender, PowerThef_ResetPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PowerThef_ResetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PowerThef_ResetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SK_HolidayList_NEWCompletedEventHandler(object sender, SK_HolidayList_NEWCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SK_HolidayList_NEWCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SK_HolidayList_NEWCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void PHOTOMETER_READINGCompletedEventHandler(object sender, PHOTOMETER_READINGCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PHOTOMETER_READINGCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PHOTOMETER_READINGCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Z_ZBAPI_FETCH_ENFCACompletedEventHandler(object sender, Z_ZBAPI_FETCH_ENFCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Z_ZBAPI_FETCH_ENFCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Z_ZBAPI_FETCH_ENFCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BAPI_MTRREADDOC_GETLISTCompletedEventHandler(object sender, BAPI_MTRREADDOC_GETLISTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BAPI_MTRREADDOC_GETLISTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BAPI_MTRREADDOC_GETLISTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ZBAPI_CS_FETCH_LOADCompletedEventHandler(object sender, ZBAPI_CS_FETCH_LOADCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZBAPI_CS_FETCH_LOADCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZBAPI_CS_FETCH_LOADCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void VSS_GetRequestType_DeptpartmentWiseCompletedEventHandler(object sender, VSS_GetRequestType_DeptpartmentWiseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VSS_GetRequestType_DeptpartmentWiseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VSS_GetRequestType_DeptpartmentWiseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void VSS_GetAssginDetails_CircleDivCompDeptWiseCompletedEventHandler(object sender, VSS_GetAssginDetails_CircleDivCompDeptWiseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VSS_GetAssginDetails_CircleDivCompDeptWiseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VSS_GetAssginDetails_CircleDivCompDeptWiseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void VSS_Insert_Complaint_DataCompletedEventHandler(object sender, VSS_Insert_Complaint_DataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VSS_Insert_Complaint_DataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VSS_Insert_Complaint_DataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void VSS_Update_Complaint_DataCompletedEventHandler(object sender, VSS_Update_Complaint_DataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VSS_Update_Complaint_DataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VSS_Update_Complaint_DataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void VSS_GetComplaintDetails_CompWiseCompletedEventHandler(object sender, VSS_GetComplaintDetails_CompWiseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VSS_GetComplaintDetails_CompWiseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VSS_GetComplaintDetails_CompWiseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void VSS_GetRemarksDetails_ReqWiseCompletedEventHandler(object sender, VSS_GetRemarksDetails_ReqWiseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VSS_GetRemarksDetails_ReqWiseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VSS_GetRemarksDetails_ReqWiseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SK_RegDistMsgTxtCompletedEventHandler(object sender, SK_RegDistMsgTxtCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SK_RegDistMsgTxtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SK_RegDistMsgTxtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SK_HolidayListCompletedEventHandler(object sender, SK_HolidayListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SK_HolidayListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SK_HolidayListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SK_TimeSlotListCompletedEventHandler(object sender, SK_TimeSlotListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SK_TimeSlotListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SK_TimeSlotListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SK_RegDistStatusCompletedEventHandler(object sender, SK_RegDistStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SK_RegDistStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SK_RegDistStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SK_RegOrderNoRatingCompletedEventHandler(object sender, SK_RegOrderNoRatingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SK_RegOrderNoRatingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SK_RegOrderNoRatingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LR_Scheme_DivisionWiseCompletedEventHandler(object sender, LR_Scheme_DivisionWiseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LR_Scheme_DivisionWiseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LR_Scheme_DivisionWiseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LR_Scheme_Vendor_UserCompletedEventHandler(object sender, LR_Scheme_Vendor_UserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LR_Scheme_Vendor_UserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LR_Scheme_Vendor_UserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LR_Vendor_DivisionWiseCompletedEventHandler(object sender, LR_Vendor_DivisionWiseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LR_Vendor_DivisionWiseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LR_Vendor_DivisionWiseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LR_Insert_Scheme_Vendor_MobDataCompletedEventHandler(object sender, LR_Insert_Scheme_Vendor_MobDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LR_Insert_Scheme_Vendor_MobDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LR_Insert_Scheme_Vendor_MobDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LR_Insert_ActivityType_MobDataCompletedEventHandler(object sender, LR_Insert_ActivityType_MobDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LR_Insert_ActivityType_MobDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LR_Insert_ActivityType_MobDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LR_Dashboard_DateWiseCompletedEventHandler(object sender, LR_Dashboard_DateWiseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LR_Dashboard_DateWiseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LR_Dashboard_DateWiseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LR_Dashboard_DateDivisionWiseCompletedEventHandler(object sender, LR_Dashboard_DateDivisionWiseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LR_Dashboard_DateDivisionWiseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LR_Dashboard_DateDivisionWiseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LR_Dashboard_DateSubDivisionWiseCompletedEventHandler(object sender, LR_Dashboard_DateSubDivisionWiseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LR_Dashboard_DateSubDivisionWiseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LR_Dashboard_DateSubDivisionWiseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LR_Surv_QC_Insert_NewCompletedEventHandler(object sender, LR_Surv_QC_Insert_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LR_Surv_QC_Insert_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LR_Surv_QC_Insert_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetOutageAlertRPLCompletedEventHandler(object sender, GetOutageAlertRPLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOutageAlertRPLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOutageAlertRPLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SplyCode_DefyLtrCompletedEventHandler(object sender, SplyCode_DefyLtrCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SplyCode_DefyLtrCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SplyCode_DefyLtrCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DOCLIST_NEW_UPDATE_STSCompletedEventHandler(object sender, DOCLIST_NEW_UPDATE_STSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DOCLIST_NEW_UPDATE_STSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DOCLIST_NEW_UPDATE_STSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Deficiency_DocList_UpdateCompletedEventHandler(object sender, Deficiency_DocList_UpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Deficiency_DocList_UpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Deficiency_DocList_UpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SUPPLY_CODE_NEW_CONN_IMGCompletedEventHandler(object sender, SUPPLY_CODE_NEW_CONN_IMGCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SUPPLY_CODE_NEW_CONN_IMGCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SUPPLY_CODE_NEW_CONN_IMGCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SUPPLY_CODE_NEW_CONN_DATACompletedEventHandler(object sender, SUPPLY_CODE_NEW_CONN_DATACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SUPPLY_CODE_NEW_CONN_DATACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SUPPLY_CODE_NEW_CONN_DATACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LR_Surveillance_Insert_NewCompletedEventHandler(object sender, LR_Surveillance_Insert_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LR_Surveillance_Insert_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LR_Surveillance_Insert_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LR_Surv_ATR_InsertCompletedEventHandler(object sender, LR_Surv_ATR_InsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LR_Surv_ATR_InsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LR_Surv_ATR_InsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LR_ObservationList_NewCompletedEventHandler(object sender, LR_ObservationList_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LR_ObservationList_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LR_ObservationList_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_GetUserLoginDetailsCompletedEventHandler(object sender, MCR_GetUserLoginDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_GetUserLoginDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_GetUserLoginDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_GetUserMCR_INPUT_DTCompletedEventHandler(object sender, MCR_GetUserMCR_INPUT_DTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_GetUserMCR_INPUT_DTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_GetUserMCR_INPUT_DTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_GetUserMCR_INPUT_DTNEWCompletedEventHandler(object sender, MCR_GetUserMCR_INPUT_DTNEWCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_GetUserMCR_INPUT_DTNEWCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_GetUserMCR_INPUT_DTNEWCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_Insert_INPUT_DataCompletedEventHandler(object sender, MCR_Insert_INPUT_DataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_Insert_INPUT_DataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_Insert_INPUT_DataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_Insert_INPUT_DataEXTRA7CompletedEventHandler(object sender, MCR_Insert_INPUT_DataEXTRA7CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_Insert_INPUT_DataEXTRA7CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_Insert_INPUT_DataEXTRA7CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_Insert_INPUT_DataNEWCompletedEventHandler(object sender, MCR_Insert_INPUT_DataNEWCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_Insert_INPUT_DataNEWCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_Insert_INPUT_DataNEWCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_ValidateSEALCompletedEventHandler(object sender, MCR_ValidateSEALCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_ValidateSEALCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_ValidateSEALCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_Create_Installer_DataCompletedEventHandler(object sender, MCR_Create_Installer_DataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_Create_Installer_DataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_Create_Installer_DataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_GetInstaller_DataCompletedEventHandler(object sender, MCR_GetInstaller_DataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_GetInstaller_DataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_GetInstaller_DataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_OrderAssignCompletedEventHandler(object sender, MCR_OrderAssignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_OrderAssignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_OrderAssignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_Password_UpdateCompletedEventHandler(object sender, MCR_Password_UpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_Password_UpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_Password_UpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_GetSeal_DetailsCompletedEventHandler(object sender, MCR_GetSeal_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_GetSeal_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_GetSeal_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_GetMeter_DetailsCompletedEventHandler(object sender, MCR_GetMeter_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_GetMeter_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_GetMeter_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_OrderCancelCompletedEventHandler(object sender, MCR_OrderCancelCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_OrderCancelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_OrderCancelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_Insert_INPUT_Data_RVCompletedEventHandler(object sender, MCR_Insert_INPUT_Data_RVCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_Insert_INPUT_Data_RVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_Insert_INPUT_Data_RVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_Insert_INPUT_Data_Img_RVCompletedEventHandler(object sender, MCR_Insert_INPUT_Data_Img_RVCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_Insert_INPUT_Data_Img_RVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_Insert_INPUT_Data_Img_RVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_Insert_INPUT_Data_RV_NEWCompletedEventHandler(object sender, MCR_Insert_INPUT_Data_RV_NEWCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_Insert_INPUT_Data_RV_NEWCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_Insert_INPUT_Data_RV_NEWCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_Insert_INPUT_Data_RV_NEW1CompletedEventHandler(object sender, MCR_Insert_INPUT_Data_RV_NEW1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_Insert_INPUT_Data_RV_NEW1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_Insert_INPUT_Data_RV_NEW1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_GetCancelRmkDetailsCompletedEventHandler(object sender, MCR_GetCancelRmkDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_GetCancelRmkDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_GetCancelRmkDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_GetSubDiv_DivisionCompletedEventHandler(object sender, MCR_GetSubDiv_DivisionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_GetSubDiv_DivisionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_GetSubDiv_DivisionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void MCR_GetUserMCR_INPUT_COMP_DTCompletedEventHandler(object sender, MCR_GetUserMCR_INPUT_COMP_DTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MCR_GetUserMCR_INPUT_COMP_DTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MCR_GetUserMCR_INPUT_COMP_DTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RecServices_CategoryCompletedEventHandler(object sender, RecServices_CategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecServices_CategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecServices_CategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RecServices_Amount_BucketCompletedEventHandler(object sender, RecServices_Amount_BucketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecServices_Amount_BucketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecServices_Amount_BucketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RecServices_Aging_BucketCompletedEventHandler(object sender, RecServices_Aging_BucketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecServices_Aging_BucketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecServices_Aging_BucketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RecServices_Account_ClassCompletedEventHandler(object sender, RecServices_Account_ClassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecServices_Account_ClassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecServices_Account_ClassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RecServices_ATR_StatusCompletedEventHandler(object sender, RecServices_ATR_StatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecServices_ATR_StatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecServices_ATR_StatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RecAllocDefltrsCompletedEventHandler(object sender, RecAllocDefltrsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecAllocDefltrsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecAllocDefltrsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void searchDefltrsCompletedEventHandler(object sender, searchDefltrsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class searchDefltrsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal searchDefltrsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getPaymentCompletedEventHandler(object sender, getPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void insertATRCompletedEventHandler(object sender, insertATRCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class insertATRCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal insertATRCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DetailofMISCompletedEventHandler(object sender, DetailofMISCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DetailofMISCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DetailofMISCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void loginFECompletedEventHandler(object sender, loginFECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class loginFECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal loginFECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void changePasswordCompletedEventHandler(object sender, changePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class changePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal changePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void insertLogCompletedEventHandler(object sender, insertLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class insertLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal insertLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RecServices_NewCompletedEventHandler(object sender, RecServices_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecServices_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecServices_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ZBAPI_UPDATE_TNOCompletedEventHandler(object sender, ZBAPI_UPDATE_TNOCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZBAPI_UPDATE_TNOCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZBAPI_UPDATE_TNOCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ZBAPI_CNTAPP_DETAILMOBCompletedEventHandler(object sender, ZBAPI_CNTAPP_DETAILMOBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZBAPI_CNTAPP_DETAILMOBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZBAPI_CNTAPP_DETAILMOBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ZBAPI_CREATESO_POSTCompletedEventHandler(object sender, ZBAPI_CREATESO_POSTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZBAPI_CREATESO_POSTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZBAPI_CREATESO_POSTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LR_Scheme_DivSchmMappingCompletedEventHandler(object sender, LR_Scheme_DivSchmMappingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LR_Scheme_DivSchmMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LR_Scheme_DivSchmMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LR_Scheme_AllDivSchmMappingCompletedEventHandler(object sender, LR_Scheme_AllDivSchmMappingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LR_Scheme_AllDivSchmMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LR_Scheme_AllDivSchmMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LR_NewActivityModuleSchemeMISCompletedEventHandler(object sender, LR_NewActivityModuleSchemeMISCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LR_NewActivityModuleSchemeMISCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LR_NewActivityModuleSchemeMISCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LR_NewSurvellanceCircleDivMISCompletedEventHandler(object sender, LR_NewSurvellanceCircleDivMISCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LR_NewSurvellanceCircleDivMISCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LR_NewSurvellanceCircleDivMISCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void LR_NEW_QC_MISCompletedEventHandler(object sender, LR_NEW_QC_MISCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LR_NEW_QC_MISCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LR_NEW_QC_MISCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Seva_get_Login_DetailsCompletedEventHandler(object sender, Seva_get_Login_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Seva_get_Login_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Seva_get_Login_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Seva_change_PasswordCompletedEventHandler(object sender, Seva_change_PasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Seva_change_PasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Seva_change_PasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Seva_get_Order_DetailsCompletedEventHandler(object sender, Seva_get_Order_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Seva_get_Order_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Seva_get_Order_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Seva_get_Order_Wise_Complete_DetailsCompletedEventHandler(object sender, Seva_get_Order_Wise_Complete_DetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Seva_get_Order_Wise_Complete_DetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Seva_get_Order_Wise_Complete_DetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Seva_Insert_Data_New_ConnCompletedEventHandler(object sender, Seva_Insert_Data_New_ConnCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Seva_Insert_Data_New_ConnCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Seva_Insert_Data_New_ConnCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Insert_DOCLIST_signCompletedEventHandler(object sender, Insert_DOCLIST_signCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_DOCLIST_signCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_DOCLIST_signCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Insert_CA_building_imgCompletedEventHandler(object sender, Insert_CA_building_imgCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_CA_building_imgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_CA_building_imgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Insert_IR_DATACompletedEventHandler(object sender, Insert_IR_DATACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_IR_DATACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_IR_DATACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UPDATE_IR_DATACompletedEventHandler(object sender, UPDATE_IR_DATACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UPDATE_IR_DATACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UPDATE_IR_DATACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Insert_CF_DATACompletedEventHandler(object sender, Insert_CF_DATACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_CF_DATACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_CF_DATACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UPDATE_CF_DATACompletedEventHandler(object sender, UPDATE_CF_DATACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UPDATE_CF_DATACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UPDATE_CF_DATACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Insert_RECF_DATACompletedEventHandler(object sender, Insert_RECF_DATACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Insert_RECF_DATACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Insert_RECF_DATACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GCMRegistrationCompletedEventHandler(object sender, GCMRegistrationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GCMRegistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GCMRegistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GCMUserMsgLogCompletedEventHandler(object sender, GCMUserMsgLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GCMUserMsgLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GCMUserMsgLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GCMUpdateMsgLogCompletedEventHandler(object sender, GCMUpdateMsgLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GCMUpdateMsgLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GCMUpdateMsgLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GCMCheckRegistrationLogCompletedEventHandler(object sender, GCMCheckRegistrationLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GCMCheckRegistrationLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GCMCheckRegistrationLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void RegisterSmartAppComplaintCompletedEventHandler(object sender, RegisterSmartAppComplaintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterSmartAppComplaintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterSmartAppComplaintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updatebreakdownCompletedEventHandler(object sender, updatebreakdownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updatebreakdownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updatebreakdownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetComplaintStatusCompletedEventHandler(object sender, GetComplaintStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetComplaintStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetComplaintStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetComplaintDetailsCACompletedEventHandler(object sender, GetComplaintDetailsCACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetComplaintDetailsCACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetComplaintDetailsCACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetValidateUserCompletedEventHandler(object sender, GetValidateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetValidateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetValidateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void NewRegistration_ARDCompletedEventHandler(object sender, NewRegistration_ARDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewRegistration_ARDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewRegistration_ARDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPasswordSMSCompletedEventHandler(object sender, GetPasswordSMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPasswordSMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPasswordSMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void EMP_UserDetailsCompletedEventHandler(object sender, EMP_UserDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EMP_UserDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EMP_UserDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_GetAssignedComplaintsToTeamCompletedEventHandler(object sender, ONM_GetAssignedComplaintsToTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_GetAssignedComplaintsToTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_GetAssignedComplaintsToTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_UpdateComplaintResolutiontimeCompletedEventHandler(object sender, ONM_UpdateComplaintResolutiontimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_UpdateComplaintResolutiontimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_UpdateComplaintResolutiontimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_GetComplaintStatusCompletedEventHandler(object sender, ONM_GetComplaintStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_GetComplaintStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_GetComplaintStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CloseComplaintSigCompletedEventHandler(object sender, CloseComplaintSigCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CloseComplaintSigCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CloseComplaintSigCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void UpdateIMEILocationCompletedEventHandler(object sender, UpdateIMEILocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateIMEILocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateIMEILocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_LINEMEN_LOGINCompletedEventHandler(object sender, ONM_LINEMEN_LOGINCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_LINEMEN_LOGINCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_LINEMEN_LOGINCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_LINEMEN_LOGOUTCompletedEventHandler(object sender, ONM_LINEMEN_LOGOUTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_LINEMEN_LOGOUTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_LINEMEN_LOGOUTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_COMPLAINT_DETAILCompletedEventHandler(object sender, ONM_COMPLAINT_DETAILCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_COMPLAINT_DETAILCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_COMPLAINT_DETAILCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void onm_mark_readCompletedEventHandler(object sender, onm_mark_readCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class onm_mark_readCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal onm_mark_readCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void update_onm_complaintCompletedEventHandler(object sender, update_onm_complaintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class update_onm_complaintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal update_onm_complaintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_UpdatebreakdowndetailsHourCompletedEventHandler(object sender, ONM_UpdatebreakdowndetailsHourCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_UpdatebreakdowndetailsHourCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_UpdatebreakdowndetailsHourCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetbreakdowndetailsIMEICompletedEventHandler(object sender, GetbreakdowndetailsIMEICompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetbreakdowndetailsIMEICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetbreakdowndetailsIMEICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_updatebreakdownreadstatsuCompletedEventHandler(object sender, ONM_updatebreakdownreadstatsuCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_updatebreakdownreadstatsuCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_updatebreakdownreadstatsuCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getbreakdownstatusBDCompletedEventHandler(object sender, getbreakdownstatusBDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getbreakdownstatusBDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getbreakdownstatusBDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_getbreakdownbackfeedlistCompletedEventHandler(object sender, ONM_getbreakdownbackfeedlistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_getbreakdownbackfeedlistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_getbreakdownbackfeedlistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_updatebreakdownbackfeedCompletedEventHandler(object sender, ONM_updatebreakdownbackfeedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_updatebreakdownbackfeedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_updatebreakdownbackfeedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_CloseCableDetailsCompletedEventHandler(object sender, ONM_CloseCableDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_CloseCableDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_CloseCableDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_BurnMeterUpdateCompletedEventHandler(object sender, ONM_BurnMeterUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_BurnMeterUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_BurnMeterUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_Get_Meter_OComp_ListCompletedEventHandler(object sender, ONM_Get_Meter_OComp_ListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_Get_Meter_OComp_ListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_Get_Meter_OComp_ListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_Get_Meter_CComp_ListCompletedEventHandler(object sender, ONM_Get_Meter_CComp_ListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_Get_Meter_CComp_ListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_Get_Meter_CComp_ListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_Dashboard_ReportCompletedEventHandler(object sender, ONM_Dashboard_ReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_Dashboard_ReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_Dashboard_ReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_Dashboard_OnSelectCompletedEventHandler(object sender, ONM_Dashboard_OnSelectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_Dashboard_OnSelectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_Dashboard_OnSelectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_Dashboard_Report_OldCompletedEventHandler(object sender, ONM_Dashboard_Report_OldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_Dashboard_Report_OldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_Dashboard_Report_OldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_Dashboard_OnSelect_OldCompletedEventHandler(object sender, ONM_Dashboard_OnSelect_OldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_Dashboard_OnSelect_OldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_Dashboard_OnSelect_OldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Test_ApplicationCompletedEventHandler(object sender, Test_ApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Test_ApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Test_ApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_NCC_RegistrationCompletedEventHandler(object sender, ONM_NCC_RegistrationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_NCC_RegistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_NCC_RegistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_Area_CodeCompletedEventHandler(object sender, ONM_Area_CodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_Area_CodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_Area_CodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_LOGIN_USERCompletedEventHandler(object sender, ONM_LOGIN_USERCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_LOGIN_USERCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_LOGIN_USERCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_LINEMEN_USER_LISTCompletedEventHandler(object sender, ONM_LINEMEN_USER_LISTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_LINEMEN_USER_LISTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_LINEMEN_USER_LISTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_Get_Complaint_ListCompletedEventHandler(object sender, ONM_Get_Complaint_ListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_Get_Complaint_ListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_Get_Complaint_ListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_Allocate_ComplaintCompletedEventHandler(object sender, ONM_Allocate_ComplaintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_Allocate_ComplaintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_Allocate_ComplaintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BD_Get_Complaint_ListCompletedEventHandler(object sender, BD_Get_Complaint_ListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BD_Get_Complaint_ListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BD_Get_Complaint_ListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_Get_UserDevice_ListCompletedEventHandler(object sender, ONM_Get_UserDevice_ListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_Get_UserDevice_ListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_Get_UserDevice_ListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_Get_Device_Name_ListCompletedEventHandler(object sender, ONM_Get_Device_Name_ListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_Get_Device_Name_ListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_Get_Device_Name_ListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_Update_UserDevice_ListCompletedEventHandler(object sender, ONM_Update_UserDevice_ListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_Update_UserDevice_ListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_Update_UserDevice_ListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Street_Light_AreaListCompletedEventHandler(object sender, Street_Light_AreaListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Street_Light_AreaListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Street_Light_AreaListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Street_Light_AreaList_AllCompletedEventHandler(object sender, Street_Light_AreaList_AllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Street_Light_AreaList_AllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Street_Light_AreaList_AllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Street_Light_RegistrationCompletedEventHandler(object sender, Street_Light_RegistrationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Street_Light_RegistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Street_Light_RegistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SL_Complaint_ListCompletedEventHandler(object sender, SL_Complaint_ListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SL_Complaint_ListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SL_Complaint_ListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SL_Complaint_AllocationCompletedEventHandler(object sender, SL_Complaint_AllocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SL_Complaint_AllocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SL_Complaint_AllocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SL_Vendor_ListCompletedEventHandler(object sender, SL_Vendor_ListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SL_Vendor_ListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SL_Vendor_ListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Emergency_RegistrationCompletedEventHandler(object sender, Emergency_RegistrationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Emergency_RegistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Emergency_RegistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void IMSGLoginUserCompletedEventHandler(object sender, IMSGLoginUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IMSGLoginUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IMSGLoginUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void IMSGCompanyMstCompletedEventHandler(object sender, IMSGCompanyMstCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IMSGCompanyMstCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IMSGCompanyMstCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void IMSGCompGrpMstCompletedEventHandler(object sender, IMSGCompGrpMstCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IMSGCompGrpMstCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IMSGCompGrpMstCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void IMSGCompSubGrpMstCompletedEventHandler(object sender, IMSGCompSubGrpMstCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IMSGCompSubGrpMstCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IMSGCompSubGrpMstCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void IMsgGCMRegistrationCompletedEventHandler(object sender, IMsgGCMRegistrationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IMsgGCMRegistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IMsgGCMRegistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void IMsgGCMRegIdsCompletedEventHandler(object sender, IMsgGCMRegIdsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IMsgGCMRegIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IMsgGCMRegIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void IMsgUpdateLogCompletedEventHandler(object sender, IMsgUpdateLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IMsgUpdateLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IMsgUpdateLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void IMSGMsgSendCompletedEventHandler(object sender, IMSGMsgSendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IMSGMsgSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IMSGMsgSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void IMSGMsgTextTBSendCompletedEventHandler(object sender, IMSGMsgTextTBSendCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IMSGMsgTextTBSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IMSGMsgTextTBSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void IMsgLoadEmployeesCompletedEventHandler(object sender, IMsgLoadEmployeesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IMsgLoadEmployeesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IMsgLoadEmployeesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void IMSGMsgChatRoomCompletedEventHandler(object sender, IMSGMsgChatRoomCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IMSGMsgChatRoomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IMSGMsgChatRoomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void TTS_LOGIN_MOBILECompletedEventHandler(object sender, TTS_LOGIN_MOBILECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TTS_LOGIN_MOBILECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TTS_LOGIN_MOBILECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void TMS_TaskAllocationAction_DataCompletedEventHandler(object sender, TMS_TaskAllocationAction_DataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TMS_TaskAllocationAction_DataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TMS_TaskAllocationAction_DataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void TTS_TASK_ACTIONCompletedEventHandler(object sender, TTS_TASK_ACTIONCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TTS_TASK_ACTIONCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TTS_TASK_ACTIONCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BDSDTotalCountsCompletedEventHandler(object sender, BDSDTotalCountsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BDSDTotalCountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BDSDTotalCountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BDSDHTLTTotalCountsCompletedEventHandler(object sender, BDSDHTLTTotalCountsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BDSDHTLTTotalCountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BDSDHTLTTotalCountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BDSDHTLTDetailsOnTotalCompletedEventHandler(object sender, BDSDHTLTDetailsOnTotalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BDSDHTLTDetailsOnTotalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BDSDHTLTDetailsOnTotalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BDSDHTLTOnSlctAreaListCompletedEventHandler(object sender, BDSDHTLTOnSlctAreaListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BDSDHTLTOnSlctAreaListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BDSDHTLTOnSlctAreaListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BDSDHTLTOnAreaListConsCountCompletedEventHandler(object sender, BDSDHTLTOnAreaListConsCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BDSDHTLTOnAreaListConsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BDSDHTLTOnAreaListConsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BDSDContactListCompletedEventHandler(object sender, BDSDContactListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BDSDContactListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BDSDContactListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BDSDSMSCountListCompletedEventHandler(object sender, BDSDSMSCountListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BDSDSMSCountListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BDSDSMSCountListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_getbreakdownbackfeedlist_NewCompletedEventHandler(object sender, ONM_getbreakdownbackfeedlist_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_getbreakdownbackfeedlist_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_getbreakdownbackfeedlist_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void VSS_GetCompliantCentre_DivisionWiseCompletedEventHandler(object sender, VSS_GetCompliantCentre_DivisionWiseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VSS_GetCompliantCentre_DivisionWiseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VSS_GetCompliantCentre_DivisionWiseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Get_Lat_LongCompletedEventHandler(object sender, Get_Lat_LongCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_Lat_LongCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_Lat_LongCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Get_Lat_Long_AndroidCompletedEventHandler(object sender, Get_Lat_Long_AndroidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get_Lat_Long_AndroidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get_Lat_Long_AndroidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ZBAPI_EDISTRICTCompletedEventHandler(object sender, ZBAPI_EDISTRICTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZBAPI_EDISTRICTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZBAPI_EDISTRICTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Z_BAPI_DSS_ISU_CA_DISPLAYCompletedEventHandler(object sender, Z_BAPI_DSS_ISU_CA_DISPLAYCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Z_BAPI_DSS_ISU_CA_DISPLAYCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Z_BAPI_DSS_ISU_CA_DISPLAYCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Z_BAPI_DSS_ISU_CA_DISPLAY_SAPCompletedEventHandler(object sender, Z_BAPI_DSS_ISU_CA_DISPLAY_SAPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Z_BAPI_DSS_ISU_CA_DISPLAY_SAPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Z_BAPI_DSS_ISU_CA_DISPLAY_SAPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Z_BAPI_DSS_ISU_CA_DISPLAY_RCMCompletedEventHandler(object sender, Z_BAPI_DSS_ISU_CA_DISPLAY_RCMCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Z_BAPI_DSS_ISU_CA_DISPLAY_RCMCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Z_BAPI_DSS_ISU_CA_DISPLAY_RCMCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ONM_CloseMeterComplaintCompletedEventHandler(object sender, ONM_CloseMeterComplaintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ONM_CloseMeterComplaintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ONM_CloseMeterComplaintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ZBAPI_ONLINE_BILL_PDF_V2CompletedEventHandler(object sender, ZBAPI_ONLINE_BILL_PDF_V2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZBAPI_ONLINE_BILL_PDF_V2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZBAPI_ONLINE_BILL_PDF_V2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ZBAPI_ONLINE_BILL_PDFCompletedEventHandler(object sender, ZBAPI_ONLINE_BILL_PDFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZBAPI_ONLINE_BILL_PDFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZBAPI_ONLINE_BILL_PDFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ZBAPI_ONLINE_BILL_PDF_MSCompletedEventHandler(object sender, ZBAPI_ONLINE_BILL_PDF_MSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZBAPI_ONLINE_BILL_PDF_MSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZBAPI_ONLINE_BILL_PDF_MSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ZBAPI_ONLINE_BILL_PDF_WACompletedEventHandler(object sender, ZBAPI_ONLINE_BILL_PDF_WACompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZBAPI_ONLINE_BILL_PDF_WACompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZBAPI_ONLINE_BILL_PDF_WACompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ZBAPI_DEMAND_NOTE_ONLINECompletedEventHandler(object sender, ZBAPI_DEMAND_NOTE_ONLINECompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZBAPI_DEMAND_NOTE_ONLINECompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZBAPI_DEMAND_NOTE_ONLINECompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetAssignedComplaintsToTeamCompletedEventHandler(object sender, GetAssignedComplaintsToTeamCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssignedComplaintsToTeamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssignedComplaintsToTeamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetClosingRemarksFromCategoryCompletedEventHandler(object sender, GetClosingRemarksFromCategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetClosingRemarksFromCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetClosingRemarksFromCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CloseComplaintCompletedEventHandler(object sender, CloseComplaintCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CloseComplaintCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CloseComplaintCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Z_BAPI_ZDSS_WEB_LINKCompletedEventHandler(object sender, Z_BAPI_ZDSS_WEB_LINKCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Z_BAPI_ZDSS_WEB_LINKCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Z_BAPI_ZDSS_WEB_LINKCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void NewConnOTPRqstFrmCompletedEventHandler(object sender, NewConnOTPRqstFrmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewConnOTPRqstFrmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewConnOTPRqstFrmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void NewConnOTPVerifyFrmCompletedEventHandler(object sender, NewConnOTPVerifyFrmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewConnOTPVerifyFrmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewConnOTPVerifyFrmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void NewConnResendOTPVerifyFrmCompletedEventHandler(object sender, NewConnResendOTPVerifyFrmCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewConnResendOTPVerifyFrmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewConnResendOTPVerifyFrmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void App_logCompletedEventHandler(object sender, App_logCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class App_logCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal App_logCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getPendingOrderOracleCompletedEventHandler(object sender, getPendingOrderOracleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPendingOrderOracleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPendingOrderOracleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getCompleteOrderOracleCompletedEventHandler(object sender, getCompleteOrderOracleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCompleteOrderOracleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCompleteOrderOracleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getPendingOrderOracleKCCCompletedEventHandler(object sender, getPendingOrderOracleKCCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPendingOrderOracleKCCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPendingOrderOracleKCCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ChkUsrForClosingComplntCompletedEventHandler(object sender, ChkUsrForClosingComplntCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChkUsrForClosingComplntCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChkUsrForClosingComplntCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updateOrderStatusCompletedEventHandler(object sender, updateOrderStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updateOrderStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updateOrderStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getIVRSCallIDCompletedEventHandler(object sender, getIVRSCallIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getIVRSCallIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getIVRSCallIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getCFOracleCompletedEventHandler(object sender, getCFOracleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCFOracleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCFOracleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ZBAPI_CS_ORD_STATCompletedEventHandler(object sender, ZBAPI_CS_ORD_STATCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZBAPI_CS_ORD_STATCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZBAPI_CS_ORD_STATCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ZBAPI_DISPLAY_BILL_WEBCompletedEventHandler(object sender, ZBAPI_DISPLAY_BILL_WEBCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZBAPI_DISPLAY_BILL_WEBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZBAPI_DISPLAY_BILL_WEBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ZBAPI_DISPLAY_BILL_WEB_VALIDCompletedEventHandler(object sender, ZBAPI_DISPLAY_BILL_WEB_VALIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZBAPI_DISPLAY_BILL_WEB_VALIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZBAPI_DISPLAY_BILL_WEB_VALIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetTransformerSetupDetail_delhiCompletedEventHandler(object sender, GetTransformerSetupDetail_delhiCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTransformerSetupDetail_delhiCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTransformerSetupDetail_delhiCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FIVE_COMPLCompletedEventHandler(object sender, FIVE_COMPLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FIVE_COMPLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FIVE_COMPLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FEEDBACKCompletedEventHandler(object sender, FEEDBACKCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FEEDBACKCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FEEDBACKCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FEEDBACK_MOBAPPCompletedEventHandler(object sender, FEEDBACK_MOBAPPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FEEDBACK_MOBAPPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FEEDBACK_MOBAPPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Area_CodeCompletedEventHandler(object sender, Area_CodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Area_CodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Area_CodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetARDAppVersionCompletedEventHandler(object sender, GetARDAppVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetARDAppVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetARDAppVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void NewRegistrationCompletedEventHandler(object sender, NewRegistrationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewRegistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewRegistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void NCC_RegistrationCompletedEventHandler(object sender, NCC_RegistrationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NCC_RegistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NCC_RegistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DISPLAY_BILLCompletedEventHandler(object sender, DISPLAY_BILLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DISPLAY_BILLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DISPLAY_BILLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void BILL_HISTCompletedEventHandler(object sender, BILL_HISTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BILL_HISTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BILL_HISTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void Z_BAPI_IVRSCompletedEventHandler(object sender, Z_BAPI_IVRSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Z_BAPI_IVRSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Z_BAPI_IVRSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ZBAPI_IVR_CREATESO_ISUCompletedEventHandler(object sender, ZBAPI_IVR_CREATESO_ISUCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZBAPI_IVR_CREATESO_ISUCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZBAPI_IVR_CREATESO_ISUCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CA_DISPLAYCompletedEventHandler(object sender, CA_DISPLAYCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CA_DISPLAYCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CA_DISPLAYCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CA_ADDRESS_UPLOADCompletedEventHandler(object sender, CA_ADDRESS_UPLOADCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CA_ADDRESS_UPLOADCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CA_ADDRESS_UPLOADCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ZBAPIDOCLISTCompletedEventHandler(object sender, ZBAPIDOCLISTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ZBAPIDOCLISTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ZBAPIDOCLISTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void NEW_CONNECTION_SITE_TASKSCompletedEventHandler(object sender, NEW_CONNECTION_SITE_TASKSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NEW_CONNECTION_SITE_TASKSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NEW_CONNECTION_SITE_TASKSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void NEW_CONNECTION_SITE_TASKS2CompletedEventHandler(object sender, NEW_CONNECTION_SITE_TASKS2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NEW_CONNECTION_SITE_TASKS2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NEW_CONNECTION_SITE_TASKS2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void NEW_CONNECTION_SITE_TASKS3CompletedEventHandler(object sender, NEW_CONNECTION_SITE_TASKS3CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NEW_CONNECTION_SITE_TASKS3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NEW_CONNECTION_SITE_TASKS3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void updatebreakdownreadstatsuCompletedEventHandler(object sender, updatebreakdownreadstatsuCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class updatebreakdownreadstatsuCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal updatebreakdownreadstatsuCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getbreakdowndetailsCompletedEventHandler(object sender, getbreakdowndetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getbreakdowndetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getbreakdowndetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void getbreakdownstatusCompletedEventHandler(object sender, getbreakdownstatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getbreakdownstatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getbreakdownstatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SCAN_FOR_AFFIDAVITCompletedEventHandler(object sender, SCAN_FOR_AFFIDAVITCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SCAN_FOR_AFFIDAVITCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SCAN_FOR_AFFIDAVITCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void NEW_CONNECTION_SITE_STATUSCompletedEventHandler(object sender, NEW_CONNECTION_SITE_STATUSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NEW_CONNECTION_SITE_STATUSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NEW_CONNECTION_SITE_STATUSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SCAN_FOR_ADDRESS_PROOFCompletedEventHandler(object sender, SCAN_FOR_ADDRESS_PROOFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SCAN_FOR_ADDRESS_PROOFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SCAN_FOR_ADDRESS_PROOFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SCAN_FOR_ID_PROOFCompletedEventHandler(object sender, SCAN_FOR_ID_PROOFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SCAN_FOR_ID_PROOFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SCAN_FOR_ID_PROOFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SCAN_FOR_OwnershipCompletedEventHandler(object sender, SCAN_FOR_OwnershipCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SCAN_FOR_OwnershipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SCAN_FOR_OwnershipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SCAN_FOR_ApplicationCompletedEventHandler(object sender, SCAN_FOR_ApplicationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SCAN_FOR_ApplicationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SCAN_FOR_ApplicationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void SCAN_FOR_OTHERCompletedEventHandler(object sender, SCAN_FOR_OTHERCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SCAN_FOR_OTHERCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SCAN_FOR_OTHERCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void NEW_CONNECTION_SITE_TASKS1CompletedEventHandler(object sender, NEW_CONNECTION_SITE_TASKS1CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NEW_CONNECTION_SITE_TASKS1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NEW_CONNECTION_SITE_TASKS1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void NEW_CONNECTION_SITE_SIGN_IMGCompletedEventHandler(object sender, NEW_CONNECTION_SITE_SIGN_IMGCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NEW_CONNECTION_SITE_SIGN_IMGCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NEW_CONNECTION_SITE_SIGN_IMGCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void NEW_CONNECTION_pole_TF_RC_PremisesCompletedEventHandler(object sender, NEW_CONNECTION_pole_TF_RC_PremisesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NEW_CONNECTION_pole_TF_RC_PremisesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NEW_CONNECTION_pole_TF_RC_PremisesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void NEW_CONNECTION_pole_TF_RC_Premises_KCCCompletedEventHandler(object sender, NEW_CONNECTION_pole_TF_RC_Premises_KCCCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NEW_CONNECTION_pole_TF_RC_Premises_KCCCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NEW_CONNECTION_pole_TF_RC_Premises_KCCCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ISUSTD_USERCompletedEventHandler(object sender, ISUSTD_USERCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ISUSTD_USERCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ISUSTD_USERCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DOCLISTCompletedEventHandler(object sender, DOCLISTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DOCLISTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DOCLISTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DOCLIST_NEWCompletedEventHandler(object sender, DOCLIST_NEWCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DOCLIST_NEWCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DOCLIST_NEWCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591